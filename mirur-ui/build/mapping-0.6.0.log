com.google.common.base.Absent -> com.google.common.base.Absent:
    com.google.common.base.Absent INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    boolean isPresent() -> isPresent
    java.lang.Object get() -> get
    java.lang.Object or(java.lang.Object) -> or
    com.google.common.base.Optional or(com.google.common.base.Optional) -> or
    java.lang.Object or(com.google.common.base.Supplier) -> or
    java.lang.Object orNull() -> orNull
    java.util.Set asSet() -> asSet
    com.google.common.base.Optional transform(com.google.common.base.Function) -> transform
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object readResolve() -> readResolve
    void <clinit>() -> <clinit>
com.google.common.base.AbstractIterator -> com.google.common.base.AbstractIterator:
    com.google.common.base.AbstractIterator$State state -> state
    java.lang.Object next -> next
    void <init>() -> <init>
    java.lang.Object computeNext() -> computeNext
    java.lang.Object endOfData() -> endOfData
    boolean hasNext() -> hasNext
    boolean tryToComputeNext() -> tryToComputeNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.base.AbstractIterator$1 -> com.google.common.base.AbstractIterator$1:
    int[] $SwitchMap$com$google$common$base$AbstractIterator$State -> $SwitchMap$com$google$common$base$AbstractIterator$State
    void <clinit>() -> <clinit>
com.google.common.base.AbstractIterator$State -> com.google.common.base.AbstractIterator$State:
    com.google.common.base.AbstractIterator$State READY -> READY
    com.google.common.base.AbstractIterator$State NOT_READY -> NOT_READY
    com.google.common.base.AbstractIterator$State DONE -> DONE
    com.google.common.base.AbstractIterator$State FAILED -> FAILED
    com.google.common.base.AbstractIterator$State[] $VALUES -> $VALUES
    com.google.common.base.AbstractIterator$State[] values() -> values
    com.google.common.base.AbstractIterator$State valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.common.base.Ascii -> com.google.common.base.Ascii:
    byte NUL -> NUL
    byte SOH -> SOH
    byte STX -> STX
    byte ETX -> ETX
    byte EOT -> EOT
    byte ENQ -> ENQ
    byte ACK -> ACK
    byte BEL -> BEL
    byte BS -> BS
    byte HT -> HT
    byte LF -> LF
    byte NL -> NL
    byte VT -> VT
    byte FF -> FF
    byte CR -> CR
    byte SO -> SO
    byte SI -> SI
    byte DLE -> DLE
    byte DC1 -> DC1
    byte XON -> XON
    byte DC2 -> DC2
    byte DC3 -> DC3
    byte XOFF -> XOFF
    byte DC4 -> DC4
    byte NAK -> NAK
    byte SYN -> SYN
    byte ETB -> ETB
    byte CAN -> CAN
    byte EM -> EM
    byte SUB -> SUB
    byte ESC -> ESC
    byte FS -> FS
    byte GS -> GS
    byte RS -> RS
    byte US -> US
    byte SP -> SP
    byte SPACE -> SPACE
    byte DEL -> DEL
    char MIN -> MIN
    char MAX -> MAX
    void <init>() -> <init>
    java.lang.String toLowerCase(java.lang.String) -> toLowerCase
    java.lang.String toLowerCase(java.lang.CharSequence) -> toLowerCase
    char toLowerCase(char) -> toLowerCase
    java.lang.String toUpperCase(java.lang.String) -> toUpperCase
    java.lang.String toUpperCase(java.lang.CharSequence) -> toUpperCase
    char toUpperCase(char) -> toUpperCase
    boolean isLowerCase(char) -> isLowerCase
    boolean isUpperCase(char) -> isUpperCase
com.google.common.base.CharMatcher -> com.google.common.base.CharMatcher:
    com.google.common.base.CharMatcher BREAKING_WHITESPACE -> BREAKING_WHITESPACE
    com.google.common.base.CharMatcher ASCII -> ASCII
    java.lang.String ZEROES -> ZEROES
    java.lang.String NINES -> NINES
    com.google.common.base.CharMatcher DIGIT -> DIGIT
    com.google.common.base.CharMatcher JAVA_DIGIT -> JAVA_DIGIT
    com.google.common.base.CharMatcher JAVA_LETTER -> JAVA_LETTER
    com.google.common.base.CharMatcher JAVA_LETTER_OR_DIGIT -> JAVA_LETTER_OR_DIGIT
    com.google.common.base.CharMatcher JAVA_UPPER_CASE -> JAVA_UPPER_CASE
    com.google.common.base.CharMatcher JAVA_LOWER_CASE -> JAVA_LOWER_CASE
    com.google.common.base.CharMatcher JAVA_ISO_CONTROL -> JAVA_ISO_CONTROL
    com.google.common.base.CharMatcher INVISIBLE -> INVISIBLE
    com.google.common.base.CharMatcher SINGLE_WIDTH -> SINGLE_WIDTH
    com.google.common.base.CharMatcher ANY -> ANY
    com.google.common.base.CharMatcher NONE -> NONE
    java.lang.String description -> description
    int DISTINCT_CHARS -> DISTINCT_CHARS
    java.lang.String WHITESPACE_TABLE -> WHITESPACE_TABLE
    com.google.common.base.CharMatcher WHITESPACE -> WHITESPACE
    java.lang.String showCharacter(char) -> showCharacter
    com.google.common.base.CharMatcher is(char) -> is
    com.google.common.base.CharMatcher isNot(char) -> isNot
    com.google.common.base.CharMatcher anyOf(java.lang.CharSequence) -> anyOf
    com.google.common.base.CharMatcher isEither(char,char) -> isEither
    com.google.common.base.CharMatcher noneOf(java.lang.CharSequence) -> noneOf
    com.google.common.base.CharMatcher inRange(char,char) -> inRange
    com.google.common.base.CharMatcher inRange(char,char,java.lang.String) -> inRange
    com.google.common.base.CharMatcher forPredicate(com.google.common.base.Predicate) -> forPredicate
    void <init>(java.lang.String) -> <init>
    void <init>() -> <init>
    boolean matches(char) -> matches
    com.google.common.base.CharMatcher negate() -> negate
    com.google.common.base.CharMatcher and(com.google.common.base.CharMatcher) -> and
    com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher) -> or
    com.google.common.base.CharMatcher precomputed() -> precomputed
    com.google.common.base.CharMatcher withToString(java.lang.String) -> withToString
    com.google.common.base.CharMatcher precomputedInternal() -> precomputedInternal
    com.google.common.base.CharMatcher precomputedPositive(int,java.util.BitSet,java.lang.String) -> precomputedPositive
    boolean isSmall(int,int) -> isSmall
    void setBits(java.util.BitSet) -> setBits
    boolean matchesAnyOf(java.lang.CharSequence) -> matchesAnyOf
    boolean matchesAllOf(java.lang.CharSequence) -> matchesAllOf
    boolean matchesNoneOf(java.lang.CharSequence) -> matchesNoneOf
    int indexIn(java.lang.CharSequence) -> indexIn
    int indexIn(java.lang.CharSequence,int) -> indexIn
    int lastIndexIn(java.lang.CharSequence) -> lastIndexIn
    int countIn(java.lang.CharSequence) -> countIn
    java.lang.String removeFrom(java.lang.CharSequence) -> removeFrom
    java.lang.String retainFrom(java.lang.CharSequence) -> retainFrom
    java.lang.String replaceFrom(java.lang.CharSequence,char) -> replaceFrom
    java.lang.String replaceFrom(java.lang.CharSequence,java.lang.CharSequence) -> replaceFrom
    java.lang.String trimFrom(java.lang.CharSequence) -> trimFrom
    java.lang.String trimLeadingFrom(java.lang.CharSequence) -> trimLeadingFrom
    java.lang.String trimTrailingFrom(java.lang.CharSequence) -> trimTrailingFrom
    java.lang.String collapseFrom(java.lang.CharSequence,char) -> collapseFrom
    java.lang.String trimAndCollapseFrom(java.lang.CharSequence,char) -> trimAndCollapseFrom
    java.lang.String finishCollapseFrom(java.lang.CharSequence,int,int,char,java.lang.StringBuilder,boolean) -> finishCollapseFrom
    boolean apply(java.lang.Character) -> apply
    java.lang.String toString() -> toString
    boolean apply(java.lang.Object) -> apply
    void <clinit>() -> <clinit>
com.google.common.base.CharMatcher$1 -> com.google.common.base.CharMatcher$1:
    void <init>() -> <init>
    boolean matches(char) -> matches
    java.lang.String toString() -> toString
    boolean apply(java.lang.Object) -> apply
com.google.common.base.CharMatcher$10 -> com.google.common.base.CharMatcher$10:
    char val$match -> val$match
    void <init>(java.lang.String,char) -> <init>
    boolean matches(char) -> matches
    com.google.common.base.CharMatcher and(com.google.common.base.CharMatcher) -> and
    com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher) -> or
    void setBits(java.util.BitSet) -> setBits
    com.google.common.base.CharMatcher negate() -> negate
com.google.common.base.CharMatcher$11 -> com.google.common.base.CharMatcher$11:
    char[] val$chars -> val$chars
    void <init>(java.lang.String,char[]) -> <init>
    boolean matches(char) -> matches
    void setBits(java.util.BitSet) -> setBits
    boolean apply(java.lang.Object) -> apply
com.google.common.base.CharMatcher$12 -> com.google.common.base.CharMatcher$12:
    char val$match1 -> val$match1
    char val$match2 -> val$match2
    void <init>(java.lang.String,char,char) -> <init>
    boolean matches(char) -> matches
    void setBits(java.util.BitSet) -> setBits
com.google.common.base.CharMatcher$13 -> com.google.common.base.CharMatcher$13:
    char val$startInclusive -> val$startInclusive
    char val$endInclusive -> val$endInclusive
    void <init>(java.lang.String,char,char) -> <init>
    boolean matches(char) -> matches
    void setBits(java.util.BitSet) -> setBits
com.google.common.base.CharMatcher$14 -> com.google.common.base.CharMatcher$14:
    com.google.common.base.Predicate val$predicate -> val$predicate
    void <init>(java.lang.String,com.google.common.base.Predicate) -> <init>
    boolean matches(char) -> matches
    boolean apply(java.lang.Character) -> apply
    boolean apply(java.lang.Object) -> apply
com.google.common.base.CharMatcher$15 -> com.google.common.base.CharMatcher$15:
    void <init>(java.lang.String) -> <init>
    boolean matches(char) -> matches
com.google.common.base.CharMatcher$2 -> com.google.common.base.CharMatcher$2:
    void <init>(java.lang.String) -> <init>
    boolean matches(char) -> matches
    boolean apply(java.lang.Object) -> apply
com.google.common.base.CharMatcher$3 -> com.google.common.base.CharMatcher$3:
    void <init>(java.lang.String) -> <init>
    boolean matches(char) -> matches
    boolean apply(java.lang.Object) -> apply
com.google.common.base.CharMatcher$4 -> com.google.common.base.CharMatcher$4:
    void <init>(java.lang.String) -> <init>
    boolean matches(char) -> matches
    boolean apply(java.lang.Object) -> apply
com.google.common.base.CharMatcher$5 -> com.google.common.base.CharMatcher$5:
    void <init>(java.lang.String) -> <init>
    boolean matches(char) -> matches
    boolean apply(java.lang.Object) -> apply
com.google.common.base.CharMatcher$6 -> com.google.common.base.CharMatcher$6:
    void <init>(java.lang.String) -> <init>
    boolean matches(char) -> matches
    boolean apply(java.lang.Object) -> apply
com.google.common.base.CharMatcher$7 -> com.google.common.base.CharMatcher$7:
    void <init>(java.lang.String) -> <init>
    boolean matches(char) -> matches
    int indexIn(java.lang.CharSequence) -> indexIn
    int indexIn(java.lang.CharSequence,int) -> indexIn
    int lastIndexIn(java.lang.CharSequence) -> lastIndexIn
    boolean matchesAllOf(java.lang.CharSequence) -> matchesAllOf
    boolean matchesNoneOf(java.lang.CharSequence) -> matchesNoneOf
    java.lang.String removeFrom(java.lang.CharSequence) -> removeFrom
    java.lang.String replaceFrom(java.lang.CharSequence,char) -> replaceFrom
    java.lang.String replaceFrom(java.lang.CharSequence,java.lang.CharSequence) -> replaceFrom
    java.lang.String collapseFrom(java.lang.CharSequence,char) -> collapseFrom
    java.lang.String trimFrom(java.lang.CharSequence) -> trimFrom
    int countIn(java.lang.CharSequence) -> countIn
    com.google.common.base.CharMatcher and(com.google.common.base.CharMatcher) -> and
    com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher) -> or
    com.google.common.base.CharMatcher negate() -> negate
com.google.common.base.CharMatcher$8 -> com.google.common.base.CharMatcher$8:
    void <init>(java.lang.String) -> <init>
    boolean matches(char) -> matches
    int indexIn(java.lang.CharSequence) -> indexIn
    int indexIn(java.lang.CharSequence,int) -> indexIn
    int lastIndexIn(java.lang.CharSequence) -> lastIndexIn
    boolean matchesAllOf(java.lang.CharSequence) -> matchesAllOf
    boolean matchesNoneOf(java.lang.CharSequence) -> matchesNoneOf
    java.lang.String removeFrom(java.lang.CharSequence) -> removeFrom
    java.lang.String replaceFrom(java.lang.CharSequence,char) -> replaceFrom
    java.lang.String replaceFrom(java.lang.CharSequence,java.lang.CharSequence) -> replaceFrom
    java.lang.String collapseFrom(java.lang.CharSequence,char) -> collapseFrom
    java.lang.String trimFrom(java.lang.CharSequence) -> trimFrom
    java.lang.String trimLeadingFrom(java.lang.CharSequence) -> trimLeadingFrom
    java.lang.String trimTrailingFrom(java.lang.CharSequence) -> trimTrailingFrom
    int countIn(java.lang.CharSequence) -> countIn
    com.google.common.base.CharMatcher and(com.google.common.base.CharMatcher) -> and
    com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher) -> or
    com.google.common.base.CharMatcher negate() -> negate
com.google.common.base.CharMatcher$9 -> com.google.common.base.CharMatcher$9:
    char val$match -> val$match
    void <init>(java.lang.String,char) -> <init>
    boolean matches(char) -> matches
    java.lang.String replaceFrom(java.lang.CharSequence,char) -> replaceFrom
    com.google.common.base.CharMatcher and(com.google.common.base.CharMatcher) -> and
    com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher) -> or
    com.google.common.base.CharMatcher negate() -> negate
    void setBits(java.util.BitSet) -> setBits
com.google.common.base.CharMatcher$And -> com.google.common.base.CharMatcher$And:
    com.google.common.base.CharMatcher first -> first
    com.google.common.base.CharMatcher second -> second
    void <init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher) -> <init>
    void <init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher,java.lang.String) -> <init>
    boolean matches(char) -> matches
    void setBits(java.util.BitSet) -> setBits
    com.google.common.base.CharMatcher withToString(java.lang.String) -> withToString
    boolean apply(java.lang.Object) -> apply
com.google.common.base.CharMatcher$BitSetMatcher -> com.google.common.base.CharMatcher$BitSetMatcher:
    java.util.BitSet table -> table
    void <init>(java.util.BitSet,java.lang.String) -> <init>
    boolean matches(char) -> matches
    void setBits(java.util.BitSet) -> setBits
    void <init>(java.util.BitSet,java.lang.String,com.google.common.base.CharMatcher$1) -> <init>
com.google.common.base.CharMatcher$FastMatcher -> com.google.common.base.CharMatcher$FastMatcher:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    com.google.common.base.CharMatcher precomputed() -> precomputed
    com.google.common.base.CharMatcher negate() -> negate
    boolean apply(java.lang.Object) -> apply
com.google.common.base.CharMatcher$NegatedFastMatcher -> com.google.common.base.CharMatcher$NegatedFastMatcher:
    void <init>(com.google.common.base.CharMatcher) -> <init>
    void <init>(java.lang.String,com.google.common.base.CharMatcher) -> <init>
    com.google.common.base.CharMatcher precomputed() -> precomputed
    com.google.common.base.CharMatcher withToString(java.lang.String) -> withToString
com.google.common.base.CharMatcher$NegatedMatcher -> com.google.common.base.CharMatcher$NegatedMatcher:
    com.google.common.base.CharMatcher original -> original
    void <init>(java.lang.String,com.google.common.base.CharMatcher) -> <init>
    void <init>(com.google.common.base.CharMatcher) -> <init>
    boolean matches(char) -> matches
    boolean matchesAllOf(java.lang.CharSequence) -> matchesAllOf
    boolean matchesNoneOf(java.lang.CharSequence) -> matchesNoneOf
    int countIn(java.lang.CharSequence) -> countIn
    void setBits(java.util.BitSet) -> setBits
    com.google.common.base.CharMatcher negate() -> negate
    com.google.common.base.CharMatcher withToString(java.lang.String) -> withToString
    boolean apply(java.lang.Object) -> apply
com.google.common.base.CharMatcher$Or -> com.google.common.base.CharMatcher$Or:
    com.google.common.base.CharMatcher first -> first
    com.google.common.base.CharMatcher second -> second
    void <init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher,java.lang.String) -> <init>
    void <init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher) -> <init>
    void setBits(java.util.BitSet) -> setBits
    boolean matches(char) -> matches
    com.google.common.base.CharMatcher withToString(java.lang.String) -> withToString
    boolean apply(java.lang.Object) -> apply
com.google.common.base.CharMatcher$RangesMatcher -> com.google.common.base.CharMatcher$RangesMatcher:
    char[] rangeStarts -> rangeStarts
    char[] rangeEnds -> rangeEnds
    void <init>(java.lang.String,char[],char[]) -> <init>
    boolean matches(char) -> matches
    boolean apply(java.lang.Object) -> apply
com.google.common.base.Equivalence -> com.google.common.base.Equivalence:
    void <init>() -> <init>
    boolean equivalent(java.lang.Object,java.lang.Object) -> equivalent
    boolean doEquivalent(java.lang.Object,java.lang.Object) -> doEquivalent
    int hash(java.lang.Object) -> hash
    int doHash(java.lang.Object) -> doHash
    com.google.common.base.Equivalence onResultOf(com.google.common.base.Function) -> onResultOf
    com.google.common.base.Equivalence$Wrapper wrap(java.lang.Object) -> wrap
    com.google.common.base.Equivalence pairwise() -> pairwise
    com.google.common.base.Predicate equivalentTo(java.lang.Object) -> equivalentTo
    com.google.common.base.Equivalence equals() -> equals
    com.google.common.base.Equivalence identity() -> identity
com.google.common.base.Equivalence$1 -> com.google.common.base.Equivalence$1:
com.google.common.base.Equivalence$Equals -> com.google.common.base.Equivalence$Equals:
    com.google.common.base.Equivalence$Equals INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    boolean doEquivalent(java.lang.Object,java.lang.Object) -> doEquivalent
    int doHash(java.lang.Object) -> doHash
    java.lang.Object readResolve() -> readResolve
    void <clinit>() -> <clinit>
com.google.common.base.Equivalence$EquivalentToPredicate -> com.google.common.base.Equivalence$EquivalentToPredicate:
    com.google.common.base.Equivalence equivalence -> equivalence
    java.lang.Object target -> target
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.base.Equivalence,java.lang.Object) -> <init>
    boolean apply(java.lang.Object) -> apply
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.base.Equivalence$Identity -> com.google.common.base.Equivalence$Identity:
    com.google.common.base.Equivalence$Identity INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    boolean doEquivalent(java.lang.Object,java.lang.Object) -> doEquivalent
    int doHash(java.lang.Object) -> doHash
    java.lang.Object readResolve() -> readResolve
    void <clinit>() -> <clinit>
com.google.common.base.Equivalence$Wrapper -> com.google.common.base.Equivalence$Wrapper:
    com.google.common.base.Equivalence equivalence -> equivalence
    java.lang.Object reference -> reference
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.base.Equivalence,java.lang.Object) -> <init>
    java.lang.Object get() -> get
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <init>(com.google.common.base.Equivalence,java.lang.Object,com.google.common.base.Equivalence$1) -> <init>
com.google.common.base.Function -> com.google.common.base.Function:
    java.lang.Object apply(java.lang.Object) -> apply
    boolean equals(java.lang.Object) -> equals
com.google.common.base.FunctionalEquivalence -> com.google.common.base.FunctionalEquivalence:
    long serialVersionUID -> serialVersionUID
    com.google.common.base.Function function -> function
    com.google.common.base.Equivalence resultEquivalence -> resultEquivalence
    void <init>(com.google.common.base.Function,com.google.common.base.Equivalence) -> <init>
    boolean doEquivalent(java.lang.Object,java.lang.Object) -> doEquivalent
    int doHash(java.lang.Object) -> doHash
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.base.Joiner -> com.google.common.base.Joiner:
    java.lang.String separator -> separator
    com.google.common.base.Joiner on(java.lang.String) -> on
    com.google.common.base.Joiner on(char) -> on
    void <init>(java.lang.String) -> <init>
    void <init>(com.google.common.base.Joiner) -> <init>
    java.lang.Appendable appendTo(java.lang.Appendable,java.lang.Iterable) -> appendTo
    java.lang.Appendable appendTo(java.lang.Appendable,java.util.Iterator) -> appendTo
    java.lang.Appendable appendTo(java.lang.Appendable,java.lang.Object[]) -> appendTo
    java.lang.Appendable appendTo(java.lang.Appendable,java.lang.Object,java.lang.Object,java.lang.Object[]) -> appendTo
    java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.lang.Iterable) -> appendTo
    java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.util.Iterator) -> appendTo
    java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.lang.Object[]) -> appendTo
    java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.lang.Object,java.lang.Object,java.lang.Object[]) -> appendTo
    java.lang.String join(java.lang.Iterable) -> join
    java.lang.String join(java.util.Iterator) -> join
    java.lang.String join(java.lang.Object[]) -> join
    java.lang.String join(java.lang.Object,java.lang.Object,java.lang.Object[]) -> join
    com.google.common.base.Joiner useForNull(java.lang.String) -> useForNull
    com.google.common.base.Joiner skipNulls() -> skipNulls
    com.google.common.base.Joiner$MapJoiner withKeyValueSeparator(java.lang.String) -> withKeyValueSeparator
    java.lang.CharSequence toString(java.lang.Object) -> toString
    java.lang.Iterable iterable(java.lang.Object,java.lang.Object,java.lang.Object[]) -> iterable
    void <init>(com.google.common.base.Joiner,com.google.common.base.Joiner$1) -> <init>
    java.lang.String access$100(com.google.common.base.Joiner) -> access$100
com.google.common.base.Joiner$1 -> com.google.common.base.Joiner$1:
    java.lang.String val$nullText -> val$nullText
    com.google.common.base.Joiner this$0 -> this$0
    void <init>(com.google.common.base.Joiner,com.google.common.base.Joiner,java.lang.String) -> <init>
    java.lang.CharSequence toString(java.lang.Object) -> toString
    com.google.common.base.Joiner useForNull(java.lang.String) -> useForNull
    com.google.common.base.Joiner skipNulls() -> skipNulls
com.google.common.base.Joiner$2 -> com.google.common.base.Joiner$2:
    com.google.common.base.Joiner this$0 -> this$0
    void <init>(com.google.common.base.Joiner,com.google.common.base.Joiner) -> <init>
    java.lang.Appendable appendTo(java.lang.Appendable,java.util.Iterator) -> appendTo
    com.google.common.base.Joiner useForNull(java.lang.String) -> useForNull
    com.google.common.base.Joiner$MapJoiner withKeyValueSeparator(java.lang.String) -> withKeyValueSeparator
com.google.common.base.Joiner$3 -> com.google.common.base.Joiner$3:
    java.lang.Object[] val$rest -> val$rest
    java.lang.Object val$first -> val$first
    java.lang.Object val$second -> val$second
    void <init>(java.lang.Object[],java.lang.Object,java.lang.Object) -> <init>
    int size() -> size
    java.lang.Object get(int) -> get
com.google.common.base.Joiner$MapJoiner -> com.google.common.base.Joiner$MapJoiner:
    com.google.common.base.Joiner joiner -> joiner
    java.lang.String keyValueSeparator -> keyValueSeparator
    void <init>(com.google.common.base.Joiner,java.lang.String) -> <init>
    java.lang.Appendable appendTo(java.lang.Appendable,java.util.Map) -> appendTo
    java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.util.Map) -> appendTo
    java.lang.String join(java.util.Map) -> join
    java.lang.Appendable appendTo(java.lang.Appendable,java.lang.Iterable) -> appendTo
    java.lang.Appendable appendTo(java.lang.Appendable,java.util.Iterator) -> appendTo
    java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.lang.Iterable) -> appendTo
    java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.util.Iterator) -> appendTo
    java.lang.String join(java.lang.Iterable) -> join
    java.lang.String join(java.util.Iterator) -> join
    com.google.common.base.Joiner$MapJoiner useForNull(java.lang.String) -> useForNull
    void <init>(com.google.common.base.Joiner,java.lang.String,com.google.common.base.Joiner$1) -> <init>
com.google.common.base.Objects -> com.google.common.base.Objects:
    void <init>() -> <init>
    boolean equal(java.lang.Object,java.lang.Object) -> equal
    int hashCode(java.lang.Object[]) -> hashCode
    com.google.common.base.Objects$ToStringHelper toStringHelper(java.lang.Object) -> toStringHelper
    com.google.common.base.Objects$ToStringHelper toStringHelper(java.lang.Class) -> toStringHelper
    com.google.common.base.Objects$ToStringHelper toStringHelper(java.lang.String) -> toStringHelper
    java.lang.String simpleName(java.lang.Class) -> simpleName
    java.lang.Object firstNonNull(java.lang.Object,java.lang.Object) -> firstNonNull
com.google.common.base.Objects$1 -> com.google.common.base.Objects$1:
com.google.common.base.Objects$ToStringHelper -> com.google.common.base.Objects$ToStringHelper:
    java.lang.String className -> className
    com.google.common.base.Objects$ToStringHelper$ValueHolder holderHead -> holderHead
    com.google.common.base.Objects$ToStringHelper$ValueHolder holderTail -> holderTail
    boolean omitNullValues -> omitNullValues
    void <init>(java.lang.String) -> <init>
    com.google.common.base.Objects$ToStringHelper omitNullValues() -> omitNullValues
    com.google.common.base.Objects$ToStringHelper add(java.lang.String,java.lang.Object) -> add
    com.google.common.base.Objects$ToStringHelper add(java.lang.String,boolean) -> add
    com.google.common.base.Objects$ToStringHelper add(java.lang.String,char) -> add
    com.google.common.base.Objects$ToStringHelper add(java.lang.String,double) -> add
    com.google.common.base.Objects$ToStringHelper add(java.lang.String,float) -> add
    com.google.common.base.Objects$ToStringHelper add(java.lang.String,int) -> add
    com.google.common.base.Objects$ToStringHelper add(java.lang.String,long) -> add
    com.google.common.base.Objects$ToStringHelper addValue(java.lang.Object) -> addValue
    com.google.common.base.Objects$ToStringHelper addValue(boolean) -> addValue
    com.google.common.base.Objects$ToStringHelper addValue(char) -> addValue
    com.google.common.base.Objects$ToStringHelper addValue(double) -> addValue
    com.google.common.base.Objects$ToStringHelper addValue(float) -> addValue
    com.google.common.base.Objects$ToStringHelper addValue(int) -> addValue
    com.google.common.base.Objects$ToStringHelper addValue(long) -> addValue
    java.lang.String toString() -> toString
    com.google.common.base.Objects$ToStringHelper$ValueHolder addHolder() -> addHolder
    com.google.common.base.Objects$ToStringHelper addHolder(java.lang.Object) -> addHolder
    com.google.common.base.Objects$ToStringHelper addHolder(java.lang.String,java.lang.Object) -> addHolder
    void <init>(java.lang.String,com.google.common.base.Objects$1) -> <init>
com.google.common.base.Objects$ToStringHelper$ValueHolder -> com.google.common.base.Objects$ToStringHelper$ValueHolder:
    java.lang.String name -> name
    java.lang.Object value -> value
    com.google.common.base.Objects$ToStringHelper$ValueHolder next -> next
    void <init>() -> <init>
    void <init>(com.google.common.base.Objects$1) -> <init>
com.google.common.base.Optional -> com.google.common.base.Optional:
    long serialVersionUID -> serialVersionUID
    com.google.common.base.Optional absent() -> absent
    com.google.common.base.Optional of(java.lang.Object) -> of
    com.google.common.base.Optional fromNullable(java.lang.Object) -> fromNullable
    void <init>() -> <init>
    boolean isPresent() -> isPresent
    java.lang.Object get() -> get
    java.lang.Object or(java.lang.Object) -> or
    com.google.common.base.Optional or(com.google.common.base.Optional) -> or
    java.lang.Object or(com.google.common.base.Supplier) -> or
    java.lang.Object orNull() -> orNull
    java.util.Set asSet() -> asSet
    com.google.common.base.Optional transform(com.google.common.base.Function) -> transform
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Iterable presentInstances(java.lang.Iterable) -> presentInstances
com.google.common.base.Optional$1 -> com.google.common.base.Optional$1:
    java.lang.Iterable val$optionals -> val$optionals
    void <init>(java.lang.Iterable) -> <init>
    java.util.Iterator iterator() -> iterator
com.google.common.base.Optional$1$1 -> com.google.common.base.Optional$1$1:
    java.util.Iterator iterator -> iterator
    com.google.common.base.Optional$1 this$0 -> this$0
    void <init>(com.google.common.base.Optional$1) -> <init>
    java.lang.Object computeNext() -> computeNext
com.google.common.base.PairwiseEquivalence -> com.google.common.base.PairwiseEquivalence:
    com.google.common.base.Equivalence elementEquivalence -> elementEquivalence
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.base.Equivalence) -> <init>
    boolean doEquivalent(java.lang.Iterable,java.lang.Iterable) -> doEquivalent
    int doHash(java.lang.Iterable) -> doHash
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int doHash(java.lang.Object) -> doHash
    boolean doEquivalent(java.lang.Object,java.lang.Object) -> doEquivalent
com.google.common.base.Platform -> com.google.common.base.Platform:
    java.lang.ThreadLocal DEST_TL -> DEST_TL
    void <init>() -> <init>
    char[] charBufferFromThreadLocal() -> charBufferFromThreadLocal
    long systemNanoTime() -> systemNanoTime
    com.google.common.base.CharMatcher precomputeCharMatcher(com.google.common.base.CharMatcher) -> precomputeCharMatcher
    void <clinit>() -> <clinit>
com.google.common.base.Platform$1 -> com.google.common.base.Platform$1:
    void <init>() -> <init>
    char[] initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
com.google.common.base.Preconditions -> com.google.common.base.Preconditions:
    void <init>() -> <init>
    void checkArgument(boolean) -> checkArgument
    void checkArgument(boolean,java.lang.Object) -> checkArgument
    void checkArgument(boolean,java.lang.String,java.lang.Object[]) -> checkArgument
    void checkState(boolean) -> checkState
    void checkState(boolean,java.lang.Object) -> checkState
    void checkState(boolean,java.lang.String,java.lang.Object[]) -> checkState
    java.lang.Object checkNotNull(java.lang.Object) -> checkNotNull
    java.lang.Object checkNotNull(java.lang.Object,java.lang.Object) -> checkNotNull
    java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[]) -> checkNotNull
    int checkElementIndex(int,int) -> checkElementIndex
    int checkElementIndex(int,int,java.lang.String) -> checkElementIndex
    java.lang.String badElementIndex(int,int,java.lang.String) -> badElementIndex
    int checkPositionIndex(int,int) -> checkPositionIndex
    int checkPositionIndex(int,int,java.lang.String) -> checkPositionIndex
    java.lang.String badPositionIndex(int,int,java.lang.String) -> badPositionIndex
    void checkPositionIndexes(int,int,int) -> checkPositionIndexes
    java.lang.String badPositionIndexes(int,int,int) -> badPositionIndexes
    java.lang.String format(java.lang.String,java.lang.Object[]) -> format
com.google.common.base.Predicate -> com.google.common.base.Predicate:
    boolean apply(java.lang.Object) -> apply
    boolean equals(java.lang.Object) -> equals
com.google.common.base.Predicates -> com.google.common.base.Predicates:
    com.google.common.base.Joiner COMMA_JOINER -> COMMA_JOINER
    void <init>() -> <init>
    com.google.common.base.Predicate alwaysTrue() -> alwaysTrue
    com.google.common.base.Predicate alwaysFalse() -> alwaysFalse
    com.google.common.base.Predicate isNull() -> isNull
    com.google.common.base.Predicate notNull() -> notNull
    com.google.common.base.Predicate not(com.google.common.base.Predicate) -> not
    com.google.common.base.Predicate and(java.lang.Iterable) -> and
    com.google.common.base.Predicate and(com.google.common.base.Predicate[]) -> and
    com.google.common.base.Predicate and(com.google.common.base.Predicate,com.google.common.base.Predicate) -> and
    com.google.common.base.Predicate or(java.lang.Iterable) -> or
    com.google.common.base.Predicate or(com.google.common.base.Predicate[]) -> or
    com.google.common.base.Predicate or(com.google.common.base.Predicate,com.google.common.base.Predicate) -> or
    com.google.common.base.Predicate equalTo(java.lang.Object) -> equalTo
    com.google.common.base.Predicate instanceOf(java.lang.Class) -> instanceOf
    com.google.common.base.Predicate assignableFrom(java.lang.Class) -> assignableFrom
    com.google.common.base.Predicate in(java.util.Collection) -> in
    com.google.common.base.Predicate compose(com.google.common.base.Predicate,com.google.common.base.Function) -> compose
    com.google.common.base.Predicate containsPattern(java.lang.String) -> containsPattern
    com.google.common.base.Predicate contains(java.util.regex.Pattern) -> contains
    java.util.List asList(com.google.common.base.Predicate,com.google.common.base.Predicate) -> asList
    java.util.List defensiveCopy(java.lang.Object[]) -> defensiveCopy
    java.util.List defensiveCopy(java.lang.Iterable) -> defensiveCopy
    com.google.common.base.Joiner access$800() -> access$800
    void <clinit>() -> <clinit>
com.google.common.base.Predicates$1 -> com.google.common.base.Predicates$1:
com.google.common.base.Predicates$AndPredicate -> com.google.common.base.Predicates$AndPredicate:
    java.util.List components -> components
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.List) -> <init>
    boolean apply(java.lang.Object) -> apply
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    void <init>(java.util.List,com.google.common.base.Predicates$1) -> <init>
com.google.common.base.Predicates$AssignableFromPredicate -> com.google.common.base.Predicates$AssignableFromPredicate:
    java.lang.Class clazz -> clazz
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Class) -> <init>
    boolean apply(java.lang.Class) -> apply
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    boolean apply(java.lang.Object) -> apply
    void <init>(java.lang.Class,com.google.common.base.Predicates$1) -> <init>
com.google.common.base.Predicates$CompositionPredicate -> com.google.common.base.Predicates$CompositionPredicate:
    com.google.common.base.Predicate p -> p
    com.google.common.base.Function f -> f
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.base.Predicate,com.google.common.base.Function) -> <init>
    boolean apply(java.lang.Object) -> apply
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <init>(com.google.common.base.Predicate,com.google.common.base.Function,com.google.common.base.Predicates$1) -> <init>
com.google.common.base.Predicates$ContainsPatternPredicate -> com.google.common.base.Predicates$ContainsPatternPredicate:
    java.util.regex.Pattern pattern -> pattern
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.regex.Pattern) -> <init>
    void <init>(java.lang.String) -> <init>
    boolean apply(java.lang.CharSequence) -> apply
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    boolean apply(java.lang.Object) -> apply
com.google.common.base.Predicates$InPredicate -> com.google.common.base.Predicates$InPredicate:
    java.util.Collection target -> target
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Collection) -> <init>
    boolean apply(java.lang.Object) -> apply
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <init>(java.util.Collection,com.google.common.base.Predicates$1) -> <init>
com.google.common.base.Predicates$InstanceOfPredicate -> com.google.common.base.Predicates$InstanceOfPredicate:
    java.lang.Class clazz -> clazz
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Class) -> <init>
    boolean apply(java.lang.Object) -> apply
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    void <init>(java.lang.Class,com.google.common.base.Predicates$1) -> <init>
com.google.common.base.Predicates$IsEqualToPredicate -> com.google.common.base.Predicates$IsEqualToPredicate:
    java.lang.Object target -> target
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Object) -> <init>
    boolean apply(java.lang.Object) -> apply
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    void <init>(java.lang.Object,com.google.common.base.Predicates$1) -> <init>
com.google.common.base.Predicates$NotPredicate -> com.google.common.base.Predicates$NotPredicate:
    com.google.common.base.Predicate predicate -> predicate
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.base.Predicate) -> <init>
    boolean apply(java.lang.Object) -> apply
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.google.common.base.Predicates$ObjectPredicate -> com.google.common.base.Predicates$ObjectPredicate:
    com.google.common.base.Predicates$ObjectPredicate ALWAYS_TRUE -> ALWAYS_TRUE
    com.google.common.base.Predicates$ObjectPredicate ALWAYS_FALSE -> ALWAYS_FALSE
    com.google.common.base.Predicates$ObjectPredicate IS_NULL -> IS_NULL
    com.google.common.base.Predicates$ObjectPredicate NOT_NULL -> NOT_NULL
    com.google.common.base.Predicates$ObjectPredicate[] $VALUES -> $VALUES
    com.google.common.base.Predicates$ObjectPredicate[] values() -> values
    com.google.common.base.Predicates$ObjectPredicate valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    com.google.common.base.Predicate withNarrowedType() -> withNarrowedType
    void <init>(java.lang.String,int,com.google.common.base.Predicates$1) -> <init>
    void <clinit>() -> <clinit>
com.google.common.base.Predicates$ObjectPredicate$1 -> com.google.common.base.Predicates$ObjectPredicate$1:
    void <init>(java.lang.String,int) -> <init>
    boolean apply(java.lang.Object) -> apply
com.google.common.base.Predicates$ObjectPredicate$2 -> com.google.common.base.Predicates$ObjectPredicate$2:
    void <init>(java.lang.String,int) -> <init>
    boolean apply(java.lang.Object) -> apply
com.google.common.base.Predicates$ObjectPredicate$3 -> com.google.common.base.Predicates$ObjectPredicate$3:
    void <init>(java.lang.String,int) -> <init>
    boolean apply(java.lang.Object) -> apply
com.google.common.base.Predicates$ObjectPredicate$4 -> com.google.common.base.Predicates$ObjectPredicate$4:
    void <init>(java.lang.String,int) -> <init>
    boolean apply(java.lang.Object) -> apply
com.google.common.base.Predicates$OrPredicate -> com.google.common.base.Predicates$OrPredicate:
    java.util.List components -> components
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.List) -> <init>
    boolean apply(java.lang.Object) -> apply
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    void <init>(java.util.List,com.google.common.base.Predicates$1) -> <init>
com.google.common.base.Present -> com.google.common.base.Present:
    java.lang.Object reference -> reference
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Object) -> <init>
    boolean isPresent() -> isPresent
    java.lang.Object get() -> get
    java.lang.Object or(java.lang.Object) -> or
    com.google.common.base.Optional or(com.google.common.base.Optional) -> or
    java.lang.Object or(com.google.common.base.Supplier) -> or
    java.lang.Object orNull() -> orNull
    java.util.Set asSet() -> asSet
    com.google.common.base.Optional transform(com.google.common.base.Function) -> transform
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.base.SmallCharMatcher -> com.google.common.base.SmallCharMatcher:
    int MAX_SIZE -> MAX_SIZE
    char[] table -> table
    boolean containsZero -> containsZero
    long filter -> filter
    int C1 -> C1
    int C2 -> C2
    double DESIRED_LOAD_FACTOR -> DESIRED_LOAD_FACTOR
    void <init>(char[],long,boolean,java.lang.String) -> <init>
    int smear(int) -> smear
    boolean checkFilter(int) -> checkFilter
    int chooseTableSize(int) -> chooseTableSize
    com.google.common.base.CharMatcher from(java.util.BitSet,java.lang.String) -> from
    boolean matches(char) -> matches
    void setBits(java.util.BitSet) -> setBits
com.google.common.base.Supplier -> com.google.common.base.Supplier:
    java.lang.Object get() -> get
com.google.common.base.Throwables -> com.google.common.base.Throwables:
    void <init>() -> <init>
    void propagateIfInstanceOf(java.lang.Throwable,java.lang.Class) -> propagateIfInstanceOf
    void propagateIfPossible(java.lang.Throwable) -> propagateIfPossible
    void propagateIfPossible(java.lang.Throwable,java.lang.Class) -> propagateIfPossible
    void propagateIfPossible(java.lang.Throwable,java.lang.Class,java.lang.Class) -> propagateIfPossible
    java.lang.RuntimeException propagate(java.lang.Throwable) -> propagate
    java.lang.Throwable getRootCause(java.lang.Throwable) -> getRootCause
    java.util.List getCausalChain(java.lang.Throwable) -> getCausalChain
    java.lang.String getStackTraceAsString(java.lang.Throwable) -> getStackTraceAsString
com.google.common.base.Ticker -> com.google.common.base.Ticker:
    com.google.common.base.Ticker SYSTEM_TICKER -> SYSTEM_TICKER
    void <init>() -> <init>
    long read() -> read
    com.google.common.base.Ticker systemTicker() -> systemTicker
    void <clinit>() -> <clinit>
com.google.common.base.Ticker$1 -> com.google.common.base.Ticker$1:
    void <init>() -> <init>
    long read() -> read
com.google.common.collect.AbstractIndexedListIterator -> com.google.common.collect.AbstractIndexedListIterator:
    int size -> size
    int position -> position
    java.lang.Object get(int) -> get
    void <init>(int) -> <init>
    void <init>(int,int) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    int nextIndex() -> nextIndex
    boolean hasPrevious() -> hasPrevious
    java.lang.Object previous() -> previous
    int previousIndex() -> previousIndex
com.google.common.collect.AbstractIterator -> com.google.common.collect.AbstractIterator:
    com.google.common.collect.AbstractIterator$State state -> state
    java.lang.Object next -> next
    void <init>() -> <init>
    java.lang.Object computeNext() -> computeNext
    java.lang.Object endOfData() -> endOfData
    boolean hasNext() -> hasNext
    boolean tryToComputeNext() -> tryToComputeNext
    java.lang.Object next() -> next
    java.lang.Object peek() -> peek
com.google.common.collect.AbstractIterator$1 -> com.google.common.collect.AbstractIterator$1:
    int[] $SwitchMap$com$google$common$collect$AbstractIterator$State -> $SwitchMap$com$google$common$collect$AbstractIterator$State
    void <clinit>() -> <clinit>
com.google.common.collect.AbstractIterator$State -> com.google.common.collect.AbstractIterator$State:
    com.google.common.collect.AbstractIterator$State READY -> READY
    com.google.common.collect.AbstractIterator$State NOT_READY -> NOT_READY
    com.google.common.collect.AbstractIterator$State DONE -> DONE
    com.google.common.collect.AbstractIterator$State FAILED -> FAILED
    com.google.common.collect.AbstractIterator$State[] $VALUES -> $VALUES
    com.google.common.collect.AbstractIterator$State[] values() -> values
    com.google.common.collect.AbstractIterator$State valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.common.collect.AbstractListMultimap -> com.google.common.collect.AbstractListMultimap:
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Map) -> <init>
    java.util.List createCollection() -> createCollection
    java.util.List createUnmodifiableEmptyCollection() -> createUnmodifiableEmptyCollection
    java.util.List get(java.lang.Object) -> get
    java.util.List removeAll(java.lang.Object) -> removeAll
    java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    boolean put(java.lang.Object,java.lang.Object) -> put
    java.util.Map asMap() -> asMap
    boolean equals(java.lang.Object) -> equals
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection createCollection() -> createCollection
    java.util.Collection createUnmodifiableEmptyCollection() -> createUnmodifiableEmptyCollection
com.google.common.collect.AbstractMapBasedMultimap -> com.google.common.collect.AbstractMapBasedMultimap:
    java.util.Map map -> map
    int totalSize -> totalSize
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Map) -> <init>
    void setMap(java.util.Map) -> setMap
    java.util.Collection createUnmodifiableEmptyCollection() -> createUnmodifiableEmptyCollection
    java.util.Collection createCollection() -> createCollection
    java.util.Collection createCollection(java.lang.Object) -> createCollection
    java.util.Map backingMap() -> backingMap
    int size() -> size
    boolean containsKey(java.lang.Object) -> containsKey
    boolean put(java.lang.Object,java.lang.Object) -> put
    java.util.Collection getOrCreateCollection(java.lang.Object) -> getOrCreateCollection
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection unmodifiableCollectionSubclass(java.util.Collection) -> unmodifiableCollectionSubclass
    void clear() -> clear
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection wrapCollection(java.lang.Object,java.util.Collection) -> wrapCollection
    java.util.List wrapList(java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection) -> wrapList
    java.util.Iterator iteratorOrListIterator(java.util.Collection) -> iteratorOrListIterator
    java.util.Set createKeySet() -> createKeySet
    int removeValuesForKey(java.lang.Object) -> removeValuesForKey
    java.util.Collection values() -> values
    java.util.Iterator valueIterator() -> valueIterator
    java.util.Collection entries() -> entries
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Map createAsMap() -> createAsMap
    java.util.Map access$000(com.google.common.collect.AbstractMapBasedMultimap) -> access$000
    java.util.Iterator access$100(com.google.common.collect.AbstractMapBasedMultimap,java.util.Collection) -> access$100
    int access$210(com.google.common.collect.AbstractMapBasedMultimap) -> access$210
    int access$208(com.google.common.collect.AbstractMapBasedMultimap) -> access$208
    int access$212(com.google.common.collect.AbstractMapBasedMultimap,int) -> access$212
    int access$220(com.google.common.collect.AbstractMapBasedMultimap,int) -> access$220
    java.util.List access$300(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection) -> access$300
    int access$400(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object) -> access$400
com.google.common.collect.AbstractMapBasedMultimap$1 -> com.google.common.collect.AbstractMapBasedMultimap$1:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMapBasedMultimap) -> <init>
    java.lang.Object output(java.lang.Object,java.lang.Object) -> output
com.google.common.collect.AbstractMapBasedMultimap$2 -> com.google.common.collect.AbstractMapBasedMultimap$2:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMapBasedMultimap) -> <init>
    java.util.Map$Entry output(java.lang.Object,java.lang.Object) -> output
    java.lang.Object output(java.lang.Object,java.lang.Object) -> output
com.google.common.collect.AbstractMapBasedMultimap$AsMap -> com.google.common.collect.AbstractMapBasedMultimap$AsMap:
    java.util.Map submap -> submap
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.Map) -> <init>
    java.util.Set createEntrySet() -> createEntrySet
    boolean containsKey(java.lang.Object) -> containsKey
    java.util.Collection get(java.lang.Object) -> get
    java.util.Set keySet() -> keySet
    int size() -> size
    java.util.Collection remove(java.lang.Object) -> remove
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void clear() -> clear
    java.util.Map$Entry wrapEntry(java.util.Map$Entry) -> wrapEntry
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object get(java.lang.Object) -> get
com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries -> com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries:
    com.google.common.collect.AbstractMapBasedMultimap$AsMap this$1 -> this$1
    void <init>(com.google.common.collect.AbstractMapBasedMultimap$AsMap) -> <init>
    java.util.Map map() -> map
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator -> com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator:
    java.util.Iterator delegateIterator -> delegateIterator
    java.util.Collection collection -> collection
    com.google.common.collect.AbstractMapBasedMultimap$AsMap this$1 -> this$1
    void <init>(com.google.common.collect.AbstractMapBasedMultimap$AsMap) -> <init>
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
com.google.common.collect.AbstractMapBasedMultimap$Itr -> com.google.common.collect.AbstractMapBasedMultimap$Itr:
    java.util.Iterator keyIterator -> keyIterator
    java.lang.Object key -> key
    java.util.Collection collection -> collection
    java.util.Iterator valueIterator -> valueIterator
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMapBasedMultimap) -> <init>
    java.lang.Object output(java.lang.Object,java.lang.Object) -> output
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.AbstractMapBasedMultimap$KeySet -> com.google.common.collect.AbstractMapBasedMultimap$KeySet:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.Map) -> <init>
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean containsAll(java.util.Collection) -> containsAll
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.common.collect.AbstractMapBasedMultimap$KeySet$1 -> com.google.common.collect.AbstractMapBasedMultimap$KeySet$1:
    java.util.Map$Entry entry -> entry
    java.util.Iterator val$entryIterator -> val$entryIterator
    com.google.common.collect.AbstractMapBasedMultimap$KeySet this$1 -> this$1
    void <init>(com.google.common.collect.AbstractMapBasedMultimap$KeySet,java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList -> com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection) -> <init>
com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap -> com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:
    java.util.SortedSet sortedKeySet -> sortedKeySet
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.SortedMap) -> <init>
    java.util.SortedMap sortedMap() -> sortedMap
    java.util.Comparator comparator() -> comparator
    java.lang.Object firstKey() -> firstKey
    java.lang.Object lastKey() -> lastKey
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.util.SortedSet keySet() -> keySet
    java.util.SortedSet createKeySet() -> createKeySet
    java.util.Set keySet() -> keySet
    java.util.Set createKeySet() -> createKeySet
com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet -> com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.SortedMap) -> <init>
    java.util.SortedMap sortedMap() -> sortedMap
    java.util.Comparator comparator() -> comparator
    java.lang.Object first() -> first
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.lang.Object last() -> last
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection -> com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:
    java.lang.Object key -> key
    java.util.Collection delegate -> delegate
    com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection ancestor -> ancestor
    java.util.Collection ancestorDelegate -> ancestorDelegate
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.Collection,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection) -> <init>
    void refreshIfEmpty() -> refreshIfEmpty
    void removeIfEmpty() -> removeIfEmpty
    java.lang.Object getKey() -> getKey
    void addToMap() -> addToMap
    int size() -> size
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.util.Collection getDelegate() -> getDelegate
    java.util.Iterator iterator() -> iterator
    boolean add(java.lang.Object) -> add
    com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection getAncestor() -> getAncestor
    boolean addAll(java.util.Collection) -> addAll
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    void clear() -> clear
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator -> com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator:
    java.util.Iterator delegateIterator -> delegateIterator
    java.util.Collection originalDelegate -> originalDelegate
    com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection this$1 -> this$1
    void <init>(com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection) -> <init>
    void <init>(com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection,java.util.Iterator) -> <init>
    void validateIterator() -> validateIterator
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
    java.util.Iterator getDelegateIterator() -> getDelegateIterator
com.google.common.collect.AbstractMapBasedMultimap$WrappedList -> com.google.common.collect.AbstractMapBasedMultimap$WrappedList:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection) -> <init>
    java.util.List getListDelegate() -> getListDelegate
    boolean addAll(int,java.util.Collection) -> addAll
    java.lang.Object get(int) -> get
    java.lang.Object set(int,java.lang.Object) -> set
    void add(int,java.lang.Object) -> add
    java.lang.Object remove(int) -> remove
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.util.ListIterator listIterator() -> listIterator
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.List subList(int,int) -> subList
com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator -> com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:
    com.google.common.collect.AbstractMapBasedMultimap$WrappedList this$1 -> this$1
    void <init>(com.google.common.collect.AbstractMapBasedMultimap$WrappedList) -> <init>
    void <init>(com.google.common.collect.AbstractMapBasedMultimap$WrappedList,int) -> <init>
    java.util.ListIterator getDelegateListIterator() -> getDelegateListIterator
    boolean hasPrevious() -> hasPrevious
    java.lang.Object previous() -> previous
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    void set(java.lang.Object) -> set
    void add(java.lang.Object) -> add
com.google.common.collect.AbstractMapBasedMultimap$WrappedSet -> com.google.common.collect.AbstractMapBasedMultimap$WrappedSet:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.Set) -> <init>
    boolean removeAll(java.util.Collection) -> removeAll
com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet -> com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.SortedSet,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection) -> <init>
    java.util.SortedSet getSortedSetDelegate() -> getSortedSetDelegate
    java.util.Comparator comparator() -> comparator
    java.lang.Object first() -> first
    java.lang.Object last() -> last
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
com.google.common.collect.AbstractMapBasedMultiset -> com.google.common.collect.AbstractMapBasedMultiset:
    java.util.Map backingMap -> backingMap
    long size -> size
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Map) -> <init>
    void setBackingMap(java.util.Map) -> setBackingMap
    java.util.Set entrySet() -> entrySet
    java.util.Iterator entryIterator() -> entryIterator
    void clear() -> clear
    int distinctElements() -> distinctElements
    int size() -> size
    java.util.Iterator iterator() -> iterator
    int count(java.lang.Object) -> count
    int add(java.lang.Object,int) -> add
    int remove(java.lang.Object,int) -> remove
    int setCount(java.lang.Object,int) -> setCount
    int getAndSet(com.google.common.collect.Count,int) -> getAndSet
    void readObjectNoData() -> readObjectNoData
    java.util.Map access$000(com.google.common.collect.AbstractMapBasedMultiset) -> access$000
    long access$122(com.google.common.collect.AbstractMapBasedMultiset,long) -> access$122
    long access$110(com.google.common.collect.AbstractMapBasedMultiset) -> access$110
com.google.common.collect.AbstractMapBasedMultiset$1 -> com.google.common.collect.AbstractMapBasedMultiset$1:
    java.util.Map$Entry toRemove -> toRemove
    java.util.Iterator val$backingEntries -> val$backingEntries
    com.google.common.collect.AbstractMapBasedMultiset this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMapBasedMultiset,java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    com.google.common.collect.Multiset$Entry next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
com.google.common.collect.AbstractMapBasedMultiset$1$1 -> com.google.common.collect.AbstractMapBasedMultiset$1$1:
    java.util.Map$Entry val$mapEntry -> val$mapEntry
    com.google.common.collect.AbstractMapBasedMultiset$1 this$1 -> this$1
    void <init>(com.google.common.collect.AbstractMapBasedMultiset$1,java.util.Map$Entry) -> <init>
    java.lang.Object getElement() -> getElement
    int getCount() -> getCount
com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator -> com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator:
    java.util.Iterator entryIterator -> entryIterator
    java.util.Map$Entry currentEntry -> currentEntry
    int occurrencesLeft -> occurrencesLeft
    boolean canRemove -> canRemove
    com.google.common.collect.AbstractMapBasedMultiset this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMapBasedMultiset) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.AbstractMapEntry -> com.google.common.collect.AbstractMapEntry:
    void <init>() -> <init>
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.AbstractMultimap -> com.google.common.collect.AbstractMultimap:
    java.util.Collection entries -> entries
    java.util.Set keySet -> keySet
    com.google.common.collect.Multiset keys -> keys
    java.util.Collection values -> values
    java.util.Map asMap -> asMap
    void <init>() -> <init>
    boolean isEmpty() -> isEmpty
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    boolean put(java.lang.Object,java.lang.Object) -> put
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection entries() -> entries
    java.util.Collection createEntries() -> createEntries
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Set keySet() -> keySet
    java.util.Set createKeySet() -> createKeySet
    com.google.common.collect.Multiset keys() -> keys
    com.google.common.collect.Multiset createKeys() -> createKeys
    java.util.Collection values() -> values
    java.util.Collection createValues() -> createValues
    java.util.Iterator valueIterator() -> valueIterator
    java.util.Map asMap() -> asMap
    java.util.Map createAsMap() -> createAsMap
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.AbstractMultimap$1 -> com.google.common.collect.AbstractMultimap$1:
com.google.common.collect.AbstractMultimap$Entries -> com.google.common.collect.AbstractMultimap$Entries:
    com.google.common.collect.AbstractMultimap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMultimap) -> <init>
    com.google.common.collect.Multimap multimap() -> multimap
    java.util.Iterator iterator() -> iterator
    void <init>(com.google.common.collect.AbstractMultimap,com.google.common.collect.AbstractMultimap$1) -> <init>
com.google.common.collect.AbstractMultimap$EntrySet -> com.google.common.collect.AbstractMultimap$EntrySet:
    com.google.common.collect.AbstractMultimap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMultimap) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void <init>(com.google.common.collect.AbstractMultimap,com.google.common.collect.AbstractMultimap$1) -> <init>
com.google.common.collect.AbstractMultimap$Values -> com.google.common.collect.AbstractMultimap$Values:
    com.google.common.collect.AbstractMultimap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMultimap) -> <init>
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    void clear() -> clear
com.google.common.collect.AbstractMultiset -> com.google.common.collect.AbstractMultiset:
    java.util.Set elementSet -> elementSet
    java.util.Set entrySet -> entrySet
    void <init>() -> <init>
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    int count(java.lang.Object) -> count
    boolean add(java.lang.Object) -> add
    int add(java.lang.Object,int) -> add
    boolean remove(java.lang.Object) -> remove
    int remove(java.lang.Object,int) -> remove
    int setCount(java.lang.Object,int) -> setCount
    boolean setCount(java.lang.Object,int,int) -> setCount
    boolean addAll(java.util.Collection) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    void clear() -> clear
    java.util.Set elementSet() -> elementSet
    java.util.Set createElementSet() -> createElementSet
    java.util.Iterator entryIterator() -> entryIterator
    int distinctElements() -> distinctElements
    java.util.Set entrySet() -> entrySet
    java.util.Set createEntrySet() -> createEntrySet
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.AbstractMultiset$ElementSet -> com.google.common.collect.AbstractMultiset$ElementSet:
    com.google.common.collect.AbstractMultiset this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMultiset) -> <init>
    com.google.common.collect.Multiset multiset() -> multiset
com.google.common.collect.AbstractMultiset$EntrySet -> com.google.common.collect.AbstractMultiset$EntrySet:
    com.google.common.collect.AbstractMultiset this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMultiset) -> <init>
    com.google.common.collect.Multiset multiset() -> multiset
    java.util.Iterator iterator() -> iterator
    int size() -> size
com.google.common.collect.AbstractNavigableMap -> com.google.common.collect.AbstractNavigableMap:
    void <init>() -> <init>
    java.lang.Object get(java.lang.Object) -> get
    java.util.Map$Entry firstEntry() -> firstEntry
    java.util.Map$Entry lastEntry() -> lastEntry
    java.util.Map$Entry pollFirstEntry() -> pollFirstEntry
    java.util.Map$Entry pollLastEntry() -> pollLastEntry
    java.lang.Object firstKey() -> firstKey
    java.lang.Object lastKey() -> lastKey
    java.util.Map$Entry lowerEntry(java.lang.Object) -> lowerEntry
    java.util.Map$Entry floorEntry(java.lang.Object) -> floorEntry
    java.util.Map$Entry ceilingEntry(java.lang.Object) -> ceilingEntry
    java.util.Map$Entry higherEntry(java.lang.Object) -> higherEntry
    java.lang.Object lowerKey(java.lang.Object) -> lowerKey
    java.lang.Object floorKey(java.lang.Object) -> floorKey
    java.lang.Object ceilingKey(java.lang.Object) -> ceilingKey
    java.lang.Object higherKey(java.lang.Object) -> higherKey
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Iterator descendingEntryIterator() -> descendingEntryIterator
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.util.NavigableSet navigableKeySet() -> navigableKeySet
    java.util.Set keySet() -> keySet
    int size() -> size
    java.util.Set entrySet() -> entrySet
    java.util.NavigableSet descendingKeySet() -> descendingKeySet
    java.util.NavigableMap descendingMap() -> descendingMap
com.google.common.collect.AbstractNavigableMap$1 -> com.google.common.collect.AbstractNavigableMap$1:
    com.google.common.collect.AbstractNavigableMap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractNavigableMap) -> <init>
    java.util.Map map() -> map
    java.util.Iterator iterator() -> iterator
com.google.common.collect.AbstractNavigableMap$DescendingMap -> com.google.common.collect.AbstractNavigableMap$DescendingMap:
    com.google.common.collect.AbstractNavigableMap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractNavigableMap) -> <init>
    java.util.NavigableMap forward() -> forward
    java.util.Iterator entryIterator() -> entryIterator
    void <init>(com.google.common.collect.AbstractNavigableMap,com.google.common.collect.AbstractNavigableMap$1) -> <init>
com.google.common.collect.AbstractSequentialIterator -> com.google.common.collect.AbstractSequentialIterator:
    java.lang.Object nextOrNull -> nextOrNull
    void <init>(java.lang.Object) -> <init>
    java.lang.Object computeNext(java.lang.Object) -> computeNext
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.AbstractSetMultimap -> com.google.common.collect.AbstractSetMultimap:
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Map) -> <init>
    java.util.Set createCollection() -> createCollection
    java.util.Set createUnmodifiableEmptyCollection() -> createUnmodifiableEmptyCollection
    java.util.Set get(java.lang.Object) -> get
    java.util.Set entries() -> entries
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Map asMap() -> asMap
    boolean put(java.lang.Object,java.lang.Object) -> put
    boolean equals(java.lang.Object) -> equals
    java.util.Collection entries() -> entries
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection createCollection() -> createCollection
    java.util.Collection createUnmodifiableEmptyCollection() -> createUnmodifiableEmptyCollection
com.google.common.collect.AbstractSortedSetMultimap -> com.google.common.collect.AbstractSortedSetMultimap:
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Map) -> <init>
    java.util.SortedSet createCollection() -> createCollection
    java.util.SortedSet createUnmodifiableEmptyCollection() -> createUnmodifiableEmptyCollection
    java.util.SortedSet get(java.lang.Object) -> get
    java.util.SortedSet removeAll(java.lang.Object) -> removeAll
    java.util.SortedSet replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Map asMap() -> asMap
    java.util.Collection values() -> values
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set get(java.lang.Object) -> get
    java.util.Set createUnmodifiableEmptyCollection() -> createUnmodifiableEmptyCollection
    java.util.Set createCollection() -> createCollection
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection createCollection() -> createCollection
    java.util.Collection createUnmodifiableEmptyCollection() -> createUnmodifiableEmptyCollection
com.google.common.collect.AllEqualOrdering -> com.google.common.collect.AllEqualOrdering:
    com.google.common.collect.AllEqualOrdering INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    java.util.List sortedCopy(java.lang.Iterable) -> sortedCopy
    com.google.common.collect.ImmutableList immutableSortedCopy(java.lang.Iterable) -> immutableSortedCopy
    com.google.common.collect.Ordering reverse() -> reverse
    java.lang.Object readResolve() -> readResolve
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.google.common.collect.BiMap -> com.google.common.collect.BiMap:
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object forcePut(java.lang.Object,java.lang.Object) -> forcePut
    void putAll(java.util.Map) -> putAll
    java.util.Set values() -> values
    com.google.common.collect.BiMap inverse() -> inverse
com.google.common.collect.BoundType -> com.google.common.collect.BoundType:
    com.google.common.collect.BoundType OPEN -> OPEN
    com.google.common.collect.BoundType CLOSED -> CLOSED
    com.google.common.collect.BoundType[] $VALUES -> $VALUES
    com.google.common.collect.BoundType[] values() -> values
    com.google.common.collect.BoundType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    com.google.common.collect.BoundType forBoolean(boolean) -> forBoolean
    com.google.common.collect.BoundType flip() -> flip
    void <init>(java.lang.String,int,com.google.common.collect.BoundType$1) -> <init>
    void <clinit>() -> <clinit>
com.google.common.collect.BoundType$1 -> com.google.common.collect.BoundType$1:
    void <init>(java.lang.String,int) -> <init>
    com.google.common.collect.BoundType flip() -> flip
com.google.common.collect.BoundType$2 -> com.google.common.collect.BoundType$2:
    void <init>(java.lang.String,int) -> <init>
    com.google.common.collect.BoundType flip() -> flip
com.google.common.collect.ByFunctionOrdering -> com.google.common.collect.ByFunctionOrdering:
    com.google.common.base.Function function -> function
    com.google.common.collect.Ordering ordering -> ordering
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.base.Function,com.google.common.collect.Ordering) -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.CartesianList -> com.google.common.collect.CartesianList:
    com.google.common.collect.ImmutableList axes -> axes
    int[] axesSizeProduct -> axesSizeProduct
    java.util.List create(java.util.List) -> create
    void <init>(com.google.common.collect.ImmutableList) -> <init>
    int getAxisIndexForProductIndex(int,int) -> getAxisIndexForProductIndex
    com.google.common.collect.ImmutableList get(int) -> get
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    java.lang.Object get(int) -> get
    com.google.common.collect.ImmutableList access$000(com.google.common.collect.CartesianList) -> access$000
    int access$100(com.google.common.collect.CartesianList,int,int) -> access$100
com.google.common.collect.CartesianList$1 -> com.google.common.collect.CartesianList$1:
    int val$index -> val$index
    com.google.common.collect.CartesianList this$0 -> this$0
    void <init>(com.google.common.collect.CartesianList,int) -> <init>
    int size() -> size
    java.lang.Object get(int) -> get
    boolean isPartialView() -> isPartialView
com.google.common.collect.CollectPreconditions -> com.google.common.collect.CollectPreconditions:
    void <init>() -> <init>
    void checkEntryNotNull(java.lang.Object,java.lang.Object) -> checkEntryNotNull
    int checkNonnegative(int,java.lang.String) -> checkNonnegative
    void checkRemove(boolean) -> checkRemove
com.google.common.collect.Collections2 -> com.google.common.collect.Collections2:
    com.google.common.base.Joiner STANDARD_JOINER -> STANDARD_JOINER
    void <init>() -> <init>
    java.util.Collection filter(java.util.Collection,com.google.common.base.Predicate) -> filter
    boolean safeContains(java.util.Collection,java.lang.Object) -> safeContains
    boolean safeRemove(java.util.Collection,java.lang.Object) -> safeRemove
    java.util.Collection transform(java.util.Collection,com.google.common.base.Function) -> transform
    boolean containsAllImpl(java.util.Collection,java.util.Collection) -> containsAllImpl
    java.lang.String toStringImpl(java.util.Collection) -> toStringImpl
    java.lang.StringBuilder newStringBuilderForCollection(int) -> newStringBuilderForCollection
    java.util.Collection cast(java.lang.Iterable) -> cast
    java.util.Collection orderedPermutations(java.lang.Iterable) -> orderedPermutations
    java.util.Collection orderedPermutations(java.lang.Iterable,java.util.Comparator) -> orderedPermutations
    java.util.Collection permutations(java.util.Collection) -> permutations
    boolean isPermutation(java.util.List,java.util.List) -> isPermutation
    boolean isPositiveInt(long) -> isPositiveInt
    boolean access$000(long) -> access$000
    boolean access$100(java.util.List,java.util.List) -> access$100
    void <clinit>() -> <clinit>
com.google.common.collect.Collections2$1 -> com.google.common.collect.Collections2$1:
    java.util.Collection val$collection -> val$collection
    void <init>(java.util.Collection) -> <init>
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Collections2$FilteredCollection -> com.google.common.collect.Collections2$FilteredCollection:
    java.util.Collection unfiltered -> unfiltered
    com.google.common.base.Predicate predicate -> predicate
    void <init>(java.util.Collection,com.google.common.base.Predicate) -> <init>
    com.google.common.collect.Collections2$FilteredCollection createCombined(com.google.common.base.Predicate) -> createCombined
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
com.google.common.collect.Collections2$OrderedPermutationCollection -> com.google.common.collect.Collections2$OrderedPermutationCollection:
    com.google.common.collect.ImmutableList inputList -> inputList
    java.util.Comparator comparator -> comparator
    int size -> size
    void <init>(java.lang.Iterable,java.util.Comparator) -> <init>
    int calculateSize(java.util.List,java.util.Comparator) -> calculateSize
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    java.lang.String toString() -> toString
com.google.common.collect.Collections2$OrderedPermutationIterator -> com.google.common.collect.Collections2$OrderedPermutationIterator:
    java.util.List nextPermutation -> nextPermutation
    java.util.Comparator comparator -> comparator
    void <init>(java.util.List,java.util.Comparator) -> <init>
    java.util.List computeNext() -> computeNext
    void calculateNextPermutation() -> calculateNextPermutation
    int findNextJ() -> findNextJ
    int findNextL(int) -> findNextL
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.Collections2$PermutationCollection -> com.google.common.collect.Collections2$PermutationCollection:
    com.google.common.collect.ImmutableList inputList -> inputList
    void <init>(com.google.common.collect.ImmutableList) -> <init>
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    java.lang.String toString() -> toString
com.google.common.collect.Collections2$PermutationIterator -> com.google.common.collect.Collections2$PermutationIterator:
    java.util.List list -> list
    int[] c -> c
    int[] o -> o
    int j -> j
    void <init>(java.util.List) -> <init>
    java.util.List computeNext() -> computeNext
    void calculateNextPermutation() -> calculateNextPermutation
    void switchDirection() -> switchDirection
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.Collections2$TransformedCollection -> com.google.common.collect.Collections2$TransformedCollection:
    java.util.Collection fromCollection -> fromCollection
    com.google.common.base.Function function -> function
    void <init>(java.util.Collection,com.google.common.base.Function) -> <init>
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    int size() -> size
com.google.common.collect.ComparatorOrdering -> com.google.common.collect.ComparatorOrdering:
    java.util.Comparator comparator -> comparator
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Comparator) -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.CompoundOrdering -> com.google.common.collect.CompoundOrdering:
    com.google.common.collect.ImmutableList comparators -> comparators
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Comparator,java.util.Comparator) -> <init>
    void <init>(java.lang.Iterable) -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.ComputationException -> com.google.common.collect.ComputationException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Throwable) -> <init>
com.google.common.collect.ComputingConcurrentHashMap -> com.google.common.collect.ComputingConcurrentHashMap:
    com.google.common.base.Function computingFunction -> computingFunction
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.MapMaker,com.google.common.base.Function) -> <init>
    com.google.common.collect.MapMakerInternalMap$Segment createSegment(int,int) -> createSegment
    com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment segmentFor(int) -> segmentFor
    java.lang.Object getOrCompute(java.lang.Object) -> getOrCompute
    java.lang.Object writeReplace() -> writeReplace
    com.google.common.collect.MapMakerInternalMap$Segment segmentFor(int) -> segmentFor
com.google.common.collect.ComputingConcurrentHashMap$ComputationExceptionReference -> com.google.common.collect.ComputingConcurrentHashMap$ComputationExceptionReference:
    java.lang.Throwable t -> t
    void <init>(java.lang.Throwable) -> <init>
    java.lang.Object get() -> get
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry() -> getEntry
    com.google.common.collect.MapMakerInternalMap$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyFor
    boolean isComputingReference() -> isComputingReference
    java.lang.Object waitForValue() -> waitForValue
    void clear(com.google.common.collect.MapMakerInternalMap$ValueReference) -> clear
com.google.common.collect.ComputingConcurrentHashMap$ComputedReference -> com.google.common.collect.ComputingConcurrentHashMap$ComputedReference:
    java.lang.Object value -> value
    void <init>(java.lang.Object) -> <init>
    java.lang.Object get() -> get
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry() -> getEntry
    com.google.common.collect.MapMakerInternalMap$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyFor
    boolean isComputingReference() -> isComputingReference
    java.lang.Object waitForValue() -> waitForValue
    void clear(com.google.common.collect.MapMakerInternalMap$ValueReference) -> clear
com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment -> com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment:
    void <init>(com.google.common.collect.MapMakerInternalMap,int,int) -> <init>
    java.lang.Object getOrCompute(java.lang.Object,int,com.google.common.base.Function) -> getOrCompute
    java.lang.Object compute(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference) -> compute
com.google.common.collect.ComputingConcurrentHashMap$ComputingSerializationProxy -> com.google.common.collect.ComputingConcurrentHashMap$ComputingSerializationProxy:
    com.google.common.base.Function computingFunction -> computingFunction
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.base.Equivalence,com.google.common.base.Equivalence,long,long,int,int,com.google.common.collect.MapMaker$RemovalListener,java.util.concurrent.ConcurrentMap,com.google.common.base.Function) -> <init>
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference -> com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference:
    com.google.common.base.Function computingFunction -> computingFunction
    com.google.common.collect.MapMakerInternalMap$ValueReference computedReference -> computedReference
    void <init>(com.google.common.base.Function) -> <init>
    java.lang.Object get() -> get
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry() -> getEntry
    com.google.common.collect.MapMakerInternalMap$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyFor
    boolean isComputingReference() -> isComputingReference
    java.lang.Object waitForValue() -> waitForValue
    void clear(com.google.common.collect.MapMakerInternalMap$ValueReference) -> clear
    java.lang.Object compute(java.lang.Object,int) -> compute
    void setValueReference(com.google.common.collect.MapMakerInternalMap$ValueReference) -> setValueReference
com.google.common.collect.Count -> com.google.common.collect.Count:
    int value -> value
    void <init>(int) -> <init>
    int get() -> get
    int getAndAdd(int) -> getAndAdd
    int addAndGet(int) -> addAndGet
    void set(int) -> set
    int getAndSet(int) -> getAndSet
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.google.common.collect.DescendingImmutableSortedSet -> com.google.common.collect.DescendingImmutableSortedSet:
    com.google.common.collect.ImmutableSortedSet forward -> forward
    void <init>(com.google.common.collect.ImmutableSortedSet) -> <init>
    int size() -> size
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean) -> headSetImpl
    com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean) -> subSetImpl
    com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean) -> tailSetImpl
    com.google.common.collect.ImmutableSortedSet descendingSet() -> descendingSet
    com.google.common.collect.UnmodifiableIterator descendingIterator() -> descendingIterator
    com.google.common.collect.ImmutableSortedSet createDescendingSet() -> createDescendingSet
    java.lang.Object lower(java.lang.Object) -> lower
    java.lang.Object floor(java.lang.Object) -> floor
    java.lang.Object ceiling(java.lang.Object) -> ceiling
    java.lang.Object higher(java.lang.Object) -> higher
    int indexOf(java.lang.Object) -> indexOf
    boolean isPartialView() -> isPartialView
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.NavigableSet descendingSet() -> descendingSet
    java.util.Iterator iterator() -> iterator
com.google.common.collect.EmptyImmutableBiMap -> com.google.common.collect.EmptyImmutableBiMap:
    com.google.common.collect.EmptyImmutableBiMap INSTANCE -> INSTANCE
    void <init>() -> <init>
    com.google.common.collect.ImmutableBiMap inverse() -> inverse
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.Object get(java.lang.Object) -> get
    com.google.common.collect.ImmutableSet entrySet() -> entrySet
    com.google.common.collect.ImmutableSet createEntrySet() -> createEntrySet
    com.google.common.collect.ImmutableSetMultimap asMultimap() -> asMultimap
    com.google.common.collect.ImmutableSet keySet() -> keySet
    boolean isPartialView() -> isPartialView
    java.lang.Object readResolve() -> readResolve
    com.google.common.collect.BiMap inverse() -> inverse
    java.util.Set entrySet() -> entrySet
    java.util.Set keySet() -> keySet
    void <clinit>() -> <clinit>
com.google.common.collect.EmptyImmutableListMultimap -> com.google.common.collect.EmptyImmutableListMultimap:
    com.google.common.collect.EmptyImmutableListMultimap INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    java.lang.Object readResolve() -> readResolve
    void <clinit>() -> <clinit>
com.google.common.collect.EmptyImmutableSet -> com.google.common.collect.EmptyImmutableSet:
    com.google.common.collect.EmptyImmutableSet INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    boolean isPartialView() -> isPartialView
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    com.google.common.collect.ImmutableList asList() -> asList
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean isHashCodeFast() -> isHashCodeFast
    java.lang.String toString() -> toString
    java.lang.Object readResolve() -> readResolve
    java.util.Iterator iterator() -> iterator
    void <clinit>() -> <clinit>
com.google.common.collect.EmptyImmutableSetMultimap -> com.google.common.collect.EmptyImmutableSetMultimap:
    com.google.common.collect.EmptyImmutableSetMultimap INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    java.lang.Object readResolve() -> readResolve
    void <clinit>() -> <clinit>
com.google.common.collect.EmptyImmutableSortedMap -> com.google.common.collect.EmptyImmutableSortedMap:
    com.google.common.collect.ImmutableSortedSet keySet -> keySet
    void <init>(java.util.Comparator) -> <init>
    void <init>(java.util.Comparator,com.google.common.collect.ImmutableSortedMap) -> <init>
    java.lang.Object get(java.lang.Object) -> get
    com.google.common.collect.ImmutableSortedSet keySet() -> keySet
    int size() -> size
    boolean isEmpty() -> isEmpty
    com.google.common.collect.ImmutableCollection values() -> values
    java.lang.String toString() -> toString
    boolean isPartialView() -> isPartialView
    com.google.common.collect.ImmutableSet entrySet() -> entrySet
    com.google.common.collect.ImmutableSet createEntrySet() -> createEntrySet
    com.google.common.collect.ImmutableSetMultimap asMultimap() -> asMultimap
    com.google.common.collect.ImmutableSortedMap headMap(java.lang.Object,boolean) -> headMap
    com.google.common.collect.ImmutableSortedMap tailMap(java.lang.Object,boolean) -> tailMap
    com.google.common.collect.ImmutableSortedMap createDescendingMap() -> createDescendingMap
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.Set entrySet() -> entrySet
    java.util.Collection values() -> values
    java.util.Set keySet() -> keySet
    com.google.common.collect.ImmutableSet keySet() -> keySet
com.google.common.collect.EmptyImmutableSortedSet -> com.google.common.collect.EmptyImmutableSortedSet:
    void <init>(java.util.Comparator) -> <init>
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    com.google.common.collect.UnmodifiableIterator descendingIterator() -> descendingIterator
    boolean isPartialView() -> isPartialView
    com.google.common.collect.ImmutableList asList() -> asList
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object first() -> first
    java.lang.Object last() -> last
    com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean) -> headSetImpl
    com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean) -> subSetImpl
    com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean) -> tailSetImpl
    int indexOf(java.lang.Object) -> indexOf
    com.google.common.collect.ImmutableSortedSet createDescendingSet() -> createDescendingSet
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ExplicitOrdering -> com.google.common.collect.ExplicitOrdering:
    com.google.common.collect.ImmutableMap rankMap -> rankMap
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.List) -> <init>
    void <init>(com.google.common.collect.ImmutableMap) -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    int rank(java.lang.Object) -> rank
    com.google.common.collect.ImmutableMap buildRankMap(java.util.List) -> buildRankMap
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.FilteredEntryMultimap -> com.google.common.collect.FilteredEntryMultimap:
    com.google.common.collect.Multimap unfiltered -> unfiltered
    com.google.common.base.Predicate predicate -> predicate
    void <init>(com.google.common.collect.Multimap,com.google.common.base.Predicate) -> <init>
    com.google.common.collect.Multimap unfiltered() -> unfiltered
    com.google.common.base.Predicate entryPredicate() -> entryPredicate
    int size() -> size
    boolean satisfies(java.lang.Object,java.lang.Object) -> satisfies
    java.util.Collection filterCollection(java.util.Collection,com.google.common.base.Predicate) -> filterCollection
    boolean containsKey(java.lang.Object) -> containsKey
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection unmodifiableEmptyCollection() -> unmodifiableEmptyCollection
    void clear() -> clear
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection createEntries() -> createEntries
    java.util.Collection createValues() -> createValues
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Map createAsMap() -> createAsMap
    java.util.Set keySet() -> keySet
    boolean removeIf(com.google.common.base.Predicate) -> removeIf
    com.google.common.collect.Multiset createKeys() -> createKeys
    boolean access$000(com.google.common.collect.FilteredEntryMultimap,java.lang.Object,java.lang.Object) -> access$000
com.google.common.collect.FilteredEntryMultimap$AsMap -> com.google.common.collect.FilteredEntryMultimap$AsMap:
    com.google.common.collect.FilteredEntryMultimap this$0 -> this$0
    void <init>(com.google.common.collect.FilteredEntryMultimap) -> <init>
    boolean containsKey(java.lang.Object) -> containsKey
    void clear() -> clear
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection remove(java.lang.Object) -> remove
    java.util.Set createKeySet() -> createKeySet
    java.util.Set createEntrySet() -> createEntrySet
    java.util.Collection createValues() -> createValues
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object get(java.lang.Object) -> get
com.google.common.collect.FilteredEntryMultimap$AsMap$1 -> com.google.common.collect.FilteredEntryMultimap$AsMap$1:
    com.google.common.collect.FilteredEntryMultimap$AsMap this$1 -> this$1
    void <init>(com.google.common.collect.FilteredEntryMultimap$AsMap,java.util.Map) -> <init>
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean remove(java.lang.Object) -> remove
com.google.common.collect.FilteredEntryMultimap$AsMap$2 -> com.google.common.collect.FilteredEntryMultimap$AsMap$2:
    com.google.common.collect.FilteredEntryMultimap$AsMap this$1 -> this$1
    void <init>(com.google.common.collect.FilteredEntryMultimap$AsMap) -> <init>
    java.util.Map map() -> map
    java.util.Iterator iterator() -> iterator
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
com.google.common.collect.FilteredEntryMultimap$AsMap$2$1 -> com.google.common.collect.FilteredEntryMultimap$AsMap$2$1:
    java.util.Iterator backingIterator -> backingIterator
    com.google.common.collect.FilteredEntryMultimap$AsMap$2 this$2 -> this$2
    void <init>(com.google.common.collect.FilteredEntryMultimap$AsMap$2) -> <init>
    java.util.Map$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.FilteredEntryMultimap$AsMap$3 -> com.google.common.collect.FilteredEntryMultimap$AsMap$3:
    com.google.common.collect.FilteredEntryMultimap$AsMap this$1 -> this$1
    void <init>(com.google.common.collect.FilteredEntryMultimap$AsMap,java.util.Map) -> <init>
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.FilteredEntryMultimap$Keys -> com.google.common.collect.FilteredEntryMultimap$Keys:
    com.google.common.collect.FilteredEntryMultimap this$0 -> this$0
    void <init>(com.google.common.collect.FilteredEntryMultimap) -> <init>
    int remove(java.lang.Object,int) -> remove
    java.util.Set entrySet() -> entrySet
com.google.common.collect.FilteredEntryMultimap$Keys$1 -> com.google.common.collect.FilteredEntryMultimap$Keys$1:
    com.google.common.collect.FilteredEntryMultimap$Keys this$1 -> this$1
    void <init>(com.google.common.collect.FilteredEntryMultimap$Keys) -> <init>
    com.google.common.collect.Multiset multiset() -> multiset
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean removeIf(com.google.common.base.Predicate) -> removeIf
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.FilteredEntryMultimap$Keys$1$1 -> com.google.common.collect.FilteredEntryMultimap$Keys$1$1:
    com.google.common.base.Predicate val$predicate -> val$predicate
    com.google.common.collect.FilteredEntryMultimap$Keys$1 this$2 -> this$2
    void <init>(com.google.common.collect.FilteredEntryMultimap$Keys$1,com.google.common.base.Predicate) -> <init>
    boolean apply(java.util.Map$Entry) -> apply
    boolean apply(java.lang.Object) -> apply
com.google.common.collect.FilteredEntryMultimap$ValuePredicate -> com.google.common.collect.FilteredEntryMultimap$ValuePredicate:
    java.lang.Object key -> key
    com.google.common.collect.FilteredEntryMultimap this$0 -> this$0
    void <init>(com.google.common.collect.FilteredEntryMultimap,java.lang.Object) -> <init>
    boolean apply(java.lang.Object) -> apply
com.google.common.collect.FilteredEntrySetMultimap -> com.google.common.collect.FilteredEntrySetMultimap:
    void <init>(com.google.common.collect.SetMultimap,com.google.common.base.Predicate) -> <init>
    com.google.common.collect.SetMultimap unfiltered() -> unfiltered
    java.util.Set get(java.lang.Object) -> get
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Set createEntries() -> createEntries
    java.util.Set entries() -> entries
    java.util.Collection createEntries() -> createEntries
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    com.google.common.collect.Multimap unfiltered() -> unfiltered
    java.util.Collection entries() -> entries
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
com.google.common.collect.FilteredKeyListMultimap -> com.google.common.collect.FilteredKeyListMultimap:
    void <init>(com.google.common.collect.ListMultimap,com.google.common.base.Predicate) -> <init>
    com.google.common.collect.ListMultimap unfiltered() -> unfiltered
    java.util.List get(java.lang.Object) -> get
    java.util.List removeAll(java.lang.Object) -> removeAll
    java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    com.google.common.collect.Multimap unfiltered() -> unfiltered
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
com.google.common.collect.FilteredKeyMultimap -> com.google.common.collect.FilteredKeyMultimap:
    com.google.common.collect.Multimap unfiltered -> unfiltered
    com.google.common.base.Predicate keyPredicate -> keyPredicate
    void <init>(com.google.common.collect.Multimap,com.google.common.base.Predicate) -> <init>
    com.google.common.collect.Multimap unfiltered() -> unfiltered
    com.google.common.base.Predicate entryPredicate() -> entryPredicate
    int size() -> size
    boolean containsKey(java.lang.Object) -> containsKey
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection unmodifiableEmptyCollection() -> unmodifiableEmptyCollection
    void clear() -> clear
    java.util.Set createKeySet() -> createKeySet
    java.util.Collection get(java.lang.Object) -> get
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Collection createEntries() -> createEntries
    java.util.Collection createValues() -> createValues
    java.util.Map createAsMap() -> createAsMap
    com.google.common.collect.Multiset createKeys() -> createKeys
com.google.common.collect.FilteredKeyMultimap$AddRejectingList -> com.google.common.collect.FilteredKeyMultimap$AddRejectingList:
    java.lang.Object key -> key
    void <init>(java.lang.Object) -> <init>
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    void add(int,java.lang.Object) -> add
    boolean addAll(int,java.util.Collection) -> addAll
    java.util.List delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.FilteredKeyMultimap$AddRejectingSet -> com.google.common.collect.FilteredKeyMultimap$AddRejectingSet:
    java.lang.Object key -> key
    void <init>(java.lang.Object) -> <init>
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    java.util.Set delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.FilteredKeyMultimap$Entries -> com.google.common.collect.FilteredKeyMultimap$Entries:
    com.google.common.collect.FilteredKeyMultimap this$0 -> this$0
    void <init>(com.google.common.collect.FilteredKeyMultimap) -> <init>
    java.util.Collection delegate() -> delegate
    boolean remove(java.lang.Object) -> remove
    java.lang.Object delegate() -> delegate
com.google.common.collect.FilteredKeySetMultimap -> com.google.common.collect.FilteredKeySetMultimap:
    void <init>(com.google.common.collect.SetMultimap,com.google.common.base.Predicate) -> <init>
    com.google.common.collect.SetMultimap unfiltered() -> unfiltered
    java.util.Set get(java.lang.Object) -> get
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Set entries() -> entries
    java.util.Set createEntries() -> createEntries
    java.util.Collection createEntries() -> createEntries
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    com.google.common.collect.Multimap unfiltered() -> unfiltered
    java.util.Collection entries() -> entries
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
com.google.common.collect.FilteredKeySetMultimap$EntrySet -> com.google.common.collect.FilteredKeySetMultimap$EntrySet:
    com.google.common.collect.FilteredKeySetMultimap this$0 -> this$0
    void <init>(com.google.common.collect.FilteredKeySetMultimap) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.google.common.collect.FilteredMultimap -> com.google.common.collect.FilteredMultimap:
    com.google.common.collect.Multimap unfiltered() -> unfiltered
    com.google.common.base.Predicate entryPredicate() -> entryPredicate
com.google.common.collect.FilteredMultimapValues -> com.google.common.collect.FilteredMultimapValues:
    com.google.common.collect.FilteredMultimap multimap -> multimap
    void <init>(com.google.common.collect.FilteredMultimap) -> <init>
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    int size() -> size
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    void clear() -> clear
com.google.common.collect.FilteredSetMultimap -> com.google.common.collect.FilteredSetMultimap:
    com.google.common.collect.SetMultimap unfiltered() -> unfiltered
com.google.common.collect.FluentIterable -> com.google.common.collect.FluentIterable:
    java.lang.Iterable iterable -> iterable
    void <init>() -> <init>
    void <init>(java.lang.Iterable) -> <init>
    com.google.common.collect.FluentIterable from(java.lang.Iterable) -> from
    com.google.common.collect.FluentIterable from(com.google.common.collect.FluentIterable) -> from
    java.lang.String toString() -> toString
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    com.google.common.collect.FluentIterable cycle() -> cycle
    com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate) -> filter
    com.google.common.collect.FluentIterable filter(java.lang.Class) -> filter
    boolean anyMatch(com.google.common.base.Predicate) -> anyMatch
    boolean allMatch(com.google.common.base.Predicate) -> allMatch
    com.google.common.base.Optional firstMatch(com.google.common.base.Predicate) -> firstMatch
    com.google.common.collect.FluentIterable transform(com.google.common.base.Function) -> transform
    com.google.common.collect.FluentIterable transformAndConcat(com.google.common.base.Function) -> transformAndConcat
    com.google.common.base.Optional first() -> first
    com.google.common.base.Optional last() -> last
    com.google.common.collect.FluentIterable skip(int) -> skip
    com.google.common.collect.FluentIterable limit(int) -> limit
    boolean isEmpty() -> isEmpty
    com.google.common.collect.ImmutableList toList() -> toList
    com.google.common.collect.ImmutableList toSortedList(java.util.Comparator) -> toSortedList
    com.google.common.collect.ImmutableSet toSet() -> toSet
    com.google.common.collect.ImmutableSortedSet toSortedSet(java.util.Comparator) -> toSortedSet
    com.google.common.collect.ImmutableMap toMap(com.google.common.base.Function) -> toMap
    com.google.common.collect.ImmutableListMultimap index(com.google.common.base.Function) -> index
    com.google.common.collect.ImmutableMap uniqueIndex(com.google.common.base.Function) -> uniqueIndex
    java.lang.Object[] toArray(java.lang.Class) -> toArray
    java.util.Collection copyInto(java.util.Collection) -> copyInto
    java.lang.Object get(int) -> get
com.google.common.collect.FluentIterable$1 -> com.google.common.collect.FluentIterable$1:
    java.lang.Iterable val$iterable -> val$iterable
    void <init>(java.lang.Iterable,java.lang.Iterable) -> <init>
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ForwardingCollection -> com.google.common.collect.ForwardingCollection:
    void <init>() -> <init>
    java.util.Collection delegate() -> delegate
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean removeAll(java.util.Collection) -> removeAll
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    boolean add(java.lang.Object) -> add
    boolean remove(java.lang.Object) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    void clear() -> clear
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean standardContains(java.lang.Object) -> standardContains
    boolean standardContainsAll(java.util.Collection) -> standardContainsAll
    boolean standardAddAll(java.util.Collection) -> standardAddAll
    boolean standardRemove(java.lang.Object) -> standardRemove
    boolean standardRemoveAll(java.util.Collection) -> standardRemoveAll
    boolean standardRetainAll(java.util.Collection) -> standardRetainAll
    void standardClear() -> standardClear
    boolean standardIsEmpty() -> standardIsEmpty
    java.lang.String standardToString() -> standardToString
    java.lang.Object[] standardToArray() -> standardToArray
    java.lang.Object[] standardToArray(java.lang.Object[]) -> standardToArray
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingConcurrentMap -> com.google.common.collect.ForwardingConcurrentMap:
    void <init>() -> <init>
    java.util.concurrent.ConcurrentMap delegate() -> delegate
    java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object) -> putIfAbsent
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    java.lang.Object replace(java.lang.Object,java.lang.Object) -> replace
    boolean replace(java.lang.Object,java.lang.Object,java.lang.Object) -> replace
    java.util.Map delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingIterator -> com.google.common.collect.ForwardingIterator:
    void <init>() -> <init>
    java.util.Iterator delegate() -> delegate
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingList -> com.google.common.collect.ForwardingList:
    void <init>() -> <init>
    java.util.List delegate() -> delegate
    void add(int,java.lang.Object) -> add
    boolean addAll(int,java.util.Collection) -> addAll
    java.lang.Object get(int) -> get
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.util.ListIterator listIterator() -> listIterator
    java.util.ListIterator listIterator(int) -> listIterator
    java.lang.Object remove(int) -> remove
    java.lang.Object set(int,java.lang.Object) -> set
    java.util.List subList(int,int) -> subList
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean standardAdd(java.lang.Object) -> standardAdd
    boolean standardAddAll(int,java.lang.Iterable) -> standardAddAll
    int standardIndexOf(java.lang.Object) -> standardIndexOf
    int standardLastIndexOf(java.lang.Object) -> standardLastIndexOf
    java.util.Iterator standardIterator() -> standardIterator
    java.util.ListIterator standardListIterator() -> standardListIterator
    java.util.ListIterator standardListIterator(int) -> standardListIterator
    java.util.List standardSubList(int,int) -> standardSubList
    boolean standardEquals(java.lang.Object) -> standardEquals
    int standardHashCode() -> standardHashCode
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingMap -> com.google.common.collect.ForwardingMap:
    void <init>() -> <init>
    java.util.Map delegate() -> delegate
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.Object remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    void putAll(java.util.Map) -> putAll
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
    java.util.Set entrySet() -> entrySet
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void standardPutAll(java.util.Map) -> standardPutAll
    java.lang.Object standardRemove(java.lang.Object) -> standardRemove
    void standardClear() -> standardClear
    boolean standardContainsKey(java.lang.Object) -> standardContainsKey
    boolean standardContainsValue(java.lang.Object) -> standardContainsValue
    boolean standardIsEmpty() -> standardIsEmpty
    boolean standardEquals(java.lang.Object) -> standardEquals
    int standardHashCode() -> standardHashCode
    java.lang.String standardToString() -> standardToString
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingMapEntry -> com.google.common.collect.ForwardingMapEntry:
    void <init>() -> <init>
    java.util.Map$Entry delegate() -> delegate
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean standardEquals(java.lang.Object) -> standardEquals
    int standardHashCode() -> standardHashCode
    java.lang.String standardToString() -> standardToString
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingMultimap -> com.google.common.collect.ForwardingMultimap:
    void <init>() -> <init>
    com.google.common.collect.Multimap delegate() -> delegate
    java.util.Map asMap() -> asMap
    void clear() -> clear
    boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.util.Collection entries() -> entries
    java.util.Collection get(java.lang.Object) -> get
    boolean isEmpty() -> isEmpty
    com.google.common.collect.Multiset keys() -> keys
    java.util.Set keySet() -> keySet
    boolean put(java.lang.Object,java.lang.Object) -> put
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    int size() -> size
    java.util.Collection values() -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingMultiset -> com.google.common.collect.ForwardingMultiset:
    void <init>() -> <init>
    com.google.common.collect.Multiset delegate() -> delegate
    int count(java.lang.Object) -> count
    int add(java.lang.Object,int) -> add
    int remove(java.lang.Object,int) -> remove
    java.util.Set elementSet() -> elementSet
    java.util.Set entrySet() -> entrySet
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int setCount(java.lang.Object,int) -> setCount
    boolean setCount(java.lang.Object,int,int) -> setCount
    boolean standardContains(java.lang.Object) -> standardContains
    void standardClear() -> standardClear
    int standardCount(java.lang.Object) -> standardCount
    boolean standardAdd(java.lang.Object) -> standardAdd
    boolean standardAddAll(java.util.Collection) -> standardAddAll
    boolean standardRemove(java.lang.Object) -> standardRemove
    boolean standardRemoveAll(java.util.Collection) -> standardRemoveAll
    boolean standardRetainAll(java.util.Collection) -> standardRetainAll
    int standardSetCount(java.lang.Object,int) -> standardSetCount
    boolean standardSetCount(java.lang.Object,int,int) -> standardSetCount
    java.util.Iterator standardIterator() -> standardIterator
    int standardSize() -> standardSize
    boolean standardEquals(java.lang.Object) -> standardEquals
    int standardHashCode() -> standardHashCode
    java.lang.String standardToString() -> standardToString
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingNavigableSet -> com.google.common.collect.ForwardingNavigableSet:
    void <init>() -> <init>
    java.util.NavigableSet delegate() -> delegate
    java.lang.Object lower(java.lang.Object) -> lower
    java.lang.Object standardLower(java.lang.Object) -> standardLower
    java.lang.Object floor(java.lang.Object) -> floor
    java.lang.Object standardFloor(java.lang.Object) -> standardFloor
    java.lang.Object ceiling(java.lang.Object) -> ceiling
    java.lang.Object standardCeiling(java.lang.Object) -> standardCeiling
    java.lang.Object higher(java.lang.Object) -> higher
    java.lang.Object standardHigher(java.lang.Object) -> standardHigher
    java.lang.Object pollFirst() -> pollFirst
    java.lang.Object standardPollFirst() -> standardPollFirst
    java.lang.Object pollLast() -> pollLast
    java.lang.Object standardPollLast() -> standardPollLast
    java.lang.Object standardFirst() -> standardFirst
    java.lang.Object standardLast() -> standardLast
    java.util.NavigableSet descendingSet() -> descendingSet
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    java.util.NavigableSet standardSubSet(java.lang.Object,boolean,java.lang.Object,boolean) -> standardSubSet
    java.util.SortedSet standardSubSet(java.lang.Object,java.lang.Object) -> standardSubSet
    java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    java.util.SortedSet standardHeadSet(java.lang.Object) -> standardHeadSet
    java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    java.util.SortedSet standardTailSet(java.lang.Object) -> standardTailSet
    java.util.SortedSet delegate() -> delegate
    java.util.Set delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingObject -> com.google.common.collect.ForwardingObject:
    void <init>() -> <init>
    java.lang.Object delegate() -> delegate
    java.lang.String toString() -> toString
com.google.common.collect.ForwardingSet -> com.google.common.collect.ForwardingSet:
    void <init>() -> <init>
    java.util.Set delegate() -> delegate
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean standardRemoveAll(java.util.Collection) -> standardRemoveAll
    boolean standardEquals(java.lang.Object) -> standardEquals
    int standardHashCode() -> standardHashCode
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingSortedMap -> com.google.common.collect.ForwardingSortedMap:
    void <init>() -> <init>
    java.util.SortedMap delegate() -> delegate
    java.util.Comparator comparator() -> comparator
    java.lang.Object firstKey() -> firstKey
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.lang.Object lastKey() -> lastKey
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    int unsafeCompare(java.lang.Object,java.lang.Object) -> unsafeCompare
    boolean standardContainsKey(java.lang.Object) -> standardContainsKey
    java.lang.Object standardRemove(java.lang.Object) -> standardRemove
    java.util.SortedMap standardSubMap(java.lang.Object,java.lang.Object) -> standardSubMap
    java.util.Map delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingSortedSet -> com.google.common.collect.ForwardingSortedSet:
    void <init>() -> <init>
    java.util.SortedSet delegate() -> delegate
    java.util.Comparator comparator() -> comparator
    java.lang.Object first() -> first
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.lang.Object last() -> last
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    int unsafeCompare(java.lang.Object,java.lang.Object) -> unsafeCompare
    boolean standardContains(java.lang.Object) -> standardContains
    boolean standardRemove(java.lang.Object) -> standardRemove
    java.util.SortedSet standardSubSet(java.lang.Object,java.lang.Object) -> standardSubSet
    java.util.Set delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.GenericMapMaker -> com.google.common.collect.GenericMapMaker:
    com.google.common.collect.MapMaker$RemovalListener removalListener -> removalListener
    void <init>() -> <init>
    com.google.common.collect.GenericMapMaker keyEquivalence(com.google.common.base.Equivalence) -> keyEquivalence
    com.google.common.collect.GenericMapMaker initialCapacity(int) -> initialCapacity
    com.google.common.collect.GenericMapMaker maximumSize(int) -> maximumSize
    com.google.common.collect.GenericMapMaker concurrencyLevel(int) -> concurrencyLevel
    com.google.common.collect.GenericMapMaker weakKeys() -> weakKeys
    com.google.common.collect.GenericMapMaker weakValues() -> weakValues
    com.google.common.collect.GenericMapMaker softValues() -> softValues
    com.google.common.collect.GenericMapMaker expireAfterWrite(long,java.util.concurrent.TimeUnit) -> expireAfterWrite
    com.google.common.collect.GenericMapMaker expireAfterAccess(long,java.util.concurrent.TimeUnit) -> expireAfterAccess
    com.google.common.collect.MapMaker$RemovalListener getRemovalListener() -> getRemovalListener
    java.util.concurrent.ConcurrentMap makeMap() -> makeMap
    com.google.common.collect.MapMakerInternalMap makeCustomMap() -> makeCustomMap
    java.util.concurrent.ConcurrentMap makeComputingMap(com.google.common.base.Function) -> makeComputingMap
com.google.common.collect.GenericMapMaker$NullListener -> com.google.common.collect.GenericMapMaker$NullListener:
    com.google.common.collect.GenericMapMaker$NullListener INSTANCE -> INSTANCE
    com.google.common.collect.GenericMapMaker$NullListener[] $VALUES -> $VALUES
    com.google.common.collect.GenericMapMaker$NullListener[] values() -> values
    com.google.common.collect.GenericMapMaker$NullListener valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void onRemoval(com.google.common.collect.MapMaker$RemovalNotification) -> onRemoval
    void <clinit>() -> <clinit>
com.google.common.collect.HashMultiset -> com.google.common.collect.HashMultiset:
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.HashMultiset create() -> create
    com.google.common.collect.HashMultiset create(int) -> create
    com.google.common.collect.HashMultiset create(java.lang.Iterable) -> create
    void <init>() -> <init>
    void <init>(int) -> <init>
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    int setCount(java.lang.Object,int) -> setCount
    int remove(java.lang.Object,int) -> remove
    int add(java.lang.Object,int) -> add
    int count(java.lang.Object) -> count
    java.util.Iterator iterator() -> iterator
    int size() -> size
    void clear() -> clear
    java.util.Set entrySet() -> entrySet
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.util.Set elementSet() -> elementSet
    boolean retainAll(java.util.Collection) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean addAll(java.util.Collection) -> addAll
    boolean setCount(java.lang.Object,int,int) -> setCount
    boolean remove(java.lang.Object) -> remove
    boolean add(java.lang.Object) -> add
    boolean contains(java.lang.Object) -> contains
    boolean isEmpty() -> isEmpty
com.google.common.collect.Hashing -> com.google.common.collect.Hashing:
    int C1 -> C1
    int C2 -> C2
    int MAX_TABLE_SIZE -> MAX_TABLE_SIZE
    void <init>() -> <init>
    int smear(int) -> smear
    int smearedHash(java.lang.Object) -> smearedHash
    int closedTableSize(int,double) -> closedTableSize
    boolean needsResizing(int,int,double) -> needsResizing
    void <clinit>() -> <clinit>
com.google.common.collect.ImmutableAsList -> com.google.common.collect.ImmutableAsList:
    void <init>() -> <init>
    com.google.common.collect.ImmutableCollection delegateCollection() -> delegateCollection
    boolean contains(java.lang.Object) -> contains
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean isPartialView() -> isPartialView
    void readObject(java.io.ObjectInputStream) -> readObject
    java.lang.Object writeReplace() -> writeReplace
com.google.common.collect.ImmutableAsList$SerializedForm -> com.google.common.collect.ImmutableAsList$SerializedForm:
    com.google.common.collect.ImmutableCollection collection -> collection
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.ImmutableCollection) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableBiMap -> com.google.common.collect.ImmutableBiMap:
    java.util.Map$Entry[] EMPTY_ENTRY_ARRAY -> EMPTY_ENTRY_ARRAY
    com.google.common.collect.ImmutableBiMap of() -> of
    com.google.common.collect.ImmutableBiMap of(java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableBiMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableBiMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableBiMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableBiMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableBiMap$Builder builder() -> builder
    com.google.common.collect.ImmutableBiMap copyOf(java.util.Map) -> copyOf
    void <init>() -> <init>
    com.google.common.collect.ImmutableBiMap inverse() -> inverse
    com.google.common.collect.ImmutableSet values() -> values
    java.lang.Object forcePut(java.lang.Object,java.lang.Object) -> forcePut
    java.lang.Object writeReplace() -> writeReplace
    com.google.common.collect.ImmutableCollection values() -> values
    java.util.Collection values() -> values
    com.google.common.collect.BiMap inverse() -> inverse
    java.util.Set values() -> values
    void <clinit>() -> <clinit>
com.google.common.collect.ImmutableBiMap$Builder -> com.google.common.collect.ImmutableBiMap$Builder:
    void <init>() -> <init>
    com.google.common.collect.ImmutableBiMap$Builder put(java.lang.Object,java.lang.Object) -> put
    com.google.common.collect.ImmutableBiMap$Builder putAll(java.util.Map) -> putAll
    com.google.common.collect.ImmutableBiMap build() -> build
    com.google.common.collect.ImmutableMap build() -> build
    com.google.common.collect.ImmutableMap$Builder putAll(java.util.Map) -> putAll
    com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object) -> put
com.google.common.collect.ImmutableBiMap$SerializedForm -> com.google.common.collect.ImmutableBiMap$SerializedForm:
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.ImmutableBiMap) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableCollection -> com.google.common.collect.ImmutableCollection:
    com.google.common.collect.ImmutableList asList -> asList
    void <init>() -> <init>
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean contains(java.lang.Object) -> contains
    boolean add(java.lang.Object) -> add
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    void clear() -> clear
    com.google.common.collect.ImmutableList asList() -> asList
    com.google.common.collect.ImmutableList createAsList() -> createAsList
    boolean isPartialView() -> isPartialView
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    java.lang.Object writeReplace() -> writeReplace
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableCollection$ArrayBasedBuilder -> com.google.common.collect.ImmutableCollection$ArrayBasedBuilder:
    java.lang.Object[] contents -> contents
    int size -> size
    void <init>(int) -> <init>
    void ensureCapacity(int) -> ensureCapacity
    com.google.common.collect.ImmutableCollection$ArrayBasedBuilder add(java.lang.Object) -> add
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object) -> add
com.google.common.collect.ImmutableCollection$Builder -> com.google.common.collect.ImmutableCollection$Builder:
    int DEFAULT_INITIAL_CAPACITY -> DEFAULT_INITIAL_CAPACITY
    int expandedCapacity(int,int) -> expandedCapacity
    void <init>() -> <init>
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object) -> add
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableCollection build() -> build
com.google.common.collect.ImmutableEntry -> com.google.common.collect.ImmutableEntry:
    java.lang.Object key -> key
    java.lang.Object value -> value
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Object,java.lang.Object) -> <init>
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
com.google.common.collect.ImmutableEnumMap -> com.google.common.collect.ImmutableEnumMap:
    java.util.EnumMap delegate -> delegate
    com.google.common.collect.ImmutableMap asImmutable(java.util.EnumMap) -> asImmutable
    void <init>(java.util.EnumMap) -> <init>
    com.google.common.collect.ImmutableSet createKeySet() -> createKeySet
    int size() -> size
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(java.lang.Object) -> get
    com.google.common.collect.ImmutableSet createEntrySet() -> createEntrySet
    boolean isPartialView() -> isPartialView
    java.lang.Object writeReplace() -> writeReplace
    java.util.EnumMap access$000(com.google.common.collect.ImmutableEnumMap) -> access$000
    void <init>(java.util.EnumMap,com.google.common.collect.ImmutableEnumMap$1) -> <init>
com.google.common.collect.ImmutableEnumMap$1 -> com.google.common.collect.ImmutableEnumMap$1:
    com.google.common.collect.ImmutableEnumMap this$0 -> this$0
    void <init>(com.google.common.collect.ImmutableEnumMap) -> <init>
    boolean contains(java.lang.Object) -> contains
    int size() -> size
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    boolean isPartialView() -> isPartialView
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableEnumMap$2 -> com.google.common.collect.ImmutableEnumMap$2:
    com.google.common.collect.ImmutableEnumMap this$0 -> this$0
    void <init>(com.google.common.collect.ImmutableEnumMap) -> <init>
    com.google.common.collect.ImmutableMap map() -> map
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableEnumMap$2$1 -> com.google.common.collect.ImmutableEnumMap$2$1:
    java.util.Iterator backingIterator -> backingIterator
    com.google.common.collect.ImmutableEnumMap$2 this$1 -> this$1
    void <init>(com.google.common.collect.ImmutableEnumMap$2) -> <init>
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> next
    java.lang.Object next() -> next
com.google.common.collect.ImmutableEnumMap$EnumSerializedForm -> com.google.common.collect.ImmutableEnumMap$EnumSerializedForm:
    java.util.EnumMap delegate -> delegate
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.EnumMap) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableEnumSet -> com.google.common.collect.ImmutableEnumSet:
    java.util.EnumSet delegate -> delegate
    int hashCode -> hashCode
    com.google.common.collect.ImmutableSet asImmutable(java.util.EnumSet) -> asImmutable
    void <init>(java.util.EnumSet) -> <init>
    boolean isPartialView() -> isPartialView
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object writeReplace() -> writeReplace
    java.util.Iterator iterator() -> iterator
    void <init>(java.util.EnumSet,com.google.common.collect.ImmutableEnumSet$1) -> <init>
com.google.common.collect.ImmutableEnumSet$1 -> com.google.common.collect.ImmutableEnumSet$1:
com.google.common.collect.ImmutableEnumSet$EnumSerializedForm -> com.google.common.collect.ImmutableEnumSet$EnumSerializedForm:
    java.util.EnumSet delegate -> delegate
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.EnumSet) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableList -> com.google.common.collect.ImmutableList:
    com.google.common.collect.ImmutableList EMPTY -> EMPTY
    com.google.common.collect.ImmutableList of() -> of
    com.google.common.collect.ImmutableList of(java.lang.Object) -> of
    com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> of
    com.google.common.collect.ImmutableList copyOf(java.lang.Iterable) -> copyOf
    com.google.common.collect.ImmutableList copyOf(java.util.Collection) -> copyOf
    com.google.common.collect.ImmutableList copyOf(java.util.Iterator) -> copyOf
    com.google.common.collect.ImmutableList copyOf(java.lang.Object[]) -> copyOf
    com.google.common.collect.ImmutableList construct(java.lang.Object[]) -> construct
    com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[]) -> asImmutableList
    com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[],int) -> asImmutableList
    void <init>() -> <init>
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    com.google.common.collect.UnmodifiableListIterator listIterator() -> listIterator
    com.google.common.collect.UnmodifiableListIterator listIterator(int) -> listIterator
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    boolean contains(java.lang.Object) -> contains
    com.google.common.collect.ImmutableList subList(int,int) -> subList
    com.google.common.collect.ImmutableList subListUnchecked(int,int) -> subListUnchecked
    boolean addAll(int,java.util.Collection) -> addAll
    java.lang.Object set(int,java.lang.Object) -> set
    void add(int,java.lang.Object) -> add
    java.lang.Object remove(int) -> remove
    com.google.common.collect.ImmutableList asList() -> asList
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    com.google.common.collect.ImmutableList reverse() -> reverse
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void readObject(java.io.ObjectInputStream) -> readObject
    java.lang.Object writeReplace() -> writeReplace
    com.google.common.collect.ImmutableList$Builder builder() -> builder
    java.util.Iterator iterator() -> iterator
    java.util.List subList(int,int) -> subList
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.ListIterator listIterator() -> listIterator
    void <clinit>() -> <clinit>
com.google.common.collect.ImmutableList$1 -> com.google.common.collect.ImmutableList$1:
    com.google.common.collect.ImmutableList this$0 -> this$0
    void <init>(com.google.common.collect.ImmutableList,int,int) -> <init>
    java.lang.Object get(int) -> get
com.google.common.collect.ImmutableList$Builder -> com.google.common.collect.ImmutableList$Builder:
    void <init>() -> <init>
    void <init>(int) -> <init>
    com.google.common.collect.ImmutableList$Builder add(java.lang.Object) -> add
    com.google.common.collect.ImmutableList$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableList$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableList$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableList build() -> build
    com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableCollection$ArrayBasedBuilder add(java.lang.Object) -> add
    com.google.common.collect.ImmutableCollection build() -> build
    com.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object) -> add
com.google.common.collect.ImmutableList$ReverseImmutableList -> com.google.common.collect.ImmutableList$ReverseImmutableList:
    com.google.common.collect.ImmutableList forwardList -> forwardList
    void <init>(com.google.common.collect.ImmutableList) -> <init>
    int reverseIndex(int) -> reverseIndex
    int reversePosition(int) -> reversePosition
    com.google.common.collect.ImmutableList reverse() -> reverse
    boolean contains(java.lang.Object) -> contains
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    com.google.common.collect.ImmutableList subList(int,int) -> subList
    java.lang.Object get(int) -> get
    int size() -> size
    boolean isPartialView() -> isPartialView
    java.util.List subList(int,int) -> subList
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.ListIterator listIterator() -> listIterator
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableList$SerializedForm -> com.google.common.collect.ImmutableList$SerializedForm:
    java.lang.Object[] elements -> elements
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Object[]) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableList$SubList -> com.google.common.collect.ImmutableList$SubList:
    int offset -> offset
    int length -> length
    com.google.common.collect.ImmutableList this$0 -> this$0
    void <init>(com.google.common.collect.ImmutableList,int,int) -> <init>
    int size() -> size
    java.lang.Object get(int) -> get
    com.google.common.collect.ImmutableList subList(int,int) -> subList
    boolean isPartialView() -> isPartialView
    java.util.List subList(int,int) -> subList
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.ListIterator listIterator() -> listIterator
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableListMultimap -> com.google.common.collect.ImmutableListMultimap:
    com.google.common.collect.ImmutableListMultimap inverse -> inverse
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.ImmutableListMultimap of() -> of
    com.google.common.collect.ImmutableListMultimap of(java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableListMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableListMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableListMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableListMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableListMultimap$Builder builder() -> builder
    com.google.common.collect.ImmutableListMultimap copyOf(com.google.common.collect.Multimap) -> copyOf
    void <init>(com.google.common.collect.ImmutableMap,int) -> <init>
    com.google.common.collect.ImmutableList get(java.lang.Object) -> get
    com.google.common.collect.ImmutableListMultimap inverse() -> inverse
    com.google.common.collect.ImmutableListMultimap invert() -> invert
    com.google.common.collect.ImmutableList removeAll(java.lang.Object) -> removeAll
    com.google.common.collect.ImmutableList replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    com.google.common.collect.ImmutableMultimap inverse() -> inverse
    com.google.common.collect.ImmutableCollection get(java.lang.Object) -> get
    com.google.common.collect.ImmutableCollection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    com.google.common.collect.ImmutableCollection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.List removeAll(java.lang.Object) -> removeAll
    java.util.List get(java.lang.Object) -> get
com.google.common.collect.ImmutableListMultimap$Builder -> com.google.common.collect.ImmutableListMultimap$Builder:
    void <init>() -> <init>
    com.google.common.collect.ImmutableListMultimap$Builder put(java.lang.Object,java.lang.Object) -> put
    com.google.common.collect.ImmutableListMultimap$Builder put(java.util.Map$Entry) -> put
    com.google.common.collect.ImmutableListMultimap$Builder putAll(java.lang.Object,java.lang.Iterable) -> putAll
    com.google.common.collect.ImmutableListMultimap$Builder putAll(java.lang.Object,java.lang.Object[]) -> putAll
    com.google.common.collect.ImmutableListMultimap$Builder putAll(com.google.common.collect.Multimap) -> putAll
    com.google.common.collect.ImmutableListMultimap$Builder orderKeysBy(java.util.Comparator) -> orderKeysBy
    com.google.common.collect.ImmutableListMultimap$Builder orderValuesBy(java.util.Comparator) -> orderValuesBy
    com.google.common.collect.ImmutableListMultimap build() -> build
    com.google.common.collect.ImmutableMultimap build() -> build
    com.google.common.collect.ImmutableMultimap$Builder orderValuesBy(java.util.Comparator) -> orderValuesBy
    com.google.common.collect.ImmutableMultimap$Builder orderKeysBy(java.util.Comparator) -> orderKeysBy
    com.google.common.collect.ImmutableMultimap$Builder putAll(com.google.common.collect.Multimap) -> putAll
    com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object,java.lang.Object[]) -> putAll
    com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object,java.lang.Iterable) -> putAll
    com.google.common.collect.ImmutableMultimap$Builder put(java.util.Map$Entry) -> put
    com.google.common.collect.ImmutableMultimap$Builder put(java.lang.Object,java.lang.Object) -> put
com.google.common.collect.ImmutableMap -> com.google.common.collect.ImmutableMap:
    java.util.Map$Entry[] EMPTY_ENTRY_ARRAY -> EMPTY_ENTRY_ARRAY
    com.google.common.collect.ImmutableSet entrySet -> entrySet
    com.google.common.collect.ImmutableSet keySet -> keySet
    com.google.common.collect.ImmutableCollection values -> values
    com.google.common.collect.ImmutableSetMultimap multimapView -> multimapView
    com.google.common.collect.ImmutableMap of() -> of
    com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMapEntry$TerminalEntry entryOf(java.lang.Object,java.lang.Object) -> entryOf
    com.google.common.collect.ImmutableMap$Builder builder() -> builder
    void checkNoConflict(boolean,java.lang.String,java.util.Map$Entry,java.util.Map$Entry) -> checkNoConflict
    com.google.common.collect.ImmutableMap copyOf(java.util.Map) -> copyOf
    com.google.common.collect.ImmutableMap copyOfEnumMapUnsafe(java.util.Map) -> copyOfEnumMapUnsafe
    com.google.common.collect.ImmutableMap copyOfEnumMap(java.util.Map) -> copyOfEnumMap
    void <init>() -> <init>
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object remove(java.lang.Object) -> remove
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object) -> get
    com.google.common.collect.ImmutableSet entrySet() -> entrySet
    com.google.common.collect.ImmutableSet createEntrySet() -> createEntrySet
    com.google.common.collect.ImmutableSet keySet() -> keySet
    com.google.common.collect.ImmutableSet createKeySet() -> createKeySet
    com.google.common.collect.ImmutableCollection values() -> values
    com.google.common.collect.ImmutableSetMultimap asMultimap() -> asMultimap
    com.google.common.collect.ImmutableSetMultimap createMultimapView() -> createMultimapView
    com.google.common.collect.ImmutableMap viewMapValuesAsSingletonSets() -> viewMapValuesAsSingletonSets
    boolean equals(java.lang.Object) -> equals
    boolean isPartialView() -> isPartialView
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object writeReplace() -> writeReplace
    java.util.Set entrySet() -> entrySet
    java.util.Collection values() -> values
    java.util.Set keySet() -> keySet
    void <clinit>() -> <clinit>
com.google.common.collect.ImmutableMap$Builder -> com.google.common.collect.ImmutableMap$Builder:
    com.google.common.collect.ImmutableMapEntry$TerminalEntry[] entries -> entries
    int size -> size
    void <init>() -> <init>
    void <init>(int) -> <init>
    void ensureCapacity(int) -> ensureCapacity
    com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object) -> put
    com.google.common.collect.ImmutableMap$Builder put(java.util.Map$Entry) -> put
    com.google.common.collect.ImmutableMap$Builder putAll(java.util.Map) -> putAll
    com.google.common.collect.ImmutableMap build() -> build
com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets -> com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:
    com.google.common.collect.ImmutableMap delegate -> delegate
    void <init>(com.google.common.collect.ImmutableMap) -> <init>
    int size() -> size
    boolean containsKey(java.lang.Object) -> containsKey
    com.google.common.collect.ImmutableSet get(java.lang.Object) -> get
    boolean isPartialView() -> isPartialView
    com.google.common.collect.ImmutableSet createEntrySet() -> createEntrySet
    java.lang.Object get(java.lang.Object) -> get
    java.util.Set entrySet() -> entrySet
    java.util.Collection values() -> values
    java.util.Set keySet() -> keySet
    com.google.common.collect.ImmutableMap access$000(com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets) -> access$000
com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1 -> com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1:
    com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets this$0 -> this$0
    void <init>(com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets) -> <init>
    com.google.common.collect.ImmutableMap map() -> map
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1 -> com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1:
    java.util.Iterator val$backingIterator -> val$backingIterator
    com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1 this$1 -> this$1
    void <init>(com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1,java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> next
    java.lang.Object next() -> next
com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1$1 -> com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1$1:
    java.util.Map$Entry val$backingEntry -> val$backingEntry
    com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1 this$2 -> this$2
    void <init>(com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1,java.util.Map$Entry) -> <init>
    java.lang.Object getKey() -> getKey
    com.google.common.collect.ImmutableSet getValue() -> getValue
    java.lang.Object getValue() -> getValue
com.google.common.collect.ImmutableMap$SerializedForm -> com.google.common.collect.ImmutableMap$SerializedForm:
    java.lang.Object[] keys -> keys
    java.lang.Object[] values -> values
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.ImmutableMap) -> <init>
    java.lang.Object readResolve() -> readResolve
    java.lang.Object createMap(com.google.common.collect.ImmutableMap$Builder) -> createMap
com.google.common.collect.ImmutableMapEntry -> com.google.common.collect.ImmutableMapEntry:
    void <init>(java.lang.Object,java.lang.Object) -> <init>
    void <init>(com.google.common.collect.ImmutableMapEntry) -> <init>
    com.google.common.collect.ImmutableMapEntry getNextInKeyBucket() -> getNextInKeyBucket
    com.google.common.collect.ImmutableMapEntry getNextInValueBucket() -> getNextInValueBucket
com.google.common.collect.ImmutableMapEntry$TerminalEntry -> com.google.common.collect.ImmutableMapEntry$TerminalEntry:
    void <init>(com.google.common.collect.ImmutableMapEntry) -> <init>
    void <init>(java.lang.Object,java.lang.Object) -> <init>
    com.google.common.collect.ImmutableMapEntry getNextInKeyBucket() -> getNextInKeyBucket
    com.google.common.collect.ImmutableMapEntry getNextInValueBucket() -> getNextInValueBucket
com.google.common.collect.ImmutableMapEntrySet -> com.google.common.collect.ImmutableMapEntrySet:
    void <init>() -> <init>
    com.google.common.collect.ImmutableMap map() -> map
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    boolean isPartialView() -> isPartialView
    java.lang.Object writeReplace() -> writeReplace
com.google.common.collect.ImmutableMapEntrySet$EntrySetSerializedForm -> com.google.common.collect.ImmutableMapEntrySet$EntrySetSerializedForm:
    com.google.common.collect.ImmutableMap map -> map
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.ImmutableMap) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableMapKeySet -> com.google.common.collect.ImmutableMapKeySet:
    com.google.common.collect.ImmutableMap map -> map
    void <init>(com.google.common.collect.ImmutableMap) -> <init>
    int size() -> size
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    com.google.common.collect.ImmutableList createAsList() -> createAsList
    boolean isPartialView() -> isPartialView
    java.lang.Object writeReplace() -> writeReplace
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableMapKeySet$1 -> com.google.common.collect.ImmutableMapKeySet$1:
    com.google.common.collect.ImmutableList val$entryList -> val$entryList
    com.google.common.collect.ImmutableMapKeySet this$0 -> this$0
    void <init>(com.google.common.collect.ImmutableMapKeySet,com.google.common.collect.ImmutableList) -> <init>
    java.lang.Object get(int) -> get
    com.google.common.collect.ImmutableCollection delegateCollection() -> delegateCollection
com.google.common.collect.ImmutableMapKeySet$KeySetSerializedForm -> com.google.common.collect.ImmutableMapKeySet$KeySetSerializedForm:
    com.google.common.collect.ImmutableMap map -> map
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.ImmutableMap) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableMapValues -> com.google.common.collect.ImmutableMapValues:
    com.google.common.collect.ImmutableMap map -> map
    void <init>(com.google.common.collect.ImmutableMap) -> <init>
    int size() -> size
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean isPartialView() -> isPartialView
    com.google.common.collect.ImmutableList createAsList() -> createAsList
    java.lang.Object writeReplace() -> writeReplace
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableMapValues$1 -> com.google.common.collect.ImmutableMapValues$1:
    com.google.common.collect.ImmutableList val$entryList -> val$entryList
    com.google.common.collect.ImmutableMapValues this$0 -> this$0
    void <init>(com.google.common.collect.ImmutableMapValues,com.google.common.collect.ImmutableList) -> <init>
    java.lang.Object get(int) -> get
    com.google.common.collect.ImmutableCollection delegateCollection() -> delegateCollection
com.google.common.collect.ImmutableMapValues$SerializedForm -> com.google.common.collect.ImmutableMapValues$SerializedForm:
    com.google.common.collect.ImmutableMap map -> map
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.ImmutableMap) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableMultimap -> com.google.common.collect.ImmutableMultimap:
    com.google.common.collect.ImmutableMap map -> map
    int size -> size
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.ImmutableMultimap of() -> of
    com.google.common.collect.ImmutableMultimap of(java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMultimap$Builder builder() -> builder
    com.google.common.collect.ImmutableMultimap copyOf(com.google.common.collect.Multimap) -> copyOf
    void <init>(com.google.common.collect.ImmutableMap,int) -> <init>
    com.google.common.collect.ImmutableCollection removeAll(java.lang.Object) -> removeAll
    com.google.common.collect.ImmutableCollection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    void clear() -> clear
    com.google.common.collect.ImmutableCollection get(java.lang.Object) -> get
    com.google.common.collect.ImmutableMultimap inverse() -> inverse
    boolean put(java.lang.Object,java.lang.Object) -> put
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    boolean isPartialView() -> isPartialView
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    int size() -> size
    com.google.common.collect.ImmutableSet keySet() -> keySet
    com.google.common.collect.ImmutableMap asMap() -> asMap
    java.util.Map createAsMap() -> createAsMap
    com.google.common.collect.ImmutableCollection entries() -> entries
    com.google.common.collect.ImmutableCollection createEntries() -> createEntries
    com.google.common.collect.UnmodifiableIterator entryIterator() -> entryIterator
    com.google.common.collect.ImmutableMultiset keys() -> keys
    com.google.common.collect.ImmutableMultiset createKeys() -> createKeys
    com.google.common.collect.ImmutableCollection values() -> values
    com.google.common.collect.ImmutableCollection createValues() -> createValues
    com.google.common.collect.UnmodifiableIterator valueIterator() -> valueIterator
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.util.Map asMap() -> asMap
    java.util.Iterator valueIterator() -> valueIterator
    java.util.Collection createValues() -> createValues
    java.util.Collection values() -> values
    com.google.common.collect.Multiset createKeys() -> createKeys
    com.google.common.collect.Multiset keys() -> keys
    java.util.Set keySet() -> keySet
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Collection createEntries() -> createEntries
    java.util.Collection entries() -> entries
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    boolean isEmpty() -> isEmpty
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
com.google.common.collect.ImmutableMultimap$1 -> com.google.common.collect.ImmutableMultimap$1:
    com.google.common.collect.ImmutableMultimap this$0 -> this$0
    void <init>(com.google.common.collect.ImmutableMultimap) -> <init>
    java.util.Map$Entry output(java.lang.Object,java.lang.Object) -> output
    java.lang.Object output(java.lang.Object,java.lang.Object) -> output
com.google.common.collect.ImmutableMultimap$2 -> com.google.common.collect.ImmutableMultimap$2:
    com.google.common.collect.ImmutableMultimap this$0 -> this$0
    void <init>(com.google.common.collect.ImmutableMultimap) -> <init>
    java.lang.Object output(java.lang.Object,java.lang.Object) -> output
com.google.common.collect.ImmutableMultimap$Builder -> com.google.common.collect.ImmutableMultimap$Builder:
    com.google.common.collect.Multimap builderMultimap -> builderMultimap
    java.util.Comparator keyComparator -> keyComparator
    java.util.Comparator valueComparator -> valueComparator
    void <init>() -> <init>
    com.google.common.collect.ImmutableMultimap$Builder put(java.lang.Object,java.lang.Object) -> put
    com.google.common.collect.ImmutableMultimap$Builder put(java.util.Map$Entry) -> put
    com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object,java.lang.Iterable) -> putAll
    com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object,java.lang.Object[]) -> putAll
    com.google.common.collect.ImmutableMultimap$Builder putAll(com.google.common.collect.Multimap) -> putAll
    com.google.common.collect.ImmutableMultimap$Builder orderKeysBy(java.util.Comparator) -> orderKeysBy
    com.google.common.collect.ImmutableMultimap$Builder orderValuesBy(java.util.Comparator) -> orderValuesBy
    com.google.common.collect.ImmutableMultimap build() -> build
com.google.common.collect.ImmutableMultimap$BuilderMultimap -> com.google.common.collect.ImmutableMultimap$BuilderMultimap:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    java.util.Collection createCollection() -> createCollection
com.google.common.collect.ImmutableMultimap$EntryCollection -> com.google.common.collect.ImmutableMultimap$EntryCollection:
    com.google.common.collect.ImmutableMultimap multimap -> multimap
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.ImmutableMultimap) -> <init>
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    boolean isPartialView() -> isPartialView
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableMultimap$FieldSettersHolder -> com.google.common.collect.ImmutableMultimap$FieldSettersHolder:
    com.google.common.collect.Serialization$FieldSetter MAP_FIELD_SETTER -> MAP_FIELD_SETTER
    com.google.common.collect.Serialization$FieldSetter SIZE_FIELD_SETTER -> SIZE_FIELD_SETTER
    com.google.common.collect.Serialization$FieldSetter EMPTY_SET_FIELD_SETTER -> EMPTY_SET_FIELD_SETTER
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.google.common.collect.ImmutableMultimap$Itr -> com.google.common.collect.ImmutableMultimap$Itr:
    java.util.Iterator mapIterator -> mapIterator
    java.lang.Object key -> key
    java.util.Iterator valueIterator -> valueIterator
    com.google.common.collect.ImmutableMultimap this$0 -> this$0
    void <init>(com.google.common.collect.ImmutableMultimap) -> <init>
    java.lang.Object output(java.lang.Object,java.lang.Object) -> output
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void <init>(com.google.common.collect.ImmutableMultimap,com.google.common.collect.ImmutableMultimap$1) -> <init>
com.google.common.collect.ImmutableMultimap$Keys -> com.google.common.collect.ImmutableMultimap$Keys:
    com.google.common.collect.ImmutableMultimap this$0 -> this$0
    void <init>(com.google.common.collect.ImmutableMultimap) -> <init>
    boolean contains(java.lang.Object) -> contains
    int count(java.lang.Object) -> count
    java.util.Set elementSet() -> elementSet
    int size() -> size
    com.google.common.collect.Multiset$Entry getEntry(int) -> getEntry
    boolean isPartialView() -> isPartialView
com.google.common.collect.ImmutableMultimap$Values -> com.google.common.collect.ImmutableMultimap$Values:
    com.google.common.collect.ImmutableMultimap multimap -> multimap
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.ImmutableMultimap) -> <init>
    boolean contains(java.lang.Object) -> contains
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    int size() -> size
    boolean isPartialView() -> isPartialView
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableMultiset -> com.google.common.collect.ImmutableMultiset:
    com.google.common.collect.ImmutableMultiset EMPTY -> EMPTY
    com.google.common.collect.ImmutableSet entrySet -> entrySet
    com.google.common.collect.ImmutableMultiset of() -> of
    com.google.common.collect.ImmutableMultiset of(java.lang.Object) -> of
    com.google.common.collect.ImmutableMultiset of(java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMultiset of(java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMultiset of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMultiset of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMultiset of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> of
    com.google.common.collect.ImmutableMultiset copyOf(java.lang.Object[]) -> copyOf
    com.google.common.collect.ImmutableMultiset copyOf(java.lang.Iterable) -> copyOf
    com.google.common.collect.ImmutableMultiset copyOfInternal(java.lang.Object[]) -> copyOfInternal
    com.google.common.collect.ImmutableMultiset copyOfInternal(com.google.common.collect.Multiset) -> copyOfInternal
    com.google.common.collect.ImmutableMultiset copyFromEntries(java.util.Collection) -> copyFromEntries
    com.google.common.collect.ImmutableMultiset copyOf(java.util.Iterator) -> copyOf
    void <init>() -> <init>
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    int add(java.lang.Object,int) -> add
    int remove(java.lang.Object,int) -> remove
    int setCount(java.lang.Object,int) -> setCount
    boolean setCount(java.lang.Object,int,int) -> setCount
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    com.google.common.collect.ImmutableSet entrySet() -> entrySet
    com.google.common.collect.ImmutableSet createEntrySet() -> createEntrySet
    com.google.common.collect.Multiset$Entry getEntry(int) -> getEntry
    java.lang.Object writeReplace() -> writeReplace
    com.google.common.collect.ImmutableMultiset$Builder builder() -> builder
    java.util.Iterator iterator() -> iterator
    java.util.Set entrySet() -> entrySet
    void <clinit>() -> <clinit>
com.google.common.collect.ImmutableMultiset$1 -> com.google.common.collect.ImmutableMultiset$1:
    int remaining -> remaining
    java.lang.Object element -> element
    java.util.Iterator val$entryIterator -> val$entryIterator
    com.google.common.collect.ImmutableMultiset this$0 -> this$0
    void <init>(com.google.common.collect.ImmutableMultiset,java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.ImmutableMultiset$Builder -> com.google.common.collect.ImmutableMultiset$Builder:
    com.google.common.collect.Multiset contents -> contents
    void <init>() -> <init>
    void <init>(com.google.common.collect.Multiset) -> <init>
    com.google.common.collect.ImmutableMultiset$Builder add(java.lang.Object) -> add
    com.google.common.collect.ImmutableMultiset$Builder addCopies(java.lang.Object,int) -> addCopies
    com.google.common.collect.ImmutableMultiset$Builder setCount(java.lang.Object,int) -> setCount
    com.google.common.collect.ImmutableMultiset$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableMultiset$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableMultiset$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableMultiset build() -> build
    com.google.common.collect.ImmutableCollection build() -> build
    com.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object) -> add
com.google.common.collect.ImmutableMultiset$EntrySet -> com.google.common.collect.ImmutableMultiset$EntrySet:
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.ImmutableMultiset this$0 -> this$0
    void <init>(com.google.common.collect.ImmutableMultiset) -> <init>
    boolean isPartialView() -> isPartialView
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    com.google.common.collect.ImmutableList createAsList() -> createAsList
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    int hashCode() -> hashCode
    java.lang.Object writeReplace() -> writeReplace
    java.util.Iterator iterator() -> iterator
    void <init>(com.google.common.collect.ImmutableMultiset,com.google.common.collect.ImmutableMultiset$1) -> <init>
com.google.common.collect.ImmutableMultiset$EntrySet$1 -> com.google.common.collect.ImmutableMultiset$EntrySet$1:
    com.google.common.collect.ImmutableMultiset$EntrySet this$1 -> this$1
    void <init>(com.google.common.collect.ImmutableMultiset$EntrySet) -> <init>
    com.google.common.collect.Multiset$Entry get(int) -> get
    com.google.common.collect.ImmutableCollection delegateCollection() -> delegateCollection
    java.lang.Object get(int) -> get
com.google.common.collect.ImmutableMultiset$EntrySetSerializedForm -> com.google.common.collect.ImmutableMultiset$EntrySetSerializedForm:
    com.google.common.collect.ImmutableMultiset multiset -> multiset
    void <init>(com.google.common.collect.ImmutableMultiset) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableMultiset$SerializedForm -> com.google.common.collect.ImmutableMultiset$SerializedForm:
    java.lang.Object[] elements -> elements
    int[] counts -> counts
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.Multiset) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableSet -> com.google.common.collect.ImmutableSet:
    int MAX_TABLE_SIZE -> MAX_TABLE_SIZE
    double DESIRED_LOAD_FACTOR -> DESIRED_LOAD_FACTOR
    int CUTOFF -> CUTOFF
    com.google.common.collect.ImmutableSet of() -> of
    com.google.common.collect.ImmutableSet of(java.lang.Object) -> of
    com.google.common.collect.ImmutableSet of(java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSet of(java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSet of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSet of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSet of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> of
    com.google.common.collect.ImmutableSet construct(int,java.lang.Object[]) -> construct
    int chooseTableSize(int) -> chooseTableSize
    com.google.common.collect.ImmutableSet copyOf(java.lang.Object[]) -> copyOf
    com.google.common.collect.ImmutableSet copyOf(java.lang.Iterable) -> copyOf
    com.google.common.collect.ImmutableSet copyOf(java.util.Iterator) -> copyOf
    com.google.common.collect.ImmutableSet copyOf(java.util.Collection) -> copyOf
    void <init>() -> <init>
    boolean isHashCodeFast() -> isHashCodeFast
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    java.lang.Object writeReplace() -> writeReplace
    com.google.common.collect.ImmutableSet$Builder builder() -> builder
    java.util.Iterator iterator() -> iterator
    com.google.common.collect.ImmutableSet access$000(int,java.lang.Object[]) -> access$000
com.google.common.collect.ImmutableSet$Builder -> com.google.common.collect.ImmutableSet$Builder:
    void <init>() -> <init>
    void <init>(int) -> <init>
    com.google.common.collect.ImmutableSet$Builder add(java.lang.Object) -> add
    com.google.common.collect.ImmutableSet$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableSet$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableSet$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableSet build() -> build
    com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableCollection$ArrayBasedBuilder add(java.lang.Object) -> add
    com.google.common.collect.ImmutableCollection build() -> build
    com.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object) -> add
com.google.common.collect.ImmutableSet$SerializedForm -> com.google.common.collect.ImmutableSet$SerializedForm:
    java.lang.Object[] elements -> elements
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Object[]) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableSetMultimap -> com.google.common.collect.ImmutableSetMultimap:
    com.google.common.collect.ImmutableSet emptySet -> emptySet
    com.google.common.collect.ImmutableSetMultimap inverse -> inverse
    com.google.common.collect.ImmutableSet entries -> entries
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.ImmutableSetMultimap of() -> of
    com.google.common.collect.ImmutableSetMultimap of(java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSetMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSetMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSetMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSetMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSetMultimap$Builder builder() -> builder
    com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap) -> copyOf
    com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator) -> copyOf
    void <init>(com.google.common.collect.ImmutableMap,int,java.util.Comparator) -> <init>
    com.google.common.collect.ImmutableSet get(java.lang.Object) -> get
    com.google.common.collect.ImmutableSetMultimap inverse() -> inverse
    com.google.common.collect.ImmutableSetMultimap invert() -> invert
    com.google.common.collect.ImmutableSet removeAll(java.lang.Object) -> removeAll
    com.google.common.collect.ImmutableSet replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    com.google.common.collect.ImmutableSet entries() -> entries
    com.google.common.collect.ImmutableSet valueSet(java.util.Comparator,java.util.Collection) -> valueSet
    com.google.common.collect.ImmutableSet emptySet(java.util.Comparator) -> emptySet
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    java.util.Comparator valueComparator() -> valueComparator
    void readObject(java.io.ObjectInputStream) -> readObject
    com.google.common.collect.ImmutableCollection entries() -> entries
    com.google.common.collect.ImmutableMultimap inverse() -> inverse
    com.google.common.collect.ImmutableCollection get(java.lang.Object) -> get
    com.google.common.collect.ImmutableCollection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    com.google.common.collect.ImmutableCollection removeAll(java.lang.Object) -> removeAll
    java.util.Collection entries() -> entries
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Set entries() -> entries
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set get(java.lang.Object) -> get
    com.google.common.collect.ImmutableSetMultimap access$000(com.google.common.collect.Multimap,java.util.Comparator) -> access$000
com.google.common.collect.ImmutableSetMultimap$Builder -> com.google.common.collect.ImmutableSetMultimap$Builder:
    void <init>() -> <init>
    com.google.common.collect.ImmutableSetMultimap$Builder put(java.lang.Object,java.lang.Object) -> put
    com.google.common.collect.ImmutableSetMultimap$Builder put(java.util.Map$Entry) -> put
    com.google.common.collect.ImmutableSetMultimap$Builder putAll(java.lang.Object,java.lang.Iterable) -> putAll
    com.google.common.collect.ImmutableSetMultimap$Builder putAll(java.lang.Object,java.lang.Object[]) -> putAll
    com.google.common.collect.ImmutableSetMultimap$Builder putAll(com.google.common.collect.Multimap) -> putAll
    com.google.common.collect.ImmutableSetMultimap$Builder orderKeysBy(java.util.Comparator) -> orderKeysBy
    com.google.common.collect.ImmutableSetMultimap$Builder orderValuesBy(java.util.Comparator) -> orderValuesBy
    com.google.common.collect.ImmutableSetMultimap build() -> build
    com.google.common.collect.ImmutableMultimap build() -> build
    com.google.common.collect.ImmutableMultimap$Builder orderValuesBy(java.util.Comparator) -> orderValuesBy
    com.google.common.collect.ImmutableMultimap$Builder orderKeysBy(java.util.Comparator) -> orderKeysBy
    com.google.common.collect.ImmutableMultimap$Builder putAll(com.google.common.collect.Multimap) -> putAll
    com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object,java.lang.Object[]) -> putAll
    com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object,java.lang.Iterable) -> putAll
    com.google.common.collect.ImmutableMultimap$Builder put(java.util.Map$Entry) -> put
    com.google.common.collect.ImmutableMultimap$Builder put(java.lang.Object,java.lang.Object) -> put
com.google.common.collect.ImmutableSetMultimap$BuilderMultimap -> com.google.common.collect.ImmutableSetMultimap$BuilderMultimap:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    java.util.Collection createCollection() -> createCollection
com.google.common.collect.ImmutableSetMultimap$EntrySet -> com.google.common.collect.ImmutableSetMultimap$EntrySet:
    com.google.common.collect.ImmutableSetMultimap multimap -> multimap
    void <init>(com.google.common.collect.ImmutableSetMultimap) -> <init>
    boolean contains(java.lang.Object) -> contains
    int size() -> size
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    boolean isPartialView() -> isPartialView
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableSortedAsList -> com.google.common.collect.ImmutableSortedAsList:
    void <init>(com.google.common.collect.ImmutableSortedSet,com.google.common.collect.ImmutableList) -> <init>
    com.google.common.collect.ImmutableSortedSet delegateCollection() -> delegateCollection
    java.util.Comparator comparator() -> comparator
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    boolean contains(java.lang.Object) -> contains
    com.google.common.collect.ImmutableList subListUnchecked(int,int) -> subListUnchecked
    com.google.common.collect.ImmutableCollection delegateCollection() -> delegateCollection
com.google.common.collect.ImmutableSortedMap -> com.google.common.collect.ImmutableSortedMap:
    java.util.Comparator NATURAL_ORDER -> NATURAL_ORDER
    com.google.common.collect.ImmutableSortedMap NATURAL_EMPTY_MAP -> NATURAL_EMPTY_MAP
    com.google.common.collect.ImmutableSortedMap descendingMap -> descendingMap
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.ImmutableSortedMap emptyMap(java.util.Comparator) -> emptyMap
    com.google.common.collect.ImmutableSortedMap fromSortedEntries(java.util.Comparator,int,java.util.Map$Entry[]) -> fromSortedEntries
    com.google.common.collect.ImmutableSortedMap from(com.google.common.collect.ImmutableSortedSet,com.google.common.collect.ImmutableList) -> from
    com.google.common.collect.ImmutableSortedMap of() -> of
    com.google.common.collect.ImmutableSortedMap of(java.lang.Comparable,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMap of(java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMap of(java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMap of(java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMap of(java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMap copyOf(java.util.Map) -> copyOf
    com.google.common.collect.ImmutableSortedMap copyOf(java.util.Map,java.util.Comparator) -> copyOf
    com.google.common.collect.ImmutableSortedMap copyOfSorted(java.util.SortedMap) -> copyOfSorted
    com.google.common.collect.ImmutableSortedMap copyOfInternal(java.util.Map,java.util.Comparator) -> copyOfInternal
    com.google.common.collect.ImmutableSortedMap fromEntries(java.util.Comparator,boolean,int,java.util.Map$Entry[]) -> fromEntries
    void sortEntries(java.util.Comparator,int,java.util.Map$Entry[]) -> sortEntries
    void validateEntries(int,java.util.Map$Entry[],java.util.Comparator) -> validateEntries
    com.google.common.collect.ImmutableSortedMap$Builder naturalOrder() -> naturalOrder
    com.google.common.collect.ImmutableSortedMap$Builder orderedBy(java.util.Comparator) -> orderedBy
    com.google.common.collect.ImmutableSortedMap$Builder reverseOrder() -> reverseOrder
    void <init>() -> <init>
    void <init>(com.google.common.collect.ImmutableSortedMap) -> <init>
    int size() -> size
    boolean containsValue(java.lang.Object) -> containsValue
    boolean isPartialView() -> isPartialView
    com.google.common.collect.ImmutableSet entrySet() -> entrySet
    com.google.common.collect.ImmutableSortedSet keySet() -> keySet
    com.google.common.collect.ImmutableCollection values() -> values
    java.util.Comparator comparator() -> comparator
    java.lang.Object firstKey() -> firstKey
    java.lang.Object lastKey() -> lastKey
    com.google.common.collect.ImmutableSortedMap headMap(java.lang.Object) -> headMap
    com.google.common.collect.ImmutableSortedMap headMap(java.lang.Object,boolean) -> headMap
    com.google.common.collect.ImmutableSortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    com.google.common.collect.ImmutableSortedMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    com.google.common.collect.ImmutableSortedMap tailMap(java.lang.Object) -> tailMap
    com.google.common.collect.ImmutableSortedMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.Map$Entry lowerEntry(java.lang.Object) -> lowerEntry
    java.lang.Object lowerKey(java.lang.Object) -> lowerKey
    java.util.Map$Entry floorEntry(java.lang.Object) -> floorEntry
    java.lang.Object floorKey(java.lang.Object) -> floorKey
    java.util.Map$Entry ceilingEntry(java.lang.Object) -> ceilingEntry
    java.lang.Object ceilingKey(java.lang.Object) -> ceilingKey
    java.util.Map$Entry higherEntry(java.lang.Object) -> higherEntry
    java.lang.Object higherKey(java.lang.Object) -> higherKey
    java.util.Map$Entry firstEntry() -> firstEntry
    java.util.Map$Entry lastEntry() -> lastEntry
    java.util.Map$Entry pollFirstEntry() -> pollFirstEntry
    java.util.Map$Entry pollLastEntry() -> pollLastEntry
    com.google.common.collect.ImmutableSortedMap descendingMap() -> descendingMap
    com.google.common.collect.ImmutableSortedMap createDescendingMap() -> createDescendingMap
    com.google.common.collect.ImmutableSortedSet navigableKeySet() -> navigableKeySet
    com.google.common.collect.ImmutableSortedSet descendingKeySet() -> descendingKeySet
    java.lang.Object writeReplace() -> writeReplace
    com.google.common.collect.ImmutableSet keySet() -> keySet
    java.util.Set entrySet() -> entrySet
    java.util.Collection values() -> values
    java.util.Set keySet() -> keySet
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    java.util.NavigableSet descendingKeySet() -> descendingKeySet
    java.util.NavigableSet navigableKeySet() -> navigableKeySet
    java.util.NavigableMap descendingMap() -> descendingMap
    void <clinit>() -> <clinit>
com.google.common.collect.ImmutableSortedMap$Builder -> com.google.common.collect.ImmutableSortedMap$Builder:
    java.util.Comparator comparator -> comparator
    void <init>(java.util.Comparator) -> <init>
    com.google.common.collect.ImmutableSortedMap$Builder put(java.lang.Object,java.lang.Object) -> put
    com.google.common.collect.ImmutableSortedMap$Builder put(java.util.Map$Entry) -> put
    com.google.common.collect.ImmutableSortedMap$Builder putAll(java.util.Map) -> putAll
    com.google.common.collect.ImmutableSortedMap build() -> build
    com.google.common.collect.ImmutableMap build() -> build
    com.google.common.collect.ImmutableMap$Builder putAll(java.util.Map) -> putAll
    com.google.common.collect.ImmutableMap$Builder put(java.util.Map$Entry) -> put
    com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object) -> put
com.google.common.collect.ImmutableSortedMap$SerializedForm -> com.google.common.collect.ImmutableSortedMap$SerializedForm:
    java.util.Comparator comparator -> comparator
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.ImmutableSortedMap) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableSortedMapFauxverideShim -> com.google.common.collect.ImmutableSortedMapFauxverideShim:
    void <init>() -> <init>
    com.google.common.collect.ImmutableSortedMap$Builder builder() -> builder
    com.google.common.collect.ImmutableSortedMap of(java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
com.google.common.collect.ImmutableSortedSet -> com.google.common.collect.ImmutableSortedSet:
    java.util.Comparator NATURAL_ORDER -> NATURAL_ORDER
    com.google.common.collect.ImmutableSortedSet NATURAL_EMPTY_SET -> NATURAL_EMPTY_SET
    java.util.Comparator comparator -> comparator
    com.google.common.collect.ImmutableSortedSet descendingSet -> descendingSet
    com.google.common.collect.ImmutableSortedSet emptySet() -> emptySet
    com.google.common.collect.ImmutableSortedSet emptySet(java.util.Comparator) -> emptySet
    com.google.common.collect.ImmutableSortedSet of() -> of
    com.google.common.collect.ImmutableSortedSet of(java.lang.Comparable) -> of
    com.google.common.collect.ImmutableSortedSet of(java.lang.Comparable,java.lang.Comparable) -> of
    com.google.common.collect.ImmutableSortedSet of(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable) -> of
    com.google.common.collect.ImmutableSortedSet of(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable) -> of
    com.google.common.collect.ImmutableSortedSet of(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable) -> of
    com.google.common.collect.ImmutableSortedSet of(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable[]) -> of
    com.google.common.collect.ImmutableSortedSet copyOf(java.lang.Comparable[]) -> copyOf
    com.google.common.collect.ImmutableSortedSet copyOf(java.lang.Iterable) -> copyOf
    com.google.common.collect.ImmutableSortedSet copyOf(java.util.Collection) -> copyOf
    com.google.common.collect.ImmutableSortedSet copyOf(java.util.Iterator) -> copyOf
    com.google.common.collect.ImmutableSortedSet copyOf(java.util.Comparator,java.util.Iterator) -> copyOf
    com.google.common.collect.ImmutableSortedSet copyOf(java.util.Comparator,java.lang.Iterable) -> copyOf
    com.google.common.collect.ImmutableSortedSet copyOf(java.util.Comparator,java.util.Collection) -> copyOf
    com.google.common.collect.ImmutableSortedSet copyOfSorted(java.util.SortedSet) -> copyOfSorted
    com.google.common.collect.ImmutableSortedSet construct(java.util.Comparator,int,java.lang.Object[]) -> construct
    com.google.common.collect.ImmutableSortedSet$Builder orderedBy(java.util.Comparator) -> orderedBy
    com.google.common.collect.ImmutableSortedSet$Builder reverseOrder() -> reverseOrder
    com.google.common.collect.ImmutableSortedSet$Builder naturalOrder() -> naturalOrder
    int unsafeCompare(java.lang.Object,java.lang.Object) -> unsafeCompare
    int unsafeCompare(java.util.Comparator,java.lang.Object,java.lang.Object) -> unsafeCompare
    void <init>(java.util.Comparator) -> <init>
    java.util.Comparator comparator() -> comparator
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    com.google.common.collect.ImmutableSortedSet headSet(java.lang.Object) -> headSet
    com.google.common.collect.ImmutableSortedSet headSet(java.lang.Object,boolean) -> headSet
    com.google.common.collect.ImmutableSortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    com.google.common.collect.ImmutableSortedSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    com.google.common.collect.ImmutableSortedSet tailSet(java.lang.Object) -> tailSet
    com.google.common.collect.ImmutableSortedSet tailSet(java.lang.Object,boolean) -> tailSet
    com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean) -> headSetImpl
    com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean) -> subSetImpl
    com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean) -> tailSetImpl
    java.lang.Object lower(java.lang.Object) -> lower
    java.lang.Object floor(java.lang.Object) -> floor
    java.lang.Object ceiling(java.lang.Object) -> ceiling
    java.lang.Object higher(java.lang.Object) -> higher
    java.lang.Object first() -> first
    java.lang.Object last() -> last
    java.lang.Object pollFirst() -> pollFirst
    java.lang.Object pollLast() -> pollLast
    com.google.common.collect.ImmutableSortedSet descendingSet() -> descendingSet
    com.google.common.collect.ImmutableSortedSet createDescendingSet() -> createDescendingSet
    com.google.common.collect.UnmodifiableIterator descendingIterator() -> descendingIterator
    int indexOf(java.lang.Object) -> indexOf
    void readObject(java.io.ObjectInputStream) -> readObject
    java.lang.Object writeReplace() -> writeReplace
    java.util.Iterator iterator() -> iterator
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.NavigableSet descendingSet() -> descendingSet
    void <clinit>() -> <clinit>
com.google.common.collect.ImmutableSortedSet$Builder -> com.google.common.collect.ImmutableSortedSet$Builder:
    java.util.Comparator comparator -> comparator
    void <init>(java.util.Comparator) -> <init>
    com.google.common.collect.ImmutableSortedSet$Builder add(java.lang.Object) -> add
    com.google.common.collect.ImmutableSortedSet$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableSortedSet$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableSortedSet$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableSortedSet build() -> build
    com.google.common.collect.ImmutableSet build() -> build
    com.google.common.collect.ImmutableSet$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableSet$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableSet$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableSet$Builder add(java.lang.Object) -> add
    com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableCollection$ArrayBasedBuilder add(java.lang.Object) -> add
    com.google.common.collect.ImmutableCollection build() -> build
    com.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object) -> add
com.google.common.collect.ImmutableSortedSet$SerializedForm -> com.google.common.collect.ImmutableSortedSet$SerializedForm:
    java.util.Comparator comparator -> comparator
    java.lang.Object[] elements -> elements
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Comparator,java.lang.Object[]) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableSortedSetFauxverideShim -> com.google.common.collect.ImmutableSortedSetFauxverideShim:
    void <init>() -> <init>
    com.google.common.collect.ImmutableSortedSet$Builder builder() -> builder
    com.google.common.collect.ImmutableSortedSet of(java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedSet of(java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedSet of(java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedSet of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedSet of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedSet of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> of
    com.google.common.collect.ImmutableSortedSet copyOf(java.lang.Object[]) -> copyOf
com.google.common.collect.Iterables -> com.google.common.collect.Iterables:
    void <init>() -> <init>
    java.lang.Iterable unmodifiableIterable(java.lang.Iterable) -> unmodifiableIterable
    java.lang.Iterable unmodifiableIterable(com.google.common.collect.ImmutableCollection) -> unmodifiableIterable
    int size(java.lang.Iterable) -> size
    boolean contains(java.lang.Iterable,java.lang.Object) -> contains
    boolean removeAll(java.lang.Iterable,java.util.Collection) -> removeAll
    boolean retainAll(java.lang.Iterable,java.util.Collection) -> retainAll
    boolean removeIf(java.lang.Iterable,com.google.common.base.Predicate) -> removeIf
    boolean removeIfFromRandomAccessList(java.util.List,com.google.common.base.Predicate) -> removeIfFromRandomAccessList
    void slowRemoveIfForRemainingElements(java.util.List,com.google.common.base.Predicate,int,int) -> slowRemoveIfForRemainingElements
    java.lang.Object removeFirstMatching(java.lang.Iterable,com.google.common.base.Predicate) -> removeFirstMatching
    boolean elementsEqual(java.lang.Iterable,java.lang.Iterable) -> elementsEqual
    java.lang.String toString(java.lang.Iterable) -> toString
    java.lang.Object getOnlyElement(java.lang.Iterable) -> getOnlyElement
    java.lang.Object getOnlyElement(java.lang.Iterable,java.lang.Object) -> getOnlyElement
    java.lang.Object[] toArray(java.lang.Iterable,java.lang.Class) -> toArray
    java.lang.Object[] toArray(java.lang.Iterable) -> toArray
    java.util.Collection toCollection(java.lang.Iterable) -> toCollection
    boolean addAll(java.util.Collection,java.lang.Iterable) -> addAll
    int frequency(java.lang.Iterable,java.lang.Object) -> frequency
    java.lang.Iterable cycle(java.lang.Iterable) -> cycle
    java.lang.Iterable cycle(java.lang.Object[]) -> cycle
    java.lang.Iterable concat(java.lang.Iterable,java.lang.Iterable) -> concat
    java.lang.Iterable concat(java.lang.Iterable,java.lang.Iterable,java.lang.Iterable) -> concat
    java.lang.Iterable concat(java.lang.Iterable,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable) -> concat
    java.lang.Iterable concat(java.lang.Iterable[]) -> concat
    java.lang.Iterable concat(java.lang.Iterable) -> concat
    java.util.Iterator iterators(java.lang.Iterable) -> iterators
    java.lang.Iterable partition(java.lang.Iterable,int) -> partition
    java.lang.Iterable paddedPartition(java.lang.Iterable,int) -> paddedPartition
    java.lang.Iterable filter(java.lang.Iterable,com.google.common.base.Predicate) -> filter
    java.lang.Iterable filter(java.lang.Iterable,java.lang.Class) -> filter
    boolean any(java.lang.Iterable,com.google.common.base.Predicate) -> any
    boolean all(java.lang.Iterable,com.google.common.base.Predicate) -> all
    java.lang.Object find(java.lang.Iterable,com.google.common.base.Predicate) -> find
    java.lang.Object find(java.lang.Iterable,com.google.common.base.Predicate,java.lang.Object) -> find
    com.google.common.base.Optional tryFind(java.lang.Iterable,com.google.common.base.Predicate) -> tryFind
    int indexOf(java.lang.Iterable,com.google.common.base.Predicate) -> indexOf
    java.lang.Iterable transform(java.lang.Iterable,com.google.common.base.Function) -> transform
    java.lang.Object get(java.lang.Iterable,int) -> get
    java.lang.Object get(java.lang.Iterable,int,java.lang.Object) -> get
    java.lang.Object getFirst(java.lang.Iterable,java.lang.Object) -> getFirst
    java.lang.Object getLast(java.lang.Iterable) -> getLast
    java.lang.Object getLast(java.lang.Iterable,java.lang.Object) -> getLast
    java.lang.Object getLastInNonemptyList(java.util.List) -> getLastInNonemptyList
    java.lang.Iterable skip(java.lang.Iterable,int) -> skip
    java.lang.Iterable limit(java.lang.Iterable,int) -> limit
    java.lang.Iterable consumingIterable(java.lang.Iterable) -> consumingIterable
    boolean isEmpty(java.lang.Iterable) -> isEmpty
    java.lang.Iterable mergeSorted(java.lang.Iterable,java.util.Comparator) -> mergeSorted
    com.google.common.base.Function toIterator() -> toIterator
    java.util.Iterator access$100(java.lang.Iterable) -> access$100
    com.google.common.base.Function access$300() -> access$300
com.google.common.collect.Iterables$1 -> com.google.common.collect.Iterables$1:
    java.lang.Iterable val$iterable -> val$iterable
    void <init>(java.lang.Iterable) -> <init>
    java.util.Iterator iterator() -> iterator
    java.lang.String toString() -> toString
com.google.common.collect.Iterables$10 -> com.google.common.collect.Iterables$10:
    java.lang.Iterable val$iterable -> val$iterable
    int val$numberToSkip -> val$numberToSkip
    void <init>(java.lang.Iterable,int) -> <init>
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Iterables$10$1 -> com.google.common.collect.Iterables$10$1:
    boolean atStart -> atStart
    java.util.Iterator val$iterator -> val$iterator
    com.google.common.collect.Iterables$10 this$0 -> this$0
    void <init>(com.google.common.collect.Iterables$10,java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.Iterables$11 -> com.google.common.collect.Iterables$11:
    java.lang.Iterable val$iterable -> val$iterable
    int val$limitSize -> val$limitSize
    void <init>(java.lang.Iterable,int) -> <init>
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Iterables$12 -> com.google.common.collect.Iterables$12:
    java.lang.Iterable val$iterable -> val$iterable
    void <init>(java.lang.Iterable) -> <init>
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Iterables$13 -> com.google.common.collect.Iterables$13:
    java.lang.Iterable val$iterable -> val$iterable
    void <init>(java.lang.Iterable) -> <init>
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Iterables$14 -> com.google.common.collect.Iterables$14:
    java.lang.Iterable val$iterables -> val$iterables
    java.util.Comparator val$comparator -> val$comparator
    void <init>(java.lang.Iterable,java.util.Comparator) -> <init>
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Iterables$15 -> com.google.common.collect.Iterables$15:
    void <init>() -> <init>
    java.util.Iterator apply(java.lang.Iterable) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Iterables$2 -> com.google.common.collect.Iterables$2:
    java.lang.Iterable val$inputs -> val$inputs
    void <init>(java.lang.Iterable) -> <init>
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Iterables$3 -> com.google.common.collect.Iterables$3:
    void <init>(java.util.Iterator) -> <init>
    java.util.Iterator transform(java.lang.Iterable) -> transform
    java.lang.Object transform(java.lang.Object) -> transform
com.google.common.collect.Iterables$4 -> com.google.common.collect.Iterables$4:
    java.lang.Iterable val$iterable -> val$iterable
    int val$size -> val$size
    void <init>(java.lang.Iterable,int) -> <init>
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Iterables$5 -> com.google.common.collect.Iterables$5:
    java.lang.Iterable val$iterable -> val$iterable
    int val$size -> val$size
    void <init>(java.lang.Iterable,int) -> <init>
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Iterables$6 -> com.google.common.collect.Iterables$6:
    java.lang.Iterable val$unfiltered -> val$unfiltered
    com.google.common.base.Predicate val$predicate -> val$predicate
    void <init>(java.lang.Iterable,com.google.common.base.Predicate) -> <init>
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Iterables$7 -> com.google.common.collect.Iterables$7:
    java.lang.Iterable val$unfiltered -> val$unfiltered
    java.lang.Class val$type -> val$type
    void <init>(java.lang.Iterable,java.lang.Class) -> <init>
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Iterables$8 -> com.google.common.collect.Iterables$8:
    java.lang.Iterable val$fromIterable -> val$fromIterable
    com.google.common.base.Function val$function -> val$function
    void <init>(java.lang.Iterable,com.google.common.base.Function) -> <init>
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Iterables$9 -> com.google.common.collect.Iterables$9:
    java.util.List val$list -> val$list
    int val$numberToSkip -> val$numberToSkip
    void <init>(java.util.List,int) -> <init>
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Iterables$ConsumingQueueIterator -> com.google.common.collect.Iterables$ConsumingQueueIterator:
    java.util.Queue queue -> queue
    void <init>(java.util.Queue) -> <init>
    java.lang.Object computeNext() -> computeNext
    void <init>(java.util.Queue,com.google.common.collect.Iterables$1) -> <init>
com.google.common.collect.Iterables$UnmodifiableIterable -> com.google.common.collect.Iterables$UnmodifiableIterable:
    java.lang.Iterable iterable -> iterable
    void <init>(java.lang.Iterable) -> <init>
    java.util.Iterator iterator() -> iterator
    java.lang.String toString() -> toString
    void <init>(java.lang.Iterable,com.google.common.collect.Iterables$1) -> <init>
com.google.common.collect.Iterators -> com.google.common.collect.Iterators:
    com.google.common.collect.UnmodifiableListIterator EMPTY_LIST_ITERATOR -> EMPTY_LIST_ITERATOR
    java.util.Iterator EMPTY_MODIFIABLE_ITERATOR -> EMPTY_MODIFIABLE_ITERATOR
    void <init>() -> <init>
    com.google.common.collect.UnmodifiableIterator emptyIterator() -> emptyIterator
    com.google.common.collect.UnmodifiableListIterator emptyListIterator() -> emptyListIterator
    java.util.Iterator emptyModifiableIterator() -> emptyModifiableIterator
    com.google.common.collect.UnmodifiableIterator unmodifiableIterator(java.util.Iterator) -> unmodifiableIterator
    com.google.common.collect.UnmodifiableIterator unmodifiableIterator(com.google.common.collect.UnmodifiableIterator) -> unmodifiableIterator
    int size(java.util.Iterator) -> size
    boolean contains(java.util.Iterator,java.lang.Object) -> contains
    boolean removeAll(java.util.Iterator,java.util.Collection) -> removeAll
    boolean removeIf(java.util.Iterator,com.google.common.base.Predicate) -> removeIf
    boolean retainAll(java.util.Iterator,java.util.Collection) -> retainAll
    boolean elementsEqual(java.util.Iterator,java.util.Iterator) -> elementsEqual
    java.lang.String toString(java.util.Iterator) -> toString
    java.lang.Object getOnlyElement(java.util.Iterator) -> getOnlyElement
    java.lang.Object getOnlyElement(java.util.Iterator,java.lang.Object) -> getOnlyElement
    java.lang.Object[] toArray(java.util.Iterator,java.lang.Class) -> toArray
    boolean addAll(java.util.Collection,java.util.Iterator) -> addAll
    int frequency(java.util.Iterator,java.lang.Object) -> frequency
    java.util.Iterator cycle(java.lang.Iterable) -> cycle
    java.util.Iterator cycle(java.lang.Object[]) -> cycle
    java.util.Iterator concat(java.util.Iterator,java.util.Iterator) -> concat
    java.util.Iterator concat(java.util.Iterator,java.util.Iterator,java.util.Iterator) -> concat
    java.util.Iterator concat(java.util.Iterator,java.util.Iterator,java.util.Iterator,java.util.Iterator) -> concat
    java.util.Iterator concat(java.util.Iterator[]) -> concat
    java.util.Iterator concat(java.util.Iterator) -> concat
    com.google.common.collect.UnmodifiableIterator partition(java.util.Iterator,int) -> partition
    com.google.common.collect.UnmodifiableIterator paddedPartition(java.util.Iterator,int) -> paddedPartition
    com.google.common.collect.UnmodifiableIterator partitionImpl(java.util.Iterator,int,boolean) -> partitionImpl
    com.google.common.collect.UnmodifiableIterator filter(java.util.Iterator,com.google.common.base.Predicate) -> filter
    com.google.common.collect.UnmodifiableIterator filter(java.util.Iterator,java.lang.Class) -> filter
    boolean any(java.util.Iterator,com.google.common.base.Predicate) -> any
    boolean all(java.util.Iterator,com.google.common.base.Predicate) -> all
    java.lang.Object find(java.util.Iterator,com.google.common.base.Predicate) -> find
    java.lang.Object find(java.util.Iterator,com.google.common.base.Predicate,java.lang.Object) -> find
    com.google.common.base.Optional tryFind(java.util.Iterator,com.google.common.base.Predicate) -> tryFind
    int indexOf(java.util.Iterator,com.google.common.base.Predicate) -> indexOf
    java.util.Iterator transform(java.util.Iterator,com.google.common.base.Function) -> transform
    java.lang.Object get(java.util.Iterator,int) -> get
    void checkNonnegative(int) -> checkNonnegative
    java.lang.Object get(java.util.Iterator,int,java.lang.Object) -> get
    java.lang.Object getNext(java.util.Iterator,java.lang.Object) -> getNext
    java.lang.Object getLast(java.util.Iterator) -> getLast
    java.lang.Object getLast(java.util.Iterator,java.lang.Object) -> getLast
    int advance(java.util.Iterator,int) -> advance
    java.util.Iterator limit(java.util.Iterator,int) -> limit
    java.util.Iterator consumingIterator(java.util.Iterator) -> consumingIterator
    java.lang.Object pollNext(java.util.Iterator) -> pollNext
    void clear(java.util.Iterator) -> clear
    com.google.common.collect.UnmodifiableIterator forArray(java.lang.Object[]) -> forArray
    com.google.common.collect.UnmodifiableListIterator forArray(java.lang.Object[],int,int,int) -> forArray
    com.google.common.collect.UnmodifiableIterator singletonIterator(java.lang.Object) -> singletonIterator
    com.google.common.collect.UnmodifiableIterator forEnumeration(java.util.Enumeration) -> forEnumeration
    java.util.Enumeration asEnumeration(java.util.Iterator) -> asEnumeration
    com.google.common.collect.PeekingIterator peekingIterator(java.util.Iterator) -> peekingIterator
    com.google.common.collect.PeekingIterator peekingIterator(com.google.common.collect.PeekingIterator) -> peekingIterator
    com.google.common.collect.UnmodifiableIterator mergeSorted(java.lang.Iterable,java.util.Comparator) -> mergeSorted
    java.util.ListIterator cast(java.util.Iterator) -> cast
    void <clinit>() -> <clinit>
com.google.common.collect.Iterators$1 -> com.google.common.collect.Iterators$1:
    void <init>() -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    boolean hasPrevious() -> hasPrevious
    java.lang.Object previous() -> previous
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
com.google.common.collect.Iterators$10 -> com.google.common.collect.Iterators$10:
    java.util.Iterator val$iterator -> val$iterator
    void <init>(java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.Iterators$11 -> com.google.common.collect.Iterators$11:
    java.lang.Object[] val$array -> val$array
    int val$offset -> val$offset
    void <init>(int,int,java.lang.Object[],int) -> <init>
    java.lang.Object get(int) -> get
com.google.common.collect.Iterators$12 -> com.google.common.collect.Iterators$12:
    boolean done -> done
    java.lang.Object val$value -> val$value
    void <init>(java.lang.Object) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.Iterators$13 -> com.google.common.collect.Iterators$13:
    java.util.Enumeration val$enumeration -> val$enumeration
    void <init>(java.util.Enumeration) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.Iterators$14 -> com.google.common.collect.Iterators$14:
    java.util.Iterator val$iterator -> val$iterator
    void <init>(java.util.Iterator) -> <init>
    boolean hasMoreElements() -> hasMoreElements
    java.lang.Object nextElement() -> nextElement
com.google.common.collect.Iterators$2 -> com.google.common.collect.Iterators$2:
    void <init>() -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.Iterators$3 -> com.google.common.collect.Iterators$3:
    java.util.Iterator val$iterator -> val$iterator
    void <init>(java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.Iterators$4 -> com.google.common.collect.Iterators$4:
    java.util.Iterator iterator -> iterator
    java.util.Iterator removeFrom -> removeFrom
    java.lang.Iterable val$iterable -> val$iterable
    void <init>(java.lang.Iterable) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.Iterators$5 -> com.google.common.collect.Iterators$5:
    java.util.Iterator current -> current
    java.util.Iterator removeFrom -> removeFrom
    java.util.Iterator val$inputs -> val$inputs
    void <init>(java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.Iterators$6 -> com.google.common.collect.Iterators$6:
    java.util.Iterator val$iterator -> val$iterator
    int val$size -> val$size
    boolean val$pad -> val$pad
    void <init>(java.util.Iterator,int,boolean) -> <init>
    boolean hasNext() -> hasNext
    java.util.List next() -> next
    java.lang.Object next() -> next
com.google.common.collect.Iterators$7 -> com.google.common.collect.Iterators$7:
    java.util.Iterator val$unfiltered -> val$unfiltered
    com.google.common.base.Predicate val$predicate -> val$predicate
    void <init>(java.util.Iterator,com.google.common.base.Predicate) -> <init>
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.Iterators$8 -> com.google.common.collect.Iterators$8:
    com.google.common.base.Function val$function -> val$function
    void <init>(java.util.Iterator,com.google.common.base.Function) -> <init>
    java.lang.Object transform(java.lang.Object) -> transform
com.google.common.collect.Iterators$9 -> com.google.common.collect.Iterators$9:
    int count -> count
    int val$limitSize -> val$limitSize
    java.util.Iterator val$iterator -> val$iterator
    void <init>(int,java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.Iterators$MergingIterator -> com.google.common.collect.Iterators$MergingIterator:
    java.util.Queue queue -> queue
    void <init>(java.lang.Iterable,java.util.Comparator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.Iterators$MergingIterator$1 -> com.google.common.collect.Iterators$MergingIterator$1:
    java.util.Comparator val$itemComparator -> val$itemComparator
    com.google.common.collect.Iterators$MergingIterator this$0 -> this$0
    void <init>(com.google.common.collect.Iterators$MergingIterator,java.util.Comparator) -> <init>
    int compare(com.google.common.collect.PeekingIterator,com.google.common.collect.PeekingIterator) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.common.collect.Iterators$PeekingImpl -> com.google.common.collect.Iterators$PeekingImpl:
    java.util.Iterator iterator -> iterator
    boolean hasPeeked -> hasPeeked
    java.lang.Object peekedElement -> peekedElement
    void <init>(java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
    java.lang.Object peek() -> peek
com.google.common.collect.LexicographicalOrdering -> com.google.common.collect.LexicographicalOrdering:
    com.google.common.collect.Ordering elementOrder -> elementOrder
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.Ordering) -> <init>
    int compare(java.lang.Iterable,java.lang.Iterable) -> compare
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.common.collect.LinkedHashMultiset -> com.google.common.collect.LinkedHashMultiset:
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.LinkedHashMultiset create() -> create
    com.google.common.collect.LinkedHashMultiset create(int) -> create
    com.google.common.collect.LinkedHashMultiset create(java.lang.Iterable) -> create
    void <init>() -> <init>
    void <init>(int) -> <init>
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    int setCount(java.lang.Object,int) -> setCount
    int remove(java.lang.Object,int) -> remove
    int add(java.lang.Object,int) -> add
    int count(java.lang.Object) -> count
    java.util.Iterator iterator() -> iterator
    int size() -> size
    void clear() -> clear
    java.util.Set entrySet() -> entrySet
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.util.Set elementSet() -> elementSet
    boolean retainAll(java.util.Collection) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean addAll(java.util.Collection) -> addAll
    boolean setCount(java.lang.Object,int,int) -> setCount
    boolean remove(java.lang.Object) -> remove
    boolean add(java.lang.Object) -> add
    boolean contains(java.lang.Object) -> contains
    boolean isEmpty() -> isEmpty
com.google.common.collect.ListMultimap -> com.google.common.collect.ListMultimap:
    java.util.List get(java.lang.Object) -> get
    java.util.List removeAll(java.lang.Object) -> removeAll
    java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Map asMap() -> asMap
    boolean equals(java.lang.Object) -> equals
com.google.common.collect.Lists -> com.google.common.collect.Lists:
    void <init>() -> <init>
    java.util.ArrayList newArrayList() -> newArrayList
    java.util.ArrayList newArrayList(java.lang.Object[]) -> newArrayList
    int computeArrayListCapacity(int) -> computeArrayListCapacity
    java.util.ArrayList newArrayList(java.lang.Iterable) -> newArrayList
    java.util.ArrayList newArrayList(java.util.Iterator) -> newArrayList
    java.util.ArrayList newArrayListWithCapacity(int) -> newArrayListWithCapacity
    java.util.ArrayList newArrayListWithExpectedSize(int) -> newArrayListWithExpectedSize
    java.util.LinkedList newLinkedList() -> newLinkedList
    java.util.LinkedList newLinkedList(java.lang.Iterable) -> newLinkedList
    java.util.concurrent.CopyOnWriteArrayList newCopyOnWriteArrayList() -> newCopyOnWriteArrayList
    java.util.concurrent.CopyOnWriteArrayList newCopyOnWriteArrayList(java.lang.Iterable) -> newCopyOnWriteArrayList
    java.util.List asList(java.lang.Object,java.lang.Object[]) -> asList
    java.util.List asList(java.lang.Object,java.lang.Object,java.lang.Object[]) -> asList
    java.util.List cartesianProduct(java.util.List) -> cartesianProduct
    java.util.List cartesianProduct(java.util.List[]) -> cartesianProduct
    java.util.List transform(java.util.List,com.google.common.base.Function) -> transform
    java.util.List partition(java.util.List,int) -> partition
    com.google.common.collect.ImmutableList charactersOf(java.lang.String) -> charactersOf
    java.util.List charactersOf(java.lang.CharSequence) -> charactersOf
    java.util.List reverse(java.util.List) -> reverse
    int hashCodeImpl(java.util.List) -> hashCodeImpl
    boolean equalsImpl(java.util.List,java.lang.Object) -> equalsImpl
    boolean addAllImpl(java.util.List,int,java.lang.Iterable) -> addAllImpl
    int indexOfImpl(java.util.List,java.lang.Object) -> indexOfImpl
    int lastIndexOfImpl(java.util.List,java.lang.Object) -> lastIndexOfImpl
    java.util.ListIterator listIteratorImpl(java.util.List,int) -> listIteratorImpl
    java.util.List subListImpl(java.util.List,int,int) -> subListImpl
    java.util.List cast(java.lang.Iterable) -> cast
com.google.common.collect.Lists$1 -> com.google.common.collect.Lists$1:
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.List) -> <init>
    java.util.ListIterator listIterator(int) -> listIterator
com.google.common.collect.Lists$2 -> com.google.common.collect.Lists$2:
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.List) -> <init>
    java.util.ListIterator listIterator(int) -> listIterator
com.google.common.collect.Lists$AbstractListWrapper -> com.google.common.collect.Lists$AbstractListWrapper:
    java.util.List backingList -> backingList
    void <init>(java.util.List) -> <init>
    void add(int,java.lang.Object) -> add
    boolean addAll(int,java.util.Collection) -> addAll
    java.lang.Object get(int) -> get
    java.lang.Object remove(int) -> remove
    java.lang.Object set(int,java.lang.Object) -> set
    boolean contains(java.lang.Object) -> contains
    int size() -> size
com.google.common.collect.Lists$CharSequenceAsList -> com.google.common.collect.Lists$CharSequenceAsList:
    java.lang.CharSequence sequence -> sequence
    void <init>(java.lang.CharSequence) -> <init>
    java.lang.Character get(int) -> get
    int size() -> size
    java.lang.Object get(int) -> get
com.google.common.collect.Lists$OnePlusArrayList -> com.google.common.collect.Lists$OnePlusArrayList:
    java.lang.Object first -> first
    java.lang.Object[] rest -> rest
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Object,java.lang.Object[]) -> <init>
    int size() -> size
    java.lang.Object get(int) -> get
com.google.common.collect.Lists$Partition -> com.google.common.collect.Lists$Partition:
    java.util.List list -> list
    int size -> size
    void <init>(java.util.List,int) -> <init>
    java.util.List get(int) -> get
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.Object get(int) -> get
com.google.common.collect.Lists$RandomAccessListWrapper -> com.google.common.collect.Lists$RandomAccessListWrapper:
    void <init>(java.util.List) -> <init>
com.google.common.collect.Lists$RandomAccessPartition -> com.google.common.collect.Lists$RandomAccessPartition:
    void <init>(java.util.List,int) -> <init>
com.google.common.collect.Lists$RandomAccessReverseList -> com.google.common.collect.Lists$RandomAccessReverseList:
    void <init>(java.util.List) -> <init>
com.google.common.collect.Lists$ReverseList -> com.google.common.collect.Lists$ReverseList:
    java.util.List forwardList -> forwardList
    void <init>(java.util.List) -> <init>
    java.util.List getForwardList() -> getForwardList
    int reverseIndex(int) -> reverseIndex
    int reversePosition(int) -> reversePosition
    void add(int,java.lang.Object) -> add
    void clear() -> clear
    java.lang.Object remove(int) -> remove
    void removeRange(int,int) -> removeRange
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
    int size() -> size
    java.util.List subList(int,int) -> subList
    java.util.Iterator iterator() -> iterator
    java.util.ListIterator listIterator(int) -> listIterator
    int access$000(com.google.common.collect.Lists$ReverseList,int) -> access$000
com.google.common.collect.Lists$ReverseList$1 -> com.google.common.collect.Lists$ReverseList$1:
    boolean canRemoveOrSet -> canRemoveOrSet
    java.util.ListIterator val$forwardIterator -> val$forwardIterator
    com.google.common.collect.Lists$ReverseList this$0 -> this$0
    void <init>(com.google.common.collect.Lists$ReverseList,java.util.ListIterator) -> <init>
    void add(java.lang.Object) -> add
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    java.lang.Object next() -> next
    int nextIndex() -> nextIndex
    java.lang.Object previous() -> previous
    int previousIndex() -> previousIndex
    void remove() -> remove
    void set(java.lang.Object) -> set
com.google.common.collect.Lists$StringAsImmutableList -> com.google.common.collect.Lists$StringAsImmutableList:
    java.lang.String string -> string
    void <init>(java.lang.String) -> <init>
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    com.google.common.collect.ImmutableList subList(int,int) -> subList
    boolean isPartialView() -> isPartialView
    java.lang.Character get(int) -> get
    int size() -> size
    java.util.List subList(int,int) -> subList
    java.lang.Object get(int) -> get
com.google.common.collect.Lists$TransformingRandomAccessList -> com.google.common.collect.Lists$TransformingRandomAccessList:
    java.util.List fromList -> fromList
    com.google.common.base.Function function -> function
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.List,com.google.common.base.Function) -> <init>
    void clear() -> clear
    java.lang.Object get(int) -> get
    boolean isEmpty() -> isEmpty
    java.lang.Object remove(int) -> remove
    int size() -> size
com.google.common.collect.Lists$TransformingSequentialList -> com.google.common.collect.Lists$TransformingSequentialList:
    java.util.List fromList -> fromList
    com.google.common.base.Function function -> function
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.List,com.google.common.base.Function) -> <init>
    void clear() -> clear
    int size() -> size
    java.util.ListIterator listIterator(int) -> listIterator
com.google.common.collect.Lists$TransformingSequentialList$1 -> com.google.common.collect.Lists$TransformingSequentialList$1:
    com.google.common.collect.Lists$TransformingSequentialList this$0 -> this$0
    void <init>(com.google.common.collect.Lists$TransformingSequentialList,java.util.ListIterator) -> <init>
    java.lang.Object transform(java.lang.Object) -> transform
com.google.common.collect.Lists$TwoPlusArrayList -> com.google.common.collect.Lists$TwoPlusArrayList:
    java.lang.Object first -> first
    java.lang.Object second -> second
    java.lang.Object[] rest -> rest
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Object,java.lang.Object,java.lang.Object[]) -> <init>
    int size() -> size
    java.lang.Object get(int) -> get
com.google.common.collect.MapDifference -> com.google.common.collect.MapDifference:
    boolean areEqual() -> areEqual
    java.util.Map entriesOnlyOnLeft() -> entriesOnlyOnLeft
    java.util.Map entriesOnlyOnRight() -> entriesOnlyOnRight
    java.util.Map entriesInCommon() -> entriesInCommon
    java.util.Map entriesDiffering() -> entriesDiffering
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.common.collect.MapDifference$ValueDifference -> com.google.common.collect.MapDifference$ValueDifference:
    java.lang.Object leftValue() -> leftValue
    java.lang.Object rightValue() -> rightValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.common.collect.MapMaker -> com.google.common.collect.MapMaker:
    int DEFAULT_INITIAL_CAPACITY -> DEFAULT_INITIAL_CAPACITY
    int DEFAULT_CONCURRENCY_LEVEL -> DEFAULT_CONCURRENCY_LEVEL
    int DEFAULT_EXPIRATION_NANOS -> DEFAULT_EXPIRATION_NANOS
    int UNSET_INT -> UNSET_INT
    boolean useCustomMap -> useCustomMap
    int initialCapacity -> initialCapacity
    int concurrencyLevel -> concurrencyLevel
    int maximumSize -> maximumSize
    com.google.common.collect.MapMakerInternalMap$Strength keyStrength -> keyStrength
    com.google.common.collect.MapMakerInternalMap$Strength valueStrength -> valueStrength
    long expireAfterWriteNanos -> expireAfterWriteNanos
    long expireAfterAccessNanos -> expireAfterAccessNanos
    com.google.common.collect.MapMaker$RemovalCause nullRemovalCause -> nullRemovalCause
    com.google.common.base.Equivalence keyEquivalence -> keyEquivalence
    com.google.common.base.Ticker ticker -> ticker
    void <init>() -> <init>
    com.google.common.collect.MapMaker keyEquivalence(com.google.common.base.Equivalence) -> keyEquivalence
    com.google.common.base.Equivalence getKeyEquivalence() -> getKeyEquivalence
    com.google.common.collect.MapMaker initialCapacity(int) -> initialCapacity
    int getInitialCapacity() -> getInitialCapacity
    com.google.common.collect.MapMaker maximumSize(int) -> maximumSize
    com.google.common.collect.MapMaker concurrencyLevel(int) -> concurrencyLevel
    int getConcurrencyLevel() -> getConcurrencyLevel
    com.google.common.collect.MapMaker weakKeys() -> weakKeys
    com.google.common.collect.MapMaker setKeyStrength(com.google.common.collect.MapMakerInternalMap$Strength) -> setKeyStrength
    com.google.common.collect.MapMakerInternalMap$Strength getKeyStrength() -> getKeyStrength
    com.google.common.collect.MapMaker weakValues() -> weakValues
    com.google.common.collect.MapMaker softValues() -> softValues
    com.google.common.collect.MapMaker setValueStrength(com.google.common.collect.MapMakerInternalMap$Strength) -> setValueStrength
    com.google.common.collect.MapMakerInternalMap$Strength getValueStrength() -> getValueStrength
    com.google.common.collect.MapMaker expireAfterWrite(long,java.util.concurrent.TimeUnit) -> expireAfterWrite
    void checkExpiration(long,java.util.concurrent.TimeUnit) -> checkExpiration
    long getExpireAfterWriteNanos() -> getExpireAfterWriteNanos
    com.google.common.collect.MapMaker expireAfterAccess(long,java.util.concurrent.TimeUnit) -> expireAfterAccess
    long getExpireAfterAccessNanos() -> getExpireAfterAccessNanos
    com.google.common.base.Ticker getTicker() -> getTicker
    com.google.common.collect.GenericMapMaker removalListener(com.google.common.collect.MapMaker$RemovalListener) -> removalListener
    java.util.concurrent.ConcurrentMap makeMap() -> makeMap
    com.google.common.collect.MapMakerInternalMap makeCustomMap() -> makeCustomMap
    java.util.concurrent.ConcurrentMap makeComputingMap(com.google.common.base.Function) -> makeComputingMap
    java.lang.String toString() -> toString
    com.google.common.collect.GenericMapMaker expireAfterAccess(long,java.util.concurrent.TimeUnit) -> expireAfterAccess
    com.google.common.collect.GenericMapMaker expireAfterWrite(long,java.util.concurrent.TimeUnit) -> expireAfterWrite
    com.google.common.collect.GenericMapMaker softValues() -> softValues
    com.google.common.collect.GenericMapMaker weakValues() -> weakValues
    com.google.common.collect.GenericMapMaker weakKeys() -> weakKeys
    com.google.common.collect.GenericMapMaker concurrencyLevel(int) -> concurrencyLevel
    com.google.common.collect.GenericMapMaker maximumSize(int) -> maximumSize
    com.google.common.collect.GenericMapMaker initialCapacity(int) -> initialCapacity
    com.google.common.collect.GenericMapMaker keyEquivalence(com.google.common.base.Equivalence) -> keyEquivalence
com.google.common.collect.MapMaker$1 -> com.google.common.collect.MapMaker$1:
com.google.common.collect.MapMaker$ComputingMapAdapter -> com.google.common.collect.MapMaker$ComputingMapAdapter:
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.MapMaker,com.google.common.base.Function) -> <init>
    java.lang.Object get(java.lang.Object) -> get
com.google.common.collect.MapMaker$NullComputingConcurrentMap -> com.google.common.collect.MapMaker$NullComputingConcurrentMap:
    long serialVersionUID -> serialVersionUID
    com.google.common.base.Function computingFunction -> computingFunction
    void <init>(com.google.common.collect.MapMaker,com.google.common.base.Function) -> <init>
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object compute(java.lang.Object) -> compute
com.google.common.collect.MapMaker$NullConcurrentMap -> com.google.common.collect.MapMaker$NullConcurrentMap:
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.MapMaker$RemovalListener removalListener -> removalListener
    com.google.common.collect.MapMaker$RemovalCause removalCause -> removalCause
    void <init>(com.google.common.collect.MapMaker) -> <init>
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object) -> get
    void notifyRemoval(java.lang.Object,java.lang.Object) -> notifyRemoval
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object) -> putIfAbsent
    java.lang.Object remove(java.lang.Object) -> remove
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    java.lang.Object replace(java.lang.Object,java.lang.Object) -> replace
    boolean replace(java.lang.Object,java.lang.Object,java.lang.Object) -> replace
    java.util.Set entrySet() -> entrySet
com.google.common.collect.MapMaker$RemovalCause -> com.google.common.collect.MapMaker$RemovalCause:
    com.google.common.collect.MapMaker$RemovalCause EXPLICIT -> EXPLICIT
    com.google.common.collect.MapMaker$RemovalCause REPLACED -> REPLACED
    com.google.common.collect.MapMaker$RemovalCause COLLECTED -> COLLECTED
    com.google.common.collect.MapMaker$RemovalCause EXPIRED -> EXPIRED
    com.google.common.collect.MapMaker$RemovalCause SIZE -> SIZE
    com.google.common.collect.MapMaker$RemovalCause[] $VALUES -> $VALUES
    com.google.common.collect.MapMaker$RemovalCause[] values() -> values
    com.google.common.collect.MapMaker$RemovalCause valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean wasEvicted() -> wasEvicted
    void <init>(java.lang.String,int,com.google.common.collect.MapMaker$1) -> <init>
    void <clinit>() -> <clinit>
com.google.common.collect.MapMaker$RemovalCause$1 -> com.google.common.collect.MapMaker$RemovalCause$1:
    void <init>(java.lang.String,int) -> <init>
    boolean wasEvicted() -> wasEvicted
com.google.common.collect.MapMaker$RemovalCause$2 -> com.google.common.collect.MapMaker$RemovalCause$2:
    void <init>(java.lang.String,int) -> <init>
    boolean wasEvicted() -> wasEvicted
com.google.common.collect.MapMaker$RemovalCause$3 -> com.google.common.collect.MapMaker$RemovalCause$3:
    void <init>(java.lang.String,int) -> <init>
    boolean wasEvicted() -> wasEvicted
com.google.common.collect.MapMaker$RemovalCause$4 -> com.google.common.collect.MapMaker$RemovalCause$4:
    void <init>(java.lang.String,int) -> <init>
    boolean wasEvicted() -> wasEvicted
com.google.common.collect.MapMaker$RemovalCause$5 -> com.google.common.collect.MapMaker$RemovalCause$5:
    void <init>(java.lang.String,int) -> <init>
    boolean wasEvicted() -> wasEvicted
com.google.common.collect.MapMaker$RemovalListener -> com.google.common.collect.MapMaker$RemovalListener:
    void onRemoval(com.google.common.collect.MapMaker$RemovalNotification) -> onRemoval
com.google.common.collect.MapMaker$RemovalNotification -> com.google.common.collect.MapMaker$RemovalNotification:
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.MapMaker$RemovalCause cause -> cause
    void <init>(java.lang.Object,java.lang.Object,com.google.common.collect.MapMaker$RemovalCause) -> <init>
    com.google.common.collect.MapMaker$RemovalCause getCause() -> getCause
    boolean wasEvicted() -> wasEvicted
com.google.common.collect.MapMakerInternalMap -> com.google.common.collect.MapMakerInternalMap:
    int MAXIMUM_CAPACITY -> MAXIMUM_CAPACITY
    int MAX_SEGMENTS -> MAX_SEGMENTS
    int CONTAINS_VALUE_RETRIES -> CONTAINS_VALUE_RETRIES
    int DRAIN_THRESHOLD -> DRAIN_THRESHOLD
    int DRAIN_MAX -> DRAIN_MAX
    long CLEANUP_EXECUTOR_DELAY_SECS -> CLEANUP_EXECUTOR_DELAY_SECS
    java.util.logging.Logger logger -> logger
    int segmentMask -> segmentMask
    int segmentShift -> segmentShift
    com.google.common.collect.MapMakerInternalMap$Segment[] segments -> segments
    int concurrencyLevel -> concurrencyLevel
    com.google.common.base.Equivalence keyEquivalence -> keyEquivalence
    com.google.common.base.Equivalence valueEquivalence -> valueEquivalence
    com.google.common.collect.MapMakerInternalMap$Strength keyStrength -> keyStrength
    com.google.common.collect.MapMakerInternalMap$Strength valueStrength -> valueStrength
    int maximumSize -> maximumSize
    long expireAfterAccessNanos -> expireAfterAccessNanos
    long expireAfterWriteNanos -> expireAfterWriteNanos
    java.util.Queue removalNotificationQueue -> removalNotificationQueue
    com.google.common.collect.MapMaker$RemovalListener removalListener -> removalListener
    com.google.common.collect.MapMakerInternalMap$EntryFactory entryFactory -> entryFactory
    com.google.common.base.Ticker ticker -> ticker
    com.google.common.collect.MapMakerInternalMap$ValueReference UNSET -> UNSET
    java.util.Queue DISCARDING_QUEUE -> DISCARDING_QUEUE
    java.util.Set keySet -> keySet
    java.util.Collection values -> values
    java.util.Set entrySet -> entrySet
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.MapMaker) -> <init>
    boolean evictsBySize() -> evictsBySize
    boolean expires() -> expires
    boolean expiresAfterWrite() -> expiresAfterWrite
    boolean expiresAfterAccess() -> expiresAfterAccess
    boolean usesKeyReferences() -> usesKeyReferences
    boolean usesValueReferences() -> usesValueReferences
    com.google.common.collect.MapMakerInternalMap$ValueReference unset() -> unset
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry nullEntry() -> nullEntry
    java.util.Queue discardingQueue() -> discardingQueue
    int rehash(int) -> rehash
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry newEntry(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> newEntry
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry copyEntry(com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyEntry
    com.google.common.collect.MapMakerInternalMap$ValueReference newValueReference(com.google.common.collect.MapMakerInternalMap$ReferenceEntry,java.lang.Object) -> newValueReference
    int hash(java.lang.Object) -> hash
    void reclaimValue(com.google.common.collect.MapMakerInternalMap$ValueReference) -> reclaimValue
    void reclaimKey(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> reclaimKey
    boolean isLive(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> isLive
    com.google.common.collect.MapMakerInternalMap$Segment segmentFor(int) -> segmentFor
    com.google.common.collect.MapMakerInternalMap$Segment createSegment(int,int) -> createSegment
    java.lang.Object getLiveValue(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> getLiveValue
    boolean isExpired(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> isExpired
    boolean isExpired(com.google.common.collect.MapMakerInternalMap$ReferenceEntry,long) -> isExpired
    void connectExpirables(com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> connectExpirables
    void nullifyExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> nullifyExpirable
    void processPendingNotifications() -> processPendingNotifications
    void connectEvictables(com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> connectEvictables
    void nullifyEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> nullifyEvictable
    com.google.common.collect.MapMakerInternalMap$Segment[] newSegmentArray(int) -> newSegmentArray
    boolean isEmpty() -> isEmpty
    int size() -> size
    java.lang.Object get(java.lang.Object) -> get
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry(java.lang.Object) -> getEntry
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    java.lang.Object remove(java.lang.Object) -> remove
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    boolean replace(java.lang.Object,java.lang.Object,java.lang.Object) -> replace
    java.lang.Object replace(java.lang.Object,java.lang.Object) -> replace
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
    java.util.Set entrySet() -> entrySet
    java.lang.Object writeReplace() -> writeReplace
    void <clinit>() -> <clinit>
com.google.common.collect.MapMakerInternalMap$1 -> com.google.common.collect.MapMakerInternalMap$1:
    void <init>() -> <init>
    java.lang.Object get() -> get
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry() -> getEntry
    com.google.common.collect.MapMakerInternalMap$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyFor
    boolean isComputingReference() -> isComputingReference
    java.lang.Object waitForValue() -> waitForValue
    void clear(com.google.common.collect.MapMakerInternalMap$ValueReference) -> clear
com.google.common.collect.MapMakerInternalMap$2 -> com.google.common.collect.MapMakerInternalMap$2:
    void <init>() -> <init>
    boolean offer(java.lang.Object) -> offer
    java.lang.Object peek() -> peek
    java.lang.Object poll() -> poll
    int size() -> size
    java.util.Iterator iterator() -> iterator
com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry -> com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry:
    void <init>() -> <init>
    com.google.common.collect.MapMakerInternalMap$ValueReference getValueReference() -> getValueReference
    void setValueReference(com.google.common.collect.MapMakerInternalMap$ValueReference) -> setValueReference
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNext() -> getNext
    int getHash() -> getHash
    java.lang.Object getKey() -> getKey
    long getExpirationTime() -> getExpirationTime
    void setExpirationTime(long) -> setExpirationTime
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable() -> getNextExpirable
    void setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable() -> getPreviousExpirable
    void setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable() -> getNextEvictable
    void setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable() -> getPreviousEvictable
    void setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousEvictable
com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy -> com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy:
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.MapMakerInternalMap$Strength keyStrength -> keyStrength
    com.google.common.collect.MapMakerInternalMap$Strength valueStrength -> valueStrength
    com.google.common.base.Equivalence keyEquivalence -> keyEquivalence
    com.google.common.base.Equivalence valueEquivalence -> valueEquivalence
    long expireAfterWriteNanos -> expireAfterWriteNanos
    long expireAfterAccessNanos -> expireAfterAccessNanos
    int maximumSize -> maximumSize
    int concurrencyLevel -> concurrencyLevel
    com.google.common.collect.MapMaker$RemovalListener removalListener -> removalListener
    java.util.concurrent.ConcurrentMap delegate -> delegate
    void <init>(com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.base.Equivalence,com.google.common.base.Equivalence,long,long,int,int,com.google.common.collect.MapMaker$RemovalListener,java.util.concurrent.ConcurrentMap) -> <init>
    java.util.concurrent.ConcurrentMap delegate() -> delegate
    void writeMapTo(java.io.ObjectOutputStream) -> writeMapTo
    com.google.common.collect.MapMaker readMapMaker(java.io.ObjectInputStream) -> readMapMaker
    void readEntries(java.io.ObjectInputStream) -> readEntries
    java.util.Map delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.MapMakerInternalMap$EntryFactory -> com.google.common.collect.MapMakerInternalMap$EntryFactory:
    com.google.common.collect.MapMakerInternalMap$EntryFactory STRONG -> STRONG
    com.google.common.collect.MapMakerInternalMap$EntryFactory STRONG_EXPIRABLE -> STRONG_EXPIRABLE
    com.google.common.collect.MapMakerInternalMap$EntryFactory STRONG_EVICTABLE -> STRONG_EVICTABLE
    com.google.common.collect.MapMakerInternalMap$EntryFactory STRONG_EXPIRABLE_EVICTABLE -> STRONG_EXPIRABLE_EVICTABLE
    com.google.common.collect.MapMakerInternalMap$EntryFactory WEAK -> WEAK
    com.google.common.collect.MapMakerInternalMap$EntryFactory WEAK_EXPIRABLE -> WEAK_EXPIRABLE
    com.google.common.collect.MapMakerInternalMap$EntryFactory WEAK_EVICTABLE -> WEAK_EVICTABLE
    com.google.common.collect.MapMakerInternalMap$EntryFactory WEAK_EXPIRABLE_EVICTABLE -> WEAK_EXPIRABLE_EVICTABLE
    int EXPIRABLE_MASK -> EXPIRABLE_MASK
    int EVICTABLE_MASK -> EVICTABLE_MASK
    com.google.common.collect.MapMakerInternalMap$EntryFactory[][] factories -> factories
    com.google.common.collect.MapMakerInternalMap$EntryFactory[] $VALUES -> $VALUES
    com.google.common.collect.MapMakerInternalMap$EntryFactory[] values() -> values
    com.google.common.collect.MapMakerInternalMap$EntryFactory valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    com.google.common.collect.MapMakerInternalMap$EntryFactory getFactory(com.google.common.collect.MapMakerInternalMap$Strength,boolean,boolean) -> getFactory
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> newEntry
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry copyEntry(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyEntry
    void copyExpirableEntry(com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyExpirableEntry
    void copyEvictableEntry(com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyEvictableEntry
    void <init>(java.lang.String,int,com.google.common.collect.MapMakerInternalMap$1) -> <init>
    void <clinit>() -> <clinit>
com.google.common.collect.MapMakerInternalMap$EntryFactory$1 -> com.google.common.collect.MapMakerInternalMap$EntryFactory$1:
    void <init>(java.lang.String,int) -> <init>
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> newEntry
com.google.common.collect.MapMakerInternalMap$EntryFactory$2 -> com.google.common.collect.MapMakerInternalMap$EntryFactory$2:
    void <init>(java.lang.String,int) -> <init>
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> newEntry
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry copyEntry(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyEntry
com.google.common.collect.MapMakerInternalMap$EntryFactory$3 -> com.google.common.collect.MapMakerInternalMap$EntryFactory$3:
    void <init>(java.lang.String,int) -> <init>
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> newEntry
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry copyEntry(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyEntry
com.google.common.collect.MapMakerInternalMap$EntryFactory$4 -> com.google.common.collect.MapMakerInternalMap$EntryFactory$4:
    void <init>(java.lang.String,int) -> <init>
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> newEntry
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry copyEntry(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyEntry
com.google.common.collect.MapMakerInternalMap$EntryFactory$5 -> com.google.common.collect.MapMakerInternalMap$EntryFactory$5:
    void <init>(java.lang.String,int) -> <init>
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> newEntry
com.google.common.collect.MapMakerInternalMap$EntryFactory$6 -> com.google.common.collect.MapMakerInternalMap$EntryFactory$6:
    void <init>(java.lang.String,int) -> <init>
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> newEntry
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry copyEntry(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyEntry
com.google.common.collect.MapMakerInternalMap$EntryFactory$7 -> com.google.common.collect.MapMakerInternalMap$EntryFactory$7:
    void <init>(java.lang.String,int) -> <init>
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> newEntry
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry copyEntry(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyEntry
com.google.common.collect.MapMakerInternalMap$EntryFactory$8 -> com.google.common.collect.MapMakerInternalMap$EntryFactory$8:
    void <init>(java.lang.String,int) -> <init>
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> newEntry
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry copyEntry(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyEntry
com.google.common.collect.MapMakerInternalMap$EntryIterator -> com.google.common.collect.MapMakerInternalMap$EntryIterator:
    com.google.common.collect.MapMakerInternalMap this$0 -> this$0
    void <init>(com.google.common.collect.MapMakerInternalMap) -> <init>
    java.util.Map$Entry next() -> next
    java.lang.Object next() -> next
com.google.common.collect.MapMakerInternalMap$EntrySet -> com.google.common.collect.MapMakerInternalMap$EntrySet:
    com.google.common.collect.MapMakerInternalMap this$0 -> this$0
    void <init>(com.google.common.collect.MapMakerInternalMap) -> <init>
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    int size() -> size
    boolean isEmpty() -> isEmpty
    void clear() -> clear
com.google.common.collect.MapMakerInternalMap$EvictionQueue -> com.google.common.collect.MapMakerInternalMap$EvictionQueue:
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry head -> head
    void <init>() -> <init>
    boolean offer(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> offer
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry peek() -> peek
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry poll() -> poll
    boolean remove(java.lang.Object) -> remove
    boolean contains(java.lang.Object) -> contains
    boolean isEmpty() -> isEmpty
    int size() -> size
    void clear() -> clear
    java.util.Iterator iterator() -> iterator
    java.lang.Object peek() -> peek
    java.lang.Object poll() -> poll
    boolean offer(java.lang.Object) -> offer
com.google.common.collect.MapMakerInternalMap$EvictionQueue$1 -> com.google.common.collect.MapMakerInternalMap$EvictionQueue$1:
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry nextEvictable -> nextEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry previousEvictable -> previousEvictable
    com.google.common.collect.MapMakerInternalMap$EvictionQueue this$0 -> this$0
    void <init>(com.google.common.collect.MapMakerInternalMap$EvictionQueue) -> <init>
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable() -> getNextEvictable
    void setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable() -> getPreviousEvictable
    void setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousEvictable
com.google.common.collect.MapMakerInternalMap$EvictionQueue$2 -> com.google.common.collect.MapMakerInternalMap$EvictionQueue$2:
    com.google.common.collect.MapMakerInternalMap$EvictionQueue this$0 -> this$0
    void <init>(com.google.common.collect.MapMakerInternalMap$EvictionQueue,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> <init>
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry computeNext(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> computeNext
    java.lang.Object computeNext(java.lang.Object) -> computeNext
com.google.common.collect.MapMakerInternalMap$ExpirationQueue -> com.google.common.collect.MapMakerInternalMap$ExpirationQueue:
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry head -> head
    void <init>() -> <init>
    boolean offer(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> offer
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry peek() -> peek
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry poll() -> poll
    boolean remove(java.lang.Object) -> remove
    boolean contains(java.lang.Object) -> contains
    boolean isEmpty() -> isEmpty
    int size() -> size
    void clear() -> clear
    java.util.Iterator iterator() -> iterator
    java.lang.Object peek() -> peek
    java.lang.Object poll() -> poll
    boolean offer(java.lang.Object) -> offer
com.google.common.collect.MapMakerInternalMap$ExpirationQueue$1 -> com.google.common.collect.MapMakerInternalMap$ExpirationQueue$1:
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry nextExpirable -> nextExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry previousExpirable -> previousExpirable
    com.google.common.collect.MapMakerInternalMap$ExpirationQueue this$0 -> this$0
    void <init>(com.google.common.collect.MapMakerInternalMap$ExpirationQueue) -> <init>
    long getExpirationTime() -> getExpirationTime
    void setExpirationTime(long) -> setExpirationTime
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable() -> getNextExpirable
    void setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable() -> getPreviousExpirable
    void setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousExpirable
com.google.common.collect.MapMakerInternalMap$ExpirationQueue$2 -> com.google.common.collect.MapMakerInternalMap$ExpirationQueue$2:
    com.google.common.collect.MapMakerInternalMap$ExpirationQueue this$0 -> this$0
    void <init>(com.google.common.collect.MapMakerInternalMap$ExpirationQueue,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> <init>
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry computeNext(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> computeNext
    java.lang.Object computeNext(java.lang.Object) -> computeNext
com.google.common.collect.MapMakerInternalMap$HashIterator -> com.google.common.collect.MapMakerInternalMap$HashIterator:
    int nextSegmentIndex -> nextSegmentIndex
    int nextTableIndex -> nextTableIndex
    com.google.common.collect.MapMakerInternalMap$Segment currentSegment -> currentSegment
    java.util.concurrent.atomic.AtomicReferenceArray currentTable -> currentTable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry nextEntry -> nextEntry
    com.google.common.collect.MapMakerInternalMap$WriteThroughEntry nextExternal -> nextExternal
    com.google.common.collect.MapMakerInternalMap$WriteThroughEntry lastReturned -> lastReturned
    com.google.common.collect.MapMakerInternalMap this$0 -> this$0
    void <init>(com.google.common.collect.MapMakerInternalMap) -> <init>
    java.lang.Object next() -> next
    void advance() -> advance
    boolean nextInChain() -> nextInChain
    boolean nextInTable() -> nextInTable
    boolean advanceTo(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> advanceTo
    boolean hasNext() -> hasNext
    com.google.common.collect.MapMakerInternalMap$WriteThroughEntry nextEntry() -> nextEntry
    void remove() -> remove
com.google.common.collect.MapMakerInternalMap$KeyIterator -> com.google.common.collect.MapMakerInternalMap$KeyIterator:
    com.google.common.collect.MapMakerInternalMap this$0 -> this$0
    void <init>(com.google.common.collect.MapMakerInternalMap) -> <init>
    java.lang.Object next() -> next
com.google.common.collect.MapMakerInternalMap$KeySet -> com.google.common.collect.MapMakerInternalMap$KeySet:
    com.google.common.collect.MapMakerInternalMap this$0 -> this$0
    void <init>(com.google.common.collect.MapMakerInternalMap) -> <init>
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
com.google.common.collect.MapMakerInternalMap$NullEntry -> com.google.common.collect.MapMakerInternalMap$NullEntry:
    com.google.common.collect.MapMakerInternalMap$NullEntry INSTANCE -> INSTANCE
    com.google.common.collect.MapMakerInternalMap$NullEntry[] $VALUES -> $VALUES
    com.google.common.collect.MapMakerInternalMap$NullEntry[] values() -> values
    com.google.common.collect.MapMakerInternalMap$NullEntry valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    com.google.common.collect.MapMakerInternalMap$ValueReference getValueReference() -> getValueReference
    void setValueReference(com.google.common.collect.MapMakerInternalMap$ValueReference) -> setValueReference
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNext() -> getNext
    int getHash() -> getHash
    java.lang.Object getKey() -> getKey
    long getExpirationTime() -> getExpirationTime
    void setExpirationTime(long) -> setExpirationTime
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable() -> getNextExpirable
    void setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable() -> getPreviousExpirable
    void setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable() -> getNextEvictable
    void setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable() -> getPreviousEvictable
    void setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousEvictable
    void <clinit>() -> <clinit>
com.google.common.collect.MapMakerInternalMap$ReferenceEntry -> com.google.common.collect.MapMakerInternalMap$ReferenceEntry:
    com.google.common.collect.MapMakerInternalMap$ValueReference getValueReference() -> getValueReference
    void setValueReference(com.google.common.collect.MapMakerInternalMap$ValueReference) -> setValueReference
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNext() -> getNext
    int getHash() -> getHash
    java.lang.Object getKey() -> getKey
    long getExpirationTime() -> getExpirationTime
    void setExpirationTime(long) -> setExpirationTime
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable() -> getNextExpirable
    void setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable() -> getPreviousExpirable
    void setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable() -> getNextEvictable
    void setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable() -> getPreviousEvictable
    void setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousEvictable
com.google.common.collect.MapMakerInternalMap$Segment -> com.google.common.collect.MapMakerInternalMap$Segment:
    com.google.common.collect.MapMakerInternalMap map -> map
    int count -> count
    int modCount -> modCount
    int threshold -> threshold
    java.util.concurrent.atomic.AtomicReferenceArray table -> table
    int maxSegmentSize -> maxSegmentSize
    java.lang.ref.ReferenceQueue keyReferenceQueue -> keyReferenceQueue
    java.lang.ref.ReferenceQueue valueReferenceQueue -> valueReferenceQueue
    java.util.Queue recencyQueue -> recencyQueue
    java.util.concurrent.atomic.AtomicInteger readCount -> readCount
    java.util.Queue evictionQueue -> evictionQueue
    java.util.Queue expirationQueue -> expirationQueue
    void <init>(com.google.common.collect.MapMakerInternalMap,int,int) -> <init>
    java.util.concurrent.atomic.AtomicReferenceArray newEntryArray(int) -> newEntryArray
    void initTable(java.util.concurrent.atomic.AtomicReferenceArray) -> initTable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry newEntry(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> newEntry
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry copyEntry(com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyEntry
    void setValue(com.google.common.collect.MapMakerInternalMap$ReferenceEntry,java.lang.Object) -> setValue
    void tryDrainReferenceQueues() -> tryDrainReferenceQueues
    void drainReferenceQueues() -> drainReferenceQueues
    void drainKeyReferenceQueue() -> drainKeyReferenceQueue
    void drainValueReferenceQueue() -> drainValueReferenceQueue
    void clearReferenceQueues() -> clearReferenceQueues
    void clearKeyReferenceQueue() -> clearKeyReferenceQueue
    void clearValueReferenceQueue() -> clearValueReferenceQueue
    void recordRead(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> recordRead
    void recordLockedRead(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> recordLockedRead
    void recordWrite(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> recordWrite
    void drainRecencyQueue() -> drainRecencyQueue
    void recordExpirationTime(com.google.common.collect.MapMakerInternalMap$ReferenceEntry,long) -> recordExpirationTime
    void tryExpireEntries() -> tryExpireEntries
    void expireEntries() -> expireEntries
    void enqueueNotification(com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMaker$RemovalCause) -> enqueueNotification
    void enqueueNotification(java.lang.Object,int,java.lang.Object,com.google.common.collect.MapMaker$RemovalCause) -> enqueueNotification
    boolean evictEntries() -> evictEntries
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getFirst(int) -> getFirst
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry(java.lang.Object,int) -> getEntry
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getLiveEntry(java.lang.Object,int) -> getLiveEntry
    java.lang.Object get(java.lang.Object,int) -> get
    boolean containsKey(java.lang.Object,int) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean) -> put
    void expand() -> expand
    boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object) -> replace
    java.lang.Object replace(java.lang.Object,int,java.lang.Object) -> replace
    java.lang.Object remove(java.lang.Object,int) -> remove
    boolean remove(java.lang.Object,int,java.lang.Object) -> remove
    void clear() -> clear
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry removeFromChain(com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> removeFromChain
    void removeCollectedEntry(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> removeCollectedEntry
    boolean reclaimKey(com.google.common.collect.MapMakerInternalMap$ReferenceEntry,int) -> reclaimKey
    boolean reclaimValue(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ValueReference) -> reclaimValue
    boolean clearValue(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ValueReference) -> clearValue
    boolean removeEntry(com.google.common.collect.MapMakerInternalMap$ReferenceEntry,int,com.google.common.collect.MapMaker$RemovalCause) -> removeEntry
    boolean isCollected(com.google.common.collect.MapMakerInternalMap$ValueReference) -> isCollected
    java.lang.Object getLiveValue(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> getLiveValue
    void postReadCleanup() -> postReadCleanup
    void preWriteCleanup() -> preWriteCleanup
    void postWriteCleanup() -> postWriteCleanup
    void runCleanup() -> runCleanup
    void runLockedCleanup() -> runLockedCleanup
    void runUnlockedCleanup() -> runUnlockedCleanup
com.google.common.collect.MapMakerInternalMap$SerializationProxy -> com.google.common.collect.MapMakerInternalMap$SerializationProxy:
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.base.Equivalence,com.google.common.base.Equivalence,long,long,int,int,com.google.common.collect.MapMaker$RemovalListener,java.util.concurrent.ConcurrentMap) -> <init>
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.MapMakerInternalMap$SoftValueReference -> com.google.common.collect.MapMakerInternalMap$SoftValueReference:
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry entry -> entry
    void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> <init>
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry() -> getEntry
    void clear(com.google.common.collect.MapMakerInternalMap$ValueReference) -> clear
    com.google.common.collect.MapMakerInternalMap$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyFor
    boolean isComputingReference() -> isComputingReference
    java.lang.Object waitForValue() -> waitForValue
com.google.common.collect.MapMakerInternalMap$Strength -> com.google.common.collect.MapMakerInternalMap$Strength:
    com.google.common.collect.MapMakerInternalMap$Strength STRONG -> STRONG
    com.google.common.collect.MapMakerInternalMap$Strength SOFT -> SOFT
    com.google.common.collect.MapMakerInternalMap$Strength WEAK -> WEAK
    com.google.common.collect.MapMakerInternalMap$Strength[] $VALUES -> $VALUES
    com.google.common.collect.MapMakerInternalMap$Strength[] values() -> values
    com.google.common.collect.MapMakerInternalMap$Strength valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    com.google.common.collect.MapMakerInternalMap$ValueReference referenceValue(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$ReferenceEntry,java.lang.Object) -> referenceValue
    com.google.common.base.Equivalence defaultEquivalence() -> defaultEquivalence
    void <init>(java.lang.String,int,com.google.common.collect.MapMakerInternalMap$1) -> <init>
    void <clinit>() -> <clinit>
com.google.common.collect.MapMakerInternalMap$Strength$1 -> com.google.common.collect.MapMakerInternalMap$Strength$1:
    void <init>(java.lang.String,int) -> <init>
    com.google.common.collect.MapMakerInternalMap$ValueReference referenceValue(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$ReferenceEntry,java.lang.Object) -> referenceValue
    com.google.common.base.Equivalence defaultEquivalence() -> defaultEquivalence
com.google.common.collect.MapMakerInternalMap$Strength$2 -> com.google.common.collect.MapMakerInternalMap$Strength$2:
    void <init>(java.lang.String,int) -> <init>
    com.google.common.collect.MapMakerInternalMap$ValueReference referenceValue(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$ReferenceEntry,java.lang.Object) -> referenceValue
    com.google.common.base.Equivalence defaultEquivalence() -> defaultEquivalence
com.google.common.collect.MapMakerInternalMap$Strength$3 -> com.google.common.collect.MapMakerInternalMap$Strength$3:
    void <init>(java.lang.String,int) -> <init>
    com.google.common.collect.MapMakerInternalMap$ValueReference referenceValue(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$ReferenceEntry,java.lang.Object) -> referenceValue
    com.google.common.base.Equivalence defaultEquivalence() -> defaultEquivalence
com.google.common.collect.MapMakerInternalMap$StrongEntry -> com.google.common.collect.MapMakerInternalMap$StrongEntry:
    java.lang.Object key -> key
    int hash -> hash
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry next -> next
    com.google.common.collect.MapMakerInternalMap$ValueReference valueReference -> valueReference
    void <init>(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> <init>
    java.lang.Object getKey() -> getKey
    long getExpirationTime() -> getExpirationTime
    void setExpirationTime(long) -> setExpirationTime
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable() -> getNextExpirable
    void setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable() -> getPreviousExpirable
    void setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable() -> getNextEvictable
    void setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable() -> getPreviousEvictable
    void setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousEvictable
    com.google.common.collect.MapMakerInternalMap$ValueReference getValueReference() -> getValueReference
    void setValueReference(com.google.common.collect.MapMakerInternalMap$ValueReference) -> setValueReference
    int getHash() -> getHash
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNext() -> getNext
com.google.common.collect.MapMakerInternalMap$StrongEvictableEntry -> com.google.common.collect.MapMakerInternalMap$StrongEvictableEntry:
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry nextEvictable -> nextEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry previousEvictable -> previousEvictable
    void <init>(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> <init>
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable() -> getNextEvictable
    void setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable() -> getPreviousEvictable
    void setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousEvictable
com.google.common.collect.MapMakerInternalMap$StrongExpirableEntry -> com.google.common.collect.MapMakerInternalMap$StrongExpirableEntry:
    long time -> time
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry nextExpirable -> nextExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry previousExpirable -> previousExpirable
    void <init>(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> <init>
    long getExpirationTime() -> getExpirationTime
    void setExpirationTime(long) -> setExpirationTime
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable() -> getNextExpirable
    void setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable() -> getPreviousExpirable
    void setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousExpirable
com.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry -> com.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry:
    long time -> time
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry nextExpirable -> nextExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry previousExpirable -> previousExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry nextEvictable -> nextEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry previousEvictable -> previousEvictable
    void <init>(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> <init>
    long getExpirationTime() -> getExpirationTime
    void setExpirationTime(long) -> setExpirationTime
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable() -> getNextExpirable
    void setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable() -> getPreviousExpirable
    void setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable() -> getNextEvictable
    void setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable() -> getPreviousEvictable
    void setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousEvictable
com.google.common.collect.MapMakerInternalMap$StrongValueReference -> com.google.common.collect.MapMakerInternalMap$StrongValueReference:
    java.lang.Object referent -> referent
    void <init>(java.lang.Object) -> <init>
    java.lang.Object get() -> get
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry() -> getEntry
    com.google.common.collect.MapMakerInternalMap$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyFor
    boolean isComputingReference() -> isComputingReference
    java.lang.Object waitForValue() -> waitForValue
    void clear(com.google.common.collect.MapMakerInternalMap$ValueReference) -> clear
com.google.common.collect.MapMakerInternalMap$ValueIterator -> com.google.common.collect.MapMakerInternalMap$ValueIterator:
    com.google.common.collect.MapMakerInternalMap this$0 -> this$0
    void <init>(com.google.common.collect.MapMakerInternalMap) -> <init>
    java.lang.Object next() -> next
com.google.common.collect.MapMakerInternalMap$ValueReference -> com.google.common.collect.MapMakerInternalMap$ValueReference:
    java.lang.Object get() -> get
    java.lang.Object waitForValue() -> waitForValue
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry() -> getEntry
    com.google.common.collect.MapMakerInternalMap$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyFor
    void clear(com.google.common.collect.MapMakerInternalMap$ValueReference) -> clear
    boolean isComputingReference() -> isComputingReference
com.google.common.collect.MapMakerInternalMap$Values -> com.google.common.collect.MapMakerInternalMap$Values:
    com.google.common.collect.MapMakerInternalMap this$0 -> this$0
    void <init>(com.google.common.collect.MapMakerInternalMap) -> <init>
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    void clear() -> clear
com.google.common.collect.MapMakerInternalMap$WeakEntry -> com.google.common.collect.MapMakerInternalMap$WeakEntry:
    int hash -> hash
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry next -> next
    com.google.common.collect.MapMakerInternalMap$ValueReference valueReference -> valueReference
    void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> <init>
    java.lang.Object getKey() -> getKey
    long getExpirationTime() -> getExpirationTime
    void setExpirationTime(long) -> setExpirationTime
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable() -> getNextExpirable
    void setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable() -> getPreviousExpirable
    void setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable() -> getNextEvictable
    void setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable() -> getPreviousEvictable
    void setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousEvictable
    com.google.common.collect.MapMakerInternalMap$ValueReference getValueReference() -> getValueReference
    void setValueReference(com.google.common.collect.MapMakerInternalMap$ValueReference) -> setValueReference
    int getHash() -> getHash
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNext() -> getNext
com.google.common.collect.MapMakerInternalMap$WeakEvictableEntry -> com.google.common.collect.MapMakerInternalMap$WeakEvictableEntry:
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry nextEvictable -> nextEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry previousEvictable -> previousEvictable
    void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> <init>
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable() -> getNextEvictable
    void setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable() -> getPreviousEvictable
    void setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousEvictable
com.google.common.collect.MapMakerInternalMap$WeakExpirableEntry -> com.google.common.collect.MapMakerInternalMap$WeakExpirableEntry:
    long time -> time
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry nextExpirable -> nextExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry previousExpirable -> previousExpirable
    void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> <init>
    long getExpirationTime() -> getExpirationTime
    void setExpirationTime(long) -> setExpirationTime
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable() -> getNextExpirable
    void setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable() -> getPreviousExpirable
    void setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousExpirable
com.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry -> com.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry:
    long time -> time
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry nextExpirable -> nextExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry previousExpirable -> previousExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry nextEvictable -> nextEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry previousEvictable -> previousEvictable
    void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> <init>
    long getExpirationTime() -> getExpirationTime
    void setExpirationTime(long) -> setExpirationTime
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable() -> getNextExpirable
    void setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable() -> getPreviousExpirable
    void setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable() -> getNextEvictable
    void setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable() -> getPreviousEvictable
    void setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousEvictable
com.google.common.collect.MapMakerInternalMap$WeakValueReference -> com.google.common.collect.MapMakerInternalMap$WeakValueReference:
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry entry -> entry
    void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> <init>
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry() -> getEntry
    void clear(com.google.common.collect.MapMakerInternalMap$ValueReference) -> clear
    com.google.common.collect.MapMakerInternalMap$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyFor
    boolean isComputingReference() -> isComputingReference
    java.lang.Object waitForValue() -> waitForValue
com.google.common.collect.MapMakerInternalMap$WriteThroughEntry -> com.google.common.collect.MapMakerInternalMap$WriteThroughEntry:
    java.lang.Object key -> key
    java.lang.Object value -> value
    com.google.common.collect.MapMakerInternalMap this$0 -> this$0
    void <init>(com.google.common.collect.MapMakerInternalMap,java.lang.Object,java.lang.Object) -> <init>
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object setValue(java.lang.Object) -> setValue
com.google.common.collect.Maps -> com.google.common.collect.Maps:
    com.google.common.base.Joiner$MapJoiner STANDARD_JOINER -> STANDARD_JOINER
    void <init>() -> <init>
    com.google.common.base.Function keyFunction() -> keyFunction
    com.google.common.base.Function valueFunction() -> valueFunction
    java.util.Iterator keyIterator(java.util.Iterator) -> keyIterator
    java.util.Iterator valueIterator(java.util.Iterator) -> valueIterator
    com.google.common.collect.UnmodifiableIterator valueIterator(com.google.common.collect.UnmodifiableIterator) -> valueIterator
    com.google.common.collect.ImmutableMap immutableEnumMap(java.util.Map) -> immutableEnumMap
    java.util.HashMap newHashMap() -> newHashMap
    java.util.HashMap newHashMapWithExpectedSize(int) -> newHashMapWithExpectedSize
    int capacity(int) -> capacity
    java.util.HashMap newHashMap(java.util.Map) -> newHashMap
    java.util.LinkedHashMap newLinkedHashMap() -> newLinkedHashMap
    java.util.LinkedHashMap newLinkedHashMap(java.util.Map) -> newLinkedHashMap
    java.util.concurrent.ConcurrentMap newConcurrentMap() -> newConcurrentMap
    java.util.TreeMap newTreeMap() -> newTreeMap
    java.util.TreeMap newTreeMap(java.util.SortedMap) -> newTreeMap
    java.util.TreeMap newTreeMap(java.util.Comparator) -> newTreeMap
    java.util.EnumMap newEnumMap(java.lang.Class) -> newEnumMap
    java.util.EnumMap newEnumMap(java.util.Map) -> newEnumMap
    java.util.IdentityHashMap newIdentityHashMap() -> newIdentityHashMap
    com.google.common.collect.MapDifference difference(java.util.Map,java.util.Map) -> difference
    com.google.common.collect.MapDifference difference(java.util.Map,java.util.Map,com.google.common.base.Equivalence) -> difference
    void doDifference(java.util.Map,java.util.Map,com.google.common.base.Equivalence,java.util.Map,java.util.Map,java.util.Map,java.util.Map) -> doDifference
    java.util.Map unmodifiableMap(java.util.Map) -> unmodifiableMap
    com.google.common.collect.SortedMapDifference difference(java.util.SortedMap,java.util.Map) -> difference
    java.util.Comparator orNaturalOrder(java.util.Comparator) -> orNaturalOrder
    java.util.Map asMap(java.util.Set,com.google.common.base.Function) -> asMap
    java.util.SortedMap asMap(java.util.SortedSet,com.google.common.base.Function) -> asMap
    java.util.SortedMap asMapSortedIgnoreNavigable(java.util.SortedSet,com.google.common.base.Function) -> asMapSortedIgnoreNavigable
    java.util.NavigableMap asMap(java.util.NavigableSet,com.google.common.base.Function) -> asMap
    java.util.Iterator asMapEntryIterator(java.util.Set,com.google.common.base.Function) -> asMapEntryIterator
    java.util.Set removeOnlySet(java.util.Set) -> removeOnlySet
    java.util.SortedSet removeOnlySortedSet(java.util.SortedSet) -> removeOnlySortedSet
    java.util.NavigableSet removeOnlyNavigableSet(java.util.NavigableSet) -> removeOnlyNavigableSet
    com.google.common.collect.ImmutableMap toMap(java.lang.Iterable,com.google.common.base.Function) -> toMap
    com.google.common.collect.ImmutableMap toMap(java.util.Iterator,com.google.common.base.Function) -> toMap
    com.google.common.collect.ImmutableMap uniqueIndex(java.lang.Iterable,com.google.common.base.Function) -> uniqueIndex
    com.google.common.collect.ImmutableMap uniqueIndex(java.util.Iterator,com.google.common.base.Function) -> uniqueIndex
    com.google.common.collect.ImmutableMap fromProperties(java.util.Properties) -> fromProperties
    java.util.Map$Entry immutableEntry(java.lang.Object,java.lang.Object) -> immutableEntry
    java.util.Set unmodifiableEntrySet(java.util.Set) -> unmodifiableEntrySet
    java.util.Map$Entry unmodifiableEntry(java.util.Map$Entry) -> unmodifiableEntry
    com.google.common.collect.BiMap synchronizedBiMap(com.google.common.collect.BiMap) -> synchronizedBiMap
    com.google.common.collect.BiMap unmodifiableBiMap(com.google.common.collect.BiMap) -> unmodifiableBiMap
    java.util.Map transformValues(java.util.Map,com.google.common.base.Function) -> transformValues
    java.util.SortedMap transformValues(java.util.SortedMap,com.google.common.base.Function) -> transformValues
    java.util.NavigableMap transformValues(java.util.NavigableMap,com.google.common.base.Function) -> transformValues
    java.util.Map transformEntries(java.util.Map,com.google.common.collect.Maps$EntryTransformer) -> transformEntries
    java.util.SortedMap transformEntries(java.util.SortedMap,com.google.common.collect.Maps$EntryTransformer) -> transformEntries
    java.util.NavigableMap transformEntries(java.util.NavigableMap,com.google.common.collect.Maps$EntryTransformer) -> transformEntries
    java.util.SortedMap transformEntriesIgnoreNavigable(java.util.SortedMap,com.google.common.collect.Maps$EntryTransformer) -> transformEntriesIgnoreNavigable
    com.google.common.collect.Maps$EntryTransformer asEntryTransformer(com.google.common.base.Function) -> asEntryTransformer
    com.google.common.base.Function asValueToValueFunction(com.google.common.collect.Maps$EntryTransformer,java.lang.Object) -> asValueToValueFunction
    com.google.common.base.Function asEntryToValueFunction(com.google.common.collect.Maps$EntryTransformer) -> asEntryToValueFunction
    java.util.Map$Entry transformEntry(com.google.common.collect.Maps$EntryTransformer,java.util.Map$Entry) -> transformEntry
    com.google.common.base.Function asEntryToEntryFunction(com.google.common.collect.Maps$EntryTransformer) -> asEntryToEntryFunction
    com.google.common.base.Predicate keyPredicateOnEntries(com.google.common.base.Predicate) -> keyPredicateOnEntries
    com.google.common.base.Predicate valuePredicateOnEntries(com.google.common.base.Predicate) -> valuePredicateOnEntries
    java.util.Map filterKeys(java.util.Map,com.google.common.base.Predicate) -> filterKeys
    java.util.SortedMap filterKeys(java.util.SortedMap,com.google.common.base.Predicate) -> filterKeys
    java.util.NavigableMap filterKeys(java.util.NavigableMap,com.google.common.base.Predicate) -> filterKeys
    com.google.common.collect.BiMap filterKeys(com.google.common.collect.BiMap,com.google.common.base.Predicate) -> filterKeys
    java.util.Map filterValues(java.util.Map,com.google.common.base.Predicate) -> filterValues
    java.util.SortedMap filterValues(java.util.SortedMap,com.google.common.base.Predicate) -> filterValues
    java.util.NavigableMap filterValues(java.util.NavigableMap,com.google.common.base.Predicate) -> filterValues
    com.google.common.collect.BiMap filterValues(com.google.common.collect.BiMap,com.google.common.base.Predicate) -> filterValues
    java.util.Map filterEntries(java.util.Map,com.google.common.base.Predicate) -> filterEntries
    java.util.SortedMap filterEntries(java.util.SortedMap,com.google.common.base.Predicate) -> filterEntries
    java.util.SortedMap filterSortedIgnoreNavigable(java.util.SortedMap,com.google.common.base.Predicate) -> filterSortedIgnoreNavigable
    java.util.NavigableMap filterEntries(java.util.NavigableMap,com.google.common.base.Predicate) -> filterEntries
    com.google.common.collect.BiMap filterEntries(com.google.common.collect.BiMap,com.google.common.base.Predicate) -> filterEntries
    java.util.Map filterFiltered(com.google.common.collect.Maps$AbstractFilteredMap,com.google.common.base.Predicate) -> filterFiltered
    java.util.SortedMap filterFiltered(com.google.common.collect.Maps$FilteredEntrySortedMap,com.google.common.base.Predicate) -> filterFiltered
    java.util.NavigableMap filterFiltered(com.google.common.collect.Maps$FilteredEntryNavigableMap,com.google.common.base.Predicate) -> filterFiltered
    com.google.common.collect.BiMap filterFiltered(com.google.common.collect.Maps$FilteredEntryBiMap,com.google.common.base.Predicate) -> filterFiltered
    java.util.NavigableMap unmodifiableNavigableMap(java.util.NavigableMap) -> unmodifiableNavigableMap
    java.util.Map$Entry unmodifiableOrNull(java.util.Map$Entry) -> unmodifiableOrNull
    java.util.NavigableMap synchronizedNavigableMap(java.util.NavigableMap) -> synchronizedNavigableMap
    java.lang.Object safeGet(java.util.Map,java.lang.Object) -> safeGet
    boolean safeContainsKey(java.util.Map,java.lang.Object) -> safeContainsKey
    java.lang.Object safeRemove(java.util.Map,java.lang.Object) -> safeRemove
    boolean containsKeyImpl(java.util.Map,java.lang.Object) -> containsKeyImpl
    boolean containsValueImpl(java.util.Map,java.lang.Object) -> containsValueImpl
    boolean containsEntryImpl(java.util.Collection,java.lang.Object) -> containsEntryImpl
    boolean removeEntryImpl(java.util.Collection,java.lang.Object) -> removeEntryImpl
    boolean equalsImpl(java.util.Map,java.lang.Object) -> equalsImpl
    java.lang.String toStringImpl(java.util.Map) -> toStringImpl
    void putAllImpl(java.util.Map,java.util.Map) -> putAllImpl
    java.lang.Object keyOrNull(java.util.Map$Entry) -> keyOrNull
    java.lang.Object valueOrNull(java.util.Map$Entry) -> valueOrNull
    java.util.Map access$100(java.util.Map) -> access$100
    java.util.Set access$200(java.util.Set) -> access$200
    java.util.SortedSet access$300(java.util.SortedSet) -> access$300
    java.util.NavigableSet access$400(java.util.NavigableSet) -> access$400
    java.util.Map$Entry access$800(java.util.Map$Entry) -> access$800
    void <clinit>() -> <clinit>
com.google.common.collect.Maps$1 -> com.google.common.collect.Maps$1:
    com.google.common.collect.UnmodifiableIterator val$entryIterator -> val$entryIterator
    void <init>(com.google.common.collect.UnmodifiableIterator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.Maps$10 -> com.google.common.collect.Maps$10:
    java.util.Map$Entry val$entry -> val$entry
    com.google.common.collect.Maps$EntryTransformer val$transformer -> val$transformer
    void <init>(java.util.Map$Entry,com.google.common.collect.Maps$EntryTransformer) -> <init>
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
com.google.common.collect.Maps$11 -> com.google.common.collect.Maps$11:
    com.google.common.collect.Maps$EntryTransformer val$transformer -> val$transformer
    void <init>(com.google.common.collect.Maps$EntryTransformer) -> <init>
    java.util.Map$Entry apply(java.util.Map$Entry) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Maps$2 -> com.google.common.collect.Maps$2:
    com.google.common.base.Function val$function -> val$function
    void <init>(java.util.Iterator,com.google.common.base.Function) -> <init>
    java.util.Map$Entry transform(java.lang.Object) -> transform
    java.lang.Object transform(java.lang.Object) -> transform
com.google.common.collect.Maps$3 -> com.google.common.collect.Maps$3:
    java.util.Set val$set -> val$set
    void <init>(java.util.Set) -> <init>
    java.util.Set delegate() -> delegate
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Maps$4 -> com.google.common.collect.Maps$4:
    java.util.SortedSet val$set -> val$set
    void <init>(java.util.SortedSet) -> <init>
    java.util.SortedSet delegate() -> delegate
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.util.Set delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Maps$5 -> com.google.common.collect.Maps$5:
    java.util.NavigableSet val$set -> val$set
    void <init>(java.util.NavigableSet) -> <init>
    java.util.NavigableSet delegate() -> delegate
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    java.util.NavigableSet descendingSet() -> descendingSet
    java.util.SortedSet delegate() -> delegate
    java.util.Set delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Maps$6 -> com.google.common.collect.Maps$6:
    java.util.Map$Entry val$entry -> val$entry
    void <init>(java.util.Map$Entry) -> <init>
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
com.google.common.collect.Maps$7 -> com.google.common.collect.Maps$7:
    com.google.common.base.Function val$function -> val$function
    void <init>(com.google.common.base.Function) -> <init>
    java.lang.Object transformEntry(java.lang.Object,java.lang.Object) -> transformEntry
com.google.common.collect.Maps$8 -> com.google.common.collect.Maps$8:
    com.google.common.collect.Maps$EntryTransformer val$transformer -> val$transformer
    java.lang.Object val$key -> val$key
    void <init>(com.google.common.collect.Maps$EntryTransformer,java.lang.Object) -> <init>
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Maps$9 -> com.google.common.collect.Maps$9:
    com.google.common.collect.Maps$EntryTransformer val$transformer -> val$transformer
    void <init>(com.google.common.collect.Maps$EntryTransformer) -> <init>
    java.lang.Object apply(java.util.Map$Entry) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Maps$AbstractFilteredMap -> com.google.common.collect.Maps$AbstractFilteredMap:
    java.util.Map unfiltered -> unfiltered
    com.google.common.base.Predicate predicate -> predicate
    void <init>(java.util.Map,com.google.common.base.Predicate) -> <init>
    boolean apply(java.lang.Object,java.lang.Object) -> apply
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    void putAll(java.util.Map) -> putAll
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(java.lang.Object) -> get
    boolean isEmpty() -> isEmpty
    java.lang.Object remove(java.lang.Object) -> remove
    java.util.Collection createValues() -> createValues
com.google.common.collect.Maps$AsMapView -> com.google.common.collect.Maps$AsMapView:
    java.util.Set set -> set
    com.google.common.base.Function function -> function
    java.util.Set backingSet() -> backingSet
    void <init>(java.util.Set,com.google.common.base.Function) -> <init>
    java.util.Set createKeySet() -> createKeySet
    java.util.Collection createValues() -> createValues
    int size() -> size
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object remove(java.lang.Object) -> remove
    void clear() -> clear
    java.util.Set createEntrySet() -> createEntrySet
com.google.common.collect.Maps$AsMapView$1 -> com.google.common.collect.Maps$AsMapView$1:
    com.google.common.collect.Maps$AsMapView this$0 -> this$0
    void <init>(com.google.common.collect.Maps$AsMapView) -> <init>
    java.util.Map map() -> map
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Maps$DescendingMap -> com.google.common.collect.Maps$DescendingMap:
    java.util.Comparator comparator -> comparator
    java.util.Set entrySet -> entrySet
    java.util.NavigableSet navigableKeySet -> navigableKeySet
    void <init>() -> <init>
    java.util.NavigableMap forward() -> forward
    java.util.Map delegate() -> delegate
    java.util.Comparator comparator() -> comparator
    com.google.common.collect.Ordering reverse(java.util.Comparator) -> reverse
    java.lang.Object firstKey() -> firstKey
    java.lang.Object lastKey() -> lastKey
    java.util.Map$Entry lowerEntry(java.lang.Object) -> lowerEntry
    java.lang.Object lowerKey(java.lang.Object) -> lowerKey
    java.util.Map$Entry floorEntry(java.lang.Object) -> floorEntry
    java.lang.Object floorKey(java.lang.Object) -> floorKey
    java.util.Map$Entry ceilingEntry(java.lang.Object) -> ceilingEntry
    java.lang.Object ceilingKey(java.lang.Object) -> ceilingKey
    java.util.Map$Entry higherEntry(java.lang.Object) -> higherEntry
    java.lang.Object higherKey(java.lang.Object) -> higherKey
    java.util.Map$Entry firstEntry() -> firstEntry
    java.util.Map$Entry lastEntry() -> lastEntry
    java.util.Map$Entry pollFirstEntry() -> pollFirstEntry
    java.util.Map$Entry pollLastEntry() -> pollLastEntry
    java.util.NavigableMap descendingMap() -> descendingMap
    java.util.Set entrySet() -> entrySet
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Set createEntrySet() -> createEntrySet
    java.util.Set keySet() -> keySet
    java.util.NavigableSet navigableKeySet() -> navigableKeySet
    java.util.NavigableSet descendingKeySet() -> descendingKeySet
    java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.util.Collection values() -> values
    java.lang.String toString() -> toString
    java.lang.Object delegate() -> delegate
com.google.common.collect.Maps$DescendingMap$1 -> com.google.common.collect.Maps$DescendingMap$1:
    com.google.common.collect.Maps$DescendingMap this$0 -> this$0
    void <init>(com.google.common.collect.Maps$DescendingMap) -> <init>
    java.util.Map map() -> map
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Maps$EntryFunction -> com.google.common.collect.Maps$EntryFunction:
    com.google.common.collect.Maps$EntryFunction KEY -> KEY
    com.google.common.collect.Maps$EntryFunction VALUE -> VALUE
    com.google.common.collect.Maps$EntryFunction[] $VALUES -> $VALUES
    com.google.common.collect.Maps$EntryFunction[] values() -> values
    com.google.common.collect.Maps$EntryFunction valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <init>(java.lang.String,int,com.google.common.collect.Maps$1) -> <init>
    void <clinit>() -> <clinit>
com.google.common.collect.Maps$EntryFunction$1 -> com.google.common.collect.Maps$EntryFunction$1:
    void <init>(java.lang.String,int) -> <init>
    java.lang.Object apply(java.util.Map$Entry) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Maps$EntryFunction$2 -> com.google.common.collect.Maps$EntryFunction$2:
    void <init>(java.lang.String,int) -> <init>
    java.lang.Object apply(java.util.Map$Entry) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Maps$EntrySet -> com.google.common.collect.Maps$EntrySet:
    void <init>() -> <init>
    java.util.Map map() -> map
    int size() -> size
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean isEmpty() -> isEmpty
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.Maps$EntryTransformer -> com.google.common.collect.Maps$EntryTransformer:
    java.lang.Object transformEntry(java.lang.Object,java.lang.Object) -> transformEntry
com.google.common.collect.Maps$FilteredEntryBiMap -> com.google.common.collect.Maps$FilteredEntryBiMap:
    com.google.common.collect.BiMap inverse -> inverse
    com.google.common.base.Predicate inversePredicate(com.google.common.base.Predicate) -> inversePredicate
    void <init>(com.google.common.collect.BiMap,com.google.common.base.Predicate) -> <init>
    void <init>(com.google.common.collect.BiMap,com.google.common.base.Predicate,com.google.common.collect.BiMap) -> <init>
    com.google.common.collect.BiMap unfiltered() -> unfiltered
    java.lang.Object forcePut(java.lang.Object,java.lang.Object) -> forcePut
    com.google.common.collect.BiMap inverse() -> inverse
    java.util.Set values() -> values
    java.util.Collection values() -> values
com.google.common.collect.Maps$FilteredEntryBiMap$1 -> com.google.common.collect.Maps$FilteredEntryBiMap$1:
    com.google.common.base.Predicate val$forwardPredicate -> val$forwardPredicate
    void <init>(com.google.common.base.Predicate) -> <init>
    boolean apply(java.util.Map$Entry) -> apply
    boolean apply(java.lang.Object) -> apply
com.google.common.collect.Maps$FilteredEntryMap -> com.google.common.collect.Maps$FilteredEntryMap:
    java.util.Set filteredEntrySet -> filteredEntrySet
    void <init>(java.util.Map,com.google.common.base.Predicate) -> <init>
    java.util.Set createEntrySet() -> createEntrySet
    java.util.Set createKeySet() -> createKeySet
com.google.common.collect.Maps$FilteredEntryMap$EntrySet -> com.google.common.collect.Maps$FilteredEntryMap$EntrySet:
    com.google.common.collect.Maps$FilteredEntryMap this$0 -> this$0
    void <init>(com.google.common.collect.Maps$FilteredEntryMap) -> <init>
    java.util.Set delegate() -> delegate
    java.util.Iterator iterator() -> iterator
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
    void <init>(com.google.common.collect.Maps$FilteredEntryMap,com.google.common.collect.Maps$1) -> <init>
com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1 -> com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1:
    com.google.common.collect.Maps$FilteredEntryMap$EntrySet this$1 -> this$1
    void <init>(com.google.common.collect.Maps$FilteredEntryMap$EntrySet,java.util.Iterator) -> <init>
    java.util.Map$Entry transform(java.util.Map$Entry) -> transform
    java.lang.Object transform(java.lang.Object) -> transform
com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1$1 -> com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1$1:
    java.util.Map$Entry val$entry -> val$entry
    com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1 this$2 -> this$2
    void <init>(com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1,java.util.Map$Entry) -> <init>
    java.util.Map$Entry delegate() -> delegate
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object delegate() -> delegate
com.google.common.collect.Maps$FilteredEntryMap$KeySet -> com.google.common.collect.Maps$FilteredEntryMap$KeySet:
    com.google.common.collect.Maps$FilteredEntryMap this$0 -> this$0
    void <init>(com.google.common.collect.Maps$FilteredEntryMap) -> <init>
    boolean remove(java.lang.Object) -> remove
    boolean removeIf(com.google.common.base.Predicate) -> removeIf
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
com.google.common.collect.Maps$FilteredEntryNavigableMap -> com.google.common.collect.Maps$FilteredEntryNavigableMap:
    java.util.NavigableMap unfiltered -> unfiltered
    com.google.common.base.Predicate entryPredicate -> entryPredicate
    java.util.Map filteredDelegate -> filteredDelegate
    void <init>(java.util.NavigableMap,com.google.common.base.Predicate) -> <init>
    java.util.Comparator comparator() -> comparator
    java.util.NavigableSet navigableKeySet() -> navigableKeySet
    java.util.Collection values() -> values
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Iterator descendingEntryIterator() -> descendingEntryIterator
    int size() -> size
    java.lang.Object get(java.lang.Object) -> get
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object remove(java.lang.Object) -> remove
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    java.util.Set entrySet() -> entrySet
    java.util.Map$Entry pollFirstEntry() -> pollFirstEntry
    java.util.Map$Entry pollLastEntry() -> pollLastEntry
    java.util.NavigableMap descendingMap() -> descendingMap
    java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    com.google.common.base.Predicate access$600(com.google.common.collect.Maps$FilteredEntryNavigableMap) -> access$600
    java.util.NavigableMap access$700(com.google.common.collect.Maps$FilteredEntryNavigableMap) -> access$700
com.google.common.collect.Maps$FilteredEntryNavigableMap$1 -> com.google.common.collect.Maps$FilteredEntryNavigableMap$1:
    com.google.common.collect.Maps$FilteredEntryNavigableMap this$0 -> this$0
    void <init>(com.google.common.collect.Maps$FilteredEntryNavigableMap,java.util.NavigableMap) -> <init>
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.Maps$FilteredEntrySortedMap -> com.google.common.collect.Maps$FilteredEntrySortedMap:
    void <init>(java.util.SortedMap,com.google.common.base.Predicate) -> <init>
    java.util.SortedMap sortedMap() -> sortedMap
    java.util.SortedSet keySet() -> keySet
    java.util.SortedSet createKeySet() -> createKeySet
    java.util.Comparator comparator() -> comparator
    java.lang.Object firstKey() -> firstKey
    java.lang.Object lastKey() -> lastKey
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.util.Set createKeySet() -> createKeySet
    java.util.Set keySet() -> keySet
com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet -> com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:
    com.google.common.collect.Maps$FilteredEntrySortedMap this$0 -> this$0
    void <init>(com.google.common.collect.Maps$FilteredEntrySortedMap) -> <init>
    java.util.Comparator comparator() -> comparator
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.lang.Object first() -> first
    java.lang.Object last() -> last
com.google.common.collect.Maps$FilteredKeyMap -> com.google.common.collect.Maps$FilteredKeyMap:
    com.google.common.base.Predicate keyPredicate -> keyPredicate
    void <init>(java.util.Map,com.google.common.base.Predicate,com.google.common.base.Predicate) -> <init>
    java.util.Set createEntrySet() -> createEntrySet
    java.util.Set createKeySet() -> createKeySet
    boolean containsKey(java.lang.Object) -> containsKey
com.google.common.collect.Maps$FilteredMapValues -> com.google.common.collect.Maps$FilteredMapValues:
    java.util.Map unfiltered -> unfiltered
    com.google.common.base.Predicate predicate -> predicate
    void <init>(java.util.Map,java.util.Map,com.google.common.base.Predicate) -> <init>
    boolean remove(java.lang.Object) -> remove
    boolean removeIf(com.google.common.base.Predicate) -> removeIf
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
com.google.common.collect.Maps$ImprovedAbstractMap -> com.google.common.collect.Maps$ImprovedAbstractMap:
    java.util.Set entrySet -> entrySet
    java.util.Set keySet -> keySet
    java.util.Collection values -> values
    void <init>() -> <init>
    java.util.Set createEntrySet() -> createEntrySet
    java.util.Set entrySet() -> entrySet
    java.util.Set keySet() -> keySet
    java.util.Set createKeySet() -> createKeySet
    java.util.Collection values() -> values
    java.util.Collection createValues() -> createValues
com.google.common.collect.Maps$KeySet -> com.google.common.collect.Maps$KeySet:
    java.util.Map map -> map
    void <init>(java.util.Map) -> <init>
    java.util.Map map() -> map
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
com.google.common.collect.Maps$MapDifferenceImpl -> com.google.common.collect.Maps$MapDifferenceImpl:
    java.util.Map onlyOnLeft -> onlyOnLeft
    java.util.Map onlyOnRight -> onlyOnRight
    java.util.Map onBoth -> onBoth
    java.util.Map differences -> differences
    void <init>(java.util.Map,java.util.Map,java.util.Map,java.util.Map) -> <init>
    boolean areEqual() -> areEqual
    java.util.Map entriesOnlyOnLeft() -> entriesOnlyOnLeft
    java.util.Map entriesOnlyOnRight() -> entriesOnlyOnRight
    java.util.Map entriesInCommon() -> entriesInCommon
    java.util.Map entriesDiffering() -> entriesDiffering
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.Maps$NavigableAsMapView -> com.google.common.collect.Maps$NavigableAsMapView:
    java.util.NavigableSet set -> set
    com.google.common.base.Function function -> function
    void <init>(java.util.NavigableSet,com.google.common.base.Function) -> <init>
    java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.Comparator comparator() -> comparator
    java.lang.Object get(java.lang.Object) -> get
    void clear() -> clear
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Iterator descendingEntryIterator() -> descendingEntryIterator
    java.util.NavigableSet navigableKeySet() -> navigableKeySet
    int size() -> size
    java.util.NavigableMap descendingMap() -> descendingMap
com.google.common.collect.Maps$NavigableKeySet -> com.google.common.collect.Maps$NavigableKeySet:
    void <init>(java.util.NavigableMap) -> <init>
    java.util.NavigableMap map() -> map
    java.lang.Object lower(java.lang.Object) -> lower
    java.lang.Object floor(java.lang.Object) -> floor
    java.lang.Object ceiling(java.lang.Object) -> ceiling
    java.lang.Object higher(java.lang.Object) -> higher
    java.lang.Object pollFirst() -> pollFirst
    java.lang.Object pollLast() -> pollLast
    java.util.NavigableSet descendingSet() -> descendingSet
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.util.SortedMap map() -> map
    java.util.Map map() -> map
com.google.common.collect.Maps$SortedAsMapView -> com.google.common.collect.Maps$SortedAsMapView:
    void <init>(java.util.SortedSet,com.google.common.base.Function) -> <init>
    java.util.SortedSet backingSet() -> backingSet
    java.util.Comparator comparator() -> comparator
    java.util.Set keySet() -> keySet
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.lang.Object firstKey() -> firstKey
    java.lang.Object lastKey() -> lastKey
    java.util.Set backingSet() -> backingSet
com.google.common.collect.Maps$SortedKeySet -> com.google.common.collect.Maps$SortedKeySet:
    void <init>(java.util.SortedMap) -> <init>
    java.util.SortedMap map() -> map
    java.util.Comparator comparator() -> comparator
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.lang.Object first() -> first
    java.lang.Object last() -> last
    java.util.Map map() -> map
com.google.common.collect.Maps$SortedMapDifferenceImpl -> com.google.common.collect.Maps$SortedMapDifferenceImpl:
    void <init>(java.util.SortedMap,java.util.SortedMap,java.util.SortedMap,java.util.SortedMap) -> <init>
    java.util.SortedMap entriesDiffering() -> entriesDiffering
    java.util.SortedMap entriesInCommon() -> entriesInCommon
    java.util.SortedMap entriesOnlyOnLeft() -> entriesOnlyOnLeft
    java.util.SortedMap entriesOnlyOnRight() -> entriesOnlyOnRight
    java.util.Map entriesDiffering() -> entriesDiffering
    java.util.Map entriesInCommon() -> entriesInCommon
    java.util.Map entriesOnlyOnRight() -> entriesOnlyOnRight
    java.util.Map entriesOnlyOnLeft() -> entriesOnlyOnLeft
com.google.common.collect.Maps$TransformedEntriesMap -> com.google.common.collect.Maps$TransformedEntriesMap:
    java.util.Map fromMap -> fromMap
    com.google.common.collect.Maps$EntryTransformer transformer -> transformer
    void <init>(java.util.Map,com.google.common.collect.Maps$EntryTransformer) -> <init>
    int size() -> size
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object remove(java.lang.Object) -> remove
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.util.Set createEntrySet() -> createEntrySet
com.google.common.collect.Maps$TransformedEntriesMap$1 -> com.google.common.collect.Maps$TransformedEntriesMap$1:
    com.google.common.collect.Maps$TransformedEntriesMap this$0 -> this$0
    void <init>(com.google.common.collect.Maps$TransformedEntriesMap) -> <init>
    java.util.Map map() -> map
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Maps$TransformedEntriesNavigableMap -> com.google.common.collect.Maps$TransformedEntriesNavigableMap:
    void <init>(java.util.NavigableMap,com.google.common.collect.Maps$EntryTransformer) -> <init>
    java.util.Map$Entry ceilingEntry(java.lang.Object) -> ceilingEntry
    java.lang.Object ceilingKey(java.lang.Object) -> ceilingKey
    java.util.NavigableSet descendingKeySet() -> descendingKeySet
    java.util.NavigableMap descendingMap() -> descendingMap
    java.util.Map$Entry firstEntry() -> firstEntry
    java.util.Map$Entry floorEntry(java.lang.Object) -> floorEntry
    java.lang.Object floorKey(java.lang.Object) -> floorKey
    java.util.NavigableMap headMap(java.lang.Object) -> headMap
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.Map$Entry higherEntry(java.lang.Object) -> higherEntry
    java.lang.Object higherKey(java.lang.Object) -> higherKey
    java.util.Map$Entry lastEntry() -> lastEntry
    java.util.Map$Entry lowerEntry(java.lang.Object) -> lowerEntry
    java.lang.Object lowerKey(java.lang.Object) -> lowerKey
    java.util.NavigableSet navigableKeySet() -> navigableKeySet
    java.util.Map$Entry pollFirstEntry() -> pollFirstEntry
    java.util.Map$Entry pollLastEntry() -> pollLastEntry
    java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    java.util.NavigableMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.NavigableMap tailMap(java.lang.Object) -> tailMap
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.Map$Entry transformEntry(java.util.Map$Entry) -> transformEntry
    java.util.NavigableMap fromMap() -> fromMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.util.SortedMap fromMap() -> fromMap
com.google.common.collect.Maps$TransformedEntriesSortedMap -> com.google.common.collect.Maps$TransformedEntriesSortedMap:
    java.util.SortedMap fromMap() -> fromMap
    void <init>(java.util.SortedMap,com.google.common.collect.Maps$EntryTransformer) -> <init>
    java.util.Comparator comparator() -> comparator
    java.lang.Object firstKey() -> firstKey
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.lang.Object lastKey() -> lastKey
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
com.google.common.collect.Maps$UnmodifiableBiMap -> com.google.common.collect.Maps$UnmodifiableBiMap:
    java.util.Map unmodifiableMap -> unmodifiableMap
    com.google.common.collect.BiMap delegate -> delegate
    com.google.common.collect.BiMap inverse -> inverse
    java.util.Set values -> values
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.BiMap,com.google.common.collect.BiMap) -> <init>
    java.util.Map delegate() -> delegate
    java.lang.Object forcePut(java.lang.Object,java.lang.Object) -> forcePut
    com.google.common.collect.BiMap inverse() -> inverse
    java.util.Set values() -> values
    java.util.Collection values() -> values
    java.lang.Object delegate() -> delegate
com.google.common.collect.Maps$UnmodifiableEntries -> com.google.common.collect.Maps$UnmodifiableEntries:
    java.util.Collection entries -> entries
    void <init>(java.util.Collection) -> <init>
    java.util.Collection delegate() -> delegate
    java.util.Iterator iterator() -> iterator
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.lang.Object delegate() -> delegate
com.google.common.collect.Maps$UnmodifiableEntries$1 -> com.google.common.collect.Maps$UnmodifiableEntries$1:
    java.util.Iterator val$delegate -> val$delegate
    com.google.common.collect.Maps$UnmodifiableEntries this$0 -> this$0
    void <init>(com.google.common.collect.Maps$UnmodifiableEntries,java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> next
    java.lang.Object next() -> next
com.google.common.collect.Maps$UnmodifiableEntrySet -> com.google.common.collect.Maps$UnmodifiableEntrySet:
    void <init>(java.util.Set) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.common.collect.Maps$UnmodifiableNavigableMap -> com.google.common.collect.Maps$UnmodifiableNavigableMap:
    java.util.NavigableMap delegate -> delegate
    com.google.common.collect.Maps$UnmodifiableNavigableMap descendingMap -> descendingMap
    void <init>(java.util.NavigableMap) -> <init>
    void <init>(java.util.NavigableMap,com.google.common.collect.Maps$UnmodifiableNavigableMap) -> <init>
    java.util.SortedMap delegate() -> delegate
    java.util.Map$Entry lowerEntry(java.lang.Object) -> lowerEntry
    java.lang.Object lowerKey(java.lang.Object) -> lowerKey
    java.util.Map$Entry floorEntry(java.lang.Object) -> floorEntry
    java.lang.Object floorKey(java.lang.Object) -> floorKey
    java.util.Map$Entry ceilingEntry(java.lang.Object) -> ceilingEntry
    java.lang.Object ceilingKey(java.lang.Object) -> ceilingKey
    java.util.Map$Entry higherEntry(java.lang.Object) -> higherEntry
    java.lang.Object higherKey(java.lang.Object) -> higherKey
    java.util.Map$Entry firstEntry() -> firstEntry
    java.util.Map$Entry lastEntry() -> lastEntry
    java.util.Map$Entry pollFirstEntry() -> pollFirstEntry
    java.util.Map$Entry pollLastEntry() -> pollLastEntry
    java.util.NavigableMap descendingMap() -> descendingMap
    java.util.Set keySet() -> keySet
    java.util.NavigableSet navigableKeySet() -> navigableKeySet
    java.util.NavigableSet descendingKeySet() -> descendingKeySet
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.Map delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Maps$ValueDifferenceImpl -> com.google.common.collect.Maps$ValueDifferenceImpl:
    java.lang.Object left -> left
    java.lang.Object right -> right
    com.google.common.collect.MapDifference$ValueDifference create(java.lang.Object,java.lang.Object) -> create
    void <init>(java.lang.Object,java.lang.Object) -> <init>
    java.lang.Object leftValue() -> leftValue
    java.lang.Object rightValue() -> rightValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.Maps$Values -> com.google.common.collect.Maps$Values:
    java.util.Map map -> map
    void <init>(java.util.Map) -> <init>
    java.util.Map map() -> map
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    void clear() -> clear
com.google.common.collect.Multimap -> com.google.common.collect.Multimap:
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    boolean put(java.lang.Object,java.lang.Object) -> put
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    void clear() -> clear
    java.util.Collection get(java.lang.Object) -> get
    java.util.Set keySet() -> keySet
    com.google.common.collect.Multiset keys() -> keys
    java.util.Collection values() -> values
    java.util.Collection entries() -> entries
    java.util.Map asMap() -> asMap
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.common.collect.Multimaps -> com.google.common.collect.Multimaps:
    void <init>() -> <init>
    com.google.common.collect.Multimap newMultimap(java.util.Map,com.google.common.base.Supplier) -> newMultimap
    com.google.common.collect.ListMultimap newListMultimap(java.util.Map,com.google.common.base.Supplier) -> newListMultimap
    com.google.common.collect.SetMultimap newSetMultimap(java.util.Map,com.google.common.base.Supplier) -> newSetMultimap
    com.google.common.collect.SortedSetMultimap newSortedSetMultimap(java.util.Map,com.google.common.base.Supplier) -> newSortedSetMultimap
    com.google.common.collect.Multimap invertFrom(com.google.common.collect.Multimap,com.google.common.collect.Multimap) -> invertFrom
    com.google.common.collect.Multimap synchronizedMultimap(com.google.common.collect.Multimap) -> synchronizedMultimap
    com.google.common.collect.Multimap unmodifiableMultimap(com.google.common.collect.Multimap) -> unmodifiableMultimap
    com.google.common.collect.Multimap unmodifiableMultimap(com.google.common.collect.ImmutableMultimap) -> unmodifiableMultimap
    com.google.common.collect.SetMultimap synchronizedSetMultimap(com.google.common.collect.SetMultimap) -> synchronizedSetMultimap
    com.google.common.collect.SetMultimap unmodifiableSetMultimap(com.google.common.collect.SetMultimap) -> unmodifiableSetMultimap
    com.google.common.collect.SetMultimap unmodifiableSetMultimap(com.google.common.collect.ImmutableSetMultimap) -> unmodifiableSetMultimap
    com.google.common.collect.SortedSetMultimap synchronizedSortedSetMultimap(com.google.common.collect.SortedSetMultimap) -> synchronizedSortedSetMultimap
    com.google.common.collect.SortedSetMultimap unmodifiableSortedSetMultimap(com.google.common.collect.SortedSetMultimap) -> unmodifiableSortedSetMultimap
    com.google.common.collect.ListMultimap synchronizedListMultimap(com.google.common.collect.ListMultimap) -> synchronizedListMultimap
    com.google.common.collect.ListMultimap unmodifiableListMultimap(com.google.common.collect.ListMultimap) -> unmodifiableListMultimap
    com.google.common.collect.ListMultimap unmodifiableListMultimap(com.google.common.collect.ImmutableListMultimap) -> unmodifiableListMultimap
    java.util.Collection unmodifiableValueCollection(java.util.Collection) -> unmodifiableValueCollection
    java.util.Collection unmodifiableEntries(java.util.Collection) -> unmodifiableEntries
    java.util.Map asMap(com.google.common.collect.ListMultimap) -> asMap
    java.util.Map asMap(com.google.common.collect.SetMultimap) -> asMap
    java.util.Map asMap(com.google.common.collect.SortedSetMultimap) -> asMap
    java.util.Map asMap(com.google.common.collect.Multimap) -> asMap
    com.google.common.collect.SetMultimap forMap(java.util.Map) -> forMap
    com.google.common.collect.Multimap transformValues(com.google.common.collect.Multimap,com.google.common.base.Function) -> transformValues
    com.google.common.collect.Multimap transformEntries(com.google.common.collect.Multimap,com.google.common.collect.Maps$EntryTransformer) -> transformEntries
    com.google.common.collect.ListMultimap transformValues(com.google.common.collect.ListMultimap,com.google.common.base.Function) -> transformValues
    com.google.common.collect.ListMultimap transformEntries(com.google.common.collect.ListMultimap,com.google.common.collect.Maps$EntryTransformer) -> transformEntries
    com.google.common.collect.ImmutableListMultimap index(java.lang.Iterable,com.google.common.base.Function) -> index
    com.google.common.collect.ImmutableListMultimap index(java.util.Iterator,com.google.common.base.Function) -> index
    com.google.common.collect.Multimap filterKeys(com.google.common.collect.Multimap,com.google.common.base.Predicate) -> filterKeys
    com.google.common.collect.SetMultimap filterKeys(com.google.common.collect.SetMultimap,com.google.common.base.Predicate) -> filterKeys
    com.google.common.collect.ListMultimap filterKeys(com.google.common.collect.ListMultimap,com.google.common.base.Predicate) -> filterKeys
    com.google.common.collect.Multimap filterValues(com.google.common.collect.Multimap,com.google.common.base.Predicate) -> filterValues
    com.google.common.collect.SetMultimap filterValues(com.google.common.collect.SetMultimap,com.google.common.base.Predicate) -> filterValues
    com.google.common.collect.Multimap filterEntries(com.google.common.collect.Multimap,com.google.common.base.Predicate) -> filterEntries
    com.google.common.collect.SetMultimap filterEntries(com.google.common.collect.SetMultimap,com.google.common.base.Predicate) -> filterEntries
    com.google.common.collect.Multimap filterFiltered(com.google.common.collect.FilteredMultimap,com.google.common.base.Predicate) -> filterFiltered
    com.google.common.collect.SetMultimap filterFiltered(com.google.common.collect.FilteredSetMultimap,com.google.common.base.Predicate) -> filterFiltered
    boolean equalsImpl(com.google.common.collect.Multimap,java.lang.Object) -> equalsImpl
    java.util.Collection access$000(java.util.Collection) -> access$000
    java.util.Collection access$100(java.util.Collection) -> access$100
com.google.common.collect.Multimaps$AsMap -> com.google.common.collect.Multimaps$AsMap:
    com.google.common.collect.Multimap multimap -> multimap
    void <init>(com.google.common.collect.Multimap) -> <init>
    int size() -> size
    java.util.Set createEntrySet() -> createEntrySet
    void removeValuesForKey(java.lang.Object) -> removeValuesForKey
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection remove(java.lang.Object) -> remove
    java.util.Set keySet() -> keySet
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    void clear() -> clear
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object get(java.lang.Object) -> get
    com.google.common.collect.Multimap access$200(com.google.common.collect.Multimaps$AsMap) -> access$200
com.google.common.collect.Multimaps$AsMap$EntrySet -> com.google.common.collect.Multimaps$AsMap$EntrySet:
    com.google.common.collect.Multimaps$AsMap this$0 -> this$0
    void <init>(com.google.common.collect.Multimaps$AsMap) -> <init>
    java.util.Map map() -> map
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
com.google.common.collect.Multimaps$AsMap$EntrySet$1 -> com.google.common.collect.Multimaps$AsMap$EntrySet$1:
    com.google.common.collect.Multimaps$AsMap$EntrySet this$1 -> this$1
    void <init>(com.google.common.collect.Multimaps$AsMap$EntrySet) -> <init>
    java.util.Collection apply(java.lang.Object) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Multimaps$CustomListMultimap -> com.google.common.collect.Multimaps$CustomListMultimap:
    com.google.common.base.Supplier factory -> factory
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Map,com.google.common.base.Supplier) -> <init>
    java.util.List createCollection() -> createCollection
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.util.Collection createCollection() -> createCollection
com.google.common.collect.Multimaps$CustomMultimap -> com.google.common.collect.Multimaps$CustomMultimap:
    com.google.common.base.Supplier factory -> factory
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Map,com.google.common.base.Supplier) -> <init>
    java.util.Collection createCollection() -> createCollection
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
com.google.common.collect.Multimaps$CustomSetMultimap -> com.google.common.collect.Multimaps$CustomSetMultimap:
    com.google.common.base.Supplier factory -> factory
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Map,com.google.common.base.Supplier) -> <init>
    java.util.Set createCollection() -> createCollection
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.util.Collection createCollection() -> createCollection
com.google.common.collect.Multimaps$CustomSortedSetMultimap -> com.google.common.collect.Multimaps$CustomSortedSetMultimap:
    com.google.common.base.Supplier factory -> factory
    java.util.Comparator valueComparator -> valueComparator
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Map,com.google.common.base.Supplier) -> <init>
    java.util.SortedSet createCollection() -> createCollection
    java.util.Comparator valueComparator() -> valueComparator
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.util.Set createCollection() -> createCollection
    java.util.Collection createCollection() -> createCollection
com.google.common.collect.Multimaps$Entries -> com.google.common.collect.Multimaps$Entries:
    void <init>() -> <init>
    com.google.common.collect.Multimap multimap() -> multimap
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
com.google.common.collect.Multimaps$Keys -> com.google.common.collect.Multimaps$Keys:
    com.google.common.collect.Multimap multimap -> multimap
    void <init>(com.google.common.collect.Multimap) -> <init>
    java.util.Iterator entryIterator() -> entryIterator
    int distinctElements() -> distinctElements
    java.util.Set createEntrySet() -> createEntrySet
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    int count(java.lang.Object) -> count
    int remove(java.lang.Object,int) -> remove
    void clear() -> clear
    java.util.Set elementSet() -> elementSet
com.google.common.collect.Multimaps$Keys$1 -> com.google.common.collect.Multimaps$Keys$1:
    com.google.common.collect.Multimaps$Keys this$0 -> this$0
    void <init>(com.google.common.collect.Multimaps$Keys,java.util.Iterator) -> <init>
    com.google.common.collect.Multiset$Entry transform(java.util.Map$Entry) -> transform
    java.lang.Object transform(java.lang.Object) -> transform
com.google.common.collect.Multimaps$Keys$1$1 -> com.google.common.collect.Multimaps$Keys$1$1:
    java.util.Map$Entry val$backingEntry -> val$backingEntry
    com.google.common.collect.Multimaps$Keys$1 this$1 -> this$1
    void <init>(com.google.common.collect.Multimaps$Keys$1,java.util.Map$Entry) -> <init>
    java.lang.Object getElement() -> getElement
    int getCount() -> getCount
com.google.common.collect.Multimaps$Keys$KeysEntrySet -> com.google.common.collect.Multimaps$Keys$KeysEntrySet:
    com.google.common.collect.Multimaps$Keys this$0 -> this$0
    void <init>(com.google.common.collect.Multimaps$Keys) -> <init>
    com.google.common.collect.Multiset multiset() -> multiset
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
com.google.common.collect.Multimaps$MapMultimap -> com.google.common.collect.Multimaps$MapMultimap:
    java.util.Map map -> map
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Map) -> <init>
    int size() -> size
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    java.util.Set get(java.lang.Object) -> get
    boolean put(java.lang.Object,java.lang.Object) -> put
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    java.util.Set removeAll(java.lang.Object) -> removeAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
    java.util.Set entries() -> entries
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Map createAsMap() -> createAsMap
    int hashCode() -> hashCode
    java.util.Collection entries() -> entries
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
com.google.common.collect.Multimaps$MapMultimap$1 -> com.google.common.collect.Multimaps$MapMultimap$1:
    java.lang.Object val$key -> val$key
    com.google.common.collect.Multimaps$MapMultimap this$0 -> this$0
    void <init>(com.google.common.collect.Multimaps$MapMultimap,java.lang.Object) -> <init>
    java.util.Iterator iterator() -> iterator
    int size() -> size
com.google.common.collect.Multimaps$MapMultimap$1$1 -> com.google.common.collect.Multimaps$MapMultimap$1$1:
    int i -> i
    com.google.common.collect.Multimaps$MapMultimap$1 this$1 -> this$1
    void <init>(com.google.common.collect.Multimaps$MapMultimap$1) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.Multimaps$TransformedEntriesListMultimap -> com.google.common.collect.Multimaps$TransformedEntriesListMultimap:
    void <init>(com.google.common.collect.ListMultimap,com.google.common.collect.Maps$EntryTransformer) -> <init>
    java.util.List transform(java.lang.Object,java.util.Collection) -> transform
    java.util.List get(java.lang.Object) -> get
    java.util.List removeAll(java.lang.Object) -> removeAll
    java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection transform(java.lang.Object,java.util.Collection) -> transform
com.google.common.collect.Multimaps$TransformedEntriesMultimap -> com.google.common.collect.Multimaps$TransformedEntriesMultimap:
    com.google.common.collect.Multimap fromMultimap -> fromMultimap
    com.google.common.collect.Maps$EntryTransformer transformer -> transformer
    void <init>(com.google.common.collect.Multimap,com.google.common.collect.Maps$EntryTransformer) -> <init>
    java.util.Collection transform(java.lang.Object,java.util.Collection) -> transform
    java.util.Map createAsMap() -> createAsMap
    void clear() -> clear
    boolean containsKey(java.lang.Object) -> containsKey
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Collection get(java.lang.Object) -> get
    boolean isEmpty() -> isEmpty
    java.util.Set keySet() -> keySet
    com.google.common.collect.Multiset keys() -> keys
    boolean put(java.lang.Object,java.lang.Object) -> put
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    int size() -> size
    java.util.Collection createValues() -> createValues
com.google.common.collect.Multimaps$TransformedEntriesMultimap$1 -> com.google.common.collect.Multimaps$TransformedEntriesMultimap$1:
    com.google.common.collect.Multimaps$TransformedEntriesMultimap this$0 -> this$0
    void <init>(com.google.common.collect.Multimaps$TransformedEntriesMultimap) -> <init>
    java.util.Collection transformEntry(java.lang.Object,java.util.Collection) -> transformEntry
    java.lang.Object transformEntry(java.lang.Object,java.lang.Object) -> transformEntry
com.google.common.collect.Multimaps$UnmodifiableListMultimap -> com.google.common.collect.Multimaps$UnmodifiableListMultimap:
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.ListMultimap) -> <init>
    com.google.common.collect.ListMultimap delegate() -> delegate
    java.util.List get(java.lang.Object) -> get
    java.util.List removeAll(java.lang.Object) -> removeAll
    java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection get(java.lang.Object) -> get
    com.google.common.collect.Multimap delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Multimaps$UnmodifiableMultimap -> com.google.common.collect.Multimaps$UnmodifiableMultimap:
    com.google.common.collect.Multimap delegate -> delegate
    java.util.Collection entries -> entries
    com.google.common.collect.Multiset keys -> keys
    java.util.Set keySet -> keySet
    java.util.Collection values -> values
    java.util.Map map -> map
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.Multimap) -> <init>
    com.google.common.collect.Multimap delegate() -> delegate
    void clear() -> clear
    java.util.Map asMap() -> asMap
    java.util.Collection entries() -> entries
    java.util.Collection get(java.lang.Object) -> get
    com.google.common.collect.Multiset keys() -> keys
    java.util.Set keySet() -> keySet
    boolean put(java.lang.Object,java.lang.Object) -> put
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection values() -> values
    java.lang.Object delegate() -> delegate
com.google.common.collect.Multimaps$UnmodifiableMultimap$1 -> com.google.common.collect.Multimaps$UnmodifiableMultimap$1:
    com.google.common.collect.Multimaps$UnmodifiableMultimap this$0 -> this$0
    void <init>(com.google.common.collect.Multimaps$UnmodifiableMultimap) -> <init>
    java.util.Collection apply(java.util.Collection) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Multimaps$UnmodifiableSetMultimap -> com.google.common.collect.Multimaps$UnmodifiableSetMultimap:
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.SetMultimap) -> <init>
    com.google.common.collect.SetMultimap delegate() -> delegate
    java.util.Set get(java.lang.Object) -> get
    java.util.Set entries() -> entries
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection entries() -> entries
    com.google.common.collect.Multimap delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap -> com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap:
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.SortedSetMultimap) -> <init>
    com.google.common.collect.SortedSetMultimap delegate() -> delegate
    java.util.SortedSet get(java.lang.Object) -> get
    java.util.SortedSet removeAll(java.lang.Object) -> removeAll
    java.util.SortedSet replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Comparator valueComparator() -> valueComparator
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set get(java.lang.Object) -> get
    com.google.common.collect.SetMultimap delegate() -> delegate
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    com.google.common.collect.Multimap delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Multiset -> com.google.common.collect.Multiset:
    int count(java.lang.Object) -> count
    int add(java.lang.Object,int) -> add
    int remove(java.lang.Object,int) -> remove
    int setCount(java.lang.Object,int) -> setCount
    boolean setCount(java.lang.Object,int,int) -> setCount
    java.util.Set elementSet() -> elementSet
    java.util.Set entrySet() -> entrySet
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean add(java.lang.Object) -> add
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.Multiset$Entry -> com.google.common.collect.Multiset$Entry:
    java.lang.Object getElement() -> getElement
    int getCount() -> getCount
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.Multisets -> com.google.common.collect.Multisets:
    com.google.common.collect.Ordering DECREASING_COUNT_ORDERING -> DECREASING_COUNT_ORDERING
    void <init>() -> <init>
    com.google.common.collect.Multiset unmodifiableMultiset(com.google.common.collect.Multiset) -> unmodifiableMultiset
    com.google.common.collect.Multiset unmodifiableMultiset(com.google.common.collect.ImmutableMultiset) -> unmodifiableMultiset
    com.google.common.collect.SortedMultiset unmodifiableSortedMultiset(com.google.common.collect.SortedMultiset) -> unmodifiableSortedMultiset
    com.google.common.collect.Multiset$Entry immutableEntry(java.lang.Object,int) -> immutableEntry
    com.google.common.collect.Multiset filter(com.google.common.collect.Multiset,com.google.common.base.Predicate) -> filter
    int inferDistinctElements(java.lang.Iterable) -> inferDistinctElements
    com.google.common.collect.Multiset union(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> union
    com.google.common.collect.Multiset intersection(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> intersection
    com.google.common.collect.Multiset sum(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> sum
    com.google.common.collect.Multiset difference(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> difference
    boolean containsOccurrences(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> containsOccurrences
    boolean retainOccurrences(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> retainOccurrences
    boolean retainOccurrencesImpl(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> retainOccurrencesImpl
    boolean removeOccurrences(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> removeOccurrences
    boolean removeOccurrencesImpl(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> removeOccurrencesImpl
    boolean equalsImpl(com.google.common.collect.Multiset,java.lang.Object) -> equalsImpl
    boolean addAllImpl(com.google.common.collect.Multiset,java.util.Collection) -> addAllImpl
    boolean removeAllImpl(com.google.common.collect.Multiset,java.util.Collection) -> removeAllImpl
    boolean retainAllImpl(com.google.common.collect.Multiset,java.util.Collection) -> retainAllImpl
    int setCountImpl(com.google.common.collect.Multiset,java.lang.Object,int) -> setCountImpl
    boolean setCountImpl(com.google.common.collect.Multiset,java.lang.Object,int,int) -> setCountImpl
    java.util.Iterator iteratorImpl(com.google.common.collect.Multiset) -> iteratorImpl
    int sizeImpl(com.google.common.collect.Multiset) -> sizeImpl
    com.google.common.collect.Multiset cast(java.lang.Iterable) -> cast
    com.google.common.collect.ImmutableMultiset copyHighestCountFirst(com.google.common.collect.Multiset) -> copyHighestCountFirst
    void <clinit>() -> <clinit>
com.google.common.collect.Multisets$1 -> com.google.common.collect.Multisets$1:
    com.google.common.collect.Multiset val$multiset1 -> val$multiset1
    com.google.common.collect.Multiset val$multiset2 -> val$multiset2
    void <init>(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> <init>
    boolean contains(java.lang.Object) -> contains
    boolean isEmpty() -> isEmpty
    int count(java.lang.Object) -> count
    java.util.Set createElementSet() -> createElementSet
    java.util.Iterator entryIterator() -> entryIterator
    int distinctElements() -> distinctElements
com.google.common.collect.Multisets$1$1 -> com.google.common.collect.Multisets$1$1:
    java.util.Iterator val$iterator1 -> val$iterator1
    java.util.Iterator val$iterator2 -> val$iterator2
    com.google.common.collect.Multisets$1 this$0 -> this$0
    void <init>(com.google.common.collect.Multisets$1,java.util.Iterator,java.util.Iterator) -> <init>
    com.google.common.collect.Multiset$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.Multisets$2 -> com.google.common.collect.Multisets$2:
    com.google.common.collect.Multiset val$multiset1 -> val$multiset1
    com.google.common.collect.Multiset val$multiset2 -> val$multiset2
    void <init>(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> <init>
    int count(java.lang.Object) -> count
    java.util.Set createElementSet() -> createElementSet
    java.util.Iterator entryIterator() -> entryIterator
    int distinctElements() -> distinctElements
com.google.common.collect.Multisets$2$1 -> com.google.common.collect.Multisets$2$1:
    java.util.Iterator val$iterator1 -> val$iterator1
    com.google.common.collect.Multisets$2 this$0 -> this$0
    void <init>(com.google.common.collect.Multisets$2,java.util.Iterator) -> <init>
    com.google.common.collect.Multiset$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.Multisets$3 -> com.google.common.collect.Multisets$3:
    com.google.common.collect.Multiset val$multiset1 -> val$multiset1
    com.google.common.collect.Multiset val$multiset2 -> val$multiset2
    void <init>(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> <init>
    boolean contains(java.lang.Object) -> contains
    boolean isEmpty() -> isEmpty
    int size() -> size
    int count(java.lang.Object) -> count
    java.util.Set createElementSet() -> createElementSet
    java.util.Iterator entryIterator() -> entryIterator
    int distinctElements() -> distinctElements
com.google.common.collect.Multisets$3$1 -> com.google.common.collect.Multisets$3$1:
    java.util.Iterator val$iterator1 -> val$iterator1
    java.util.Iterator val$iterator2 -> val$iterator2
    com.google.common.collect.Multisets$3 this$0 -> this$0
    void <init>(com.google.common.collect.Multisets$3,java.util.Iterator,java.util.Iterator) -> <init>
    com.google.common.collect.Multiset$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.Multisets$4 -> com.google.common.collect.Multisets$4:
    com.google.common.collect.Multiset val$multiset1 -> val$multiset1
    com.google.common.collect.Multiset val$multiset2 -> val$multiset2
    void <init>(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> <init>
    int count(java.lang.Object) -> count
    java.util.Iterator entryIterator() -> entryIterator
    int distinctElements() -> distinctElements
com.google.common.collect.Multisets$4$1 -> com.google.common.collect.Multisets$4$1:
    java.util.Iterator val$iterator1 -> val$iterator1
    com.google.common.collect.Multisets$4 this$0 -> this$0
    void <init>(com.google.common.collect.Multisets$4,java.util.Iterator) -> <init>
    com.google.common.collect.Multiset$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.Multisets$5 -> com.google.common.collect.Multisets$5:
    void <init>() -> <init>
    int compare(com.google.common.collect.Multiset$Entry,com.google.common.collect.Multiset$Entry) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.common.collect.Multisets$AbstractEntry -> com.google.common.collect.Multisets$AbstractEntry:
    void <init>() -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.Multisets$ElementSet -> com.google.common.collect.Multisets$ElementSet:
    void <init>() -> <init>
    com.google.common.collect.Multiset multiset() -> multiset
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    int size() -> size
com.google.common.collect.Multisets$ElementSet$1 -> com.google.common.collect.Multisets$ElementSet$1:
    com.google.common.collect.Multisets$ElementSet this$0 -> this$0
    void <init>(com.google.common.collect.Multisets$ElementSet,java.util.Iterator) -> <init>
    java.lang.Object transform(com.google.common.collect.Multiset$Entry) -> transform
    java.lang.Object transform(java.lang.Object) -> transform
com.google.common.collect.Multisets$EntrySet -> com.google.common.collect.Multisets$EntrySet:
    void <init>() -> <init>
    com.google.common.collect.Multiset multiset() -> multiset
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
com.google.common.collect.Multisets$FilteredMultiset -> com.google.common.collect.Multisets$FilteredMultiset:
    com.google.common.collect.Multiset unfiltered -> unfiltered
    com.google.common.base.Predicate predicate -> predicate
    void <init>(com.google.common.collect.Multiset,com.google.common.base.Predicate) -> <init>
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    java.util.Set createElementSet() -> createElementSet
    java.util.Set createEntrySet() -> createEntrySet
    java.util.Iterator entryIterator() -> entryIterator
    int distinctElements() -> distinctElements
    int count(java.lang.Object) -> count
    int add(java.lang.Object,int) -> add
    int remove(java.lang.Object,int) -> remove
    void clear() -> clear
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Multisets$FilteredMultiset$1 -> com.google.common.collect.Multisets$FilteredMultiset$1:
    com.google.common.collect.Multisets$FilteredMultiset this$0 -> this$0
    void <init>(com.google.common.collect.Multisets$FilteredMultiset) -> <init>
    boolean apply(com.google.common.collect.Multiset$Entry) -> apply
    boolean apply(java.lang.Object) -> apply
com.google.common.collect.Multisets$ImmutableEntry -> com.google.common.collect.Multisets$ImmutableEntry:
    java.lang.Object element -> element
    int count -> count
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Object,int) -> <init>
    java.lang.Object getElement() -> getElement
    int getCount() -> getCount
com.google.common.collect.Multisets$MultisetIteratorImpl -> com.google.common.collect.Multisets$MultisetIteratorImpl:
    com.google.common.collect.Multiset multiset -> multiset
    java.util.Iterator entryIterator -> entryIterator
    com.google.common.collect.Multiset$Entry currentEntry -> currentEntry
    int laterCount -> laterCount
    int totalCount -> totalCount
    boolean canRemove -> canRemove
    void <init>(com.google.common.collect.Multiset,java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.Multisets$UnmodifiableMultiset -> com.google.common.collect.Multisets$UnmodifiableMultiset:
    com.google.common.collect.Multiset delegate -> delegate
    java.util.Set elementSet -> elementSet
    java.util.Set entrySet -> entrySet
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.Multiset) -> <init>
    com.google.common.collect.Multiset delegate() -> delegate
    java.util.Set createElementSet() -> createElementSet
    java.util.Set elementSet() -> elementSet
    java.util.Set entrySet() -> entrySet
    java.util.Iterator iterator() -> iterator
    boolean add(java.lang.Object) -> add
    int add(java.lang.Object,int) -> add
    boolean addAll(java.util.Collection) -> addAll
    boolean remove(java.lang.Object) -> remove
    int remove(java.lang.Object,int) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    void clear() -> clear
    int setCount(java.lang.Object,int) -> setCount
    boolean setCount(java.lang.Object,int,int) -> setCount
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.NaturalOrdering -> com.google.common.collect.NaturalOrdering:
    com.google.common.collect.NaturalOrdering INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    int compare(java.lang.Comparable,java.lang.Comparable) -> compare
    com.google.common.collect.Ordering reverse() -> reverse
    java.lang.Object readResolve() -> readResolve
    java.lang.String toString() -> toString
    void <init>() -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <clinit>() -> <clinit>
com.google.common.collect.NullsFirstOrdering -> com.google.common.collect.NullsFirstOrdering:
    com.google.common.collect.Ordering ordering -> ordering
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.Ordering) -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    com.google.common.collect.Ordering reverse() -> reverse
    com.google.common.collect.Ordering nullsFirst() -> nullsFirst
    com.google.common.collect.Ordering nullsLast() -> nullsLast
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.NullsLastOrdering -> com.google.common.collect.NullsLastOrdering:
    com.google.common.collect.Ordering ordering -> ordering
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.Ordering) -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    com.google.common.collect.Ordering reverse() -> reverse
    com.google.common.collect.Ordering nullsFirst() -> nullsFirst
    com.google.common.collect.Ordering nullsLast() -> nullsLast
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.ObjectArrays -> com.google.common.collect.ObjectArrays:
    java.lang.Object[] EMPTY_ARRAY -> EMPTY_ARRAY
    void <init>() -> <init>
    java.lang.Object[] newArray(java.lang.Class,int) -> newArray
    java.lang.Object[] newArray(java.lang.Object[],int) -> newArray
    java.lang.Object[] concat(java.lang.Object[],java.lang.Object[],java.lang.Class) -> concat
    java.lang.Object[] concat(java.lang.Object,java.lang.Object[]) -> concat
    java.lang.Object[] concat(java.lang.Object[],java.lang.Object) -> concat
    java.lang.Object[] arraysCopyOf(java.lang.Object[],int) -> arraysCopyOf
    java.lang.Object[] toArrayImpl(java.util.Collection,java.lang.Object[]) -> toArrayImpl
    java.lang.Object[] toArrayImpl(java.lang.Object[],int,int,java.lang.Object[]) -> toArrayImpl
    java.lang.Object[] toArrayImpl(java.util.Collection) -> toArrayImpl
    java.lang.Object[] copyAsObjectArray(java.lang.Object[],int,int) -> copyAsObjectArray
    java.lang.Object[] fillArray(java.lang.Iterable,java.lang.Object[]) -> fillArray
    void swap(java.lang.Object[],int,int) -> swap
    java.lang.Object[] checkElementsNotNull(java.lang.Object[]) -> checkElementsNotNull
    java.lang.Object[] checkElementsNotNull(java.lang.Object[],int) -> checkElementsNotNull
    java.lang.Object checkElementNotNull(java.lang.Object,int) -> checkElementNotNull
    void <clinit>() -> <clinit>
com.google.common.collect.Ordering -> com.google.common.collect.Ordering:
    int LEFT_IS_GREATER -> LEFT_IS_GREATER
    int RIGHT_IS_GREATER -> RIGHT_IS_GREATER
    com.google.common.collect.Ordering natural() -> natural
    com.google.common.collect.Ordering from(java.util.Comparator) -> from
    com.google.common.collect.Ordering from(com.google.common.collect.Ordering) -> from
    com.google.common.collect.Ordering explicit(java.util.List) -> explicit
    com.google.common.collect.Ordering explicit(java.lang.Object,java.lang.Object[]) -> explicit
    com.google.common.collect.Ordering allEqual() -> allEqual
    com.google.common.collect.Ordering usingToString() -> usingToString
    com.google.common.collect.Ordering arbitrary() -> arbitrary
    void <init>() -> <init>
    com.google.common.collect.Ordering reverse() -> reverse
    com.google.common.collect.Ordering nullsFirst() -> nullsFirst
    com.google.common.collect.Ordering nullsLast() -> nullsLast
    com.google.common.collect.Ordering onResultOf(com.google.common.base.Function) -> onResultOf
    com.google.common.collect.Ordering onKeys() -> onKeys
    com.google.common.collect.Ordering compound(java.util.Comparator) -> compound
    com.google.common.collect.Ordering compound(java.lang.Iterable) -> compound
    com.google.common.collect.Ordering lexicographical() -> lexicographical
    int compare(java.lang.Object,java.lang.Object) -> compare
    java.lang.Object min(java.util.Iterator) -> min
    java.lang.Object min(java.lang.Iterable) -> min
    java.lang.Object min(java.lang.Object,java.lang.Object) -> min
    java.lang.Object min(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> min
    java.lang.Object max(java.util.Iterator) -> max
    java.lang.Object max(java.lang.Iterable) -> max
    java.lang.Object max(java.lang.Object,java.lang.Object) -> max
    java.lang.Object max(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> max
    java.util.List leastOf(java.lang.Iterable,int) -> leastOf
    java.util.List leastOf(java.util.Iterator,int) -> leastOf
    int partition(java.lang.Object[],int,int,int) -> partition
    java.util.List greatestOf(java.lang.Iterable,int) -> greatestOf
    java.util.List greatestOf(java.util.Iterator,int) -> greatestOf
    java.util.List sortedCopy(java.lang.Iterable) -> sortedCopy
    com.google.common.collect.ImmutableList immutableSortedCopy(java.lang.Iterable) -> immutableSortedCopy
    boolean isOrdered(java.lang.Iterable) -> isOrdered
    boolean isStrictlyOrdered(java.lang.Iterable) -> isStrictlyOrdered
    int binarySearch(java.util.List,java.lang.Object) -> binarySearch
com.google.common.collect.Ordering$ArbitraryOrdering -> com.google.common.collect.Ordering$ArbitraryOrdering:
    java.util.Map uids -> uids
    void <init>() -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    java.lang.String toString() -> toString
    int identityHashCode(java.lang.Object) -> identityHashCode
com.google.common.collect.Ordering$ArbitraryOrdering$1 -> com.google.common.collect.Ordering$ArbitraryOrdering$1:
    java.util.concurrent.atomic.AtomicInteger counter -> counter
    com.google.common.collect.Ordering$ArbitraryOrdering this$0 -> this$0
    void <init>(com.google.common.collect.Ordering$ArbitraryOrdering) -> <init>
    java.lang.Integer apply(java.lang.Object) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Ordering$ArbitraryOrderingHolder -> com.google.common.collect.Ordering$ArbitraryOrderingHolder:
    com.google.common.collect.Ordering ARBITRARY_ORDERING -> ARBITRARY_ORDERING
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.google.common.collect.Ordering$IncomparableValueException -> com.google.common.collect.Ordering$IncomparableValueException:
    java.lang.Object value -> value
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Object) -> <init>
com.google.common.collect.PeekingIterator -> com.google.common.collect.PeekingIterator:
    java.lang.Object peek() -> peek
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.Platform -> com.google.common.collect.Platform:
    java.lang.Object[] newArray(java.lang.Object[],int) -> newArray
    java.util.Set newSetFromMap(java.util.Map) -> newSetFromMap
    com.google.common.collect.MapMaker tryWeakKeys(com.google.common.collect.MapMaker) -> tryWeakKeys
    java.util.SortedMap mapsTransformEntriesSortedMap(java.util.SortedMap,com.google.common.collect.Maps$EntryTransformer) -> mapsTransformEntriesSortedMap
    java.util.SortedMap mapsAsMapSortedSet(java.util.SortedSet,com.google.common.base.Function) -> mapsAsMapSortedSet
    java.util.SortedSet setsFilterSortedSet(java.util.SortedSet,com.google.common.base.Predicate) -> setsFilterSortedSet
    java.util.SortedMap mapsFilterSortedMap(java.util.SortedMap,com.google.common.base.Predicate) -> mapsFilterSortedMap
    void <init>() -> <init>
com.google.common.collect.RegularImmutableAsList -> com.google.common.collect.RegularImmutableAsList:
    com.google.common.collect.ImmutableCollection delegate -> delegate
    com.google.common.collect.ImmutableList delegateList -> delegateList
    void <init>(com.google.common.collect.ImmutableCollection,com.google.common.collect.ImmutableList) -> <init>
    void <init>(com.google.common.collect.ImmutableCollection,java.lang.Object[]) -> <init>
    com.google.common.collect.ImmutableCollection delegateCollection() -> delegateCollection
    com.google.common.collect.ImmutableList delegateList() -> delegateList
    com.google.common.collect.UnmodifiableListIterator listIterator(int) -> listIterator
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    java.lang.Object get(int) -> get
    java.util.ListIterator listIterator(int) -> listIterator
com.google.common.collect.RegularImmutableBiMap -> com.google.common.collect.RegularImmutableBiMap:
    double MAX_LOAD_FACTOR -> MAX_LOAD_FACTOR
    com.google.common.collect.ImmutableMapEntry[] keyTable -> keyTable
    com.google.common.collect.ImmutableMapEntry[] valueTable -> valueTable
    com.google.common.collect.ImmutableMapEntry[] entries -> entries
    int mask -> mask
    int hashCode -> hashCode
    com.google.common.collect.ImmutableBiMap inverse -> inverse
    void <init>(com.google.common.collect.ImmutableMapEntry$TerminalEntry[]) -> <init>
    void <init>(int,com.google.common.collect.ImmutableMapEntry$TerminalEntry[]) -> <init>
    void <init>(java.util.Map$Entry[]) -> <init>
    com.google.common.collect.ImmutableMapEntry[] createEntryArray(int) -> createEntryArray
    java.lang.Object get(java.lang.Object) -> get
    com.google.common.collect.ImmutableSet createEntrySet() -> createEntrySet
    boolean isPartialView() -> isPartialView
    int size() -> size
    com.google.common.collect.ImmutableBiMap inverse() -> inverse
    com.google.common.collect.BiMap inverse() -> inverse
    com.google.common.collect.ImmutableMapEntry[] access$000(com.google.common.collect.RegularImmutableBiMap) -> access$000
    int access$100(com.google.common.collect.RegularImmutableBiMap) -> access$100
    int access$300(com.google.common.collect.RegularImmutableBiMap) -> access$300
    com.google.common.collect.ImmutableMapEntry[] access$400(com.google.common.collect.RegularImmutableBiMap) -> access$400
com.google.common.collect.RegularImmutableBiMap$1 -> com.google.common.collect.RegularImmutableBiMap$1:
    com.google.common.collect.RegularImmutableBiMap this$0 -> this$0
    void <init>(com.google.common.collect.RegularImmutableBiMap) -> <init>
    com.google.common.collect.ImmutableMap map() -> map
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    com.google.common.collect.ImmutableList createAsList() -> createAsList
    boolean isHashCodeFast() -> isHashCodeFast
    int hashCode() -> hashCode
    java.util.Iterator iterator() -> iterator
com.google.common.collect.RegularImmutableBiMap$Inverse -> com.google.common.collect.RegularImmutableBiMap$Inverse:
    com.google.common.collect.RegularImmutableBiMap this$0 -> this$0
    void <init>(com.google.common.collect.RegularImmutableBiMap) -> <init>
    int size() -> size
    com.google.common.collect.ImmutableBiMap inverse() -> inverse
    java.lang.Object get(java.lang.Object) -> get
    com.google.common.collect.ImmutableSet createEntrySet() -> createEntrySet
    boolean isPartialView() -> isPartialView
    java.lang.Object writeReplace() -> writeReplace
    com.google.common.collect.BiMap inverse() -> inverse
    void <init>(com.google.common.collect.RegularImmutableBiMap,com.google.common.collect.RegularImmutableBiMap$1) -> <init>
com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet -> com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet:
    com.google.common.collect.RegularImmutableBiMap$Inverse this$1 -> this$1
    void <init>(com.google.common.collect.RegularImmutableBiMap$Inverse) -> <init>
    com.google.common.collect.ImmutableMap map() -> map
    boolean isHashCodeFast() -> isHashCodeFast
    int hashCode() -> hashCode
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    com.google.common.collect.ImmutableList createAsList() -> createAsList
    java.util.Iterator iterator() -> iterator
com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet$1 -> com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet$1:
    com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet this$2 -> this$2
    void <init>(com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet) -> <init>
    java.util.Map$Entry get(int) -> get
    com.google.common.collect.ImmutableCollection delegateCollection() -> delegateCollection
    java.lang.Object get(int) -> get
com.google.common.collect.RegularImmutableBiMap$InverseSerializedForm -> com.google.common.collect.RegularImmutableBiMap$InverseSerializedForm:
    com.google.common.collect.ImmutableBiMap forward -> forward
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.ImmutableBiMap) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.RegularImmutableBiMap$NonTerminalBiMapEntry -> com.google.common.collect.RegularImmutableBiMap$NonTerminalBiMapEntry:
    com.google.common.collect.ImmutableMapEntry nextInKeyBucket -> nextInKeyBucket
    com.google.common.collect.ImmutableMapEntry nextInValueBucket -> nextInValueBucket
    void <init>(java.lang.Object,java.lang.Object,com.google.common.collect.ImmutableMapEntry,com.google.common.collect.ImmutableMapEntry) -> <init>
    void <init>(com.google.common.collect.ImmutableMapEntry,com.google.common.collect.ImmutableMapEntry,com.google.common.collect.ImmutableMapEntry) -> <init>
    com.google.common.collect.ImmutableMapEntry getNextInKeyBucket() -> getNextInKeyBucket
    com.google.common.collect.ImmutableMapEntry getNextInValueBucket() -> getNextInValueBucket
com.google.common.collect.RegularImmutableList -> com.google.common.collect.RegularImmutableList:
    int offset -> offset
    int size -> size
    java.lang.Object[] array -> array
    void <init>(java.lang.Object[],int,int) -> <init>
    void <init>(java.lang.Object[]) -> <init>
    int size() -> size
    boolean isPartialView() -> isPartialView
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    java.lang.Object get(int) -> get
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    com.google.common.collect.ImmutableList subListUnchecked(int,int) -> subListUnchecked
    com.google.common.collect.UnmodifiableListIterator listIterator(int) -> listIterator
    java.util.ListIterator listIterator(int) -> listIterator
com.google.common.collect.RegularImmutableMap -> com.google.common.collect.RegularImmutableMap:
    com.google.common.collect.ImmutableMapEntry[] entries -> entries
    com.google.common.collect.ImmutableMapEntry[] table -> table
    int mask -> mask
    double MAX_LOAD_FACTOR -> MAX_LOAD_FACTOR
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.ImmutableMapEntry$TerminalEntry[]) -> <init>
    void <init>(int,com.google.common.collect.ImmutableMapEntry$TerminalEntry[]) -> <init>
    void <init>(java.util.Map$Entry[]) -> <init>
    void checkNoConflictInBucket(java.lang.Object,com.google.common.collect.ImmutableMapEntry,com.google.common.collect.ImmutableMapEntry) -> checkNoConflictInBucket
    com.google.common.collect.ImmutableMapEntry[] createEntryArray(int) -> createEntryArray
    java.lang.Object get(java.lang.Object) -> get
    int size() -> size
    boolean isPartialView() -> isPartialView
    com.google.common.collect.ImmutableSet createEntrySet() -> createEntrySet
    com.google.common.collect.ImmutableMapEntry[] access$100(com.google.common.collect.RegularImmutableMap) -> access$100
com.google.common.collect.RegularImmutableMap$1 -> com.google.common.collect.RegularImmutableMap$1:
com.google.common.collect.RegularImmutableMap$EntrySet -> com.google.common.collect.RegularImmutableMap$EntrySet:
    com.google.common.collect.RegularImmutableMap this$0 -> this$0
    void <init>(com.google.common.collect.RegularImmutableMap) -> <init>
    com.google.common.collect.ImmutableMap map() -> map
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    com.google.common.collect.ImmutableList createAsList() -> createAsList
    java.util.Iterator iterator() -> iterator
    void <init>(com.google.common.collect.RegularImmutableMap,com.google.common.collect.RegularImmutableMap$1) -> <init>
com.google.common.collect.RegularImmutableMap$NonTerminalMapEntry -> com.google.common.collect.RegularImmutableMap$NonTerminalMapEntry:
    com.google.common.collect.ImmutableMapEntry nextInKeyBucket -> nextInKeyBucket
    void <init>(java.lang.Object,java.lang.Object,com.google.common.collect.ImmutableMapEntry) -> <init>
    void <init>(com.google.common.collect.ImmutableMapEntry,com.google.common.collect.ImmutableMapEntry) -> <init>
    com.google.common.collect.ImmutableMapEntry getNextInKeyBucket() -> getNextInKeyBucket
    com.google.common.collect.ImmutableMapEntry getNextInValueBucket() -> getNextInValueBucket
com.google.common.collect.RegularImmutableMultiset -> com.google.common.collect.RegularImmutableMultiset:
    com.google.common.collect.ImmutableMap map -> map
    int size -> size
    void <init>(com.google.common.collect.ImmutableMap,int) -> <init>
    boolean isPartialView() -> isPartialView
    int count(java.lang.Object) -> count
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    com.google.common.collect.ImmutableSet elementSet() -> elementSet
    com.google.common.collect.Multiset$Entry getEntry(int) -> getEntry
    int hashCode() -> hashCode
    java.util.Set elementSet() -> elementSet
com.google.common.collect.RegularImmutableSet -> com.google.common.collect.RegularImmutableSet:
    java.lang.Object[] elements -> elements
    java.lang.Object[] table -> table
    int mask -> mask
    int hashCode -> hashCode
    void <init>(java.lang.Object[],int,java.lang.Object[],int) -> <init>
    boolean contains(java.lang.Object) -> contains
    int size() -> size
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    com.google.common.collect.ImmutableList createAsList() -> createAsList
    boolean isPartialView() -> isPartialView
    int hashCode() -> hashCode
    boolean isHashCodeFast() -> isHashCodeFast
    java.util.Iterator iterator() -> iterator
com.google.common.collect.RegularImmutableSortedMap -> com.google.common.collect.RegularImmutableSortedMap:
    com.google.common.collect.RegularImmutableSortedSet keySet -> keySet
    com.google.common.collect.ImmutableList valueList -> valueList
    void <init>(com.google.common.collect.RegularImmutableSortedSet,com.google.common.collect.ImmutableList) -> <init>
    void <init>(com.google.common.collect.RegularImmutableSortedSet,com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSortedMap) -> <init>
    com.google.common.collect.ImmutableSet createEntrySet() -> createEntrySet
    com.google.common.collect.ImmutableSortedSet keySet() -> keySet
    com.google.common.collect.ImmutableCollection values() -> values
    java.lang.Object get(java.lang.Object) -> get
    com.google.common.collect.ImmutableSortedMap getSubMap(int,int) -> getSubMap
    com.google.common.collect.ImmutableSortedMap headMap(java.lang.Object,boolean) -> headMap
    com.google.common.collect.ImmutableSortedMap tailMap(java.lang.Object,boolean) -> tailMap
    com.google.common.collect.ImmutableSortedMap createDescendingMap() -> createDescendingMap
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.Collection values() -> values
    java.util.Set keySet() -> keySet
    com.google.common.collect.ImmutableSet keySet() -> keySet
    com.google.common.collect.ImmutableList access$100(com.google.common.collect.RegularImmutableSortedMap) -> access$100
com.google.common.collect.RegularImmutableSortedMap$1 -> com.google.common.collect.RegularImmutableSortedMap$1:
com.google.common.collect.RegularImmutableSortedMap$EntrySet -> com.google.common.collect.RegularImmutableSortedMap$EntrySet:
    com.google.common.collect.RegularImmutableSortedMap this$0 -> this$0
    void <init>(com.google.common.collect.RegularImmutableSortedMap) -> <init>
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    com.google.common.collect.ImmutableList createAsList() -> createAsList
    com.google.common.collect.ImmutableMap map() -> map
    java.util.Iterator iterator() -> iterator
    void <init>(com.google.common.collect.RegularImmutableSortedMap,com.google.common.collect.RegularImmutableSortedMap$1) -> <init>
com.google.common.collect.RegularImmutableSortedMap$EntrySet$1 -> com.google.common.collect.RegularImmutableSortedMap$EntrySet$1:
    com.google.common.collect.ImmutableList keyList -> keyList
    com.google.common.collect.RegularImmutableSortedMap$EntrySet this$1 -> this$1
    void <init>(com.google.common.collect.RegularImmutableSortedMap$EntrySet) -> <init>
    java.util.Map$Entry get(int) -> get
    com.google.common.collect.ImmutableCollection delegateCollection() -> delegateCollection
    java.lang.Object get(int) -> get
com.google.common.collect.RegularImmutableSortedSet -> com.google.common.collect.RegularImmutableSortedSet:
    com.google.common.collect.ImmutableList elements -> elements
    void <init>(com.google.common.collect.ImmutableList,java.util.Comparator) -> <init>
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    com.google.common.collect.UnmodifiableIterator descendingIterator() -> descendingIterator
    boolean isEmpty() -> isEmpty
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    int unsafeBinarySearch(java.lang.Object) -> unsafeBinarySearch
    boolean isPartialView() -> isPartialView
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    boolean equals(java.lang.Object) -> equals
    java.lang.Object first() -> first
    java.lang.Object last() -> last
    java.lang.Object lower(java.lang.Object) -> lower
    java.lang.Object floor(java.lang.Object) -> floor
    java.lang.Object ceiling(java.lang.Object) -> ceiling
    java.lang.Object higher(java.lang.Object) -> higher
    com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean) -> headSetImpl
    int headIndex(java.lang.Object,boolean) -> headIndex
    com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean) -> subSetImpl
    com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean) -> tailSetImpl
    int tailIndex(java.lang.Object,boolean) -> tailIndex
    java.util.Comparator unsafeComparator() -> unsafeComparator
    com.google.common.collect.ImmutableSortedSet getSubSet(int,int) -> getSubSet
    int indexOf(java.lang.Object) -> indexOf
    com.google.common.collect.ImmutableList createAsList() -> createAsList
    com.google.common.collect.ImmutableSortedSet createDescendingSet() -> createDescendingSet
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ReverseNaturalOrdering -> com.google.common.collect.ReverseNaturalOrdering:
    com.google.common.collect.ReverseNaturalOrdering INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    int compare(java.lang.Comparable,java.lang.Comparable) -> compare
    com.google.common.collect.Ordering reverse() -> reverse
    java.lang.Comparable min(java.lang.Comparable,java.lang.Comparable) -> min
    java.lang.Comparable min(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable[]) -> min
    java.lang.Comparable min(java.util.Iterator) -> min
    java.lang.Comparable min(java.lang.Iterable) -> min
    java.lang.Comparable max(java.lang.Comparable,java.lang.Comparable) -> max
    java.lang.Comparable max(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable[]) -> max
    java.lang.Comparable max(java.util.Iterator) -> max
    java.lang.Comparable max(java.lang.Iterable) -> max
    java.lang.Object readResolve() -> readResolve
    java.lang.String toString() -> toString
    void <init>() -> <init>
    java.lang.Object max(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> max
    java.lang.Object max(java.lang.Object,java.lang.Object) -> max
    java.lang.Object max(java.lang.Iterable) -> max
    java.lang.Object max(java.util.Iterator) -> max
    java.lang.Object min(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> min
    java.lang.Object min(java.lang.Object,java.lang.Object) -> min
    java.lang.Object min(java.lang.Iterable) -> min
    java.lang.Object min(java.util.Iterator) -> min
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <clinit>() -> <clinit>
com.google.common.collect.ReverseOrdering -> com.google.common.collect.ReverseOrdering:
    com.google.common.collect.Ordering forwardOrder -> forwardOrder
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.Ordering) -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    com.google.common.collect.Ordering reverse() -> reverse
    java.lang.Object min(java.lang.Object,java.lang.Object) -> min
    java.lang.Object min(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> min
    java.lang.Object min(java.util.Iterator) -> min
    java.lang.Object min(java.lang.Iterable) -> min
    java.lang.Object max(java.lang.Object,java.lang.Object) -> max
    java.lang.Object max(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> max
    java.lang.Object max(java.util.Iterator) -> max
    java.lang.Object max(java.lang.Iterable) -> max
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.google.common.collect.Serialization -> com.google.common.collect.Serialization:
    void <init>() -> <init>
    int readCount(java.io.ObjectInputStream) -> readCount
    void writeMap(java.util.Map,java.io.ObjectOutputStream) -> writeMap
    void populateMap(java.util.Map,java.io.ObjectInputStream) -> populateMap
    void populateMap(java.util.Map,java.io.ObjectInputStream,int) -> populateMap
    void writeMultiset(com.google.common.collect.Multiset,java.io.ObjectOutputStream) -> writeMultiset
    void populateMultiset(com.google.common.collect.Multiset,java.io.ObjectInputStream) -> populateMultiset
    void populateMultiset(com.google.common.collect.Multiset,java.io.ObjectInputStream,int) -> populateMultiset
    void writeMultimap(com.google.common.collect.Multimap,java.io.ObjectOutputStream) -> writeMultimap
    void populateMultimap(com.google.common.collect.Multimap,java.io.ObjectInputStream) -> populateMultimap
    void populateMultimap(com.google.common.collect.Multimap,java.io.ObjectInputStream,int) -> populateMultimap
    com.google.common.collect.Serialization$FieldSetter getFieldSetter(java.lang.Class,java.lang.String) -> getFieldSetter
com.google.common.collect.Serialization$1 -> com.google.common.collect.Serialization$1:
com.google.common.collect.Serialization$FieldSetter -> com.google.common.collect.Serialization$FieldSetter:
    java.lang.reflect.Field field -> field
    void <init>(java.lang.reflect.Field) -> <init>
    void set(java.lang.Object,java.lang.Object) -> set
    void set(java.lang.Object,int) -> set
    void <init>(java.lang.reflect.Field,com.google.common.collect.Serialization$1) -> <init>
com.google.common.collect.SetMultimap -> com.google.common.collect.SetMultimap:
    java.util.Set get(java.lang.Object) -> get
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Set entries() -> entries
    java.util.Map asMap() -> asMap
    boolean equals(java.lang.Object) -> equals
com.google.common.collect.Sets -> com.google.common.collect.Sets:
    void <init>() -> <init>
    com.google.common.collect.ImmutableSet immutableEnumSet(java.lang.Enum,java.lang.Enum[]) -> immutableEnumSet
    com.google.common.collect.ImmutableSet immutableEnumSet(java.lang.Iterable) -> immutableEnumSet
    java.util.EnumSet newEnumSet(java.lang.Iterable,java.lang.Class) -> newEnumSet
    java.util.HashSet newHashSet() -> newHashSet
    java.util.HashSet newHashSet(java.lang.Object[]) -> newHashSet
    java.util.HashSet newHashSetWithExpectedSize(int) -> newHashSetWithExpectedSize
    java.util.HashSet newHashSet(java.lang.Iterable) -> newHashSet
    java.util.HashSet newHashSet(java.util.Iterator) -> newHashSet
    java.util.Set newConcurrentHashSet() -> newConcurrentHashSet
    java.util.Set newConcurrentHashSet(java.lang.Iterable) -> newConcurrentHashSet
    java.util.LinkedHashSet newLinkedHashSet() -> newLinkedHashSet
    java.util.LinkedHashSet newLinkedHashSetWithExpectedSize(int) -> newLinkedHashSetWithExpectedSize
    java.util.LinkedHashSet newLinkedHashSet(java.lang.Iterable) -> newLinkedHashSet
    java.util.TreeSet newTreeSet() -> newTreeSet
    java.util.TreeSet newTreeSet(java.lang.Iterable) -> newTreeSet
    java.util.TreeSet newTreeSet(java.util.Comparator) -> newTreeSet
    java.util.Set newIdentityHashSet() -> newIdentityHashSet
    java.util.concurrent.CopyOnWriteArraySet newCopyOnWriteArraySet() -> newCopyOnWriteArraySet
    java.util.concurrent.CopyOnWriteArraySet newCopyOnWriteArraySet(java.lang.Iterable) -> newCopyOnWriteArraySet
    java.util.EnumSet complementOf(java.util.Collection) -> complementOf
    java.util.EnumSet complementOf(java.util.Collection,java.lang.Class) -> complementOf
    java.util.EnumSet makeComplementByHand(java.util.Collection,java.lang.Class) -> makeComplementByHand
    java.util.Set newSetFromMap(java.util.Map) -> newSetFromMap
    com.google.common.collect.Sets$SetView union(java.util.Set,java.util.Set) -> union
    com.google.common.collect.Sets$SetView intersection(java.util.Set,java.util.Set) -> intersection
    com.google.common.collect.Sets$SetView difference(java.util.Set,java.util.Set) -> difference
    com.google.common.collect.Sets$SetView symmetricDifference(java.util.Set,java.util.Set) -> symmetricDifference
    java.util.Set filter(java.util.Set,com.google.common.base.Predicate) -> filter
    java.util.SortedSet filter(java.util.SortedSet,com.google.common.base.Predicate) -> filter
    java.util.SortedSet filterSortedIgnoreNavigable(java.util.SortedSet,com.google.common.base.Predicate) -> filterSortedIgnoreNavigable
    java.util.NavigableSet filter(java.util.NavigableSet,com.google.common.base.Predicate) -> filter
    java.util.Set cartesianProduct(java.util.List) -> cartesianProduct
    java.util.Set cartesianProduct(java.util.Set[]) -> cartesianProduct
    java.util.Set powerSet(java.util.Set) -> powerSet
    int hashCodeImpl(java.util.Set) -> hashCodeImpl
    boolean equalsImpl(java.util.Set,java.lang.Object) -> equalsImpl
    java.util.NavigableSet unmodifiableNavigableSet(java.util.NavigableSet) -> unmodifiableNavigableSet
    java.util.NavigableSet synchronizedNavigableSet(java.util.NavigableSet) -> synchronizedNavigableSet
    boolean removeAllImpl(java.util.Set,java.util.Iterator) -> removeAllImpl
    boolean removeAllImpl(java.util.Set,java.util.Collection) -> removeAllImpl
com.google.common.collect.Sets$1 -> com.google.common.collect.Sets$1:
    java.util.Set val$set1 -> val$set1
    java.util.Set val$set2minus1 -> val$set2minus1
    java.util.Set val$set2 -> val$set2
    void <init>(java.util.Set,java.util.Set,java.util.Set) -> <init>
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    java.util.Set copyInto(java.util.Set) -> copyInto
    com.google.common.collect.ImmutableSet immutableCopy() -> immutableCopy
com.google.common.collect.Sets$2 -> com.google.common.collect.Sets$2:
    java.util.Set val$set1 -> val$set1
    com.google.common.base.Predicate val$inSet2 -> val$inSet2
    java.util.Set val$set2 -> val$set2
    void <init>(java.util.Set,com.google.common.base.Predicate,java.util.Set) -> <init>
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
com.google.common.collect.Sets$3 -> com.google.common.collect.Sets$3:
    java.util.Set val$set1 -> val$set1
    com.google.common.base.Predicate val$notInSet2 -> val$notInSet2
    java.util.Set val$set2 -> val$set2
    void <init>(java.util.Set,com.google.common.base.Predicate,java.util.Set) -> <init>
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
com.google.common.collect.Sets$CartesianSet -> com.google.common.collect.Sets$CartesianSet:
    com.google.common.collect.ImmutableList axes -> axes
    com.google.common.collect.CartesianList delegate -> delegate
    java.util.Set create(java.util.List) -> create
    void <init>(com.google.common.collect.ImmutableList,com.google.common.collect.CartesianList) -> <init>
    java.util.Collection delegate() -> delegate
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object delegate() -> delegate
com.google.common.collect.Sets$CartesianSet$1 -> com.google.common.collect.Sets$CartesianSet$1:
    com.google.common.collect.ImmutableList val$axes -> val$axes
    void <init>(com.google.common.collect.ImmutableList) -> <init>
    int size() -> size
    java.util.List get(int) -> get
    boolean isPartialView() -> isPartialView
    java.lang.Object get(int) -> get
com.google.common.collect.Sets$FilteredNavigableSet -> com.google.common.collect.Sets$FilteredNavigableSet:
    void <init>(java.util.NavigableSet,com.google.common.base.Predicate) -> <init>
    java.util.NavigableSet unfiltered() -> unfiltered
    java.lang.Object lower(java.lang.Object) -> lower
    java.lang.Object floor(java.lang.Object) -> floor
    java.lang.Object ceiling(java.lang.Object) -> ceiling
    java.lang.Object higher(java.lang.Object) -> higher
    java.lang.Object pollFirst() -> pollFirst
    java.lang.Object pollLast() -> pollLast
    java.util.NavigableSet descendingSet() -> descendingSet
    java.util.Iterator descendingIterator() -> descendingIterator
    java.lang.Object last() -> last
    java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
com.google.common.collect.Sets$FilteredSet -> com.google.common.collect.Sets$FilteredSet:
    void <init>(java.util.Set,com.google.common.base.Predicate) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.common.collect.Sets$FilteredSortedSet -> com.google.common.collect.Sets$FilteredSortedSet:
    void <init>(java.util.SortedSet,com.google.common.base.Predicate) -> <init>
    java.util.Comparator comparator() -> comparator
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.lang.Object first() -> first
    java.lang.Object last() -> last
com.google.common.collect.Sets$ImprovedAbstractSet -> com.google.common.collect.Sets$ImprovedAbstractSet:
    void <init>() -> <init>
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.Sets$PowerSet -> com.google.common.collect.Sets$PowerSet:
    com.google.common.collect.ImmutableMap inputSet -> inputSet
    void <init>(java.util.Set) -> <init>
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.Sets$PowerSet$1 -> com.google.common.collect.Sets$PowerSet$1:
    com.google.common.collect.Sets$PowerSet this$0 -> this$0
    void <init>(com.google.common.collect.Sets$PowerSet,int) -> <init>
    java.util.Set get(int) -> get
    java.lang.Object get(int) -> get
com.google.common.collect.Sets$SetView -> com.google.common.collect.Sets$SetView:
    void <init>() -> <init>
    com.google.common.collect.ImmutableSet immutableCopy() -> immutableCopy
    java.util.Set copyInto(java.util.Set) -> copyInto
    void <init>(com.google.common.collect.Sets$1) -> <init>
com.google.common.collect.Sets$SubSet -> com.google.common.collect.Sets$SubSet:
    com.google.common.collect.ImmutableMap inputSet -> inputSet
    int mask -> mask
    void <init>(com.google.common.collect.ImmutableMap,int) -> <init>
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    com.google.common.collect.ImmutableMap access$100(com.google.common.collect.Sets$SubSet) -> access$100
    int access$200(com.google.common.collect.Sets$SubSet) -> access$200
com.google.common.collect.Sets$SubSet$1 -> com.google.common.collect.Sets$SubSet$1:
    com.google.common.collect.ImmutableList elements -> elements
    int remainingSetBits -> remainingSetBits
    com.google.common.collect.Sets$SubSet this$0 -> this$0
    void <init>(com.google.common.collect.Sets$SubSet) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.Sets$UnmodifiableNavigableSet -> com.google.common.collect.Sets$UnmodifiableNavigableSet:
    java.util.NavigableSet delegate -> delegate
    com.google.common.collect.Sets$UnmodifiableNavigableSet descendingSet -> descendingSet
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.NavigableSet) -> <init>
    java.util.SortedSet delegate() -> delegate
    java.lang.Object lower(java.lang.Object) -> lower
    java.lang.Object floor(java.lang.Object) -> floor
    java.lang.Object ceiling(java.lang.Object) -> ceiling
    java.lang.Object higher(java.lang.Object) -> higher
    java.lang.Object pollFirst() -> pollFirst
    java.lang.Object pollLast() -> pollLast
    java.util.NavigableSet descendingSet() -> descendingSet
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    java.util.Set delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.SingletonImmutableBiMap -> com.google.common.collect.SingletonImmutableBiMap:
    java.lang.Object singleKey -> singleKey
    java.lang.Object singleValue -> singleValue
    com.google.common.collect.ImmutableBiMap inverse -> inverse
    void <init>(java.lang.Object,java.lang.Object) -> <init>
    void <init>(java.lang.Object,java.lang.Object,com.google.common.collect.ImmutableBiMap) -> <init>
    void <init>(java.util.Map$Entry) -> <init>
    java.lang.Object get(java.lang.Object) -> get
    int size() -> size
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    boolean isPartialView() -> isPartialView
    com.google.common.collect.ImmutableSet createEntrySet() -> createEntrySet
    com.google.common.collect.ImmutableSet createKeySet() -> createKeySet
    com.google.common.collect.ImmutableBiMap inverse() -> inverse
    com.google.common.collect.BiMap inverse() -> inverse
com.google.common.collect.SingletonImmutableList -> com.google.common.collect.SingletonImmutableList:
    java.lang.Object element -> element
    void <init>(java.lang.Object) -> <init>
    java.lang.Object get(int) -> get
    int indexOf(java.lang.Object) -> indexOf
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    int size() -> size
    com.google.common.collect.ImmutableList subList(int,int) -> subList
    com.google.common.collect.ImmutableList reverse() -> reverse
    boolean contains(java.lang.Object) -> contains
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    boolean isEmpty() -> isEmpty
    boolean isPartialView() -> isPartialView
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    java.util.List subList(int,int) -> subList
    java.util.Iterator iterator() -> iterator
com.google.common.collect.SingletonImmutableSet -> com.google.common.collect.SingletonImmutableSet:
    java.lang.Object element -> element
    int cachedHashCode -> cachedHashCode
    void <init>(java.lang.Object) -> <init>
    void <init>(java.lang.Object,int) -> <init>
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    boolean isPartialView() -> isPartialView
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean isHashCodeFast() -> isHashCodeFast
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
com.google.common.collect.SortedIterable -> com.google.common.collect.SortedIterable:
    java.util.Comparator comparator() -> comparator
    java.util.Iterator iterator() -> iterator
com.google.common.collect.SortedIterables -> com.google.common.collect.SortedIterables:
    void <init>() -> <init>
    boolean hasSameComparator(java.util.Comparator,java.lang.Iterable) -> hasSameComparator
    java.util.Comparator comparator(java.util.SortedSet) -> comparator
com.google.common.collect.SortedLists -> com.google.common.collect.SortedLists:
    void <init>() -> <init>
    int binarySearch(java.util.List,java.lang.Comparable,com.google.common.collect.SortedLists$KeyPresentBehavior,com.google.common.collect.SortedLists$KeyAbsentBehavior) -> binarySearch
    int binarySearch(java.util.List,com.google.common.base.Function,java.lang.Comparable,com.google.common.collect.SortedLists$KeyPresentBehavior,com.google.common.collect.SortedLists$KeyAbsentBehavior) -> binarySearch
    int binarySearch(java.util.List,com.google.common.base.Function,java.lang.Object,java.util.Comparator,com.google.common.collect.SortedLists$KeyPresentBehavior,com.google.common.collect.SortedLists$KeyAbsentBehavior) -> binarySearch
    int binarySearch(java.util.List,java.lang.Object,java.util.Comparator,com.google.common.collect.SortedLists$KeyPresentBehavior,com.google.common.collect.SortedLists$KeyAbsentBehavior) -> binarySearch
com.google.common.collect.SortedLists$1 -> com.google.common.collect.SortedLists$1:
com.google.common.collect.SortedLists$KeyAbsentBehavior -> com.google.common.collect.SortedLists$KeyAbsentBehavior:
    com.google.common.collect.SortedLists$KeyAbsentBehavior NEXT_LOWER -> NEXT_LOWER
    com.google.common.collect.SortedLists$KeyAbsentBehavior NEXT_HIGHER -> NEXT_HIGHER
    com.google.common.collect.SortedLists$KeyAbsentBehavior INVERTED_INSERTION_INDEX -> INVERTED_INSERTION_INDEX
    com.google.common.collect.SortedLists$KeyAbsentBehavior[] $VALUES -> $VALUES
    com.google.common.collect.SortedLists$KeyAbsentBehavior[] values() -> values
    com.google.common.collect.SortedLists$KeyAbsentBehavior valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    int resultIndex(int) -> resultIndex
    void <init>(java.lang.String,int,com.google.common.collect.SortedLists$1) -> <init>
    void <clinit>() -> <clinit>
com.google.common.collect.SortedLists$KeyAbsentBehavior$1 -> com.google.common.collect.SortedLists$KeyAbsentBehavior$1:
    void <init>(java.lang.String,int) -> <init>
    int resultIndex(int) -> resultIndex
com.google.common.collect.SortedLists$KeyAbsentBehavior$2 -> com.google.common.collect.SortedLists$KeyAbsentBehavior$2:
    void <init>(java.lang.String,int) -> <init>
    int resultIndex(int) -> resultIndex
com.google.common.collect.SortedLists$KeyAbsentBehavior$3 -> com.google.common.collect.SortedLists$KeyAbsentBehavior$3:
    void <init>(java.lang.String,int) -> <init>
    int resultIndex(int) -> resultIndex
com.google.common.collect.SortedLists$KeyPresentBehavior -> com.google.common.collect.SortedLists$KeyPresentBehavior:
    com.google.common.collect.SortedLists$KeyPresentBehavior ANY_PRESENT -> ANY_PRESENT
    com.google.common.collect.SortedLists$KeyPresentBehavior LAST_PRESENT -> LAST_PRESENT
    com.google.common.collect.SortedLists$KeyPresentBehavior FIRST_PRESENT -> FIRST_PRESENT
    com.google.common.collect.SortedLists$KeyPresentBehavior FIRST_AFTER -> FIRST_AFTER
    com.google.common.collect.SortedLists$KeyPresentBehavior LAST_BEFORE -> LAST_BEFORE
    com.google.common.collect.SortedLists$KeyPresentBehavior[] $VALUES -> $VALUES
    com.google.common.collect.SortedLists$KeyPresentBehavior[] values() -> values
    com.google.common.collect.SortedLists$KeyPresentBehavior valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    int resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int) -> resultIndex
    void <init>(java.lang.String,int,com.google.common.collect.SortedLists$1) -> <init>
    void <clinit>() -> <clinit>
com.google.common.collect.SortedLists$KeyPresentBehavior$1 -> com.google.common.collect.SortedLists$KeyPresentBehavior$1:
    void <init>(java.lang.String,int) -> <init>
    int resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int) -> resultIndex
com.google.common.collect.SortedLists$KeyPresentBehavior$2 -> com.google.common.collect.SortedLists$KeyPresentBehavior$2:
    void <init>(java.lang.String,int) -> <init>
    int resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int) -> resultIndex
com.google.common.collect.SortedLists$KeyPresentBehavior$3 -> com.google.common.collect.SortedLists$KeyPresentBehavior$3:
    void <init>(java.lang.String,int) -> <init>
    int resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int) -> resultIndex
com.google.common.collect.SortedLists$KeyPresentBehavior$4 -> com.google.common.collect.SortedLists$KeyPresentBehavior$4:
    void <init>(java.lang.String,int) -> <init>
    int resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int) -> resultIndex
com.google.common.collect.SortedLists$KeyPresentBehavior$5 -> com.google.common.collect.SortedLists$KeyPresentBehavior$5:
    void <init>(java.lang.String,int) -> <init>
    int resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int) -> resultIndex
com.google.common.collect.SortedMapDifference -> com.google.common.collect.SortedMapDifference:
    java.util.SortedMap entriesOnlyOnLeft() -> entriesOnlyOnLeft
    java.util.SortedMap entriesOnlyOnRight() -> entriesOnlyOnRight
    java.util.SortedMap entriesInCommon() -> entriesInCommon
    java.util.SortedMap entriesDiffering() -> entriesDiffering
com.google.common.collect.SortedMultiset -> com.google.common.collect.SortedMultiset:
    java.util.Comparator comparator() -> comparator
    com.google.common.collect.Multiset$Entry firstEntry() -> firstEntry
    com.google.common.collect.Multiset$Entry lastEntry() -> lastEntry
    com.google.common.collect.Multiset$Entry pollFirstEntry() -> pollFirstEntry
    com.google.common.collect.Multiset$Entry pollLastEntry() -> pollLastEntry
    java.util.NavigableSet elementSet() -> elementSet
    java.util.Iterator iterator() -> iterator
    com.google.common.collect.SortedMultiset descendingMultiset() -> descendingMultiset
    com.google.common.collect.SortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    com.google.common.collect.SortedMultiset subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType) -> subMultiset
    com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
com.google.common.collect.SortedMultisetBridge -> com.google.common.collect.SortedMultisetBridge:
com.google.common.collect.SortedSetMultimap -> com.google.common.collect.SortedSetMultimap:
    java.util.SortedSet get(java.lang.Object) -> get
    java.util.SortedSet removeAll(java.lang.Object) -> removeAll
    java.util.SortedSet replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Map asMap() -> asMap
    java.util.Comparator valueComparator() -> valueComparator
com.google.common.collect.Synchronized -> com.google.common.collect.Synchronized:
    void <init>() -> <init>
    java.util.Collection collection(java.util.Collection,java.lang.Object) -> collection
    java.util.Set set(java.util.Set,java.lang.Object) -> set
    java.util.SortedSet sortedSet(java.util.SortedSet,java.lang.Object) -> sortedSet
    java.util.List list(java.util.List,java.lang.Object) -> list
    com.google.common.collect.Multiset multiset(com.google.common.collect.Multiset,java.lang.Object) -> multiset
    com.google.common.collect.Multimap multimap(com.google.common.collect.Multimap,java.lang.Object) -> multimap
    com.google.common.collect.ListMultimap listMultimap(com.google.common.collect.ListMultimap,java.lang.Object) -> listMultimap
    com.google.common.collect.SetMultimap setMultimap(com.google.common.collect.SetMultimap,java.lang.Object) -> setMultimap
    com.google.common.collect.SortedSetMultimap sortedSetMultimap(com.google.common.collect.SortedSetMultimap,java.lang.Object) -> sortedSetMultimap
    java.util.Collection typePreservingCollection(java.util.Collection,java.lang.Object) -> typePreservingCollection
    java.util.Set typePreservingSet(java.util.Set,java.lang.Object) -> typePreservingSet
    java.util.Map map(java.util.Map,java.lang.Object) -> map
    java.util.SortedMap sortedMap(java.util.SortedMap,java.lang.Object) -> sortedMap
    com.google.common.collect.BiMap biMap(com.google.common.collect.BiMap,java.lang.Object) -> biMap
    java.util.NavigableSet navigableSet(java.util.NavigableSet,java.lang.Object) -> navigableSet
    java.util.NavigableSet navigableSet(java.util.NavigableSet) -> navigableSet
    java.util.NavigableMap navigableMap(java.util.NavigableMap) -> navigableMap
    java.util.NavigableMap navigableMap(java.util.NavigableMap,java.lang.Object) -> navigableMap
    java.util.Map$Entry nullableSynchronizedEntry(java.util.Map$Entry,java.lang.Object) -> nullableSynchronizedEntry
    java.util.Queue queue(java.util.Queue,java.lang.Object) -> queue
    java.util.Deque deque(java.util.Deque,java.lang.Object) -> deque
    java.util.SortedSet access$100(java.util.SortedSet,java.lang.Object) -> access$100
    java.util.List access$200(java.util.List,java.lang.Object) -> access$200
    java.util.Set access$300(java.util.Set,java.lang.Object) -> access$300
    java.util.Collection access$400(java.util.Collection,java.lang.Object) -> access$400
    java.util.Collection access$500(java.util.Collection,java.lang.Object) -> access$500
    java.util.Map$Entry access$700(java.util.Map$Entry,java.lang.Object) -> access$700
com.google.common.collect.Synchronized$1 -> com.google.common.collect.Synchronized$1:
com.google.common.collect.Synchronized$SynchronizedAsMap -> com.google.common.collect.Synchronized$SynchronizedAsMap:
    java.util.Set asMapEntrySet -> asMapEntrySet
    java.util.Collection asMapValues -> asMapValues
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Map,java.lang.Object) -> <init>
    java.util.Collection get(java.lang.Object) -> get
    java.util.Set entrySet() -> entrySet
    java.util.Collection values() -> values
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object) -> get
com.google.common.collect.Synchronized$SynchronizedAsMapEntries -> com.google.common.collect.Synchronized$SynchronizedAsMapEntries:
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Set,java.lang.Object) -> <init>
    java.util.Iterator iterator() -> iterator
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean equals(java.lang.Object) -> equals
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1 -> com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1:
    java.util.Iterator val$iterator -> val$iterator
    com.google.common.collect.Synchronized$SynchronizedAsMapEntries this$0 -> this$0
    void <init>(com.google.common.collect.Synchronized$SynchronizedAsMapEntries,java.util.Iterator) -> <init>
    java.util.Iterator delegate() -> delegate
    java.util.Map$Entry next() -> next
    java.lang.Object next() -> next
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1$1 -> com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1$1:
    java.util.Map$Entry val$entry -> val$entry
    com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1 this$1 -> this$1
    void <init>(com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1,java.util.Map$Entry) -> <init>
    java.util.Map$Entry delegate() -> delegate
    java.util.Collection getValue() -> getValue
    java.lang.Object getValue() -> getValue
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedAsMapValues -> com.google.common.collect.Synchronized$SynchronizedAsMapValues:
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Collection,java.lang.Object) -> <init>
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Synchronized$SynchronizedAsMapValues$1 -> com.google.common.collect.Synchronized$SynchronizedAsMapValues$1:
    java.util.Iterator val$iterator -> val$iterator
    com.google.common.collect.Synchronized$SynchronizedAsMapValues this$0 -> this$0
    void <init>(com.google.common.collect.Synchronized$SynchronizedAsMapValues,java.util.Iterator) -> <init>
    java.util.Iterator delegate() -> delegate
    java.util.Collection next() -> next
    java.lang.Object next() -> next
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedBiMap -> com.google.common.collect.Synchronized$SynchronizedBiMap:
    java.util.Set valueSet -> valueSet
    com.google.common.collect.BiMap inverse -> inverse
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.BiMap,java.lang.Object,com.google.common.collect.BiMap) -> <init>
    com.google.common.collect.BiMap delegate() -> delegate
    java.util.Set values() -> values
    java.lang.Object forcePut(java.lang.Object,java.lang.Object) -> forcePut
    com.google.common.collect.BiMap inverse() -> inverse
    java.util.Collection values() -> values
    java.util.Map delegate() -> delegate
    java.lang.Object delegate() -> delegate
    void <init>(com.google.common.collect.BiMap,java.lang.Object,com.google.common.collect.BiMap,com.google.common.collect.Synchronized$1) -> <init>
com.google.common.collect.Synchronized$SynchronizedCollection -> com.google.common.collect.Synchronized$SynchronizedCollection:
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Collection,java.lang.Object) -> <init>
    java.util.Collection delegate() -> delegate
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.lang.Object delegate() -> delegate
    void <init>(java.util.Collection,java.lang.Object,com.google.common.collect.Synchronized$1) -> <init>
com.google.common.collect.Synchronized$SynchronizedDeque -> com.google.common.collect.Synchronized$SynchronizedDeque:
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Deque,java.lang.Object) -> <init>
    java.util.Deque delegate() -> delegate
    void addFirst(java.lang.Object) -> addFirst
    void addLast(java.lang.Object) -> addLast
    boolean offerFirst(java.lang.Object) -> offerFirst
    boolean offerLast(java.lang.Object) -> offerLast
    java.lang.Object removeFirst() -> removeFirst
    java.lang.Object removeLast() -> removeLast
    java.lang.Object pollFirst() -> pollFirst
    java.lang.Object pollLast() -> pollLast
    java.lang.Object getFirst() -> getFirst
    java.lang.Object getLast() -> getLast
    java.lang.Object peekFirst() -> peekFirst
    java.lang.Object peekLast() -> peekLast
    boolean removeFirstOccurrence(java.lang.Object) -> removeFirstOccurrence
    boolean removeLastOccurrence(java.lang.Object) -> removeLastOccurrence
    void push(java.lang.Object) -> push
    java.lang.Object pop() -> pop
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.Queue delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedEntry -> com.google.common.collect.Synchronized$SynchronizedEntry:
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Map$Entry,java.lang.Object) -> <init>
    java.util.Map$Entry delegate() -> delegate
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedList -> com.google.common.collect.Synchronized$SynchronizedList:
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.List,java.lang.Object) -> <init>
    java.util.List delegate() -> delegate
    void add(int,java.lang.Object) -> add
    boolean addAll(int,java.util.Collection) -> addAll
    java.lang.Object get(int) -> get
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.util.ListIterator listIterator() -> listIterator
    java.util.ListIterator listIterator(int) -> listIterator
    java.lang.Object remove(int) -> remove
    java.lang.Object set(int,java.lang.Object) -> set
    java.util.List subList(int,int) -> subList
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedListMultimap -> com.google.common.collect.Synchronized$SynchronizedListMultimap:
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.ListMultimap,java.lang.Object) -> <init>
    com.google.common.collect.ListMultimap delegate() -> delegate
    java.util.List get(java.lang.Object) -> get
    java.util.List removeAll(java.lang.Object) -> removeAll
    java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection get(java.lang.Object) -> get
    com.google.common.collect.Multimap delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedMap -> com.google.common.collect.Synchronized$SynchronizedMap:
    java.util.Set keySet -> keySet
    java.util.Collection values -> values
    java.util.Set entrySet -> entrySet
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Map,java.lang.Object) -> <init>
    java.util.Map delegate() -> delegate
    void clear() -> clear
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.util.Set entrySet() -> entrySet
    java.lang.Object get(java.lang.Object) -> get
    boolean isEmpty() -> isEmpty
    java.util.Set keySet() -> keySet
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    void putAll(java.util.Map) -> putAll
    java.lang.Object remove(java.lang.Object) -> remove
    int size() -> size
    java.util.Collection values() -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedMultimap -> com.google.common.collect.Synchronized$SynchronizedMultimap:
    java.util.Set keySet -> keySet
    java.util.Collection valuesCollection -> valuesCollection
    java.util.Collection entries -> entries
    java.util.Map asMap -> asMap
    com.google.common.collect.Multiset keys -> keys
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.Multimap delegate() -> delegate
    void <init>(com.google.common.collect.Multimap,java.lang.Object) -> <init>
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    java.util.Collection get(java.lang.Object) -> get
    boolean put(java.lang.Object,java.lang.Object) -> put
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
    java.util.Collection entries() -> entries
    java.util.Map asMap() -> asMap
    com.google.common.collect.Multiset keys() -> keys
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedMultiset -> com.google.common.collect.Synchronized$SynchronizedMultiset:
    java.util.Set elementSet -> elementSet
    java.util.Set entrySet -> entrySet
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.Multiset,java.lang.Object) -> <init>
    com.google.common.collect.Multiset delegate() -> delegate
    int count(java.lang.Object) -> count
    int add(java.lang.Object,int) -> add
    int remove(java.lang.Object,int) -> remove
    int setCount(java.lang.Object,int) -> setCount
    boolean setCount(java.lang.Object,int,int) -> setCount
    java.util.Set elementSet() -> elementSet
    java.util.Set entrySet() -> entrySet
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedNavigableMap -> com.google.common.collect.Synchronized$SynchronizedNavigableMap:
    java.util.NavigableSet descendingKeySet -> descendingKeySet
    java.util.NavigableMap descendingMap -> descendingMap
    java.util.NavigableSet navigableKeySet -> navigableKeySet
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.NavigableMap,java.lang.Object) -> <init>
    java.util.NavigableMap delegate() -> delegate
    java.util.Map$Entry ceilingEntry(java.lang.Object) -> ceilingEntry
    java.lang.Object ceilingKey(java.lang.Object) -> ceilingKey
    java.util.NavigableSet descendingKeySet() -> descendingKeySet
    java.util.NavigableMap descendingMap() -> descendingMap
    java.util.Map$Entry firstEntry() -> firstEntry
    java.util.Map$Entry floorEntry(java.lang.Object) -> floorEntry
    java.lang.Object floorKey(java.lang.Object) -> floorKey
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.Map$Entry higherEntry(java.lang.Object) -> higherEntry
    java.lang.Object higherKey(java.lang.Object) -> higherKey
    java.util.Map$Entry lastEntry() -> lastEntry
    java.util.Map$Entry lowerEntry(java.lang.Object) -> lowerEntry
    java.lang.Object lowerKey(java.lang.Object) -> lowerKey
    java.util.Set keySet() -> keySet
    java.util.NavigableSet navigableKeySet() -> navigableKeySet
    java.util.Map$Entry pollFirstEntry() -> pollFirstEntry
    java.util.Map$Entry pollLastEntry() -> pollLastEntry
    java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.util.SortedMap delegate() -> delegate
    java.util.Map delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedNavigableSet -> com.google.common.collect.Synchronized$SynchronizedNavigableSet:
    java.util.NavigableSet descendingSet -> descendingSet
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.NavigableSet,java.lang.Object) -> <init>
    java.util.NavigableSet delegate() -> delegate
    java.lang.Object ceiling(java.lang.Object) -> ceiling
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.NavigableSet descendingSet() -> descendingSet
    java.lang.Object floor(java.lang.Object) -> floor
    java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    java.lang.Object higher(java.lang.Object) -> higher
    java.lang.Object lower(java.lang.Object) -> lower
    java.lang.Object pollFirst() -> pollFirst
    java.lang.Object pollLast() -> pollLast
    java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.util.SortedSet delegate() -> delegate
    java.util.Set delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedObject -> com.google.common.collect.Synchronized$SynchronizedObject:
    java.lang.Object delegate -> delegate
    java.lang.Object mutex -> mutex
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Object,java.lang.Object) -> <init>
    java.lang.Object delegate() -> delegate
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
com.google.common.collect.Synchronized$SynchronizedQueue -> com.google.common.collect.Synchronized$SynchronizedQueue:
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Queue,java.lang.Object) -> <init>
    java.util.Queue delegate() -> delegate
    java.lang.Object element() -> element
    boolean offer(java.lang.Object) -> offer
    java.lang.Object peek() -> peek
    java.lang.Object poll() -> poll
    java.lang.Object remove() -> remove
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedRandomAccessList -> com.google.common.collect.Synchronized$SynchronizedRandomAccessList:
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.List,java.lang.Object) -> <init>
com.google.common.collect.Synchronized$SynchronizedSet -> com.google.common.collect.Synchronized$SynchronizedSet:
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Set,java.lang.Object) -> <init>
    java.util.Set delegate() -> delegate
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedSetMultimap -> com.google.common.collect.Synchronized$SynchronizedSetMultimap:
    java.util.Set entrySet -> entrySet
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.SetMultimap,java.lang.Object) -> <init>
    com.google.common.collect.SetMultimap delegate() -> delegate
    java.util.Set get(java.lang.Object) -> get
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Set entries() -> entries
    java.util.Collection entries() -> entries
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection get(java.lang.Object) -> get
    com.google.common.collect.Multimap delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedSortedMap -> com.google.common.collect.Synchronized$SynchronizedSortedMap:
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.SortedMap,java.lang.Object) -> <init>
    java.util.SortedMap delegate() -> delegate
    java.util.Comparator comparator() -> comparator
    java.lang.Object firstKey() -> firstKey
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.lang.Object lastKey() -> lastKey
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.util.Map delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedSortedSet -> com.google.common.collect.Synchronized$SynchronizedSortedSet:
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.SortedSet,java.lang.Object) -> <init>
    java.util.SortedSet delegate() -> delegate
    java.util.Comparator comparator() -> comparator
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.lang.Object first() -> first
    java.lang.Object last() -> last
    java.util.Set delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap -> com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.SortedSetMultimap,java.lang.Object) -> <init>
    com.google.common.collect.SortedSetMultimap delegate() -> delegate
    java.util.SortedSet get(java.lang.Object) -> get
    java.util.SortedSet removeAll(java.lang.Object) -> removeAll
    java.util.SortedSet replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Comparator valueComparator() -> valueComparator
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set get(java.lang.Object) -> get
    com.google.common.collect.SetMultimap delegate() -> delegate
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    com.google.common.collect.Multimap delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.TransformedIterator -> com.google.common.collect.TransformedIterator:
    java.util.Iterator backingIterator -> backingIterator
    void <init>(java.util.Iterator) -> <init>
    java.lang.Object transform(java.lang.Object) -> transform
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.TransformedListIterator -> com.google.common.collect.TransformedListIterator:
    void <init>(java.util.ListIterator) -> <init>
    java.util.ListIterator backingIterator() -> backingIterator
    boolean hasPrevious() -> hasPrevious
    java.lang.Object previous() -> previous
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    void set(java.lang.Object) -> set
    void add(java.lang.Object) -> add
com.google.common.collect.UnmodifiableIterator -> com.google.common.collect.UnmodifiableIterator:
    void <init>() -> <init>
    void remove() -> remove
com.google.common.collect.UnmodifiableListIterator -> com.google.common.collect.UnmodifiableListIterator:
    void <init>() -> <init>
    void add(java.lang.Object) -> add
    void set(java.lang.Object) -> set
com.google.common.collect.UnmodifiableSortedMultiset -> com.google.common.collect.UnmodifiableSortedMultiset:
    com.google.common.collect.UnmodifiableSortedMultiset descendingMultiset -> descendingMultiset
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.SortedMultiset) -> <init>
    com.google.common.collect.SortedMultiset delegate() -> delegate
    java.util.Comparator comparator() -> comparator
    java.util.NavigableSet createElementSet() -> createElementSet
    java.util.NavigableSet elementSet() -> elementSet
    com.google.common.collect.SortedMultiset descendingMultiset() -> descendingMultiset
    com.google.common.collect.Multiset$Entry firstEntry() -> firstEntry
    com.google.common.collect.Multiset$Entry lastEntry() -> lastEntry
    com.google.common.collect.Multiset$Entry pollFirstEntry() -> pollFirstEntry
    com.google.common.collect.Multiset$Entry pollLastEntry() -> pollLastEntry
    com.google.common.collect.SortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    com.google.common.collect.SortedMultiset subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType) -> subMultiset
    com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
    java.util.Set elementSet() -> elementSet
    java.util.Set createElementSet() -> createElementSet
    com.google.common.collect.Multiset delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
    java.util.SortedSet elementSet() -> elementSet
com.google.common.collect.UsingToStringOrdering -> com.google.common.collect.UsingToStringOrdering:
    com.google.common.collect.UsingToStringOrdering INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    int compare(java.lang.Object,java.lang.Object) -> compare
    java.lang.Object readResolve() -> readResolve
    java.lang.String toString() -> toString
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.google.common.math.IntMath -> com.google.common.math.IntMath:
    int MAX_POWER_OF_SQRT2_UNSIGNED -> MAX_POWER_OF_SQRT2_UNSIGNED
    byte[] maxLog10ForLeadingZeros -> maxLog10ForLeadingZeros
    int[] powersOf10 -> powersOf10
    int[] halfPowersOf10 -> halfPowersOf10
    int FLOOR_SQRT_MAX_INT -> FLOOR_SQRT_MAX_INT
    int[] factorials -> factorials
    int[] biggestBinomials -> biggestBinomials
    boolean isPowerOfTwo(int) -> isPowerOfTwo
    int lessThanBranchFree(int,int) -> lessThanBranchFree
    int log2(int,java.math.RoundingMode) -> log2
    int log10(int,java.math.RoundingMode) -> log10
    int log10Floor(int) -> log10Floor
    int pow(int,int) -> pow
    int sqrt(int,java.math.RoundingMode) -> sqrt
    int sqrtFloor(int) -> sqrtFloor
    int divide(int,int,java.math.RoundingMode) -> divide
    int mod(int,int) -> mod
    int gcd(int,int) -> gcd
    int checkedAdd(int,int) -> checkedAdd
    int checkedSubtract(int,int) -> checkedSubtract
    int checkedMultiply(int,int) -> checkedMultiply
    int checkedPow(int,int) -> checkedPow
    int factorial(int) -> factorial
    int binomial(int,int) -> binomial
    int mean(int,int) -> mean
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.google.common.math.IntMath$1 -> com.google.common.math.IntMath$1:
    int[] $SwitchMap$java$math$RoundingMode -> $SwitchMap$java$math$RoundingMode
    void <clinit>() -> <clinit>
com.google.common.math.LongMath -> com.google.common.math.LongMath:
    long MAX_POWER_OF_SQRT2_UNSIGNED -> MAX_POWER_OF_SQRT2_UNSIGNED
    byte[] maxLog10ForLeadingZeros -> maxLog10ForLeadingZeros
    long[] powersOf10 -> powersOf10
    long[] halfPowersOf10 -> halfPowersOf10
    long FLOOR_SQRT_MAX_LONG -> FLOOR_SQRT_MAX_LONG
    long[] factorials -> factorials
    int[] biggestBinomials -> biggestBinomials
    int[] biggestSimpleBinomials -> biggestSimpleBinomials
    boolean isPowerOfTwo(long) -> isPowerOfTwo
    int lessThanBranchFree(long,long) -> lessThanBranchFree
    int log2(long,java.math.RoundingMode) -> log2
    int log10(long,java.math.RoundingMode) -> log10
    int log10Floor(long) -> log10Floor
    long pow(long,int) -> pow
    long sqrt(long,java.math.RoundingMode) -> sqrt
    long divide(long,long,java.math.RoundingMode) -> divide
    int mod(long,int) -> mod
    long mod(long,long) -> mod
    long gcd(long,long) -> gcd
    long checkedAdd(long,long) -> checkedAdd
    long checkedSubtract(long,long) -> checkedSubtract
    long checkedMultiply(long,long) -> checkedMultiply
    long checkedPow(long,int) -> checkedPow
    long factorial(int) -> factorial
    long binomial(int,int) -> binomial
    long multiplyFraction(long,long,long) -> multiplyFraction
    boolean fitsInInt(long) -> fitsInInt
    long mean(long,long) -> mean
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.google.common.math.LongMath$1 -> com.google.common.math.LongMath$1:
    int[] $SwitchMap$java$math$RoundingMode -> $SwitchMap$java$math$RoundingMode
    void <clinit>() -> <clinit>
com.google.common.math.MathPreconditions -> com.google.common.math.MathPreconditions:
    int checkPositive(java.lang.String,int) -> checkPositive
    long checkPositive(java.lang.String,long) -> checkPositive
    java.math.BigInteger checkPositive(java.lang.String,java.math.BigInteger) -> checkPositive
    int checkNonNegative(java.lang.String,int) -> checkNonNegative
    long checkNonNegative(java.lang.String,long) -> checkNonNegative
    java.math.BigInteger checkNonNegative(java.lang.String,java.math.BigInteger) -> checkNonNegative
    double checkNonNegative(java.lang.String,double) -> checkNonNegative
    void checkRoundingUnnecessary(boolean) -> checkRoundingUnnecessary
    void checkInRange(boolean) -> checkInRange
    void checkNoOverflow(boolean) -> checkNoOverflow
    void <init>() -> <init>
com.google.common.primitives.AndroidInteger -> com.google.common.primitives.AndroidInteger:
    java.lang.Integer tryParse(java.lang.String) -> tryParse
    java.lang.Integer tryParse(java.lang.String,int) -> tryParse
    java.lang.Integer tryParse(java.lang.String,int,int,boolean) -> tryParse
    void <init>() -> <init>
com.google.common.primitives.Ints -> com.google.common.primitives.Ints:
    int BYTES -> BYTES
    int MAX_POWER_OF_TWO -> MAX_POWER_OF_TWO
    void <init>() -> <init>
    int hashCode(int) -> hashCode
    int checkedCast(long) -> checkedCast
    int saturatedCast(long) -> saturatedCast
    int compare(int,int) -> compare
    boolean contains(int[],int) -> contains
    int indexOf(int[],int) -> indexOf
    int indexOf(int[],int,int,int) -> indexOf
    int indexOf(int[],int[]) -> indexOf
    int lastIndexOf(int[],int) -> lastIndexOf
    int lastIndexOf(int[],int,int,int) -> lastIndexOf
    int min(int[]) -> min
    int max(int[]) -> max
    int[] concat(int[][]) -> concat
    byte[] toByteArray(int) -> toByteArray
    int fromByteArray(byte[]) -> fromByteArray
    int fromBytes(byte,byte,byte,byte) -> fromBytes
    int[] ensureCapacity(int[],int,int) -> ensureCapacity
    int[] copyOf(int[],int) -> copyOf
    java.lang.String join(java.lang.String,int[]) -> join
    java.util.Comparator lexicographicalComparator() -> lexicographicalComparator
    int[] toArray(java.util.Collection) -> toArray
    java.util.List asList(int[]) -> asList
    java.lang.Integer tryParse(java.lang.String) -> tryParse
    int access$000(int[],int,int,int) -> access$000
    int access$100(int[],int,int,int) -> access$100
com.google.common.primitives.Ints$IntArrayAsList -> com.google.common.primitives.Ints$IntArrayAsList:
    int[] array -> array
    int start -> start
    int end -> end
    long serialVersionUID -> serialVersionUID
    void <init>(int[]) -> <init>
    void <init>(int[],int,int) -> <init>
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.Integer get(int) -> get
    boolean contains(java.lang.Object) -> contains
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.lang.Integer set(int,java.lang.Integer) -> set
    java.util.List subList(int,int) -> subList
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int[] toIntArray() -> toIntArray
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
com.google.common.primitives.Ints$LexicographicalComparator -> com.google.common.primitives.Ints$LexicographicalComparator:
    com.google.common.primitives.Ints$LexicographicalComparator INSTANCE -> INSTANCE
    com.google.common.primitives.Ints$LexicographicalComparator[] $VALUES -> $VALUES
    com.google.common.primitives.Ints$LexicographicalComparator[] values() -> values
    com.google.common.primitives.Ints$LexicographicalComparator valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    int compare(int[],int[]) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <clinit>() -> <clinit>
com.jogamp.common.GlueGenVersion -> com.jogamp.common.GlueGenVersion:
    com.jogamp.common.GlueGenVersion jogampCommonVersionInfo -> jogampCommonVersionInfo
    void <init>(java.lang.String,java.util.jar.Manifest) -> <init>
    com.jogamp.common.GlueGenVersion getInstance() -> getInstance
    void main(java.lang.String[]) -> main
com.jogamp.common.JogampRuntimeException -> com.jogamp.common.JogampRuntimeException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
    void <init>(java.lang.Throwable) -> <init>
com.jogamp.common.jvm.JNILibLoaderBase -> com.jogamp.common.jvm.JNILibLoaderBase:
    boolean DEBUG -> DEBUG
    java.util.HashSet loaded -> loaded
    com.jogamp.common.jvm.JNILibLoaderBase$LoaderAction loaderAction -> loaderAction
    java.lang.String nativeJarTagPackage -> nativeJarTagPackage
    java.lang.reflect.Method customLoadLibraryMethod -> customLoadLibraryMethod
    void <init>() -> <init>
    boolean isLoaded(java.lang.String) -> isLoaded
    void addLoaded(java.lang.String) -> addLoaded
    void disableLoading() -> disableLoading
    void enableLoading() -> enableLoading
    void setLoadingAction(com.jogamp.common.jvm.JNILibLoaderBase$LoaderAction) -> setLoadingAction
    boolean addNativeJarLibsImpl(java.lang.Class,java.net.URI,java.lang.String,java.lang.String) -> addNativeJarLibsImpl
    boolean addNativeJarLibsJoglCfg(java.lang.Class[]) -> addNativeJarLibsJoglCfg
    boolean addNativeJarLibs(java.lang.Class[],java.lang.String) -> addNativeJarLibs
    boolean addNativeJarLibsWithTempJarCache(java.lang.Class[],java.lang.String) -> addNativeJarLibsWithTempJarCache
    boolean loadLibrary(java.lang.String,boolean,java.lang.ClassLoader) -> loadLibrary
    void loadLibrary(java.lang.String,java.lang.String[],boolean,java.lang.ClassLoader) -> loadLibrary
    void loadLibraryInternal(java.lang.String,java.lang.ClassLoader) -> loadLibraryInternal
    void access$000(java.lang.String,java.lang.ClassLoader) -> access$000
    void <clinit>() -> <clinit>
com.jogamp.common.jvm.JNILibLoaderBase$1 -> com.jogamp.common.jvm.JNILibLoaderBase$1:
    void <init>() -> <init>
    java.lang.reflect.Method run() -> run
    java.lang.Object run() -> run
com.jogamp.common.jvm.JNILibLoaderBase$DefaultAction -> com.jogamp.common.jvm.JNILibLoaderBase$DefaultAction:
    void <init>() -> <init>
    boolean loadLibrary(java.lang.String,boolean,java.lang.ClassLoader) -> loadLibrary
    void loadLibrary(java.lang.String,java.lang.String[],boolean,java.lang.ClassLoader) -> loadLibrary
    void <init>(com.jogamp.common.jvm.JNILibLoaderBase$1) -> <init>
com.jogamp.common.jvm.JNILibLoaderBase$LoaderAction -> com.jogamp.common.jvm.JNILibLoaderBase$LoaderAction:
    boolean loadLibrary(java.lang.String,boolean,java.lang.ClassLoader) -> loadLibrary
    void loadLibrary(java.lang.String,java.lang.String[],boolean,java.lang.ClassLoader) -> loadLibrary
com.jogamp.common.net.AssetURLConnection -> com.jogamp.common.net.AssetURLConnection:
    void <init>(java.net.URL,com.jogamp.common.net.AssetURLContext) -> <init>
    java.lang.String getEntryName() -> getEntryName
com.jogamp.common.net.AssetURLContext -> com.jogamp.common.net.AssetURLContext:
    boolean DEBUG -> DEBUG
    java.lang.String asset_protocol -> asset_protocol
    java.lang.String asset_protocol_prefix -> asset_protocol_prefix
    java.lang.String assets_folder -> assets_folder
    void <init>() -> <init>
    com.jogamp.common.net.AssetURLContext create(java.lang.ClassLoader) -> create
    com.jogamp.common.net.AssetURLStreamHandler createHandler(java.lang.ClassLoader) -> createHandler
    java.net.URL createURL(java.lang.String,java.lang.ClassLoader) -> createURL
    java.net.URL createURL(java.lang.String) -> createURL
    java.net.URLStreamHandler getRegisteredHandler() -> getRegisteredHandler
    boolean registerHandler(java.lang.ClassLoader) -> registerHandler
    java.lang.ClassLoader getClassLoader() -> getClassLoader
    java.lang.String getImplementedProtocol() -> getImplementedProtocol
    java.net.URLConnection resolve(java.lang.String) -> resolve
    java.net.URLConnection resolve(java.lang.String,java.lang.ClassLoader) -> resolve
    java.net.URLConnection open(java.net.URL) -> open
    void <clinit>() -> <clinit>
com.jogamp.common.net.AssetURLContext$1 -> com.jogamp.common.net.AssetURLContext$1:
    java.lang.ClassLoader val$cl -> val$cl
    void <init>(java.lang.ClassLoader) -> <init>
    java.lang.ClassLoader getClassLoader() -> getClassLoader
com.jogamp.common.net.AssetURLStreamHandler -> com.jogamp.common.net.AssetURLStreamHandler:
    com.jogamp.common.net.AssetURLContext ctx -> ctx
    void <init>(com.jogamp.common.net.AssetURLContext) -> <init>
    java.net.URLConnection openConnection(java.net.URL) -> openConnection
com.jogamp.common.net.GenericURLStreamHandlerFactory -> com.jogamp.common.net.GenericURLStreamHandlerFactory:
    com.jogamp.common.net.GenericURLStreamHandlerFactory factory -> factory
    java.util.Map protocolHandlers -> protocolHandlers
    void <init>() -> <init>
    java.net.URLStreamHandler setHandler(java.lang.String,java.net.URLStreamHandler) -> setHandler
    java.net.URLStreamHandler getHandler(java.lang.String) -> getHandler
    java.net.URLStreamHandler createURLStreamHandler(java.lang.String) -> createURLStreamHandler
    com.jogamp.common.net.GenericURLStreamHandlerFactory register() -> register
    void <init>(com.jogamp.common.net.GenericURLStreamHandlerFactory$1) -> <init>
    void <clinit>() -> <clinit>
com.jogamp.common.net.GenericURLStreamHandlerFactory$1 -> com.jogamp.common.net.GenericURLStreamHandlerFactory$1:
    void <init>() -> <init>
    com.jogamp.common.net.GenericURLStreamHandlerFactory run() -> run
    java.lang.Object run() -> run
com.jogamp.common.net.PiggybackURLConnection -> com.jogamp.common.net.PiggybackURLConnection:
    java.net.URL subUrl -> subUrl
    java.net.URLConnection subConn -> subConn
    com.jogamp.common.net.PiggybackURLContext context -> context
    void <init>(java.net.URL,com.jogamp.common.net.PiggybackURLContext) -> <init>
    void connect() -> connect
    java.io.InputStream getInputStream() -> getInputStream
    java.lang.String getEntryName() -> getEntryName
    java.net.URL getSubProtocol() -> getSubProtocol
com.jogamp.common.net.PiggybackURLContext -> com.jogamp.common.net.PiggybackURLContext:
    java.lang.String getImplementedProtocol() -> getImplementedProtocol
    java.net.URLConnection resolve(java.lang.String) -> resolve
com.jogamp.common.nio.AbstractBuffer -> com.jogamp.common.nio.AbstractBuffer:
    java.nio.Buffer buffer -> buffer
    int elementSize -> elementSize
    int capacity -> capacity
    int position -> position
    void <init>(java.nio.Buffer,int,int) -> <init>
    int elementSize() -> elementSize
    int limit() -> limit
    int capacity() -> capacity
    int position() -> position
    com.jogamp.common.nio.AbstractBuffer position(int) -> position
    int remaining() -> remaining
    boolean hasRemaining() -> hasRemaining
    com.jogamp.common.nio.AbstractBuffer rewind() -> rewind
    java.nio.Buffer getBuffer() -> getBuffer
    boolean isDirect() -> isDirect
    boolean hasArray() -> hasArray
    int arrayOffset() -> arrayOffset
    java.lang.Object array() -> array
    java.lang.String toString() -> toString
    com.jogamp.common.nio.NativeBuffer rewind() -> rewind
    com.jogamp.common.nio.NativeBuffer position(int) -> position
    void <clinit>() -> <clinit>
com.jogamp.common.nio.Buffers -> com.jogamp.common.nio.Buffers:
    int SIZEOF_BYTE -> SIZEOF_BYTE
    int SIZEOF_SHORT -> SIZEOF_SHORT
    int SIZEOF_CHAR -> SIZEOF_CHAR
    int SIZEOF_INT -> SIZEOF_INT
    int SIZEOF_FLOAT -> SIZEOF_FLOAT
    int SIZEOF_LONG -> SIZEOF_LONG
    int SIZEOF_DOUBLE -> SIZEOF_DOUBLE
    void <init>() -> <init>
    java.nio.ByteBuffer newDirectByteBuffer(int) -> newDirectByteBuffer
    java.nio.ByteBuffer newDirectByteBuffer(byte[],int,int) -> newDirectByteBuffer
    java.nio.ByteBuffer newDirectByteBuffer(byte[],int) -> newDirectByteBuffer
    java.nio.ByteBuffer newDirectByteBuffer(byte[]) -> newDirectByteBuffer
    java.nio.DoubleBuffer newDirectDoubleBuffer(int) -> newDirectDoubleBuffer
    java.nio.DoubleBuffer newDirectDoubleBuffer(double[],int,int) -> newDirectDoubleBuffer
    java.nio.DoubleBuffer newDirectDoubleBuffer(double[],int) -> newDirectDoubleBuffer
    java.nio.DoubleBuffer newDirectDoubleBuffer(double[]) -> newDirectDoubleBuffer
    java.nio.FloatBuffer newDirectFloatBuffer(int) -> newDirectFloatBuffer
    java.nio.FloatBuffer newDirectFloatBuffer(float[],int,int) -> newDirectFloatBuffer
    java.nio.FloatBuffer newDirectFloatBuffer(float[],int) -> newDirectFloatBuffer
    java.nio.FloatBuffer newDirectFloatBuffer(float[]) -> newDirectFloatBuffer
    java.nio.IntBuffer newDirectIntBuffer(int) -> newDirectIntBuffer
    java.nio.IntBuffer newDirectIntBuffer(int[],int,int) -> newDirectIntBuffer
    java.nio.IntBuffer newDirectIntBuffer(int[],int) -> newDirectIntBuffer
    java.nio.IntBuffer newDirectIntBuffer(int[]) -> newDirectIntBuffer
    java.nio.LongBuffer newDirectLongBuffer(int) -> newDirectLongBuffer
    java.nio.LongBuffer newDirectLongBuffer(long[],int,int) -> newDirectLongBuffer
    java.nio.LongBuffer newDirectLongBuffer(long[],int) -> newDirectLongBuffer
    java.nio.LongBuffer newDirectLongBuffer(long[]) -> newDirectLongBuffer
    java.nio.ShortBuffer newDirectShortBuffer(int) -> newDirectShortBuffer
    java.nio.ShortBuffer newDirectShortBuffer(short[],int,int) -> newDirectShortBuffer
    java.nio.ShortBuffer newDirectShortBuffer(short[],int) -> newDirectShortBuffer
    java.nio.ShortBuffer newDirectShortBuffer(short[]) -> newDirectShortBuffer
    java.nio.CharBuffer newDirectCharBuffer(int) -> newDirectCharBuffer
    java.nio.CharBuffer newDirectCharBuffer(char[],int,int) -> newDirectCharBuffer
    java.nio.CharBuffer newDirectCharBuffer(char[],int) -> newDirectCharBuffer
    java.nio.CharBuffer newDirectCharBuffer(char[]) -> newDirectCharBuffer
    java.nio.Buffer slice(java.nio.Buffer) -> slice
    java.nio.Buffer slice(java.nio.Buffer,int,int) -> slice
    java.nio.FloatBuffer slice2Float(java.nio.Buffer,int,int) -> slice2Float
    java.nio.FloatBuffer slice2Float(float[],int,int) -> slice2Float
    java.nio.ByteBuffer nativeOrder(java.nio.ByteBuffer) -> nativeOrder
    int sizeOfBufferElem(java.lang.Object) -> sizeOfBufferElem
    int remainingElem(java.lang.Object) -> remainingElem
    int remainingBytes(java.lang.Object) -> remainingBytes
    boolean isDirect(java.lang.Object) -> isDirect
    int getDirectBufferByteOffset(java.lang.Object) -> getDirectBufferByteOffset
    java.lang.Object getArray(java.lang.Object) -> getArray
    int getIndirectBufferByteOffset(java.lang.Object) -> getIndirectBufferByteOffset
    java.nio.ByteBuffer copyByteBuffer(java.nio.ByteBuffer) -> copyByteBuffer
    java.nio.FloatBuffer copyFloatBuffer(java.nio.FloatBuffer) -> copyFloatBuffer
    java.nio.IntBuffer copyIntBuffer(java.nio.IntBuffer) -> copyIntBuffer
    java.nio.ShortBuffer copyShortBuffer(java.nio.ShortBuffer) -> copyShortBuffer
    java.nio.ByteBuffer copyFloatBufferAsByteBuffer(java.nio.FloatBuffer) -> copyFloatBufferAsByteBuffer
    java.nio.ByteBuffer copyIntBufferAsByteBuffer(java.nio.IntBuffer) -> copyIntBufferAsByteBuffer
    java.nio.ByteBuffer copyShortBufferAsByteBuffer(java.nio.ShortBuffer) -> copyShortBufferAsByteBuffer
    float[] getFloatArray(double[],int,float[],int,int) -> getFloatArray
    java.nio.FloatBuffer getFloatBuffer(java.nio.DoubleBuffer,java.nio.FloatBuffer) -> getFloatBuffer
    double[] getDoubleArray(float[],int,double[],int,int) -> getDoubleArray
    java.nio.DoubleBuffer getDoubleBuffer(java.nio.FloatBuffer,java.nio.DoubleBuffer) -> getDoubleBuffer
    java.nio.Buffer put(java.nio.Buffer,java.nio.Buffer) -> put
    java.nio.Buffer putb(java.nio.Buffer,byte) -> putb
    java.nio.Buffer puts(java.nio.Buffer,short) -> puts
    java.nio.Buffer puti(java.nio.Buffer,int) -> puti
    java.nio.Buffer putf(java.nio.Buffer,float) -> putf
    java.nio.Buffer putd(java.nio.Buffer,double) -> putd
    java.nio.Buffer putNb(java.nio.Buffer,boolean,byte,boolean) -> putNb
    java.nio.Buffer putNs(java.nio.Buffer,boolean,short,boolean) -> putNs
    java.nio.Buffer putNi(java.nio.Buffer,boolean,int,boolean) -> putNi
    java.nio.Buffer putNf(java.nio.Buffer,boolean,float) -> putNf
    void rangeCheck(byte[],int,int) -> rangeCheck
    void rangeCheck(char[],int,int) -> rangeCheck
    void rangeCheck(short[],int,int) -> rangeCheck
    void rangeCheck(int[],int,int) -> rangeCheck
    void rangeCheck(long[],int,int) -> rangeCheck
    void rangeCheck(float[],int,int) -> rangeCheck
    void rangeCheck(double[],int,int) -> rangeCheck
    void rangeCheck(java.nio.Buffer,int) -> rangeCheck
    void rangeCheckBytes(java.lang.Object,int) -> rangeCheckBytes
    java.lang.StringBuilder toString(java.lang.StringBuilder,java.lang.String,java.nio.Buffer) -> toString
com.jogamp.common.nio.NativeBuffer -> com.jogamp.common.nio.NativeBuffer:
    int elementSize() -> elementSize
    int limit() -> limit
    int capacity() -> capacity
    int position() -> position
    com.jogamp.common.nio.NativeBuffer position(int) -> position
    int remaining() -> remaining
    boolean hasRemaining() -> hasRemaining
    boolean hasArray() -> hasArray
    int arrayOffset() -> arrayOffset
    java.lang.Object array() -> array
    java.nio.Buffer getBuffer() -> getBuffer
    boolean isDirect() -> isDirect
    com.jogamp.common.nio.NativeBuffer rewind() -> rewind
    com.jogamp.common.nio.NativeBuffer put(int,long) -> put
    com.jogamp.common.nio.NativeBuffer put(long) -> put
    com.jogamp.common.nio.NativeBuffer put(com.jogamp.common.nio.NativeBuffer) -> put
    long get() -> get
    long get(int) -> get
com.jogamp.common.nio.PointerBuffer -> com.jogamp.common.nio.PointerBuffer:
    int ELEMENT_SIZE -> ELEMENT_SIZE
    com.jogamp.common.util.LongObjectHashMap dataMap -> dataMap
    com.jogamp.common.nio.PointerBuffer create(java.nio.ByteBuffer) -> create
    void <init>(java.nio.IntBuffer) -> <init>
    void <init>(java.nio.LongBuffer) -> <init>
    void validateDataMap() -> validateDataMap
    com.jogamp.common.nio.PointerBuffer allocate(int) -> allocate
    com.jogamp.common.nio.PointerBuffer allocateDirect(int) -> allocateDirect
    com.jogamp.common.nio.PointerBuffer wrap(java.nio.ByteBuffer) -> wrap
    com.jogamp.common.nio.PointerBuffer duplicate() -> duplicate
    com.jogamp.common.nio.PointerBuffer put(com.jogamp.common.nio.PointerBuffer) -> put
    long get() -> get
    long get(int) -> get
    com.jogamp.common.nio.PointerBuffer get(long[],int,int) -> get
    com.jogamp.common.nio.PointerBuffer put(int,long) -> put
    com.jogamp.common.nio.PointerBuffer put(long) -> put
    com.jogamp.common.nio.PointerBuffer put(long[],int,int) -> put
    com.jogamp.common.nio.PointerBuffer referenceBuffer(int,java.nio.Buffer) -> referenceBuffer
    com.jogamp.common.nio.PointerBuffer referenceBuffer(java.nio.Buffer) -> referenceBuffer
    java.nio.Buffer getReferencedBuffer(int) -> getReferencedBuffer
    java.nio.Buffer getReferencedBuffer() -> getReferencedBuffer
    long getDirectBufferAddressImpl(java.lang.Object) -> getDirectBufferAddressImpl
    java.lang.String toString() -> toString
    com.jogamp.common.nio.NativeBuffer put(com.jogamp.common.nio.NativeBuffer) -> put
    com.jogamp.common.nio.NativeBuffer put(long) -> put
    com.jogamp.common.nio.NativeBuffer put(int,long) -> put
    void <clinit>() -> <clinit>
com.jogamp.common.nio.StructAccessor -> com.jogamp.common.nio.StructAccessor:
    java.nio.ByteBuffer bb -> bb
    void <init>(java.nio.ByteBuffer) -> <init>
    java.nio.ByteBuffer getBuffer() -> getBuffer
    java.nio.ByteBuffer slice(int,int) -> slice
    byte getByteAt(int) -> getByteAt
    void setByteAt(int,byte) -> setByteAt
    char getCharAt(int) -> getCharAt
    void setCharAt(int,char) -> setCharAt
    short getShortAt(int) -> getShortAt
    void setShortAt(int,short) -> setShortAt
    int getIntAt(int) -> getIntAt
    void setIntAt(int,int) -> setIntAt
    int getIntAt(int,int) -> getIntAt
    void setIntAt(int,int,int) -> setIntAt
    float getFloatAt(int) -> getFloatAt
    void setFloatAt(int,float) -> setFloatAt
    double getDoubleAt(int) -> getDoubleAt
    void setDoubleAt(int,double) -> setDoubleAt
    long getLongAt(int) -> getLongAt
    void setLongAt(int,long) -> setLongAt
    long getLongAt(int,int) -> getLongAt
    void setLongAt(int,long,int) -> setLongAt
    void setBytesAt(int,byte[]) -> setBytesAt
    byte[] getBytesAt(int,byte[]) -> getBytesAt
    void setCharsAt(int,char[]) -> setCharsAt
    char[] getCharsAt(int,char[]) -> getCharsAt
    void setShortsAt(int,short[]) -> setShortsAt
    short[] getShortsAt(int,short[]) -> getShortsAt
    void setIntsAt(int,int[]) -> setIntsAt
    int[] getIntsAt(int,int[]) -> getIntsAt
    void setFloatsAt(int,float[]) -> setFloatsAt
    float[] getFloatsAt(int,float[]) -> getFloatsAt
    void setDoublesAt(int,double[]) -> setDoublesAt
    double[] getDoublesAt(int,double[]) -> getDoublesAt
    void setLongsAt(int,long[]) -> setLongsAt
    long[] getLongsAt(int,long[]) -> getLongsAt
com.jogamp.common.os.AndroidVersion -> com.jogamp.common.os.AndroidVersion:
    boolean isAvailable -> isAvailable
    java.lang.String CPU_ABI -> CPU_ABI
    com.jogamp.common.os.Platform$CPUType CPU_TYPE -> CPU_TYPE
    com.jogamp.common.os.Platform$ABIType ABI_TYPE -> ABI_TYPE
    java.lang.String CPU_ABI2 -> CPU_ABI2
    com.jogamp.common.os.Platform$CPUType CPU_TYPE2 -> CPU_TYPE2
    com.jogamp.common.os.Platform$ABIType ABI_TYPE2 -> ABI_TYPE2
    java.lang.String CODENAME -> CODENAME
    java.lang.String INCREMENTAL -> INCREMENTAL
    java.lang.String RELEASE -> RELEASE
    int SDK_INT -> SDK_INT
    java.lang.String SDK_NAME -> SDK_NAME
    java.lang.String androidBuild -> androidBuild
    java.lang.String androidBuildVersion -> androidBuildVersion
    java.lang.String androidBuildVersionCodes -> androidBuildVersionCodes
    void <init>() -> <init>
    com.jogamp.common.os.Platform$CPUType getCPUTypeImpl(java.lang.String) -> getCPUTypeImpl
    com.jogamp.common.os.Platform$ABIType getABITypeImpl(com.jogamp.common.os.Platform$CPUType,java.lang.String) -> getABITypeImpl
    com.jogamp.common.util.IntObjectHashMap getVersionCodes(java.lang.Class,java.lang.Object) -> getVersionCodes
    java.lang.String getString(java.lang.Class,java.lang.Object,java.lang.String,boolean) -> getString
    int getInt(java.lang.Class,java.lang.Object,java.lang.String) -> getInt
    void <clinit>() -> <clinit>
com.jogamp.common.os.DynamicLibraryBundle -> com.jogamp.common.os.DynamicLibraryBundle:
    com.jogamp.common.os.DynamicLibraryBundleInfo info -> info
    java.util.List nativeLibraries -> nativeLibraries
    java.util.List toolLibNames -> toolLibNames
    java.util.List glueLibNames -> glueLibNames
    boolean[] toolLibLoaded -> toolLibLoaded
    int toolLibLoadedNumber -> toolLibLoadedNumber
    boolean[] glueLibLoaded -> glueLibLoaded
    int glueLibLoadedNumber -> glueLibLoadedNumber
    long toolGetProcAddressHandle -> toolGetProcAddressHandle
    boolean toolGetProcAddressComplete -> toolGetProcAddressComplete
    java.util.HashSet toolGetProcAddressFuncNameSet -> toolGetProcAddressFuncNameSet
    java.util.List toolGetProcAddressFuncNameList -> toolGetProcAddressFuncNameList
    com.jogamp.common.util.RunnableExecutor getDefaultRunnableExecutor() -> getDefaultRunnableExecutor
    void <init>(com.jogamp.common.os.DynamicLibraryBundleInfo) -> <init>
    void destroy() -> destroy
    boolean isLibComplete() -> isLibComplete
    int getToolLibNumber() -> getToolLibNumber
    int getToolLibLoadedNumber() -> getToolLibLoadedNumber
    boolean isToolLibComplete() -> isToolLibComplete
    boolean isToolLibLoaded() -> isToolLibLoaded
    boolean isToolLibLoaded(int) -> isToolLibLoaded
    int getGlueLibNumber() -> getGlueLibNumber
    int getGlueLibLoadedNumber() -> getGlueLibLoadedNumber
    boolean isGlueLibComplete() -> isGlueLibComplete
    boolean isGlueLibLoaded(int) -> isGlueLibLoaded
    com.jogamp.common.os.DynamicLibraryBundleInfo getBundleInfo() -> getBundleInfo
    long getToolGetProcAddressHandle() -> getToolGetProcAddressHandle
    com.jogamp.common.os.NativeLibrary loadFirstAvailable(java.util.List,java.lang.ClassLoader,boolean) -> loadFirstAvailable
    void loadLibraries() -> loadLibraries
    long dynamicLookupFunctionOnLibs(java.lang.String) -> dynamicLookupFunctionOnLibs
    long toolDynamicLookupFunction(java.lang.String) -> toolDynamicLookupFunction
    long dynamicLookupFunction(java.lang.String) -> dynamicLookupFunction
    boolean isFunctionAvailable(java.lang.String) -> isFunctionAvailable
com.jogamp.common.os.DynamicLibraryBundle$1 -> com.jogamp.common.os.DynamicLibraryBundle$1:
    com.jogamp.common.os.DynamicLibraryBundle this$0 -> this$0
    void <init>(com.jogamp.common.os.DynamicLibraryBundle) -> <init>
    void run() -> run
com.jogamp.common.os.DynamicLibraryBundle$GlueJNILibLoader -> com.jogamp.common.os.DynamicLibraryBundle$GlueJNILibLoader:
    void <init>() -> <init>
    boolean loadLibrary(java.lang.String,boolean,java.lang.ClassLoader) -> loadLibrary
com.jogamp.common.os.DynamicLibraryBundleInfo -> com.jogamp.common.os.DynamicLibraryBundleInfo:
    boolean DEBUG -> DEBUG
    java.util.List getToolLibNames() -> getToolLibNames
    java.util.List getGlueLibNames() -> getGlueLibNames
    java.util.List getToolGetProcAddressFuncNameList() -> getToolGetProcAddressFuncNameList
    long toolGetProcAddress(long,java.lang.String) -> toolGetProcAddress
    boolean useToolGetProcAdressFirst(java.lang.String) -> useToolGetProcAdressFirst
    boolean shallLinkGlobal() -> shallLinkGlobal
    boolean shallLookupGlobal() -> shallLookupGlobal
    com.jogamp.common.util.RunnableExecutor getLibLoaderExecutor() -> getLibLoaderExecutor
    void <clinit>() -> <clinit>
com.jogamp.common.os.DynamicLinker -> com.jogamp.common.os.DynamicLinker:
    boolean DEBUG -> DEBUG
    boolean DEBUG_LOOKUP -> DEBUG_LOOKUP
    long openLibraryGlobal(java.lang.String,boolean) -> openLibraryGlobal
    long openLibraryLocal(java.lang.String,boolean) -> openLibraryLocal
    long lookupSymbolGlobal(java.lang.String) -> lookupSymbolGlobal
    long lookupSymbol(long,java.lang.String) -> lookupSymbol
    void closeLibrary(long) -> closeLibrary
    java.lang.String getLastError() -> getLastError
    void <clinit>() -> <clinit>
com.jogamp.common.os.DynamicLookupHelper -> com.jogamp.common.os.DynamicLookupHelper:
    boolean DEBUG -> DEBUG
    boolean DEBUG_LOOKUP -> DEBUG_LOOKUP
    long dynamicLookupFunction(java.lang.String) -> dynamicLookupFunction
    boolean isFunctionAvailable(java.lang.String) -> isFunctionAvailable
    void <clinit>() -> <clinit>
com.jogamp.common.os.MachineDescription -> com.jogamp.common.os.MachineDescription:
    int[] size_armeabi -> size_armeabi
    int[] size_x86_32_unix -> size_x86_32_unix
    int[] size_x86_32_macos -> size_x86_32_macos
    int[] size_x86_32_windows -> size_x86_32_windows
    int[] size_x86_64_unix -> size_x86_64_unix
    int[] size_x86_64_windows -> size_x86_64_windows
    int[] size_sparc_32_sunos -> size_sparc_32_sunos
    int[] align_armeabi -> align_armeabi
    int[] align_x86_32_unix -> align_x86_32_unix
    int[] align_x86_32_macos -> align_x86_32_macos
    int[] align_x86_32_windows -> align_x86_32_windows
    int[] align_x86_64_unix -> align_x86_64_unix
    int[] align_x86_64_windows -> align_x86_64_windows
    int[] align_sparc_32_sunos -> align_sparc_32_sunos
    boolean runtimeValidated -> runtimeValidated
    boolean littleEndian -> littleEndian
    int int8SizeInBytes -> int8SizeInBytes
    int int16SizeInBytes -> int16SizeInBytes
    int int32SizeInBytes -> int32SizeInBytes
    int int64SizeInBytes -> int64SizeInBytes
    int intSizeInBytes -> intSizeInBytes
    int longSizeInBytes -> longSizeInBytes
    int floatSizeInBytes -> floatSizeInBytes
    int doubleSizeInBytes -> doubleSizeInBytes
    int ldoubleSizeInBytes -> ldoubleSizeInBytes
    int pointerSizeInBytes -> pointerSizeInBytes
    int pageSizeInBytes -> pageSizeInBytes
    boolean is32Bit -> is32Bit
    int int8AlignmentInBytes -> int8AlignmentInBytes
    int int16AlignmentInBytes -> int16AlignmentInBytes
    int int32AlignmentInBytes -> int32AlignmentInBytes
    int int64AlignmentInBytes -> int64AlignmentInBytes
    int intAlignmentInBytes -> intAlignmentInBytes
    int longAlignmentInBytes -> longAlignmentInBytes
    int floatAlignmentInBytes -> floatAlignmentInBytes
    int doubleAlignmentInBytes -> doubleAlignmentInBytes
    int ldoubleAlignmentInBytes -> ldoubleAlignmentInBytes
    int pointerAlignmentInBytes -> pointerAlignmentInBytes
    void <init>(boolean,boolean,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int) -> <init>
    boolean isRuntimeValidated() -> isRuntimeValidated
    boolean isLittleEndian() -> isLittleEndian
    boolean is32Bit() -> is32Bit
    boolean is64Bit() -> is64Bit
    int intSizeInBytes() -> intSizeInBytes
    int longSizeInBytes() -> longSizeInBytes
    int int8SizeInBytes() -> int8SizeInBytes
    int int16SizeInBytes() -> int16SizeInBytes
    int int32SizeInBytes() -> int32SizeInBytes
    int int64SizeInBytes() -> int64SizeInBytes
    int floatSizeInBytes() -> floatSizeInBytes
    int doubleSizeInBytes() -> doubleSizeInBytes
    int ldoubleSizeInBytes() -> ldoubleSizeInBytes
    int pointerSizeInBytes() -> pointerSizeInBytes
    int pageSizeInBytes() -> pageSizeInBytes
    int intAlignmentInBytes() -> intAlignmentInBytes
    int longAlignmentInBytes() -> longAlignmentInBytes
    int int8AlignmentInBytes() -> int8AlignmentInBytes
    int int16AlignmentInBytes() -> int16AlignmentInBytes
    int int32AlignmentInBytes() -> int32AlignmentInBytes
    int int64AlignmentInBytes() -> int64AlignmentInBytes
    int floatAlignmentInBytes() -> floatAlignmentInBytes
    int doubleAlignmentInBytes() -> doubleAlignmentInBytes
    int ldoubleAlignmentInBytes() -> ldoubleAlignmentInBytes
    int pointerAlignmentInBytes() -> pointerAlignmentInBytes
    int pageCount(int) -> pageCount
    int pageAlignedSize(int) -> pageAlignedSize
    boolean equals(java.lang.Object) -> equals
    boolean compatible(com.jogamp.common.os.MachineDescription) -> compatible
    java.lang.StringBuilder toString(java.lang.StringBuilder) -> toString
    java.lang.String toString() -> toString
    int[] access$000() -> access$000
    int[] access$100() -> access$100
    int[] access$200() -> access$200
    int[] access$300() -> access$300
    int[] access$400() -> access$400
    int[] access$500() -> access$500
    int[] access$600() -> access$600
    int[] access$700() -> access$700
    int[] access$800() -> access$800
    int[] access$900() -> access$900
    int[] access$1000() -> access$1000
    int[] access$1100() -> access$1100
    int[] access$1200() -> access$1200
    int[] access$1300() -> access$1300
    void <clinit>() -> <clinit>
com.jogamp.common.os.MachineDescription$ID -> com.jogamp.common.os.MachineDescription$ID:
    com.jogamp.common.os.MachineDescription$ID ARMle_EABI -> ARMle_EABI
    com.jogamp.common.os.MachineDescription$ID X86_32_UNIX -> X86_32_UNIX
    com.jogamp.common.os.MachineDescription$ID X86_64_UNIX -> X86_64_UNIX
    com.jogamp.common.os.MachineDescription$ID X86_32_MACOS -> X86_32_MACOS
    com.jogamp.common.os.MachineDescription$ID X86_32_WINDOWS -> X86_32_WINDOWS
    com.jogamp.common.os.MachineDescription$ID X86_64_WINDOWS -> X86_64_WINDOWS
    com.jogamp.common.os.MachineDescription$ID SPARC_32_SUNOS -> SPARC_32_SUNOS
    com.jogamp.common.os.Platform$CPUType cpu -> cpu
    com.jogamp.common.os.MachineDescription$ID[] $VALUES -> $VALUES
    com.jogamp.common.os.MachineDescription$ID[] values() -> values
    com.jogamp.common.os.MachineDescription$ID valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,com.jogamp.common.os.Platform$CPUType) -> <init>
    void <clinit>() -> <clinit>
com.jogamp.common.os.MachineDescription$StaticConfig -> com.jogamp.common.os.MachineDescription$StaticConfig:
    com.jogamp.common.os.MachineDescription$StaticConfig ARMle_EABI -> ARMle_EABI
    com.jogamp.common.os.MachineDescription$StaticConfig X86_32_UNIX -> X86_32_UNIX
    com.jogamp.common.os.MachineDescription$StaticConfig X86_64_UNIX -> X86_64_UNIX
    com.jogamp.common.os.MachineDescription$StaticConfig X86_32_MACOS -> X86_32_MACOS
    com.jogamp.common.os.MachineDescription$StaticConfig X86_32_WINDOWS -> X86_32_WINDOWS
    com.jogamp.common.os.MachineDescription$StaticConfig X86_64_WINDOWS -> X86_64_WINDOWS
    com.jogamp.common.os.MachineDescription$StaticConfig SPARC_32_SUNOS -> SPARC_32_SUNOS
    com.jogamp.common.os.MachineDescription$ID id -> id
    com.jogamp.common.os.MachineDescription md -> md
    com.jogamp.common.os.MachineDescription$StaticConfig[] $VALUES -> $VALUES
    com.jogamp.common.os.MachineDescription$StaticConfig[] values() -> values
    com.jogamp.common.os.MachineDescription$StaticConfig valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,com.jogamp.common.os.MachineDescription$ID,boolean,int[],int[]) -> <init>
    java.lang.StringBuilder toString(java.lang.StringBuilder) -> toString
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.jogamp.common.os.NativeLibrary -> com.jogamp.common.os.NativeLibrary:
    com.jogamp.common.os.DynamicLinker dynLink -> dynLink
    java.lang.String[] prefixes -> prefixes
    java.lang.String[] suffixes -> suffixes
    long libraryHandle -> libraryHandle
    java.lang.String libraryPath -> libraryPath
    boolean global -> global
    boolean initializedFindLibraryMethod -> initializedFindLibraryMethod
    java.lang.reflect.Method findLibraryMethod -> findLibraryMethod
    void <init>(long,java.lang.String,boolean) -> <init>
    java.lang.String toString() -> toString
    com.jogamp.common.os.NativeLibrary open(java.lang.String,java.lang.ClassLoader) -> open
    com.jogamp.common.os.NativeLibrary open(java.lang.String,java.lang.ClassLoader,boolean) -> open
    com.jogamp.common.os.NativeLibrary open(java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.ClassLoader) -> open
    com.jogamp.common.os.NativeLibrary open(java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.ClassLoader,boolean) -> open
    long dynamicLookupFunction(java.lang.String) -> dynamicLookupFunction
    boolean isFunctionAvailable(java.lang.String) -> isFunctionAvailable
    long dynamicLookupFunctionGlobal(java.lang.String) -> dynamicLookupFunctionGlobal
    boolean isFunctionAvailableGlobal(java.lang.String) -> isFunctionAvailableGlobal
    long getLibraryHandle() -> getLibraryHandle
    java.lang.String getLibraryPath() -> getLibraryPath
    void close() -> close
    java.lang.String isValidNativeLibraryName(java.lang.String,boolean) -> isValidNativeLibraryName
    java.util.List enumerateLibraryPaths(java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.ClassLoader) -> enumerateLibraryPaths
    java.lang.String selectName(java.lang.String,java.lang.String,java.lang.String) -> selectName
    java.lang.String[] buildNames(java.lang.String) -> buildNames
    void addPaths(java.lang.String,java.lang.String[],java.util.List) -> addPaths
    java.lang.String findLibraryImpl(java.lang.String,java.lang.ClassLoader) -> findLibraryImpl
    java.lang.String findLibrary(java.lang.String,java.lang.ClassLoader) -> findLibrary
    java.lang.reflect.Method access$002(java.lang.reflect.Method) -> access$002
    java.lang.reflect.Method access$000() -> access$000
    boolean access$102(boolean) -> access$102
    void <clinit>() -> <clinit>
com.jogamp.common.os.NativeLibrary$1 -> com.jogamp.common.os.NativeLibrary$1:
    boolean val$searchSystemPathFirst -> val$searchSystemPathFirst
    void <init>(boolean) -> <init>
    java.lang.String[] run() -> run
    java.lang.Object run() -> run
com.jogamp.common.os.NativeLibrary$2 -> com.jogamp.common.os.NativeLibrary$2:
    void <init>() -> <init>
    java.lang.String run() -> run
    java.lang.Object run() -> run
com.jogamp.common.os.NativeLibrary$3 -> com.jogamp.common.os.NativeLibrary$3:
    void <init>() -> <init>
    java.lang.Object run() -> run
com.jogamp.common.os.NativeLibrary$4 -> com.jogamp.common.os.NativeLibrary$4:
    java.lang.ClassLoader val$loader -> val$loader
    java.lang.String val$libName -> val$libName
    void <init>(java.lang.ClassLoader,java.lang.String) -> <init>
    java.lang.String run() -> run
    java.lang.Object run() -> run
com.jogamp.common.os.NativeLibrary$5 -> com.jogamp.common.os.NativeLibrary$5:
    int[] $SwitchMap$com$jogamp$common$os$Platform$OSType -> $SwitchMap$com$jogamp$common$os$Platform$OSType
    void <clinit>() -> <clinit>
com.jogamp.common.os.Platform -> com.jogamp.common.os.Platform:
    java.lang.String useTempJarCachePropName -> useTempJarCachePropName
    java.lang.String libBaseName -> libBaseName
    boolean USE_TEMP_JAR_CACHE -> USE_TEMP_JAR_CACHE
    com.jogamp.common.os.MachineDescription machineDescription -> machineDescription
    boolean is32Bit -> is32Bit
    boolean AWT_AVAILABLE -> AWT_AVAILABLE
    boolean isRunningFromJarURL -> isRunningFromJarURL
    void <init>() -> <init>
    boolean isRunningFromJarURL() -> isRunningFromJarURL
    void initSingleton() -> initSingleton
    boolean isJavaSE() -> isJavaSE
    boolean isJava6() -> isJava6
    boolean isLittleEndian() -> isLittleEndian
    java.lang.String getOSName() -> getOSName
    java.lang.String getOSVersion() -> getOSVersion
    com.jogamp.common.util.VersionNumber getOSVersionNumber() -> getOSVersionNumber
    java.lang.String getArchName() -> getArchName
    com.jogamp.common.os.Platform$OSType getOSType() -> getOSType
    com.jogamp.common.os.Platform$CPUFamily getCPUFamily() -> getCPUFamily
    com.jogamp.common.os.Platform$CPUType getCPUType() -> getCPUType
    com.jogamp.common.os.Platform$ABIType getABIType() -> getABIType
    java.lang.String getOSAndArch() -> getOSAndArch
    java.lang.String getJavaVendor() -> getJavaVendor
    java.lang.String getJavaVMName() -> getJavaVMName
    java.lang.String getJavaRuntimeName() -> getJavaRuntimeName
    java.lang.String getJavaVendorURL() -> getJavaVendorURL
    java.lang.String getJavaVersion() -> getJavaVersion
    com.jogamp.common.util.VersionNumber getJavaVersionNumber() -> getJavaVersionNumber
    java.lang.String getNewline() -> getNewline
    boolean is32Bit() -> is32Bit
    boolean is64Bit() -> is64Bit
    com.jogamp.common.os.MachineDescription getMachineDescription() -> getMachineDescription
    boolean isAWTAvailable() -> isAWTAvailable
    long currentTimeMillis() -> currentTimeMillis
    long currentTimeMicros() -> currentTimeMicros
    long getCurrentSleepJitter() -> getCurrentSleepJitter
    long getCurrentSleepJitterImpl(long,int) -> getCurrentSleepJitterImpl
    void <clinit>() -> <clinit>
com.jogamp.common.os.Platform$1 -> com.jogamp.common.os.Platform$1:
    boolean[] val$_isRunningFromJarURL -> val$_isRunningFromJarURL
    boolean[] val$_USE_TEMP_JAR_CACHE -> val$_USE_TEMP_JAR_CACHE
    boolean[] val$_AWT_AVAILABLE -> val$_AWT_AVAILABLE
    void <init>(boolean[],boolean[],boolean[]) -> <init>
    java.lang.Object run() -> run
com.jogamp.common.os.Platform$ABIType -> com.jogamp.common.os.Platform$ABIType:
    com.jogamp.common.os.Platform$ABIType GENERIC_ABI -> GENERIC_ABI
    com.jogamp.common.os.Platform$ABIType EABI_GNU_ARMEL -> EABI_GNU_ARMEL
    com.jogamp.common.os.Platform$ABIType EABI_GNU_ARMHF -> EABI_GNU_ARMHF
    int id -> id
    com.jogamp.common.os.Platform$ABIType[] $VALUES -> $VALUES
    com.jogamp.common.os.Platform$ABIType[] values() -> values
    com.jogamp.common.os.Platform$ABIType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
com.jogamp.common.os.Platform$CPUFamily -> com.jogamp.common.os.Platform$CPUFamily:
    com.jogamp.common.os.Platform$CPUFamily X86 -> X86
    com.jogamp.common.os.Platform$CPUFamily ARM -> ARM
    com.jogamp.common.os.Platform$CPUFamily PPC -> PPC
    com.jogamp.common.os.Platform$CPUFamily SPARC -> SPARC
    com.jogamp.common.os.Platform$CPUFamily MIPS -> MIPS
    com.jogamp.common.os.Platform$CPUFamily PA_RISC -> PA_RISC
    com.jogamp.common.os.Platform$CPUFamily IA64 -> IA64
    int id -> id
    com.jogamp.common.os.Platform$CPUFamily[] $VALUES -> $VALUES
    com.jogamp.common.os.Platform$CPUFamily[] values() -> values
    com.jogamp.common.os.Platform$CPUFamily valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
com.jogamp.common.os.Platform$CPUType -> com.jogamp.common.os.Platform$CPUType:
    com.jogamp.common.os.Platform$CPUType X86_32 -> X86_32
    com.jogamp.common.os.Platform$CPUType X86_64 -> X86_64
    com.jogamp.common.os.Platform$CPUType ARM -> ARM
    com.jogamp.common.os.Platform$CPUType ARMv5 -> ARMv5
    com.jogamp.common.os.Platform$CPUType ARMv6 -> ARMv6
    com.jogamp.common.os.Platform$CPUType ARMv7 -> ARMv7
    com.jogamp.common.os.Platform$CPUType PPC -> PPC
    com.jogamp.common.os.Platform$CPUType SPARC_32 -> SPARC_32
    com.jogamp.common.os.Platform$CPUType SPARCV9_64 -> SPARCV9_64
    com.jogamp.common.os.Platform$CPUType MIPS_32 -> MIPS_32
    com.jogamp.common.os.Platform$CPUType MIPS_64 -> MIPS_64
    com.jogamp.common.os.Platform$CPUType IA64 -> IA64
    com.jogamp.common.os.Platform$CPUType PA_RISC2_0 -> PA_RISC2_0
    int id -> id
    com.jogamp.common.os.Platform$CPUFamily family -> family
    com.jogamp.common.os.Platform$CPUType[] $VALUES -> $VALUES
    com.jogamp.common.os.Platform$CPUType[] values() -> values
    com.jogamp.common.os.Platform$CPUType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,com.jogamp.common.os.Platform$CPUFamily,int) -> <init>
    com.jogamp.common.os.Platform$CPUFamily getFamily() -> getFamily
    void <clinit>() -> <clinit>
com.jogamp.common.os.Platform$OSType -> com.jogamp.common.os.Platform$OSType:
    com.jogamp.common.os.Platform$OSType LINUX -> LINUX
    com.jogamp.common.os.Platform$OSType FREEBSD -> FREEBSD
    com.jogamp.common.os.Platform$OSType ANDROID -> ANDROID
    com.jogamp.common.os.Platform$OSType MACOS -> MACOS
    com.jogamp.common.os.Platform$OSType SUNOS -> SUNOS
    com.jogamp.common.os.Platform$OSType HPUX -> HPUX
    com.jogamp.common.os.Platform$OSType WINDOWS -> WINDOWS
    com.jogamp.common.os.Platform$OSType OPENKODE -> OPENKODE
    int id -> id
    com.jogamp.common.os.Platform$OSType[] $VALUES -> $VALUES
    com.jogamp.common.os.Platform$OSType[] values() -> values
    com.jogamp.common.os.Platform$OSType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
com.jogamp.common.type.WriteCloneable -> com.jogamp.common.type.WriteCloneable:
    java.lang.Object cloneMutable() -> cloneMutable
com.jogamp.common.util.ArrayHashSet -> com.jogamp.common.util.ArrayHashSet:
    java.util.HashMap map -> map
    java.util.ArrayList data -> data
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int,float) -> <init>
    java.lang.Object clone() -> clone
    java.util.ArrayList getData() -> getData
    java.util.HashMap getMap() -> getMap
    java.lang.String toString() -> toString
    void clear() -> clear
    boolean add(java.lang.Object) -> add
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.lang.Object get(int) -> get
    int indexOf(java.lang.Object) -> indexOf
    void add(int,java.lang.Object) -> add
    boolean addAll(int,java.util.Collection) -> addAll
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object remove(int) -> remove
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.util.ListIterator listIterator() -> listIterator
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.List subList(int,int) -> subList
    java.util.ArrayList toArrayList() -> toArrayList
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object getOrAdd(java.lang.Object) -> getOrAdd
    boolean containsSafe(java.lang.Object) -> containsSafe
com.jogamp.common.util.Bitstream -> com.jogamp.common.util.Bitstream:
    boolean DEBUG -> DEBUG
    int EOS -> EOS
    com.jogamp.common.util.Bitstream$ByteStream bytes -> bytes
    int bitBuffer -> bitBuffer
    int bitsDataMark -> bitsDataMark
    int bitCount -> bitCount
    int bitsCountMark -> bitsCountMark
    boolean outputMode -> outputMode
    boolean throwIOExceptionOnEOF -> throwIOExceptionOnEOF
    java.lang.String strZeroPadding -> strZeroPadding
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(com.jogamp.common.util.Bitstream$ByteStream,boolean) -> <init>
    void resetLocal() -> resetLocal
    void validateMode() -> validateMode
    void setThrowIOExceptionOnEOF(boolean) -> setThrowIOExceptionOnEOF
    boolean getThrowIOExceptionOnEOF() -> getThrowIOExceptionOnEOF
    void setStream(java.lang.Object,boolean) -> setStream
    com.jogamp.common.util.Bitstream$ByteStream getStream() -> getStream
    java.lang.Object getSubStream() -> getSubStream
    void close() -> close
    int flush() -> flush
    boolean canInput() -> canInput
    boolean canOutput() -> canOutput
    void mark(int) -> mark
    void reset() -> reset
    int getBitCount() -> getBitCount
    int getLastBitPos() -> getLastBitPos
    int getBitPosition() -> getBitPosition
    int getBitBuffer() -> getBitBuffer
    long position() -> position
    int readBit(boolean) -> readBit
    int writeBit(boolean,int) -> writeBit
    long skip(long) -> skip
    int readBits31(boolean,int) -> readBits31
    int writeBits31(boolean,int,int) -> writeBits31
    int readUInt8(boolean) -> readUInt8
    int writeInt8(boolean,byte) -> writeInt8
    int readUInt16(boolean,boolean) -> readUInt16
    int readUInt16(boolean,byte[],int) -> readUInt16
    int writeInt16(boolean,boolean,short) -> writeInt16
    long readUInt32(boolean,boolean) -> readUInt32
    long readUInt32(boolean,byte[],int) -> readUInt32
    int writeInt32(boolean,boolean,int) -> writeInt32
    long toUInt32Long(int) -> toUInt32Long
    int toUInt32Int(int) -> toUInt32Int
    int uint32LongToInt(long) -> uint32LongToInt
    java.lang.String toString() -> toString
    java.lang.String toStringImpl() -> toStringImpl
    java.lang.String toBinString(int,int) -> toBinString
    java.lang.String toHexBinString(int,int) -> toHexBinString
    void checkBounds(byte[],int,int) -> checkBounds
    boolean access$000() -> access$000
    void <clinit>() -> <clinit>
com.jogamp.common.util.Bitstream$ByteInputStream -> com.jogamp.common.util.Bitstream$ByteInputStream:
    java.io.BufferedInputStream media -> media
    long pos -> pos
    long posMark -> posMark
    void <init>(java.io.InputStream) -> <init>
    void setStream(java.io.InputStream) -> setStream
    java.io.InputStream getStream() -> getStream
    void close() -> close
    void flush() -> flush
    boolean canInput() -> canInput
    boolean canOutput() -> canOutput
    long position() -> position
    long skip(long) -> skip
    void mark(int) -> mark
    void reset() -> reset
    int read() -> read
    int write(byte) -> write
    java.lang.Object getStream() -> getStream
    void setStream(java.lang.Object) -> setStream
com.jogamp.common.util.Bitstream$ByteStream -> com.jogamp.common.util.Bitstream$ByteStream:
    void setStream(java.lang.Object) -> setStream
    java.lang.Object getStream() -> getStream
    void close() -> close
    void flush() -> flush
    boolean canInput() -> canInput
    boolean canOutput() -> canOutput
    long position() -> position
    long skip(long) -> skip
    void mark(int) -> mark
    void reset() -> reset
    int read() -> read
    int write(byte) -> write
com.jogamp.common.util.Function -> com.jogamp.common.util.Function:
    java.lang.Object eval(java.lang.Object[]) -> eval
com.jogamp.common.util.FunctionTask -> com.jogamp.common.util.FunctionTask:
    com.jogamp.common.util.Function runnable -> runnable
    java.lang.Object result -> result
    java.lang.Object[] args -> args
    java.lang.Object invoke(boolean,com.jogamp.common.util.Function,java.lang.Object[]) -> invoke
    void <init>(com.jogamp.common.util.Function,java.lang.Object,boolean,java.io.PrintStream) -> <init>
    com.jogamp.common.util.Function getRunnable() -> getRunnable
    void setArgs(java.lang.Object[]) -> setArgs
    java.lang.Object getResult() -> getResult
    void run() -> run
    java.lang.Object eval(java.lang.Object[]) -> eval
com.jogamp.common.util.HashUtil -> com.jogamp.common.util.HashUtil:
    void <init>() -> <init>
    int getAddrHash32_EqualDist(long) -> getAddrHash32_EqualDist
    int getAddrSizeHash32_EqualDist(long,long) -> getAddrSizeHash32_EqualDist
    long getHash64(long,long) -> getHash64
com.jogamp.common.util.IOUtil -> com.jogamp.common.util.IOUtil:
    boolean DEBUG -> DEBUG
    java.lang.String SCHEME_SEPARATOR -> SCHEME_SEPARATOR
    java.lang.String FILE_SCHEME -> FILE_SCHEME
    java.lang.String HTTP_SCHEME -> HTTP_SCHEME
    java.lang.String HTTPS_SCHEME -> HTTPS_SCHEME
    java.lang.String JAR_SCHEME -> JAR_SCHEME
    char JAR_SCHEME_SEPARATOR -> JAR_SCHEME_SEPARATOR
    java.lang.String java_io_tmpdir_propkey -> java_io_tmpdir_propkey
    java.lang.String user_home_propkey -> user_home_propkey
    java.lang.String XDG_CACHE_HOME_envkey -> XDG_CACHE_HOME_envkey
    java.lang.String tmpSubDir -> tmpSubDir
    java.util.regex.Pattern patternSpaceRaw -> patternSpaceRaw
    java.util.regex.Pattern patternSpaceEnc -> patternSpaceEnc
    java.util.regex.Pattern patternSingleBS -> patternSingleBS
    java.util.regex.Pattern patternSingleFS -> patternSingleFS
    java.io.File tempRootExec -> tempRootExec
    java.io.File tempRootNoexec -> tempRootNoexec
    boolean tempRootSet -> tempRootSet
    void <init>() -> <init>
    java.lang.reflect.Constructor getFOSCtor() -> getFOSCtor
    int copyURLConn2File(java.net.URLConnection,java.io.File) -> copyURLConn2File
    int copyStream2File(java.io.InputStream,java.io.File,int) -> copyStream2File
    int copyStream2Stream(java.io.InputStream,java.io.OutputStream,int) -> copyStream2Stream
    int copyStream2Stream(int,java.io.InputStream,java.io.OutputStream,int) -> copyStream2Stream
    byte[] copyStream2ByteArray(java.io.InputStream) -> copyStream2ByteArray
    java.nio.ByteBuffer copyStream2ByteBuffer(java.io.InputStream) -> copyStream2ByteBuffer
    java.nio.ByteBuffer copyStream2ByteBuffer(java.io.InputStream,int) -> copyStream2ByteBuffer
    java.lang.String slashify(java.lang.String,boolean,boolean) -> slashify
    java.net.URI toURISimple(java.io.File) -> toURISimple
    java.net.URI toURISimple(java.lang.String,java.lang.String,boolean) -> toURISimple
    java.lang.String getFileSuffix(java.io.File) -> getFileSuffix
    java.lang.String getFileSuffix(java.lang.String) -> getFileSuffix
    java.lang.String toLowerCase(java.lang.String) -> toLowerCase
    java.io.FileOutputStream getFileOutputStream(java.io.File,boolean) -> getFileOutputStream
    java.lang.String getClassFileName(java.lang.String) -> getClassFileName
    java.net.URL getClassURL(java.lang.String,java.lang.ClassLoader) -> getClassURL
    java.lang.String getBasename(java.lang.String) -> getBasename
    java.lang.String getDirname(java.lang.String) -> getDirname
    java.net.URI getURIDirname(java.net.URI) -> getURIDirname
    java.lang.String getURIDirname(java.lang.String) -> getURIDirname
    java.net.URL toURL(java.net.URI) -> toURL
    java.net.URLConnection getResource(java.lang.Class,java.lang.String) -> getResource
    java.net.URLConnection getResource(java.lang.String,java.lang.ClassLoader) -> getResource
    java.lang.String getRelativeOf(java.io.File,java.lang.String) -> getRelativeOf
    java.lang.String getParentOf(java.lang.String) -> getParentOf
    java.lang.String cleanPathString(java.lang.String) -> cleanPathString
    java.net.URI getRelativeOf(java.net.URI,java.lang.String) -> getRelativeOf
    java.net.URL getRelativeOf(java.net.URL,java.lang.String) -> getRelativeOf
    java.net.URI compose(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> compose
    java.lang.String encodeToURI(java.lang.String) -> encodeToURI
    java.lang.String decodeFromURI(java.lang.String) -> decodeFromURI
    java.lang.String encodeFilePathToURI(java.lang.String) -> encodeFilePathToURI
    java.lang.String decodeURIToFilePath(java.lang.String) -> decodeURIToFilePath
    java.lang.String decodeURIIfFilePath(java.net.URI) -> decodeURIIfFilePath
    java.net.URLConnection openURL(java.net.URL) -> openURL
    java.net.URLConnection openURL(java.net.URL,java.lang.String) -> openURL
    java.lang.String getShellSuffix() -> getShellSuffix
    boolean getOSHasNoexecFS() -> getOSHasNoexecFS
    boolean getOSHasFreeDesktopXDG() -> getOSHasFreeDesktopXDG
    boolean testFile(java.io.File,boolean,boolean) -> testFile
    boolean testDirExec(java.io.File) -> testDirExec
    java.io.File testDirImpl(java.io.File,boolean,boolean,java.lang.String) -> testDirImpl
    java.io.File testDir(java.io.File,boolean,boolean) -> testDir
    boolean isStringSet(java.lang.String) -> isStringSet
    java.io.File getSubTempDir(java.io.File,java.lang.String,boolean,java.lang.String) -> getSubTempDir
    java.io.File getTempDir(boolean) -> getTempDir
    java.io.File createTempFile(java.lang.String,java.lang.String,boolean) -> createTempFile
    void close(java.io.Closeable,boolean) -> close
    void <clinit>() -> <clinit>
com.jogamp.common.util.IOUtil$1 -> com.jogamp.common.util.IOUtil$1:
    int[] $SwitchMap$com$jogamp$common$os$Platform$OSType -> $SwitchMap$com$jogamp$common$os$Platform$OSType
    void <clinit>() -> <clinit>
com.jogamp.common.util.IOUtil$ClassResources -> com.jogamp.common.util.IOUtil$ClassResources:
    java.lang.Class contextCL -> contextCL
    java.lang.String[] resourcePaths -> resourcePaths
    int resourceCount() -> resourceCount
    void <init>(java.lang.Class,java.lang.String[]) -> <init>
    java.net.URLConnection resolve(int) -> resolve
com.jogamp.common.util.IntBitfield -> com.jogamp.common.util.IntBitfield:
    int UNIT_SIZE -> UNIT_SIZE
    long UNIT_SHIFT_L -> UNIT_SHIFT_L
    int UNIT_SHIFT_I -> UNIT_SHIFT_I
    int[] storage -> storage
    long bitsCountL -> bitsCountL
    int bitsCountI -> bitsCountI
    void <init>(long) -> <init>
    void <init>(int) -> <init>
    void check(long) -> check
    void check(int) -> check
    long capacity() -> capacity
    boolean get(long) -> get
    boolean get(int) -> get
    boolean put(long,boolean) -> put
    boolean put(int,boolean) -> put
    int getBitCount(int) -> getBitCount
    long getBitCount() -> getBitCount
com.jogamp.common.util.IntIntHashMap -> com.jogamp.common.util.IntIntHashMap:
    float loadFactor -> loadFactor
    com.jogamp.common.util.IntIntHashMap$Entry[] table -> table
    int size -> size
    int mask -> mask
    int capacity -> capacity
    int threshold -> threshold
    int keyNotFoundValue -> keyNotFoundValue
    boolean isPrimitive -> isPrimitive
    java.lang.reflect.Constructor entryConstructor -> entryConstructor
    java.lang.reflect.Method equalsMethod -> equalsMethod
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int,float) -> <init>
    void <init>(float,int,int,int,int,int,int) -> <init>
    java.lang.Object clone() -> clone
    boolean containsValue(int) -> containsValue
    boolean containsKey(int) -> containsKey
    int get(int) -> get
    int put(int,int) -> put
    void putAll(com.jogamp.common.util.IntIntHashMap) -> putAll
    int remove(int) -> remove
    int size() -> size
    int capacity() -> capacity
    void clear() -> clear
    java.util.Iterator iterator() -> iterator
    int setKeyNotFoundValue(int) -> setKeyNotFoundValue
    int getKeyNotFoundValue() -> getKeyNotFoundValue
    java.lang.StringBuilder toString(java.lang.StringBuilder) -> toString
    java.lang.String toString() -> toString
    java.lang.reflect.Method getCloneMethod(java.lang.Object) -> getCloneMethod
    void <clinit>() -> <clinit>
com.jogamp.common.util.IntIntHashMap$1 -> com.jogamp.common.util.IntIntHashMap$1:
    java.lang.Class val$keyClazz -> val$keyClazz
    java.lang.Class val$valueClazz -> val$valueClazz
    void <init>(java.lang.Class,java.lang.Class) -> <init>
    com.jogamp.common.util.IntIntHashMap$EntryCM run() -> run
    java.lang.Object run() -> run
com.jogamp.common.util.IntIntHashMap$2 -> com.jogamp.common.util.IntIntHashMap$2:
    java.lang.Class val$clazz -> val$clazz
    void <init>(java.lang.Class) -> <init>
    java.lang.reflect.Method run() -> run
    java.lang.Object run() -> run
com.jogamp.common.util.IntIntHashMap$Entry -> com.jogamp.common.util.IntIntHashMap$Entry:
    int key -> key
    int value -> value
    com.jogamp.common.util.IntIntHashMap$Entry next -> next
    void <init>(int,int,com.jogamp.common.util.IntIntHashMap$Entry) -> <init>
    int getKey() -> getKey
    int getValue() -> getValue
    void setValue(int) -> setValue
    java.lang.StringBuilder toString(java.lang.StringBuilder) -> toString
    java.lang.String toString() -> toString
com.jogamp.common.util.IntIntHashMap$EntryCM -> com.jogamp.common.util.IntIntHashMap$EntryCM:
    java.lang.reflect.Constructor c -> c
    java.lang.reflect.Method m1 -> m1
    void <init>() -> <init>
com.jogamp.common.util.IntIntHashMap$EntryIterator -> com.jogamp.common.util.IntIntHashMap$EntryIterator:
    com.jogamp.common.util.IntIntHashMap$Entry[] entries -> entries
    int index -> index
    com.jogamp.common.util.IntIntHashMap$Entry next -> next
    void <init>(com.jogamp.common.util.IntIntHashMap$Entry[]) -> <init>
    boolean hasNext() -> hasNext
    com.jogamp.common.util.IntIntHashMap$Entry next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
    void <init>(com.jogamp.common.util.IntIntHashMap$Entry[],com.jogamp.common.util.IntIntHashMap$1) -> <init>
com.jogamp.common.util.IntObjectHashMap -> com.jogamp.common.util.IntObjectHashMap:
    float loadFactor -> loadFactor
    com.jogamp.common.util.IntObjectHashMap$Entry[] table -> table
    int size -> size
    int mask -> mask
    int capacity -> capacity
    int threshold -> threshold
    java.lang.Object keyNotFoundValue -> keyNotFoundValue
    boolean isPrimitive -> isPrimitive
    java.lang.reflect.Constructor entryConstructor -> entryConstructor
    java.lang.reflect.Method equalsMethod -> equalsMethod
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int,float) -> <init>
    void <init>(float,int,int,int,int,int,java.lang.Object) -> <init>
    java.lang.Object clone() -> clone
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(int) -> containsKey
    java.lang.Object get(int) -> get
    java.lang.Object put(int,java.lang.Object) -> put
    void putAll(com.jogamp.common.util.IntObjectHashMap) -> putAll
    java.lang.Object remove(int) -> remove
    int size() -> size
    int capacity() -> capacity
    void clear() -> clear
    java.util.Iterator iterator() -> iterator
    java.lang.Object setKeyNotFoundValue(java.lang.Object) -> setKeyNotFoundValue
    java.lang.Object getKeyNotFoundValue() -> getKeyNotFoundValue
    java.lang.StringBuilder toString(java.lang.StringBuilder) -> toString
    java.lang.String toString() -> toString
    java.lang.reflect.Method getCloneMethod(java.lang.Object) -> getCloneMethod
    void <clinit>() -> <clinit>
com.jogamp.common.util.IntObjectHashMap$1 -> com.jogamp.common.util.IntObjectHashMap$1:
    java.lang.Class val$keyClazz -> val$keyClazz
    java.lang.Class val$valueClazz -> val$valueClazz
    void <init>(java.lang.Class,java.lang.Class) -> <init>
    com.jogamp.common.util.IntObjectHashMap$EntryCM run() -> run
    java.lang.Object run() -> run
com.jogamp.common.util.IntObjectHashMap$2 -> com.jogamp.common.util.IntObjectHashMap$2:
    java.lang.Class val$clazz -> val$clazz
    void <init>(java.lang.Class) -> <init>
    java.lang.reflect.Method run() -> run
    java.lang.Object run() -> run
com.jogamp.common.util.IntObjectHashMap$Entry -> com.jogamp.common.util.IntObjectHashMap$Entry:
    int key -> key
    java.lang.Object value -> value
    com.jogamp.common.util.IntObjectHashMap$Entry next -> next
    void <init>(int,java.lang.Object,com.jogamp.common.util.IntObjectHashMap$Entry) -> <init>
    int getKey() -> getKey
    java.lang.Object getValue() -> getValue
    void setValue(java.lang.Object) -> setValue
    java.lang.StringBuilder toString(java.lang.StringBuilder) -> toString
    java.lang.String toString() -> toString
com.jogamp.common.util.IntObjectHashMap$EntryCM -> com.jogamp.common.util.IntObjectHashMap$EntryCM:
    java.lang.reflect.Constructor c -> c
    java.lang.reflect.Method m1 -> m1
    void <init>() -> <init>
com.jogamp.common.util.IntObjectHashMap$EntryIterator -> com.jogamp.common.util.IntObjectHashMap$EntryIterator:
    com.jogamp.common.util.IntObjectHashMap$Entry[] entries -> entries
    int index -> index
    com.jogamp.common.util.IntObjectHashMap$Entry next -> next
    void <init>(com.jogamp.common.util.IntObjectHashMap$Entry[]) -> <init>
    boolean hasNext() -> hasNext
    com.jogamp.common.util.IntObjectHashMap$Entry next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
    void <init>(com.jogamp.common.util.IntObjectHashMap$Entry[],com.jogamp.common.util.IntObjectHashMap$1) -> <init>
com.jogamp.common.util.JarUtil -> com.jogamp.common.util.JarUtil:
    boolean DEBUG -> DEBUG
    int BUFFER_SIZE -> BUFFER_SIZE
    com.jogamp.common.util.JarUtil$Resolver resolver -> resolver
    void <init>() -> <init>
    void setResolver(com.jogamp.common.util.JarUtil$Resolver) -> setResolver
    boolean hasJarURI(java.lang.String,java.lang.ClassLoader) -> hasJarURI
    java.net.URI getJarURI(java.lang.String,java.lang.ClassLoader) -> getJarURI
    java.lang.String getJarBasename(java.net.URI) -> getJarBasename
    java.lang.String getJarBasename(java.lang.String,java.lang.ClassLoader) -> getJarBasename
    java.net.URI getJarSubURI(java.net.URI) -> getJarSubURI
    java.lang.String getJarEntry(java.net.URI) -> getJarEntry
    java.net.URI getJarSubURI(java.lang.String,java.lang.ClassLoader) -> getJarSubURI
    java.net.URI getJarFileURI(java.lang.String,java.lang.ClassLoader) -> getJarFileURI
    java.net.URI getJarFileURI(java.net.URI,java.lang.String) -> getJarFileURI
    java.net.URI getJarFileURI(java.net.URI) -> getJarFileURI
    java.net.URI getJarFileURI(java.lang.String) -> getJarFileURI
    java.net.URI getJarEntryURI(java.net.URI,java.lang.String) -> getJarEntryURI
    java.util.jar.JarFile getJarFile(java.lang.String,java.lang.ClassLoader) -> getJarFile
    java.util.jar.JarFile getJarFile(java.net.URI) -> getJarFile
    java.net.URI getRelativeOf(java.lang.Class,java.lang.String,java.lang.String) -> getRelativeOf
    java.util.Map getNativeLibNames(java.util.jar.JarFile) -> getNativeLibNames
    int extract(java.io.File,java.util.Map,java.util.jar.JarFile,java.lang.String,boolean,boolean,boolean) -> extract
    void fixNativeLibAttribs(java.io.File) -> fixNativeLibAttribs
    boolean fixNativeLibAttribs(java.lang.String) -> fixNativeLibAttribs
    void validateCertificates(java.security.cert.Certificate[],java.util.jar.JarFile) -> validateCertificates
    void validateCertificate(java.security.cert.Certificate[],java.util.jar.JarFile,java.util.jar.JarEntry,byte[]) -> validateCertificate
    void <clinit>() -> <clinit>
com.jogamp.common.util.JarUtil$Resolver -> com.jogamp.common.util.JarUtil$Resolver:
    java.net.URL resolve(java.net.URL) -> resolve
com.jogamp.common.util.JogampVersion -> com.jogamp.common.util.JogampVersion:
    java.util.jar.Attributes$Name IMPLEMENTATION_BUILD -> IMPLEMENTATION_BUILD
    java.util.jar.Attributes$Name IMPLEMENTATION_BRANCH -> IMPLEMENTATION_BRANCH
    java.util.jar.Attributes$Name IMPLEMENTATION_COMMIT -> IMPLEMENTATION_COMMIT
    java.lang.String packageName -> packageName
    java.util.jar.Manifest mf -> mf
    int hash -> hash
    java.util.jar.Attributes mainAttributes -> mainAttributes
    java.util.Set mainAttributeNames -> mainAttributeNames
    java.lang.String androidPackageVersionName -> androidPackageVersionName
    void <init>(java.lang.String,java.util.jar.Manifest) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.util.jar.Manifest getManifest() -> getManifest
    java.lang.String getPackageName() -> getPackageName
    java.lang.String getAttribute(java.util.jar.Attributes$Name) -> getAttribute
    java.lang.String getAttribute(java.lang.String) -> getAttribute
    java.util.jar.Attributes$Name getAttributeName(java.lang.String) -> getAttributeName
    java.util.Set getAttributeNames() -> getAttributeNames
    java.lang.String getExtensionName() -> getExtensionName
    java.lang.String getImplementationBuild() -> getImplementationBuild
    java.lang.String getImplementationBranch() -> getImplementationBranch
    java.lang.String getImplementationCommit() -> getImplementationCommit
    java.lang.String getImplementationTitle() -> getImplementationTitle
    java.lang.String getImplementationVendor() -> getImplementationVendor
    java.lang.String getImplementationVendorID() -> getImplementationVendorID
    java.lang.String getImplementationURL() -> getImplementationURL
    java.lang.String getImplementationVersion() -> getImplementationVersion
    java.lang.String getAndroidPackageVersionName() -> getAndroidPackageVersionName
    java.lang.String getSpecificationTitle() -> getSpecificationTitle
    java.lang.String getSpecificationVendor() -> getSpecificationVendor
    java.lang.String getSpecificationVersion() -> getSpecificationVersion
    java.lang.StringBuilder getFullManifestInfo(java.lang.StringBuilder) -> getFullManifestInfo
    java.lang.StringBuilder getManifestInfo(java.lang.StringBuilder) -> getManifestInfo
    java.lang.StringBuilder toString(java.lang.StringBuilder) -> toString
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.jogamp.common.util.LongObjectHashMap -> com.jogamp.common.util.LongObjectHashMap:
    float loadFactor -> loadFactor
    com.jogamp.common.util.LongObjectHashMap$Entry[] table -> table
    int size -> size
    int mask -> mask
    int capacity -> capacity
    int threshold -> threshold
    java.lang.Object keyNotFoundValue -> keyNotFoundValue
    boolean isPrimitive -> isPrimitive
    java.lang.reflect.Constructor entryConstructor -> entryConstructor
    java.lang.reflect.Method equalsMethod -> equalsMethod
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int,float) -> <init>
    void <init>(float,int,int,int,int,int,java.lang.Object) -> <init>
    java.lang.Object clone() -> clone
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(long) -> containsKey
    java.lang.Object get(long) -> get
    java.lang.Object put(long,java.lang.Object) -> put
    void putAll(com.jogamp.common.util.LongObjectHashMap) -> putAll
    java.lang.Object remove(long) -> remove
    int size() -> size
    int capacity() -> capacity
    void clear() -> clear
    java.util.Iterator iterator() -> iterator
    java.lang.Object setKeyNotFoundValue(java.lang.Object) -> setKeyNotFoundValue
    java.lang.Object getKeyNotFoundValue() -> getKeyNotFoundValue
    java.lang.StringBuilder toString(java.lang.StringBuilder) -> toString
    java.lang.String toString() -> toString
    java.lang.reflect.Method getCloneMethod(java.lang.Object) -> getCloneMethod
    void <clinit>() -> <clinit>
com.jogamp.common.util.LongObjectHashMap$1 -> com.jogamp.common.util.LongObjectHashMap$1:
    java.lang.Class val$keyClazz -> val$keyClazz
    java.lang.Class val$valueClazz -> val$valueClazz
    void <init>(java.lang.Class,java.lang.Class) -> <init>
    com.jogamp.common.util.LongObjectHashMap$EntryCM run() -> run
    java.lang.Object run() -> run
com.jogamp.common.util.LongObjectHashMap$2 -> com.jogamp.common.util.LongObjectHashMap$2:
    java.lang.Class val$clazz -> val$clazz
    void <init>(java.lang.Class) -> <init>
    java.lang.reflect.Method run() -> run
    java.lang.Object run() -> run
com.jogamp.common.util.LongObjectHashMap$Entry -> com.jogamp.common.util.LongObjectHashMap$Entry:
    long key -> key
    java.lang.Object value -> value
    com.jogamp.common.util.LongObjectHashMap$Entry next -> next
    void <init>(long,java.lang.Object,com.jogamp.common.util.LongObjectHashMap$Entry) -> <init>
    long getKey() -> getKey
    java.lang.Object getValue() -> getValue
    void setValue(java.lang.Object) -> setValue
    java.lang.StringBuilder toString(java.lang.StringBuilder) -> toString
    java.lang.String toString() -> toString
com.jogamp.common.util.LongObjectHashMap$EntryCM -> com.jogamp.common.util.LongObjectHashMap$EntryCM:
    java.lang.reflect.Constructor c -> c
    java.lang.reflect.Method m1 -> m1
    void <init>() -> <init>
com.jogamp.common.util.LongObjectHashMap$EntryIterator -> com.jogamp.common.util.LongObjectHashMap$EntryIterator:
    com.jogamp.common.util.LongObjectHashMap$Entry[] entries -> entries
    int index -> index
    com.jogamp.common.util.LongObjectHashMap$Entry next -> next
    void <init>(com.jogamp.common.util.LongObjectHashMap$Entry[]) -> <init>
    boolean hasNext() -> hasNext
    com.jogamp.common.util.LongObjectHashMap$Entry next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
    void <init>(com.jogamp.common.util.LongObjectHashMap$Entry[],com.jogamp.common.util.LongObjectHashMap$1) -> <init>
com.jogamp.common.util.PropertyAccess -> com.jogamp.common.util.PropertyAccess:
    java.lang.String jnlp_prefix -> jnlp_prefix
    java.lang.String javaws_prefix -> javaws_prefix
    java.util.HashSet trustedPrefixes -> trustedPrefixes
    java.util.HashSet trusted -> trusted
    void <init>() -> <init>
    void addTrustedPrefix(java.lang.String) -> addTrustedPrefix
    boolean isTrusted(java.lang.String) -> isTrusted
    int getIntProperty(java.lang.String,boolean,int) -> getIntProperty
    long getLongProperty(java.lang.String,boolean,long) -> getLongProperty
    boolean getBooleanProperty(java.lang.String,boolean) -> getBooleanProperty
    boolean getBooleanProperty(java.lang.String,boolean,boolean) -> getBooleanProperty
    boolean isPropertyDefined(java.lang.String,boolean) -> isPropertyDefined
    java.lang.String getProperty(java.lang.String,boolean) -> getProperty
    java.lang.String getProperty(java.lang.String,boolean,java.lang.String) -> getProperty
    java.lang.String getTrustedPropKey(java.lang.String) -> getTrustedPropKey
    void <clinit>() -> <clinit>
com.jogamp.common.util.PropertyAccess$1 -> com.jogamp.common.util.PropertyAccess$1:
    java.lang.String val$propertyKey -> val$propertyKey
    void <init>(java.lang.String) -> <init>
    java.lang.String run() -> run
    java.lang.Object run() -> run
com.jogamp.common.util.ReflectionUtil -> com.jogamp.common.util.ReflectionUtil:
    boolean DEBUG -> DEBUG
    boolean DEBUG_STATS_FORNAME -> DEBUG_STATS_FORNAME
    java.lang.Object forNameLock -> forNameLock
    java.util.Map forNameStats -> forNameStats
    int forNameCount -> forNameCount
    long forNameNanoCosts -> forNameNanoCosts
    java.lang.Class[] zeroTypes -> zeroTypes
    void <init>() -> <init>
    void resetForNameCount() -> resetForNameCount
    java.lang.StringBuilder getForNameStats(java.lang.StringBuilder) -> getForNameStats
    java.lang.Class getClassImpl(java.lang.String,boolean,java.lang.ClassLoader) -> getClassImpl
    boolean isClassAvailable(java.lang.String,java.lang.ClassLoader) -> isClassAvailable
    java.lang.Class getClass(java.lang.String,boolean,java.lang.ClassLoader) -> getClass
    java.lang.reflect.Constructor getConstructor(java.lang.String,java.lang.Class[],boolean,java.lang.ClassLoader) -> getConstructor
    java.lang.String asString(java.lang.Class[]) -> asString
    java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    java.lang.reflect.Constructor getConstructor(java.lang.String,java.lang.ClassLoader) -> getConstructor
    java.lang.Object createInstance(java.lang.reflect.Constructor,java.lang.Object[]) -> createInstance
    java.lang.Object createInstance(java.lang.Class,java.lang.Class[],java.lang.Object[]) -> createInstance
    java.lang.Object createInstance(java.lang.Class,java.lang.Object[]) -> createInstance
    java.lang.Object createInstance(java.lang.String,java.lang.Class[],java.lang.Object[],java.lang.ClassLoader) -> createInstance
    java.lang.Object createInstance(java.lang.String,java.lang.Object[],java.lang.ClassLoader) -> createInstance
    java.lang.Object createInstance(java.lang.String,java.lang.ClassLoader) -> createInstance
    boolean instanceOf(java.lang.Object,java.lang.String) -> instanceOf
    boolean instanceOf(java.lang.Class,java.lang.String) -> instanceOf
    boolean implementationOf(java.lang.Object,java.lang.String) -> implementationOf
    boolean implementationOf(java.lang.Class,java.lang.String) -> implementationOf
    boolean isAWTComponent(java.lang.Object) -> isAWTComponent
    boolean isAWTComponent(java.lang.Class) -> isAWTComponent
    java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    java.lang.reflect.Method getMethod(java.lang.String,java.lang.String,java.lang.Class[],java.lang.ClassLoader) -> getMethod
    java.lang.Object callMethod(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> callMethod
    java.lang.Object callStaticMethod(java.lang.String,java.lang.String,java.lang.Class[],java.lang.Object[],java.lang.ClassLoader) -> callStaticMethod
    void <clinit>() -> <clinit>
com.jogamp.common.util.ReflectionUtil$ClassNameLookup -> com.jogamp.common.util.ReflectionUtil$ClassNameLookup:
    java.lang.String name -> name
    long nanoCosts -> nanoCosts
    int count -> count
    void <init>(java.lang.String) -> <init>
    java.lang.String toString() -> toString
com.jogamp.common.util.RunnableExecutor -> com.jogamp.common.util.RunnableExecutor:
    com.jogamp.common.util.RunnableExecutor currentThreadExecutor -> currentThreadExecutor
    void invoke(boolean,java.lang.Runnable) -> invoke
    void <clinit>() -> <clinit>
com.jogamp.common.util.RunnableExecutor$1 -> com.jogamp.common.util.RunnableExecutor$1:
com.jogamp.common.util.RunnableExecutor$CurrentThreadExecutor -> com.jogamp.common.util.RunnableExecutor$CurrentThreadExecutor:
    void <init>() -> <init>
    void invoke(boolean,java.lang.Runnable) -> invoke
    void <init>(com.jogamp.common.util.RunnableExecutor$1) -> <init>
com.jogamp.common.util.RunnableTask -> com.jogamp.common.util.RunnableTask:
    java.lang.Runnable runnable -> runnable
    void invoke(boolean,java.lang.Runnable) -> invoke
    java.lang.Thread invokeOnNewThread(java.lang.ThreadGroup,boolean,java.lang.Runnable,java.lang.String) -> invokeOnNewThread
    void <init>(java.lang.Runnable,java.lang.Object,boolean,java.io.PrintStream) -> <init>
    java.lang.Runnable getRunnable() -> getRunnable
    void run() -> run
com.jogamp.common.util.RunnableTask$1 -> com.jogamp.common.util.RunnableTask$1:
    java.lang.Runnable val$runnable -> val$runnable
    boolean val$waitUntilDone -> val$waitUntilDone
    void <init>(java.lang.ThreadGroup,java.lang.String,java.lang.Runnable,boolean) -> <init>
    void run() -> run
com.jogamp.common.util.SecurityUtil -> com.jogamp.common.util.SecurityUtil:
    java.lang.SecurityManager securityManager -> securityManager
    java.security.Permission allPermissions -> allPermissions
    boolean DEBUG -> DEBUG
    java.lang.RuntimePermission allLinkPermission -> allLinkPermission
    void <init>() -> <init>
    boolean hasAllPermissions() -> hasAllPermissions
    boolean hasPermission(java.security.Permission) -> hasPermission
    void checkAllPermissions() -> checkAllPermissions
    void checkPermission(java.security.Permission) -> checkPermission
    boolean hasLinkPermission(java.lang.String) -> hasLinkPermission
    void checkLinkPermission(java.lang.String) -> checkLinkPermission
    void checkAllLinkPermission() -> checkAllLinkPermission
    java.security.cert.Certificate[] getCerts(java.lang.Class) -> getCerts
    boolean equals(java.security.cert.Certificate[],java.security.cert.Certificate[]) -> equals
    void <clinit>() -> <clinit>
com.jogamp.common.util.TaskBase -> com.jogamp.common.util.TaskBase:
    boolean TRACE_SOURCE -> TRACE_SOURCE
    java.lang.Object syncObject -> syncObject
    boolean catchExceptions -> catchExceptions
    java.io.PrintStream exceptionOut -> exceptionOut
    java.lang.Throwable sourceStack -> sourceStack
    java.lang.Object attachment -> attachment
    java.lang.Throwable runnableException -> runnableException
    long tCreated -> tCreated
    long tStarted -> tStarted
    long tExecuted -> tExecuted
    boolean isFlushed -> isFlushed
    void <init>(java.lang.Object,boolean,java.io.PrintStream) -> <init>
    java.lang.String getExceptionOutIntro() -> getExceptionOutIntro
    void printSourceTrace() -> printSourceTrace
    java.lang.Object getSyncObject() -> getSyncObject
    void setAttachment(java.lang.Object) -> setAttachment
    java.lang.Object getAttachment() -> getAttachment
    void run() -> run
    void flush(java.lang.Throwable) -> flush
    boolean isInQueue() -> isInQueue
    boolean isExecuted() -> isExecuted
    boolean isFlushed() -> isFlushed
    boolean hasWaiter() -> hasWaiter
    java.lang.Throwable getThrowable() -> getThrowable
    long getTimestampCreate() -> getTimestampCreate
    long getTimestampBeforeExec() -> getTimestampBeforeExec
    long getTimestampAfterExec() -> getTimestampAfterExec
    long getDurationInQueue() -> getDurationInQueue
    long getDurationInExec() -> getDurationInExec
    long getDurationTotal() -> getDurationTotal
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.jogamp.common.util.ValueConv -> com.jogamp.common.util.ValueConv:
    void <init>() -> <init>
    byte float_to_byte(float,boolean) -> float_to_byte
    short float_to_short(float,boolean) -> float_to_short
    int float_to_int(float,boolean) -> float_to_int
    byte double_to_byte(double,boolean) -> double_to_byte
    short double_to_short(double,boolean) -> double_to_short
    int double_to_int(double,boolean) -> double_to_int
    float byte_to_float(byte,boolean) -> byte_to_float
    double byte_to_double(byte,boolean) -> byte_to_double
    float short_to_float(short,boolean) -> short_to_float
    double short_to_double(short,boolean) -> short_to_double
    float int_to_float(int,boolean) -> int_to_float
    double int_to_double(int,boolean) -> int_to_double
    short byte_to_short(byte,boolean,boolean) -> byte_to_short
    int byte_to_int(byte,boolean,boolean) -> byte_to_int
    byte short_to_byte(short,boolean,boolean) -> short_to_byte
    int short_to_int(short,boolean,boolean) -> short_to_int
    byte int_to_byte(int,boolean,boolean) -> int_to_byte
    short int_to_short(int,boolean,boolean) -> int_to_short
com.jogamp.common.util.VersionNumber -> com.jogamp.common.util.VersionNumber:
    com.jogamp.common.util.VersionNumber zeroVersion -> zeroVersion
    java.util.regex.Pattern defPattern -> defPattern
    int major -> major
    int minor -> minor
    int sub -> sub
    int strEnd -> strEnd
    short state -> state
    short HAS_MAJOR -> HAS_MAJOR
    short HAS_MINOR -> HAS_MINOR
    short HAS_SUB -> HAS_SUB
    java.util.regex.Pattern getVersionNumberPattern(java.lang.String) -> getVersionNumberPattern
    java.util.regex.Pattern getDefaultVersionNumberPattern() -> getDefaultVersionNumberPattern
    void <init>(int,int,int,int,short) -> <init>
    void <init>(int,int,int) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,java.util.regex.Pattern) -> <init>
    boolean isZero() -> isZero
    boolean hasMajor() -> hasMajor
    boolean hasMinor() -> hasMinor
    boolean hasSub() -> hasSub
    int endOfStringMatch() -> endOfStringMatch
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(java.lang.Object) -> compareTo
    int compareTo(com.jogamp.common.util.VersionNumber) -> compareTo
    int getMajor() -> getMajor
    int getMinor() -> getMinor
    int getSub() -> getSub
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.jogamp.common.util.VersionNumberString -> com.jogamp.common.util.VersionNumberString:
    com.jogamp.common.util.VersionNumberString zeroVersion -> zeroVersion
    java.lang.String strVal -> strVal
    void <init>(int,int,int,int,short,java.lang.String) -> <init>
    void <init>(int,int,int,java.lang.String) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,java.util.regex.Pattern) -> <init>
    java.lang.String getVersionString() -> getVersionString
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.jogamp.common.util.VersionUtil -> com.jogamp.common.util.VersionUtil:
    java.lang.String SEPERATOR -> SEPERATOR
    void <init>() -> <init>
    java.lang.StringBuilder getPlatformInfo(java.lang.StringBuilder) -> getPlatformInfo
    java.lang.String getPlatformInfo() -> getPlatformInfo
    java.util.jar.Manifest getManifest(java.lang.ClassLoader,java.lang.String) -> getManifest
    java.util.jar.Manifest getManifest(java.lang.ClassLoader,java.lang.String[]) -> getManifest
    java.lang.StringBuilder getFullManifestInfo(java.util.jar.Manifest,java.lang.StringBuilder) -> getFullManifestInfo
com.jogamp.common.util.awt.AWTEDTExecutor -> com.jogamp.common.util.awt.AWTEDTExecutor:
    com.jogamp.common.util.awt.AWTEDTExecutor singleton -> singleton
    void <init>() -> <init>
    void invoke(boolean,java.lang.Runnable) -> invoke
    boolean invoke(java.lang.Object,boolean,boolean,java.lang.Runnable) -> invoke
    void <clinit>() -> <clinit>
com.jogamp.common.util.cache.TempFileCache -> com.jogamp.common.util.cache.TempFileCache:
    boolean DEBUG -> DEBUG
    boolean staticInitError -> staticInitError
    java.lang.String tmpDirPrefix -> tmpDirPrefix
    java.io.File tmpBaseDir -> tmpBaseDir
    java.lang.String tmpRootPropName -> tmpRootPropName
    java.lang.String tmpRootPropValue -> tmpRootPropValue
    java.io.File tmpRootDir -> tmpRootDir
    boolean initError -> initError
    java.io.File individualTmpDir -> individualTmpDir
    boolean initSingleton() -> initSingleton
    void initTmpRoot() -> initTmpRoot
    void deleteOldTempDirs() -> deleteOldTempDirs
    void removeAll(java.io.File) -> removeAll
    void <init>() -> <init>
    void destroy() -> destroy
    boolean isValid() -> isValid
    java.io.File getBaseDir() -> getBaseDir
    java.io.File getRootDir() -> getRootDir
    java.io.File getTempDir() -> getTempDir
    void createTmpDir() -> createTmpDir
    void access$000() -> access$000
    void <clinit>() -> <clinit>
com.jogamp.common.util.cache.TempFileCache$1 -> com.jogamp.common.util.cache.TempFileCache$1:
    java.io.FileOutputStream val$tmpOut -> val$tmpOut
    java.nio.channels.FileLock val$tmpLock -> val$tmpLock
    java.io.FileOutputStream val$lckOut -> val$lckOut
    java.nio.channels.FileLock val$lckLock -> val$lckLock
    void <init>(java.io.FileOutputStream,java.nio.channels.FileLock,java.io.FileOutputStream,java.nio.channels.FileLock) -> <init>
    void run() -> run
com.jogamp.common.util.cache.TempFileCache$2 -> com.jogamp.common.util.cache.TempFileCache$2:
    void <init>() -> <init>
    void run() -> run
com.jogamp.common.util.cache.TempFileCache$3 -> com.jogamp.common.util.cache.TempFileCache$3:
    java.lang.String val$ourLockFile -> val$ourLockFile
    void <init>(java.lang.String) -> <init>
    boolean accept(java.io.File,java.lang.String) -> accept
com.jogamp.common.util.cache.TempJarCache -> com.jogamp.common.util.cache.TempJarCache:
    boolean DEBUG -> DEBUG
    java.util.Map nativeLibMap -> nativeLibMap
    java.util.Map nativeLibJars -> nativeLibJars
    java.util.Map classFileJars -> classFileJars
    java.util.Map resourceFileJars -> resourceFileJars
    com.jogamp.common.util.cache.TempFileCache tmpFileCache -> tmpFileCache
    boolean staticInitError -> staticInitError
    boolean isInit -> isInit
    void <init>() -> <init>
    boolean testLoadState(com.jogamp.common.util.cache.TempJarCache$LoadState,com.jogamp.common.util.cache.TempJarCache$LoadState) -> testLoadState
    boolean initSingleton() -> initSingleton
    boolean isInitializedImpl() -> isInitializedImpl
    boolean isInitialized() -> isInitialized
    void checkInitialized() -> checkInitialized
    com.jogamp.common.util.cache.TempFileCache getTempFileCache() -> getTempFileCache
    boolean checkNativeLibs(java.net.URI,com.jogamp.common.util.cache.TempJarCache$LoadState) -> checkNativeLibs
    boolean checkClasses(java.net.URI,com.jogamp.common.util.cache.TempJarCache$LoadState) -> checkClasses
    boolean checkResources(java.net.URI,com.jogamp.common.util.cache.TempJarCache$LoadState) -> checkResources
    boolean addNativeLibs(java.lang.Class,java.net.URI,java.lang.String) -> addNativeLibs
    void addClasses(java.lang.Class,java.net.URI) -> addClasses
    void addResources(java.lang.Class,java.net.URI) -> addResources
    void addAll(java.lang.Class,java.net.URI) -> addAll
    java.lang.String findLibrary(java.lang.String) -> findLibrary
    java.lang.String findResource(java.lang.String) -> findResource
    java.net.URI getResource(java.lang.String) -> getResource
    void validateCertificates(java.lang.Class,java.util.jar.JarFile) -> validateCertificates
    void <clinit>() -> <clinit>
com.jogamp.common.util.cache.TempJarCache$LoadState -> com.jogamp.common.util.cache.TempJarCache$LoadState:
    com.jogamp.common.util.cache.TempJarCache$LoadState LOOKED_UP -> LOOKED_UP
    com.jogamp.common.util.cache.TempJarCache$LoadState LOADED -> LOADED
    com.jogamp.common.util.cache.TempJarCache$LoadState[] $VALUES -> $VALUES
    com.jogamp.common.util.cache.TempJarCache$LoadState[] values() -> values
    com.jogamp.common.util.cache.TempJarCache$LoadState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean compliesWith(com.jogamp.common.util.cache.TempJarCache$LoadState) -> compliesWith
    void <clinit>() -> <clinit>
com.jogamp.common.util.locks.Lock -> com.jogamp.common.util.locks.Lock:
    boolean DEBUG -> DEBUG
    boolean TRACE_LOCK -> TRACE_LOCK
    long DEFAULT_TIMEOUT -> DEFAULT_TIMEOUT
    long TIMEOUT -> TIMEOUT
    void lock() -> lock
    boolean tryLock(long) -> tryLock
    void unlock() -> unlock
    boolean isLocked() -> isLocked
    void <clinit>() -> <clinit>
com.jogamp.common.util.locks.LockFactory -> com.jogamp.common.util.locks.LockFactory:
    void <init>() -> <init>
    com.jogamp.common.util.locks.RecursiveLock createRecursiveLock() -> createRecursiveLock
    com.jogamp.common.util.locks.RecursiveThreadGroupLock createRecursiveThreadGroupLock() -> createRecursiveThreadGroupLock
    com.jogamp.common.util.locks.RecursiveLock createRecursiveLock(com.jogamp.common.util.locks.LockFactory$ImplType,boolean) -> createRecursiveLock
com.jogamp.common.util.locks.LockFactory$1 -> com.jogamp.common.util.locks.LockFactory$1:
    int[] $SwitchMap$com$jogamp$common$util$locks$LockFactory$ImplType -> $SwitchMap$com$jogamp$common$util$locks$LockFactory$ImplType
    void <clinit>() -> <clinit>
com.jogamp.common.util.locks.LockFactory$ImplType -> com.jogamp.common.util.locks.LockFactory$ImplType:
    com.jogamp.common.util.locks.LockFactory$ImplType Int01 -> Int01
    com.jogamp.common.util.locks.LockFactory$ImplType Java5 -> Java5
    com.jogamp.common.util.locks.LockFactory$ImplType Int02ThreadGroup -> Int02ThreadGroup
    int id -> id
    com.jogamp.common.util.locks.LockFactory$ImplType[] $VALUES -> $VALUES
    com.jogamp.common.util.locks.LockFactory$ImplType[] values() -> values
    com.jogamp.common.util.locks.LockFactory$ImplType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
com.jogamp.common.util.locks.RecursiveLock -> com.jogamp.common.util.locks.RecursiveLock:
    int getHoldCount() -> getHoldCount
    int getQueueLength() -> getQueueLength
com.jogamp.common.util.locks.RecursiveThreadGroupLock -> com.jogamp.common.util.locks.RecursiveThreadGroupLock:
    boolean isOriginalOwner() -> isOriginalOwner
    boolean isOriginalOwner(java.lang.Thread) -> isOriginalOwner
    void addOwner(java.lang.Thread) -> addOwner
    void removeOwner(java.lang.Thread) -> removeOwner
    void unlock() -> unlock
    void unlock(java.lang.Runnable) -> unlock
com.jogamp.common.util.locks.ThreadLock -> com.jogamp.common.util.locks.ThreadLock:
    boolean isLockedByOtherThread() -> isLockedByOtherThread
    boolean isOwner(java.lang.Thread) -> isOwner
    java.lang.Thread getOwner() -> getOwner
    void validateLocked() -> validateLocked
    void unlock(java.lang.Runnable) -> unlock
com.jogamp.gluegen.runtime.FunctionAddressResolver -> com.jogamp.gluegen.runtime.FunctionAddressResolver:
    long resolve(java.lang.String,com.jogamp.common.os.DynamicLookupHelper) -> resolve
com.jogamp.gluegen.runtime.ProcAddressTable -> com.jogamp.gluegen.runtime.ProcAddressTable:
    java.lang.String PROCADDRESS_VAR_PREFIX -> PROCADDRESS_VAR_PREFIX
    int PROCADDRESS_VAR_PREFIX_LEN -> PROCADDRESS_VAR_PREFIX_LEN
    boolean DEBUG -> DEBUG
    java.lang.String DEBUG_PREFIX -> DEBUG_PREFIX
    int debugNum -> debugNum
    com.jogamp.gluegen.runtime.FunctionAddressResolver resolver -> resolver
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    void <init>(com.jogamp.gluegen.runtime.FunctionAddressResolver) -> <init>
    void reset(com.jogamp.common.os.DynamicLookupHelper) -> reset
    void initEntry(java.lang.String,com.jogamp.common.os.DynamicLookupHelper) -> initEntry
    void setEntry(java.lang.reflect.Field,java.lang.String,com.jogamp.common.os.DynamicLookupHelper) -> setEntry
    java.lang.String fieldToFunctionName(java.lang.String) -> fieldToFunctionName
    java.lang.reflect.Field fieldForFunction(java.lang.String) -> fieldForFunction
    java.lang.reflect.Field fieldForFunctionInSec(java.lang.String) -> fieldForFunctionInSec
    boolean isAddressField(java.lang.String) -> isAddressField
    java.io.PrintStream getDebugOutStream() -> getDebugOutStream
    java.util.Map toMap() -> toMap
    boolean isFunctionAvailable(java.lang.String) -> isFunctionAvailable
    boolean isFunctionAvailableImpl(java.lang.String) -> isFunctionAvailableImpl
    long getAddressFor(java.lang.String) -> getAddressFor
    java.util.Set getNullPointerFunctions() -> getNullPointerFunctions
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.jogamp.gluegen.runtime.ProcAddressTable$1 -> com.jogamp.gluegen.runtime.ProcAddressTable$1:
    void <init>() -> <init>
    java.lang.Object run() -> run
com.jogamp.gluegen.runtime.ProcAddressTable$2 -> com.jogamp.gluegen.runtime.ProcAddressTable$2:
    java.lang.String val$name -> val$name
    com.jogamp.gluegen.runtime.ProcAddressTable this$0 -> this$0
    void <init>(com.jogamp.gluegen.runtime.ProcAddressTable,java.lang.String) -> <init>
    java.lang.reflect.Field run() -> run
    java.lang.Object run() -> run
com.jogamp.gluegen.runtime.ProcAddressTable$One2OneResolver -> com.jogamp.gluegen.runtime.ProcAddressTable$One2OneResolver:
    void <init>() -> <init>
    long resolve(java.lang.String,com.jogamp.common.os.DynamicLookupHelper) -> resolve
    void <init>(com.jogamp.gluegen.runtime.ProcAddressTable$1) -> <init>
com.jogamp.gluegen.runtime.opengl.GLNameResolver -> com.jogamp.gluegen.runtime.opengl.GLNameResolver:
    java.lang.String[] extensionsARB -> extensionsARB
    java.lang.String[] extensionsVEN -> extensionsVEN
    void <init>() -> <init>
    boolean isGLFunction(java.lang.String) -> isGLFunction
    boolean isGLEnumeration(java.lang.String) -> isGLEnumeration
    int getExtensionIdx(java.lang.String[],java.lang.String,boolean) -> getExtensionIdx
    boolean isExtension(java.lang.String[],java.lang.String,boolean) -> isExtension
    java.lang.String getExtensionSuffix(java.lang.String,boolean) -> getExtensionSuffix
    java.lang.String normalize(java.lang.String[],java.lang.String,boolean) -> normalize
    java.lang.String normalizeARB(java.lang.String,boolean) -> normalizeARB
    boolean isExtensionARB(java.lang.String,boolean) -> isExtensionARB
    java.lang.String normalizeVEN(java.lang.String,boolean) -> normalizeVEN
    boolean isExtensionVEN(java.lang.String,boolean) -> isExtensionVEN
    java.lang.String normalize(java.lang.String,boolean) -> normalize
    boolean isExtension(java.lang.String,boolean) -> isExtension
    int getFuncNamePermutationNumber(java.lang.String) -> getFuncNamePermutationNumber
    java.lang.String getFuncNamePermutation(java.lang.String,int) -> getFuncNamePermutation
    void <clinit>() -> <clinit>
com.jogamp.gluegen.runtime.opengl.GLProcAddressResolver -> com.jogamp.gluegen.runtime.opengl.GLProcAddressResolver:
    boolean DEBUG -> DEBUG
    void <init>() -> <init>
    long resolve(java.lang.String,com.jogamp.common.os.DynamicLookupHelper) -> resolve
com.jogamp.nativewindow.DelegatedUpstreamSurfaceHookWithSurfaceSize -> com.jogamp.nativewindow.DelegatedUpstreamSurfaceHookWithSurfaceSize:
    javax.media.nativewindow.UpstreamSurfaceHook upstream -> upstream
    javax.media.nativewindow.NativeSurface surface -> surface
    void <init>(javax.media.nativewindow.UpstreamSurfaceHook,javax.media.nativewindow.NativeSurface) -> <init>
    javax.media.nativewindow.NativeSurface getUpstreamSurface() -> getUpstreamSurface
    void create(javax.media.nativewindow.ProxySurface) -> create
    void destroy(javax.media.nativewindow.ProxySurface) -> destroy
    int getSurfaceWidth(javax.media.nativewindow.ProxySurface) -> getSurfaceWidth
    int getSurfaceHeight(javax.media.nativewindow.ProxySurface) -> getSurfaceHeight
    java.lang.String toString() -> toString
com.jogamp.nativewindow.MutableGraphicsConfiguration -> com.jogamp.nativewindow.MutableGraphicsConfiguration:
    void <init>(javax.media.nativewindow.AbstractGraphicsScreen,javax.media.nativewindow.CapabilitiesImmutable,javax.media.nativewindow.CapabilitiesImmutable) -> <init>
    void setChosenCapabilities(javax.media.nativewindow.CapabilitiesImmutable) -> setChosenCapabilities
    void setScreen(javax.media.nativewindow.AbstractGraphicsScreen) -> setScreen
com.jogamp.nativewindow.NativeWindowVersion -> com.jogamp.nativewindow.NativeWindowVersion:
    com.jogamp.nativewindow.NativeWindowVersion jogampCommonVersionInfo -> jogampCommonVersionInfo
    void <init>(java.lang.String,java.util.jar.Manifest) -> <init>
    com.jogamp.nativewindow.NativeWindowVersion getInstance() -> getInstance
    void main(java.lang.String[]) -> main
com.jogamp.nativewindow.UpstreamSurfaceHookMutableSize -> com.jogamp.nativewindow.UpstreamSurfaceHookMutableSize:
    int pixWidth -> pixWidth
    int pixHeight -> pixHeight
    void <init>(int,int) -> <init>
    void setSurfaceSize(int,int) -> setSurfaceSize
    int getSurfaceWidth(javax.media.nativewindow.ProxySurface) -> getSurfaceWidth
    int getSurfaceHeight(javax.media.nativewindow.ProxySurface) -> getSurfaceHeight
    void create(javax.media.nativewindow.ProxySurface) -> create
    void destroy(javax.media.nativewindow.ProxySurface) -> destroy
    java.lang.String toString() -> toString
    javax.media.nativewindow.NativeSurface getUpstreamSurface() -> getUpstreamSurface
com.jogamp.nativewindow.UpstreamWindowHookMutableSizePos -> com.jogamp.nativewindow.UpstreamWindowHookMutableSizePos:
    int winX -> winX
    int winY -> winY
    int winWidth -> winWidth
    int winHeight -> winHeight
    void <init>(int,int,int,int,int,int) -> <init>
    void setWinPos(int,int) -> setWinPos
    void setWinSize(int,int) -> setWinSize
    int getX() -> getX
    int getY() -> getY
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    java.lang.String toString() -> toString
com.jogamp.nativewindow.awt.AWTGraphicsConfiguration -> com.jogamp.nativewindow.awt.AWTGraphicsConfiguration:
    java.awt.GraphicsConfiguration config -> config
    javax.media.nativewindow.AbstractGraphicsConfiguration encapsulated -> encapsulated
    void <init>(com.jogamp.nativewindow.awt.AWTGraphicsScreen,javax.media.nativewindow.CapabilitiesImmutable,javax.media.nativewindow.CapabilitiesImmutable,java.awt.GraphicsConfiguration,javax.media.nativewindow.AbstractGraphicsConfiguration) -> <init>
    void <init>(com.jogamp.nativewindow.awt.AWTGraphicsScreen,javax.media.nativewindow.CapabilitiesImmutable,javax.media.nativewindow.CapabilitiesImmutable,java.awt.GraphicsConfiguration) -> <init>
    com.jogamp.nativewindow.awt.AWTGraphicsConfiguration create(java.awt.Component,javax.media.nativewindow.CapabilitiesImmutable,javax.media.nativewindow.CapabilitiesImmutable) -> create
    void setChosenCapabilities(javax.media.nativewindow.CapabilitiesImmutable) -> setChosenCapabilities
    java.lang.Object clone() -> clone
    java.awt.GraphicsConfiguration getAWTGraphicsConfiguration() -> getAWTGraphicsConfiguration
    javax.media.nativewindow.AbstractGraphicsConfiguration getNativeGraphicsConfiguration() -> getNativeGraphicsConfiguration
    javax.media.nativewindow.CapabilitiesImmutable setupCapabilitiesRGBABits(javax.media.nativewindow.CapabilitiesImmutable,java.awt.GraphicsConfiguration) -> setupCapabilitiesRGBABits
    java.lang.String toString() -> toString
com.jogamp.nativewindow.awt.AWTGraphicsDevice -> com.jogamp.nativewindow.awt.AWTGraphicsDevice:
    java.awt.GraphicsDevice device -> device
    void <init>(java.awt.GraphicsDevice,int) -> <init>
    com.jogamp.nativewindow.awt.AWTGraphicsDevice createDefault() -> createDefault
    java.lang.Object clone() -> clone
    java.awt.GraphicsDevice getGraphicsDevice() -> getGraphicsDevice
    java.lang.String toString() -> toString
com.jogamp.nativewindow.awt.AWTGraphicsScreen -> com.jogamp.nativewindow.awt.AWTGraphicsScreen:
    void <init>(com.jogamp.nativewindow.awt.AWTGraphicsDevice) -> <init>
    java.awt.GraphicsDevice getScreenDevice(int) -> getScreenDevice
    int findScreenIndex(java.awt.GraphicsDevice) -> findScreenIndex
    javax.media.nativewindow.AbstractGraphicsScreen createScreenDevice(java.awt.GraphicsDevice,int) -> createScreenDevice
    javax.media.nativewindow.AbstractGraphicsScreen createScreenDevice(int,int) -> createScreenDevice
    javax.media.nativewindow.AbstractGraphicsScreen createDefault() -> createDefault
    java.lang.Object clone() -> clone
com.jogamp.nativewindow.awt.AWTWindowClosingProtocol -> com.jogamp.nativewindow.awt.AWTWindowClosingProtocol:
    java.awt.Component comp -> comp
    java.awt.Window listenTo -> listenTo
    java.lang.Runnable closingOperationClose -> closingOperationClose
    java.lang.Runnable closingOperationNOP -> closingOperationNOP
    java.lang.Object closingListenerLock -> closingListenerLock
    javax.media.nativewindow.WindowClosingProtocol$WindowClosingMode defaultCloseOperation -> defaultCloseOperation
    boolean defaultCloseOperationSetByUser -> defaultCloseOperationSetByUser
    java.awt.event.WindowListener windowClosingAdapter -> windowClosingAdapter
    void <init>(java.awt.Component,java.lang.Runnable,java.lang.Runnable) -> <init>
    boolean addClosingListener() -> addClosingListener
    boolean removeClosingListener() -> removeClosingListener
    javax.media.nativewindow.WindowClosingProtocol$WindowClosingMode getDefaultCloseOperation() -> getDefaultCloseOperation
    javax.media.nativewindow.WindowClosingProtocol$WindowClosingMode setDefaultCloseOperation(javax.media.nativewindow.WindowClosingProtocol$WindowClosingMode) -> setDefaultCloseOperation
    java.lang.Runnable access$000(com.jogamp.nativewindow.awt.AWTWindowClosingProtocol) -> access$000
    java.lang.Runnable access$100(com.jogamp.nativewindow.awt.AWTWindowClosingProtocol) -> access$100
com.jogamp.nativewindow.awt.AWTWindowClosingProtocol$WindowClosingAdapter -> com.jogamp.nativewindow.awt.AWTWindowClosingProtocol$WindowClosingAdapter:
    com.jogamp.nativewindow.awt.AWTWindowClosingProtocol this$0 -> this$0
    void <init>(com.jogamp.nativewindow.awt.AWTWindowClosingProtocol) -> <init>
    void windowClosing(java.awt.event.WindowEvent) -> windowClosing
com.jogamp.nativewindow.awt.AppContextInfo -> com.jogamp.nativewindow.awt.AppContextInfo:
    boolean DEBUG -> DEBUG
    java.lang.reflect.Method getAppContextMethod -> getAppContextMethod
    java.lang.Object mainThreadAppContextLock -> mainThreadAppContextLock
    java.lang.ref.WeakReference mainThreadAppContextWR -> mainThreadAppContextWR
    java.lang.ref.WeakReference mainThreadGroupWR -> mainThreadGroupWR
    void <init>(java.lang.String) -> <init>
    boolean isValid() -> isValid
    java.lang.ThreadGroup getCachedThreadGroup() -> getCachedThreadGroup
    java.lang.Thread invokeOnAppContextThread(boolean,java.lang.Runnable,java.lang.String) -> invokeOnAppContextThread
    boolean update(java.lang.String) -> update
    java.lang.Object fetchAppContext() -> fetchAppContext
    java.lang.String toHexString(int) -> toHexString
    void <clinit>() -> <clinit>
com.jogamp.nativewindow.awt.AppContextInfo$1 -> com.jogamp.nativewindow.awt.AppContextInfo$1:
    java.lang.reflect.Method[] val$_getAppContextMethod -> val$_getAppContextMethod
    void <init>(java.lang.reflect.Method[]) -> <init>
    java.lang.Object run() -> run
com.jogamp.nativewindow.awt.JAWTWindow -> com.jogamp.nativewindow.awt.JAWTWindow:
    boolean DEBUG -> DEBUG
    boolean shallUseOffscreenLayer -> shallUseOffscreenLayer
    java.awt.Component component -> component
    com.jogamp.nativewindow.awt.AppContextInfo appContextInfo -> appContextInfo
    com.jogamp.nativewindow.awt.AWTGraphicsConfiguration config -> config
    jogamp.nativewindow.SurfaceUpdatedHelper surfaceUpdatedHelper -> surfaceUpdatedHelper
    com.jogamp.common.util.locks.RecursiveLock surfaceLock -> surfaceLock
    com.jogamp.nativewindow.awt.JAWTWindow$JAWTComponentListener jawtComponentListener -> jawtComponentListener
    boolean isApplet -> isApplet
    jogamp.nativewindow.jawt.JAWT jawt -> jawt
    boolean isOffscreenLayerSurface -> isOffscreenLayerSurface
    long drawable -> drawable
    javax.media.nativewindow.util.Rectangle bounds -> bounds
    javax.media.nativewindow.util.Insets insets -> insets
    long offscreenSurfaceLayer -> offscreenSurfaceLayer
    int[] nativePixelScale -> nativePixelScale
    int[] hasPixelScale -> hasPixelScale
    int[] reqPixelScale -> reqPixelScale
    long drawable_old -> drawable_old
    java.lang.Runnable repaintTask -> repaintTask
    java.lang.Runnable detachSurfaceLayerNotify -> detachSurfaceLayerNotify
    void <init>(java.lang.Object,javax.media.nativewindow.AbstractGraphicsConfiguration) -> <init>
    java.lang.String id(java.lang.Object) -> id
    java.lang.String jawtStr() -> jawtStr
    java.lang.String getThreadName() -> getThreadName
    void invalidate() -> invalidate
    void invalidateNative() -> invalidateNative
    void setSurfaceScale(int[]) -> setSurfaceScale
    int[] getRequestedSurfaceScale(int[]) -> getRequestedSurfaceScale
    int[] getCurrentSurfaceScale(int[]) -> getCurrentSurfaceScale
    int[] getNativeSurfaceScale(int[]) -> getNativeSurfaceScale
    boolean updateLockedData(jogamp.nativewindow.jawt.JAWT_Rectangle) -> updateLockedData
    boolean updatePixelScale() -> updatePixelScale
    javax.media.nativewindow.util.RectangleImmutable getBounds() -> getBounds
    int getPixelScaleX() -> getPixelScaleX
    int getPixelScaleY() -> getPixelScaleY
    javax.media.nativewindow.util.InsetsImmutable getInsets() -> getInsets
    java.awt.Component getAWTComponent() -> getAWTComponent
    boolean isApplet() -> isApplet
    jogamp.nativewindow.jawt.JAWT getJAWT() -> getJAWT
    void setShallUseOffscreenLayer(boolean) -> setShallUseOffscreenLayer
    boolean getShallUseOffscreenLayer() -> getShallUseOffscreenLayer
    boolean isOffscreenLayerSurfaceEnabled() -> isOffscreenLayerSurfaceEnabled
    void attachSurfaceLayer(long) -> attachSurfaceLayer
    void attachSurfaceLayerImpl(long) -> attachSurfaceLayerImpl
    void layoutSurfaceLayerImpl(long,boolean) -> layoutSurfaceLayerImpl
    void layoutSurfaceLayerIfEnabled(boolean) -> layoutSurfaceLayerIfEnabled
    void detachSurfaceLayer() -> detachSurfaceLayer
    void detachSurfaceLayerImpl(long,java.lang.Runnable) -> detachSurfaceLayerImpl
    long getAttachedSurfaceLayer() -> getAttachedSurfaceLayer
    boolean isSurfaceLayerAttached() -> isSurfaceLayerAttached
    void setChosenCapabilities(javax.media.nativewindow.CapabilitiesImmutable) -> setChosenCapabilities
    com.jogamp.common.util.locks.RecursiveLock getLock() -> getLock
    boolean setCursor(javax.media.nativewindow.util.PixelRectangle,javax.media.nativewindow.util.PointImmutable) -> setCursor
    boolean hideCursor() -> hideCursor
    void determineIfApplet() -> determineIfApplet
    jogamp.nativewindow.jawt.JAWT fetchJAWTImpl() -> fetchJAWTImpl
    int lockSurfaceImpl() -> lockSurfaceImpl
    void dumpJAWTInfo() -> dumpJAWTInfo
    int lockSurface() -> lockSurface
    void unlockSurfaceImpl() -> unlockSurfaceImpl
    void unlockSurface() -> unlockSurface
    boolean isSurfaceLockedByOtherThread() -> isSurfaceLockedByOtherThread
    java.lang.Thread getSurfaceLockOwner() -> getSurfaceLockOwner
    boolean surfaceSwap() -> surfaceSwap
    void addSurfaceUpdatedListener(javax.media.nativewindow.SurfaceUpdatedListener) -> addSurfaceUpdatedListener
    void addSurfaceUpdatedListener(int,javax.media.nativewindow.SurfaceUpdatedListener) -> addSurfaceUpdatedListener
    void removeSurfaceUpdatedListener(javax.media.nativewindow.SurfaceUpdatedListener) -> removeSurfaceUpdatedListener
    void surfaceUpdated(java.lang.Object,javax.media.nativewindow.NativeSurface,long) -> surfaceUpdated
    long getSurfaceHandle() -> getSurfaceHandle
    javax.media.nativewindow.AbstractGraphicsConfiguration getGraphicsConfiguration() -> getGraphicsConfiguration
    long getDisplayHandle() -> getDisplayHandle
    int getScreenIndex() -> getScreenIndex
    int getSurfaceWidth() -> getSurfaceWidth
    int getSurfaceHeight() -> getSurfaceHeight
    int[] convertToWindowUnits(int[]) -> convertToWindowUnits
    int[] convertToPixelUnits(int[]) -> convertToPixelUnits
    javax.media.nativewindow.NativeSurface getNativeSurface() -> getNativeSurface
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    void destroy() -> destroy
    javax.media.nativewindow.NativeWindow getParent() -> getParent
    long getWindowHandle() -> getWindowHandle
    int getX() -> getX
    int getY() -> getY
    javax.media.nativewindow.util.Point getLocationOnScreen(javax.media.nativewindow.util.Point) -> getLocationOnScreen
    javax.media.nativewindow.util.Point getLocationOnScreenNative(javax.media.nativewindow.util.Point) -> getLocationOnScreenNative
    javax.media.nativewindow.util.Point getLocationOnScreenNativeImpl(int,int) -> getLocationOnScreenNativeImpl
    java.awt.Component getLocationOnScreenNonBlocking(javax.media.nativewindow.util.Point,java.awt.Component) -> getLocationOnScreenNonBlocking
    boolean hasFocus() -> hasFocus
    java.lang.StringBuilder jawt2String(java.lang.StringBuilder) -> jawt2String
    java.lang.String toString() -> toString
    java.lang.String toHexString(long) -> toHexString
    java.lang.String toHexString(int) -> toHexString
    java.lang.String access$100(java.lang.Object) -> access$100
    java.lang.String access$200() -> access$200
    java.lang.String access$300(com.jogamp.nativewindow.awt.JAWTWindow) -> access$300
    void access$400(com.jogamp.nativewindow.awt.JAWTWindow,boolean) -> access$400
    long access$502(com.jogamp.nativewindow.awt.JAWTWindow,long) -> access$502
    void <clinit>() -> <clinit>
com.jogamp.nativewindow.awt.JAWTWindow$1 -> com.jogamp.nativewindow.awt.JAWTWindow$1:
    com.jogamp.nativewindow.awt.JAWTWindow this$0 -> this$0
    void <init>(com.jogamp.nativewindow.awt.JAWTWindow) -> <init>
    void run() -> run
com.jogamp.nativewindow.awt.JAWTWindow$2 -> com.jogamp.nativewindow.awt.JAWTWindow$2:
    com.jogamp.nativewindow.awt.JAWTWindow this$0 -> this$0
    void <init>(com.jogamp.nativewindow.awt.JAWTWindow) -> <init>
    void run() -> run
com.jogamp.nativewindow.awt.JAWTWindow$3 -> com.jogamp.nativewindow.awt.JAWTWindow$3:
    javax.media.nativewindow.util.PixelRectangle val$pixelrect -> val$pixelrect
    javax.media.nativewindow.util.PointImmutable val$hotSpot -> val$hotSpot
    com.jogamp.nativewindow.awt.JAWTWindow this$0 -> this$0
    void <init>(com.jogamp.nativewindow.awt.JAWTWindow,javax.media.nativewindow.util.PixelRectangle,javax.media.nativewindow.util.PointImmutable) -> <init>
    void run() -> run
com.jogamp.nativewindow.awt.JAWTWindow$4 -> com.jogamp.nativewindow.awt.JAWTWindow$4:
    com.jogamp.nativewindow.awt.JAWTWindow this$0 -> this$0
    void <init>(com.jogamp.nativewindow.awt.JAWTWindow) -> <init>
    void run() -> run
com.jogamp.nativewindow.awt.JAWTWindow$JAWTComponentListener -> com.jogamp.nativewindow.awt.JAWTWindow$JAWTComponentListener:
    boolean isShowing -> isShowing
    com.jogamp.nativewindow.awt.JAWTWindow this$0 -> this$0
    java.lang.String str(java.lang.Object) -> str
    java.lang.String s(java.awt.event.ComponentEvent) -> s
    java.lang.String s(java.awt.event.HierarchyEvent) -> s
    java.lang.String toString() -> toString
    void <init>(com.jogamp.nativewindow.awt.JAWTWindow) -> <init>
    void detach() -> detach
    void componentResized(java.awt.event.ComponentEvent) -> componentResized
    void componentMoved(java.awt.event.ComponentEvent) -> componentMoved
    void componentShown(java.awt.event.ComponentEvent) -> componentShown
    void componentHidden(java.awt.event.ComponentEvent) -> componentHidden
    void hierarchyChanged(java.awt.event.HierarchyEvent) -> hierarchyChanged
    void <init>(com.jogamp.nativewindow.awt.JAWTWindow,com.jogamp.nativewindow.awt.JAWTWindow$1) -> <init>
    void access$600(com.jogamp.nativewindow.awt.JAWTWindow$JAWTComponentListener) -> access$600
com.jogamp.nativewindow.awt.JAWTWindow$JAWTComponentListener$1 -> com.jogamp.nativewindow.awt.JAWTWindow$JAWTComponentListener$1:
    com.jogamp.nativewindow.awt.JAWTWindow val$this$0 -> val$this$0
    com.jogamp.nativewindow.awt.JAWTWindow$JAWTComponentListener this$1 -> this$1
    void <init>(com.jogamp.nativewindow.awt.JAWTWindow$JAWTComponentListener,com.jogamp.nativewindow.awt.JAWTWindow) -> <init>
    void run() -> run
com.jogamp.nativewindow.awt.JAWTWindow$JAWTComponentListener$2 -> com.jogamp.nativewindow.awt.JAWTWindow$JAWTComponentListener$2:
    com.jogamp.nativewindow.awt.JAWTWindow$JAWTComponentListener this$1 -> this$1
    void <init>(com.jogamp.nativewindow.awt.JAWTWindow$JAWTComponentListener) -> <init>
    void run() -> run
com.jogamp.nativewindow.macosx.MacOSXGraphicsDevice -> com.jogamp.nativewindow.macosx.MacOSXGraphicsDevice:
    void <init>(int) -> <init>
    java.lang.Object clone() -> clone
com.jogamp.nativewindow.swt.SWTAccessor -> com.jogamp.nativewindow.swt.SWTAccessor:
    boolean DEBUG -> DEBUG
    java.lang.reflect.Field swt_control_handle -> swt_control_handle
    boolean swt_uses_long_handles -> swt_uses_long_handles
    java.lang.Object swt_osx_init -> swt_osx_init
    java.lang.reflect.Field swt_osx_control_view -> swt_osx_control_view
    java.lang.reflect.Field swt_osx_view_id -> swt_osx_view_id
    java.lang.String nwt -> nwt
    boolean isOSX -> isOSX
    boolean isWindows -> isWindows
    boolean isX11 -> isX11
    boolean isX11GTK -> isX11GTK
    java.lang.String str_handle -> str_handle
    java.lang.String str_osx_view -> str_osx_view
    java.lang.String str_osx_id -> str_osx_id
    java.lang.reflect.Method swt_control_internal_new_GC -> swt_control_internal_new_GC
    java.lang.reflect.Method swt_control_internal_dispose_GC -> swt_control_internal_dispose_GC
    java.lang.String str_internal_new_GC -> str_internal_new_GC
    java.lang.String str_internal_dispose_GC -> str_internal_dispose_GC
    java.lang.String str_OS_gtk_class -> str_OS_gtk_class
    java.lang.Class OS_gtk_class -> OS_gtk_class
    java.lang.String str_OS_gtk_version -> str_OS_gtk_version
    com.jogamp.common.util.VersionNumber OS_gtk_version -> OS_gtk_version
    java.lang.reflect.Method OS_gtk_widget_realize -> OS_gtk_widget_realize
    java.lang.reflect.Method OS_gtk_widget_unrealize -> OS_gtk_widget_unrealize
    java.lang.reflect.Method OS_GTK_WIDGET_WINDOW -> OS_GTK_WIDGET_WINDOW
    java.lang.reflect.Method OS_gtk_widget_get_window -> OS_gtk_widget_get_window
    java.lang.reflect.Method OS_gdk_x11_drawable_get_xdisplay -> OS_gdk_x11_drawable_get_xdisplay
    java.lang.reflect.Method OS_gdk_x11_display_get_xdisplay -> OS_gdk_x11_display_get_xdisplay
    java.lang.reflect.Method OS_gdk_window_get_display -> OS_gdk_window_get_display
    java.lang.reflect.Method OS_gdk_x11_drawable_get_xid -> OS_gdk_x11_drawable_get_xid
    java.lang.reflect.Method OS_gdk_x11_window_get_xid -> OS_gdk_x11_window_get_xid
    java.lang.reflect.Method OS_gdk_window_set_back_pixmap -> OS_gdk_window_set_back_pixmap
    java.lang.String str_gtk_widget_realize -> str_gtk_widget_realize
    java.lang.String str_gtk_widget_unrealize -> str_gtk_widget_unrealize
    java.lang.String str_GTK_WIDGET_WINDOW -> str_GTK_WIDGET_WINDOW
    java.lang.String str_gtk_widget_get_window -> str_gtk_widget_get_window
    java.lang.String str_gdk_x11_drawable_get_xdisplay -> str_gdk_x11_drawable_get_xdisplay
    java.lang.String str_gdk_x11_display_get_xdisplay -> str_gdk_x11_display_get_xdisplay
    java.lang.String str_gdk_window_get_display -> str_gdk_window_get_display
    java.lang.String str_gdk_x11_drawable_get_xid -> str_gdk_x11_drawable_get_xid
    java.lang.String str_gdk_x11_window_get_xid -> str_gdk_x11_window_get_xid
    java.lang.String str_gdk_window_set_back_pixmap -> str_gdk_window_set_back_pixmap
    com.jogamp.common.util.VersionNumber GTK_VERSION_2_14_0 -> GTK_VERSION_2_14_0
    com.jogamp.common.util.VersionNumber GTK_VERSION_2_24_0 -> GTK_VERSION_2_24_0
    com.jogamp.common.util.VersionNumber GTK_VERSION_3_0_0 -> GTK_VERSION_3_0_0
    void <init>() -> <init>
    com.jogamp.common.util.VersionNumber GTK_VERSION(int) -> GTK_VERSION
    java.lang.Number getIntOrLong(long) -> getIntOrLong
    void callStaticMethodL2V(java.lang.reflect.Method,long) -> callStaticMethodL2V
    void callStaticMethodLLZ2V(java.lang.reflect.Method,long,long,boolean) -> callStaticMethodLLZ2V
    long callStaticMethodL2L(java.lang.reflect.Method,long) -> callStaticMethodL2L
    boolean isUsingLongHandles() -> isUsingLongHandles
    boolean useX11GTK() -> useX11GTK
    com.jogamp.common.util.VersionNumber GTK_VERSION() -> GTK_VERSION
    long gdk_widget_get_window(long) -> gdk_widget_get_window
    long gdk_window_get_xdisplay(long) -> gdk_window_get_xdisplay
    long gdk_window_get_xwindow(long) -> gdk_window_get_xwindow
    void gdk_window_set_back_pixmap(long,long,boolean) -> gdk_window_set_back_pixmap
    long getHandle(org.eclipse.swt.widgets.Control) -> getHandle
    void setRealized(org.eclipse.swt.widgets.Control,boolean) -> setRealized
    javax.media.nativewindow.AbstractGraphicsDevice getDevice(org.eclipse.swt.widgets.Control) -> getDevice
    javax.media.nativewindow.AbstractGraphicsScreen getScreen(javax.media.nativewindow.AbstractGraphicsDevice,int) -> getScreen
    int getNativeVisualID(javax.media.nativewindow.AbstractGraphicsDevice,long) -> getNativeVisualID
    long getWindowHandle(org.eclipse.swt.widgets.Control) -> getWindowHandle
    long newGC(org.eclipse.swt.widgets.Control,org.eclipse.swt.graphics.GCData) -> newGC
    void disposeGC(org.eclipse.swt.widgets.Control,long,org.eclipse.swt.graphics.GCData) -> disposeGC
    void invoke(boolean,java.lang.Runnable) -> invoke
    void invoke(org.eclipse.swt.widgets.Display,boolean,java.lang.Runnable) -> invoke
    long createCompatibleX11ChildWindow(javax.media.nativewindow.AbstractGraphicsScreen,org.eclipse.swt.widgets.Control,int,int,int) -> createCompatibleX11ChildWindow
    void resizeX11Window(javax.media.nativewindow.AbstractGraphicsDevice,org.eclipse.swt.graphics.Rectangle,long) -> resizeX11Window
    void destroyX11Window(javax.media.nativewindow.AbstractGraphicsDevice,long) -> destroyX11Window
    long createCompatibleGDKChildWindow(org.eclipse.swt.widgets.Control,int,int,int) -> createCompatibleGDKChildWindow
    void showGDKWindow(long) -> showGDKWindow
    void focusGDKWindow(long) -> focusGDKWindow
    void resizeGDKWindow(org.eclipse.swt.graphics.Rectangle,long) -> resizeGDKWindow
    void destroyGDKWindow(long) -> destroyGDKWindow
    java.lang.reflect.Method access$000() -> access$000
    void access$100(java.lang.reflect.Method,long) -> access$100
    java.lang.reflect.Method access$200() -> access$200
    java.lang.reflect.Method access$300() -> access$300
    boolean access$400() -> access$400
    java.lang.reflect.Method access$500() -> access$500
    void <clinit>() -> <clinit>
com.jogamp.nativewindow.swt.SWTAccessor$1 -> com.jogamp.nativewindow.swt.SWTAccessor$1:
    void <init>() -> <init>
    java.lang.Object run() -> run
com.jogamp.nativewindow.swt.SWTAccessor$2 -> com.jogamp.nativewindow.swt.SWTAccessor$2:
    boolean val$realize -> val$realize
    long val$handle -> val$handle
    void <init>(boolean,long) -> <init>
    void run() -> run
com.jogamp.nativewindow.swt.SWTAccessor$3 -> com.jogamp.nativewindow.swt.SWTAccessor$3:
    java.lang.Object[] val$o -> val$o
    org.eclipse.swt.widgets.Control val$swtControl -> val$swtControl
    org.eclipse.swt.graphics.GCData val$gcData -> val$gcData
    void <init>(java.lang.Object[],org.eclipse.swt.widgets.Control,org.eclipse.swt.graphics.GCData) -> <init>
    void run() -> run
com.jogamp.nativewindow.swt.SWTAccessor$4 -> com.jogamp.nativewindow.swt.SWTAccessor$4:
    org.eclipse.swt.widgets.Control val$swtControl -> val$swtControl
    long val$gc -> val$gc
    org.eclipse.swt.graphics.GCData val$gcData -> val$gcData
    void <init>(org.eclipse.swt.widgets.Control,long,org.eclipse.swt.graphics.GCData) -> <init>
    void run() -> run
com.jogamp.nativewindow.windows.WindowsGraphicsDevice -> com.jogamp.nativewindow.windows.WindowsGraphicsDevice:
    void <init>(int) -> <init>
    void <init>(java.lang.String,int) -> <init>
    java.lang.Object clone() -> clone
com.jogamp.nativewindow.x11.X11GraphicsDevice -> com.jogamp.nativewindow.x11.X11GraphicsDevice:
    boolean handleOwner -> handleOwner
    boolean isXineramaEnabled -> isXineramaEnabled
    void <init>(java.lang.String,int) -> <init>
    void <init>(long,int,boolean) -> <init>
    void <init>(long,int,javax.media.nativewindow.ToolkitLock,boolean) -> <init>
    void <init>(java.lang.String,int,javax.media.nativewindow.ToolkitLock) -> <init>
    int getDefaultScreenImpl(long) -> getDefaultScreenImpl
    int getDefaultScreen() -> getDefaultScreen
    int getDefaultVisualID() -> getDefaultVisualID
    boolean isXineramaEnabled() -> isXineramaEnabled
    java.lang.Object clone() -> clone
    boolean open() -> open
    boolean close() -> close
    boolean isHandleOwner() -> isHandleOwner
    void clearHandleOwner() -> clearHandleOwner
    java.lang.Object getHandleOwnership() -> getHandleOwnership
    java.lang.Object setHandleOwnership(java.lang.Object) -> setHandleOwnership
com.jogamp.nativewindow.x11.X11GraphicsScreen -> com.jogamp.nativewindow.x11.X11GraphicsScreen:
    void <init>(com.jogamp.nativewindow.x11.X11GraphicsDevice,int) -> <init>
    javax.media.nativewindow.AbstractGraphicsScreen createScreenDevice(long,int,boolean) -> createScreenDevice
    int getVisualID() -> getVisualID
    java.lang.Object clone() -> clone
com.jogamp.newt.Display -> com.jogamp.newt.Display:
    boolean DEBUG -> DEBUG
    boolean DEBUG_POINTER_ICON -> DEBUG_POINTER_ICON
    java.util.ArrayList displayList -> displayList
    int displaysActive -> displaysActive
    void <init>() -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    javax.media.nativewindow.util.PixelFormat getNativePointerIconPixelFormat() -> getNativePointerIconPixelFormat
    boolean getNativePointerIconForceDirectNIO() -> getNativePointerIconForceDirectNIO
    com.jogamp.newt.Display$PointerIcon createPointerIcon(com.jogamp.common.util.IOUtil$ClassResources,int,int) -> createPointerIcon
    com.jogamp.newt.Display$PointerIcon createPointerIcon(javax.media.nativewindow.util.PixelRectangle,int,int) -> createPointerIcon
    void createNative() -> createNative
    void destroy() -> destroy
    boolean validateEDTStopped() -> validateEDTStopped
    boolean isNativeValid() -> isNativeValid
    int getReferenceCount() -> getReferenceCount
    int addReference() -> addReference
    int removeReference() -> removeReference
    javax.media.nativewindow.AbstractGraphicsDevice getGraphicsDevice() -> getGraphicsDevice
    long getHandle() -> getHandle
    java.lang.String getFQName() -> getFQName
    int getId() -> getId
    java.lang.String getName() -> getName
    java.lang.String getType() -> getType
    boolean isExclusive() -> isExclusive
    com.jogamp.newt.util.EDTUtil setEDTUtil(com.jogamp.newt.util.EDTUtil) -> setEDTUtil
    com.jogamp.newt.util.EDTUtil getEDTUtil() -> getEDTUtil
    boolean isEDTRunning() -> isEDTRunning
    void dispatchMessages() -> dispatchMessages
    void dumpDisplayList(java.lang.String) -> dumpDisplayList
    com.jogamp.newt.Display getFirstDisplayOf(java.lang.String,java.lang.String,int,boolean) -> getFirstDisplayOf
    com.jogamp.newt.Display getLastDisplayOf(java.lang.String,java.lang.String,int,boolean) -> getLastDisplayOf
    com.jogamp.newt.Display getDisplayOfImpl(java.lang.String,java.lang.String,int,int,boolean) -> getDisplayOfImpl
    void addDisplay2List(com.jogamp.newt.Display) -> addDisplay2List
    java.util.Collection getAllDisplays() -> getAllDisplays
    int getActiveDisplayNumber() -> getActiveDisplayNumber
    java.lang.String getThreadName() -> getThreadName
    java.lang.String toHexString(int) -> toHexString
    java.lang.String toHexString(long) -> toHexString
    int hashCodeNullSafe(java.lang.Object) -> hashCodeNullSafe
    void <clinit>() -> <clinit>
com.jogamp.newt.Display$PointerIcon -> com.jogamp.newt.Display$PointerIcon:
    int getStride() -> getStride
    boolean isGLOriented() -> isGLOriented
    int hashCode() -> hashCode
    com.jogamp.newt.Display getDisplay() -> getDisplay
    javax.media.nativewindow.util.PointImmutable getHotspot() -> getHotspot
    boolean isValid() -> isValid
    boolean validate() -> validate
    void destroy() -> destroy
com.jogamp.newt.MonitorDevice -> com.jogamp.newt.MonitorDevice:
    com.jogamp.newt.Screen screen -> screen
    int nativeId -> nativeId
    javax.media.nativewindow.util.DimensionImmutable sizeMM -> sizeMM
    com.jogamp.newt.MonitorMode originalMode -> originalMode
    com.jogamp.common.util.ArrayHashSet supportedModes -> supportedModes
    com.jogamp.newt.MonitorMode currentMode -> currentMode
    boolean modeChanged -> modeChanged
    javax.media.nativewindow.util.Rectangle viewportPU -> viewportPU
    javax.media.nativewindow.util.Rectangle viewportWU -> viewportWU
    void <init>(com.jogamp.newt.Screen,int,javax.media.nativewindow.util.DimensionImmutable,javax.media.nativewindow.util.Rectangle,javax.media.nativewindow.util.Rectangle,com.jogamp.newt.MonitorMode,com.jogamp.common.util.ArrayHashSet) -> <init>
    com.jogamp.newt.Screen getScreen() -> getScreen
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int getId() -> getId
    javax.media.nativewindow.util.DimensionImmutable getSizeMM() -> getSizeMM
    float[] getPixelsPerMM(float[]) -> getPixelsPerMM
    float[] getPixelsPerMM(com.jogamp.newt.MonitorMode,float[]) -> getPixelsPerMM
    com.jogamp.newt.MonitorMode getOriginalMode() -> getOriginalMode
    java.util.List getSupportedModes() -> getSupportedModes
    javax.media.nativewindow.util.RectangleImmutable getViewport() -> getViewport
    javax.media.nativewindow.util.RectangleImmutable getViewportInWindowUnits() -> getViewportInWindowUnits
    boolean contains(int,int) -> contains
    void unionOfViewports(javax.media.nativewindow.util.Rectangle,javax.media.nativewindow.util.Rectangle,java.util.List) -> unionOfViewports
    boolean isOriginalMode() -> isOriginalMode
    boolean isModeChangedByUs() -> isModeChangedByUs
    com.jogamp.newt.MonitorMode getCurrentMode() -> getCurrentMode
    com.jogamp.newt.MonitorMode queryCurrentMode() -> queryCurrentMode
    boolean setCurrentMode(com.jogamp.newt.MonitorMode) -> setCurrentMode
    java.lang.String toString() -> toString
com.jogamp.newt.MonitorMode -> com.jogamp.newt.MonitorMode:
    java.util.Comparator monitorModeComparator -> monitorModeComparator
    java.util.Comparator monitorModeComparatorInv -> monitorModeComparatorInv
    int ROTATE_0 -> ROTATE_0
    int ROTATE_90 -> ROTATE_90
    int ROTATE_180 -> ROTATE_180
    int ROTATE_270 -> ROTATE_270
    int FLAG_INTERLACE -> FLAG_INTERLACE
    int FLAG_DOUBLESCAN -> FLAG_DOUBLESCAN
    int nativeId -> nativeId
    com.jogamp.newt.MonitorMode$SizeAndRRate sizeAndRRate -> sizeAndRRate
    int rotation -> rotation
    int hashCode -> hashCode
    boolean isRotationValid(int) -> isRotationValid
    void <init>(int,com.jogamp.newt.MonitorMode$SizeAndRRate,int) -> <init>
    void <init>(javax.media.nativewindow.util.SurfaceSize,float,int,int) -> <init>
    int getId() -> getId
    com.jogamp.newt.MonitorMode$SizeAndRRate getSizeAndRRate() -> getSizeAndRRate
    javax.media.nativewindow.util.SurfaceSize getSurfaceSize() -> getSurfaceSize
    float getRefreshRate() -> getRefreshRate
    int getFlags() -> getFlags
    int getRotation() -> getRotation
    int getRotatedWidth() -> getRotatedWidth
    int getRotatedHeight() -> getRotatedHeight
    java.lang.String toString() -> toString
    int compareTo(com.jogamp.newt.MonitorMode) -> compareTo
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int getHashCode() -> getHashCode
    int getRotatedWH(boolean) -> getRotatedWH
    int compareTo(java.lang.Object) -> compareTo
    void <clinit>() -> <clinit>
com.jogamp.newt.MonitorMode$1 -> com.jogamp.newt.MonitorMode$1:
    void <init>() -> <init>
    int compare(com.jogamp.newt.MonitorMode,com.jogamp.newt.MonitorMode) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.jogamp.newt.MonitorMode$2 -> com.jogamp.newt.MonitorMode$2:
    void <init>() -> <init>
    int compare(com.jogamp.newt.MonitorMode,com.jogamp.newt.MonitorMode) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.jogamp.newt.MonitorMode$SizeAndRRate -> com.jogamp.newt.MonitorMode$SizeAndRRate:
    javax.media.nativewindow.util.SurfaceSize surfaceSize -> surfaceSize
    int flags -> flags
    float refreshRate -> refreshRate
    int hashCode -> hashCode
    java.lang.String STR_INTERLACE -> STR_INTERLACE
    java.lang.String STR_DOUBLESCAN -> STR_DOUBLESCAN
    java.lang.String STR_SEP -> STR_SEP
    void <init>(javax.media.nativewindow.util.SurfaceSize,float,int) -> <init>
    java.lang.StringBuilder flags2String(int) -> flags2String
    java.lang.String toString() -> toString
    int compareTo(com.jogamp.newt.MonitorMode$SizeAndRRate) -> compareTo
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int getHashCode() -> getHashCode
    int compareTo(java.lang.Object) -> compareTo
com.jogamp.newt.NewtFactory -> com.jogamp.newt.NewtFactory:
    boolean DEBUG_IMPLEMENTATION -> DEBUG_IMPLEMENTATION
    java.lang.String DRIVER_DEFAULT_ROOT_PACKAGE -> DRIVER_DEFAULT_ROOT_PACKAGE
    com.jogamp.common.util.IOUtil$ClassResources defaultWindowIcons -> defaultWindowIcons
    boolean useEDT -> useEDT
    void <init>() -> <init>
    com.jogamp.common.util.IOUtil$ClassResources getWindowIcons() -> getWindowIcons
    void setWindowIcons(com.jogamp.common.util.IOUtil$ClassResources) -> setWindowIcons
    java.lang.Class getCustomClass(java.lang.String,java.lang.String) -> getCustomClass
    void setUseEDT(boolean) -> setUseEDT
    boolean useEDT() -> useEDT
    com.jogamp.newt.Display createDisplay(java.lang.String) -> createDisplay
    com.jogamp.newt.Display createDisplay(java.lang.String,boolean) -> createDisplay
    com.jogamp.newt.Display createDisplay(java.lang.String,java.lang.String) -> createDisplay
    com.jogamp.newt.Display createDisplay(java.lang.String,java.lang.String,boolean) -> createDisplay
    com.jogamp.newt.Screen createScreen(com.jogamp.newt.Display,int) -> createScreen
    com.jogamp.newt.Window createWindow(javax.media.nativewindow.CapabilitiesImmutable) -> createWindow
    com.jogamp.newt.Window createWindow(com.jogamp.newt.Screen,javax.media.nativewindow.CapabilitiesImmutable) -> createWindow
    com.jogamp.newt.Window createWindow(javax.media.nativewindow.NativeWindow,javax.media.nativewindow.CapabilitiesImmutable) -> createWindow
    com.jogamp.newt.Window createWindowImpl(java.lang.String,javax.media.nativewindow.CapabilitiesImmutable) -> createWindowImpl
    com.jogamp.newt.Window createWindow(java.lang.String,int,long,javax.media.nativewindow.CapabilitiesImmutable) -> createWindow
    com.jogamp.newt.Window createWindow(java.lang.Object[],com.jogamp.newt.Screen,javax.media.nativewindow.CapabilitiesImmutable) -> createWindow
    com.jogamp.newt.Display createDisplay(java.lang.String,long,boolean) -> createDisplay
    boolean isScreenCompatible(javax.media.nativewindow.NativeWindow,com.jogamp.newt.Screen) -> isScreenCompatible
    com.jogamp.newt.Screen createCompatibleScreen(javax.media.nativewindow.NativeWindow) -> createCompatibleScreen
    com.jogamp.newt.Screen createCompatibleScreen(javax.media.nativewindow.NativeWindow,com.jogamp.newt.Screen) -> createCompatibleScreen
    com.jogamp.common.util.IOUtil$ClassResources access$002(com.jogamp.common.util.IOUtil$ClassResources) -> access$002
    void <clinit>() -> <clinit>
com.jogamp.newt.NewtFactory$1 -> com.jogamp.newt.NewtFactory$1:
    void <init>() -> <init>
    java.lang.Object run() -> run
com.jogamp.newt.Screen -> com.jogamp.newt.Screen:
    int SCREEN_MODE_CHANGE_TIMEOUT -> SCREEN_MODE_CHANGE_TIMEOUT
    boolean DEBUG -> DEBUG
    java.util.ArrayList screenList -> screenList
    int screensActive -> screensActive
    void <init>() -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void createNative() -> createNative
    void destroy() -> destroy
    boolean isNativeValid() -> isNativeValid
    int getReferenceCount() -> getReferenceCount
    int addReference() -> addReference
    int removeReference() -> removeReference
    javax.media.nativewindow.AbstractGraphicsScreen getGraphicsScreen() -> getGraphicsScreen
    int getIndex() -> getIndex
    int getX() -> getX
    int getY() -> getY
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    javax.media.nativewindow.util.RectangleImmutable getViewport() -> getViewport
    javax.media.nativewindow.util.RectangleImmutable getViewportInWindowUnits() -> getViewportInWindowUnits
    com.jogamp.newt.Display getDisplay() -> getDisplay
    java.lang.String getFQName() -> getFQName
    java.util.List getMonitorModes() -> getMonitorModes
    java.util.List getMonitorDevices() -> getMonitorDevices
    com.jogamp.newt.MonitorDevice getMainMonitor(javax.media.nativewindow.util.RectangleImmutable) -> getMainMonitor
    void unionOfMonitorViewports(javax.media.nativewindow.util.Rectangle,javax.media.nativewindow.util.Rectangle) -> unionOfMonitorViewports
    void addMonitorModeListener(com.jogamp.newt.event.MonitorModeListener) -> addMonitorModeListener
    void removeMonitorModeListener(com.jogamp.newt.event.MonitorModeListener) -> removeMonitorModeListener
    com.jogamp.newt.Screen getFirstScreenOf(com.jogamp.newt.Display,int,int) -> getFirstScreenOf
    com.jogamp.newt.Screen getLastScreenOf(com.jogamp.newt.Display,int,int) -> getLastScreenOf
    com.jogamp.newt.Screen getScreenOfImpl(com.jogamp.newt.Display,int,int,int) -> getScreenOfImpl
    void addScreen2List(com.jogamp.newt.Screen) -> addScreen2List
    java.util.Collection getAllScreens() -> getAllScreens
    int getActiveScreenNumber() -> getActiveScreenNumber
    void <clinit>() -> <clinit>
com.jogamp.newt.Window -> com.jogamp.newt.Window:
    boolean DEBUG_MOUSE_EVENT -> DEBUG_MOUSE_EVENT
    boolean DEBUG_KEY_EVENT -> DEBUG_KEY_EVENT
    boolean DEBUG_IMPLEMENTATION -> DEBUG_IMPLEMENTATION
    long TIMEOUT_NATIVEWINDOW -> TIMEOUT_NATIVEWINDOW
    int REPARENT_HINT_FORCE_RECREATION -> REPARENT_HINT_FORCE_RECREATION
    int REPARENT_HINT_BECOMES_VISIBLE -> REPARENT_HINT_BECOMES_VISIBLE
    boolean isNativeValid() -> isNativeValid
    com.jogamp.newt.Screen getScreen() -> getScreen
    com.jogamp.newt.MonitorDevice getMainMonitor() -> getMainMonitor
    javax.media.nativewindow.CapabilitiesChooser setCapabilitiesChooser(javax.media.nativewindow.CapabilitiesChooser) -> setCapabilitiesChooser
    javax.media.nativewindow.CapabilitiesImmutable getRequestedCapabilities() -> getRequestedCapabilities
    javax.media.nativewindow.CapabilitiesImmutable getChosenCapabilities() -> getChosenCapabilities
    void destroy() -> destroy
    void setWindowDestroyNotifyAction(java.lang.Runnable) -> setWindowDestroyNotifyAction
    void setVisible(boolean) -> setVisible
    void setVisible(boolean,boolean) -> setVisible
    boolean isVisible() -> isVisible
    com.jogamp.newt.Window getDelegatedWindow() -> getDelegatedWindow
    boolean addChild(javax.media.nativewindow.NativeWindow) -> addChild
    boolean removeChild(javax.media.nativewindow.NativeWindow) -> removeChild
    javax.media.nativewindow.util.Rectangle getBounds() -> getBounds
    float[] getPixelsPerMM(float[]) -> getPixelsPerMM
    void setSize(int,int) -> setSize
    void setSurfaceSize(int,int) -> setSurfaceSize
    void setTopLevelSize(int,int) -> setTopLevelSize
    void setPosition(int,int) -> setPosition
    void setTopLevelPosition(int,int) -> setTopLevelPosition
    void setUndecorated(boolean) -> setUndecorated
    boolean isUndecorated() -> isUndecorated
    void setAlwaysOnTop(boolean) -> setAlwaysOnTop
    boolean isAlwaysOnTop() -> isAlwaysOnTop
    void setTitle(java.lang.String) -> setTitle
    java.lang.String getTitle() -> getTitle
    boolean isPointerVisible() -> isPointerVisible
    void setPointerVisible(boolean) -> setPointerVisible
    com.jogamp.newt.Display$PointerIcon getPointerIcon() -> getPointerIcon
    void setPointerIcon(com.jogamp.newt.Display$PointerIcon) -> setPointerIcon
    boolean isPointerConfined() -> isPointerConfined
    void confinePointer(boolean) -> confinePointer
    void warpPointer(int,int) -> warpPointer
    com.jogamp.newt.Window$ReparentOperation reparentWindow(javax.media.nativewindow.NativeWindow,int,int,int) -> reparentWindow
    boolean setFullscreen(boolean) -> setFullscreen
    boolean setFullscreen(java.util.List) -> setFullscreen
    boolean isFullscreen() -> isFullscreen
    void setFocusAction(com.jogamp.newt.Window$FocusRunnable) -> setFocusAction
    void setKeyboardFocusHandler(com.jogamp.newt.event.KeyListener) -> setKeyboardFocusHandler
    void requestFocus() -> requestFocus
    void requestFocus(boolean) -> requestFocus
    void windowRepaint(int,int,int,int) -> windowRepaint
    void enqueueEvent(boolean,com.jogamp.newt.event.NEWTEvent) -> enqueueEvent
    void runOnEDTIfAvail(boolean,java.lang.Runnable) -> runOnEDTIfAvail
    void sendWindowEvent(int) -> sendWindowEvent
    void addWindowListener(com.jogamp.newt.event.WindowListener) -> addWindowListener
    void addWindowListener(int,com.jogamp.newt.event.WindowListener) -> addWindowListener
    void removeWindowListener(com.jogamp.newt.event.WindowListener) -> removeWindowListener
    com.jogamp.newt.event.WindowListener getWindowListener(int) -> getWindowListener
    com.jogamp.newt.event.WindowListener[] getWindowListeners() -> getWindowListeners
    void setKeyboardVisible(boolean) -> setKeyboardVisible
    boolean isKeyboardVisible() -> isKeyboardVisible
    void addKeyListener(com.jogamp.newt.event.KeyListener) -> addKeyListener
    void addKeyListener(int,com.jogamp.newt.event.KeyListener) -> addKeyListener
    void removeKeyListener(com.jogamp.newt.event.KeyListener) -> removeKeyListener
    com.jogamp.newt.event.KeyListener getKeyListener(int) -> getKeyListener
    com.jogamp.newt.event.KeyListener[] getKeyListeners() -> getKeyListeners
    void addMouseListener(com.jogamp.newt.event.MouseListener) -> addMouseListener
    void addMouseListener(int,com.jogamp.newt.event.MouseListener) -> addMouseListener
    void removeMouseListener(com.jogamp.newt.event.MouseListener) -> removeMouseListener
    com.jogamp.newt.event.MouseListener getMouseListener(int) -> getMouseListener
    com.jogamp.newt.event.MouseListener[] getMouseListeners() -> getMouseListeners
    void setDefaultGesturesEnabled(boolean) -> setDefaultGesturesEnabled
    boolean areDefaultGesturesEnabled() -> areDefaultGesturesEnabled
    void addGestureHandler(com.jogamp.newt.event.GestureHandler) -> addGestureHandler
    void addGestureHandler(int,com.jogamp.newt.event.GestureHandler) -> addGestureHandler
    void removeGestureHandler(com.jogamp.newt.event.GestureHandler) -> removeGestureHandler
    void addGestureListener(com.jogamp.newt.event.GestureHandler$GestureListener) -> addGestureListener
    void addGestureListener(int,com.jogamp.newt.event.GestureHandler$GestureListener) -> addGestureListener
    void removeGestureListener(com.jogamp.newt.event.GestureHandler$GestureListener) -> removeGestureListener
    void <clinit>() -> <clinit>
com.jogamp.newt.Window$FocusRunnable -> com.jogamp.newt.Window$FocusRunnable:
    boolean run() -> run
com.jogamp.newt.Window$ReparentOperation -> com.jogamp.newt.Window$ReparentOperation:
    com.jogamp.newt.Window$ReparentOperation ACTION_INVALID -> ACTION_INVALID
    com.jogamp.newt.Window$ReparentOperation ACTION_NOP -> ACTION_NOP
    com.jogamp.newt.Window$ReparentOperation ACTION_NATIVE_REPARENTING -> ACTION_NATIVE_REPARENTING
    com.jogamp.newt.Window$ReparentOperation ACTION_NATIVE_CREATION -> ACTION_NATIVE_CREATION
    com.jogamp.newt.Window$ReparentOperation ACTION_NATIVE_CREATION_PENDING -> ACTION_NATIVE_CREATION_PENDING
    com.jogamp.newt.Window$ReparentOperation[] $VALUES -> $VALUES
    com.jogamp.newt.Window$ReparentOperation[] values() -> values
    com.jogamp.newt.Window$ReparentOperation valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.jogamp.newt.awt.NewtCanvasAWT -> com.jogamp.newt.awt.NewtCanvasAWT:
    boolean DEBUG -> DEBUG
    java.lang.Object sync -> sync
    com.jogamp.nativewindow.awt.JAWTWindow jawtWindow -> jawtWindow
    boolean isApplet -> isApplet
    boolean shallUseOffscreenLayer -> shallUseOffscreenLayer
    com.jogamp.newt.Window newtChild -> newtChild
    boolean newtChildAttached -> newtChildAttached
    boolean isOnscreen -> isOnscreen
    javax.media.nativewindow.WindowClosingProtocol$WindowClosingMode newtChildCloseOp -> newtChildCloseOp
    jogamp.newt.awt.event.AWTParentWindowAdapter awtWinAdapter -> awtWinAdapter
    com.jogamp.newt.event.awt.AWTAdapter awtMouseAdapter -> awtMouseAdapter
    com.jogamp.newt.event.awt.AWTAdapter awtKeyAdapter -> awtKeyAdapter
    boolean destroyJAWTPending -> destroyJAWTPending
    boolean skipJAWTDestroy -> skipJAWTDestroy
    boolean componentAdded -> componentAdded
    com.jogamp.nativewindow.awt.AWTWindowClosingProtocol awtWindowClosingProtocol -> awtWindowClosingProtocol
    com.jogamp.newt.awt.NewtCanvasAWT$FocusAction focusAction -> focusAction
    java.lang.Runnable awtClearGlobalFocusOwner -> awtClearGlobalFocusOwner
    java.lang.Runnable awtClearSelectedMenuPath -> awtClearSelectedMenuPath
    com.jogamp.newt.event.WindowListener clearAWTMenusOnNewtFocus -> clearAWTMenusOnNewtFocus
    com.jogamp.newt.awt.NewtCanvasAWT$FocusTraversalKeyListener newtFocusTraversalKeyListener -> newtFocusTraversalKeyListener
    com.jogamp.newt.awt.NewtCanvasAWT$FocusPropertyChangeListener focusPropertyChangeListener -> focusPropertyChangeListener
    java.awt.KeyboardFocusManager keyboardFocusManager -> keyboardFocusManager
    boolean printActive -> printActive
    javax.media.opengl.GLAnimatorControl printAnimator -> printAnimator
    javax.media.opengl.GLAutoDrawable printGLAD -> printGLAD
    jogamp.opengl.awt.AWTTilePainter printAWTTiles -> printAWTTiles
    java.lang.Runnable setupPrintOnEDT -> setupPrintOnEDT
    java.lang.Runnable releasePrintOnEDT -> releasePrintOnEDT
    java.lang.Runnable forceRelayout -> forceRelayout
    boolean disableBackgroundEraseInitialized -> disableBackgroundEraseInitialized
    java.lang.reflect.Method disableBackgroundEraseMethod -> disableBackgroundEraseMethod
    void <init>() -> <init>
    void <init>(java.awt.GraphicsConfiguration) -> <init>
    void <init>(com.jogamp.newt.Window) -> <init>
    void <init>(java.awt.GraphicsConfiguration,com.jogamp.newt.Window) -> <init>
    void setShallUseOffscreenLayer(boolean) -> setShallUseOffscreenLayer
    boolean getShallUseOffscreenLayer() -> getShallUseOffscreenLayer
    boolean isOffscreenLayerSurfaceEnabled() -> isOffscreenLayerSurfaceEnabled
    boolean isApplet() -> isApplet
    boolean isParent() -> isParent
    boolean isFullscreen() -> isFullscreen
    void requestFocusNEWTChild() -> requestFocusNEWTChild
    com.jogamp.newt.Window setNEWTChild(com.jogamp.newt.Window) -> setNEWTChild
    void updateLayoutSize() -> updateLayoutSize
    com.jogamp.newt.Window getNEWTChild() -> getNEWTChild
    javax.media.nativewindow.NativeWindow getNativeWindow() -> getNativeWindow
    javax.media.nativewindow.WindowClosingProtocol$WindowClosingMode getDefaultCloseOperation() -> getDefaultCloseOperation
    javax.media.nativewindow.WindowClosingProtocol$WindowClosingMode setDefaultCloseOperation(javax.media.nativewindow.WindowClosingProtocol$WindowClosingMode) -> setDefaultCloseOperation
    void setSkipJAWTDestroy(boolean) -> setSkipJAWTDestroy
    boolean getSkipJAWTDestroy() -> getSkipJAWTDestroy
    void determineIfApplet() -> determineIfApplet
    void addNotify() -> addNotify
    void removeNotify() -> removeNotify
    void destroy() -> destroy
    void destroyImpl(boolean,boolean) -> destroyImpl
    void paint(java.awt.Graphics) -> paint
    void update(java.awt.Graphics) -> update
    void reshape(int,int,int,int) -> reshape
    javax.media.opengl.GLAutoDrawable getGLAD() -> getGLAD
    void setupPrint(double,double,int,int,int) -> setupPrint
    void releasePrint() -> releasePrint
    void print(java.awt.Graphics) -> print
    boolean validateComponent(boolean) -> validateComponent
    void configureNewtChild(boolean) -> configureNewtChild
    boolean isAWTEventPassThrough() -> isAWTEventPassThrough
    void attachNewtChild() -> attachNewtChild
    void detachNewtChild(java.awt.Container) -> detachNewtChild
    void disableBackgroundErase() -> disableBackgroundErase
    java.lang.String currentThreadName() -> currentThreadName
    java.lang.String newtWinHandleToHexString(com.jogamp.newt.Window) -> newtWinHandleToHexString
    java.lang.String toHexString(long) -> toHexString
    boolean access$000(com.jogamp.newt.awt.NewtCanvasAWT) -> access$000
    void access$100(com.jogamp.newt.awt.NewtCanvasAWT,boolean,boolean) -> access$100
    com.jogamp.newt.Window access$200(com.jogamp.newt.awt.NewtCanvasAWT) -> access$200
    boolean access$300(com.jogamp.newt.awt.NewtCanvasAWT) -> access$300
    boolean access$400(com.jogamp.newt.awt.NewtCanvasAWT) -> access$400
    boolean access$500(com.jogamp.newt.awt.NewtCanvasAWT) -> access$500
    java.lang.Runnable access$600() -> access$600
    void access$701(com.jogamp.newt.awt.NewtCanvasAWT) -> access$701
    void access$900(com.jogamp.newt.awt.NewtCanvasAWT) -> access$900
    java.lang.Runnable access$1000(com.jogamp.newt.awt.NewtCanvasAWT) -> access$1000
    java.awt.KeyboardFocusManager access$1100(com.jogamp.newt.awt.NewtCanvasAWT) -> access$1100
    void access$1200(com.jogamp.newt.awt.NewtCanvasAWT) -> access$1200
    java.lang.Object access$1300(com.jogamp.newt.awt.NewtCanvasAWT) -> access$1300
    boolean access$1400(com.jogamp.newt.awt.NewtCanvasAWT,boolean) -> access$1400
    boolean access$1502(com.jogamp.newt.awt.NewtCanvasAWT,boolean) -> access$1502
    javax.media.opengl.GLAutoDrawable access$1600(com.jogamp.newt.awt.NewtCanvasAWT) -> access$1600
    javax.media.opengl.GLAnimatorControl access$1702(com.jogamp.newt.awt.NewtCanvasAWT,javax.media.opengl.GLAnimatorControl) -> access$1702
    javax.media.opengl.GLAnimatorControl access$1700(com.jogamp.newt.awt.NewtCanvasAWT) -> access$1700
    javax.media.opengl.GLAutoDrawable access$1802(com.jogamp.newt.awt.NewtCanvasAWT,javax.media.opengl.GLAutoDrawable) -> access$1802
    jogamp.opengl.awt.AWTTilePainter access$1900(com.jogamp.newt.awt.NewtCanvasAWT) -> access$1900
    javax.media.opengl.GLAutoDrawable access$1800(com.jogamp.newt.awt.NewtCanvasAWT) -> access$1800
    jogamp.opengl.awt.AWTTilePainter access$1902(com.jogamp.newt.awt.NewtCanvasAWT,jogamp.opengl.awt.AWTTilePainter) -> access$1902
    java.lang.reflect.Method access$2000() -> access$2000
    java.lang.reflect.Method access$2002(java.lang.reflect.Method) -> access$2002
    void <clinit>() -> <clinit>
com.jogamp.newt.awt.NewtCanvasAWT$1 -> com.jogamp.newt.awt.NewtCanvasAWT$1:
    com.jogamp.newt.awt.NewtCanvasAWT this$0 -> this$0
    void <init>(com.jogamp.newt.awt.NewtCanvasAWT) -> <init>
    void run() -> run
com.jogamp.newt.awt.NewtCanvasAWT$2 -> com.jogamp.newt.awt.NewtCanvasAWT$2:
    com.jogamp.newt.awt.NewtCanvasAWT this$0 -> this$0
    void <init>(com.jogamp.newt.awt.NewtCanvasAWT) -> <init>
    void run() -> run
com.jogamp.newt.awt.NewtCanvasAWT$3 -> com.jogamp.newt.awt.NewtCanvasAWT$3:
    com.jogamp.newt.awt.NewtCanvasAWT this$0 -> this$0
    void <init>(com.jogamp.newt.awt.NewtCanvasAWT) -> <init>
    void run() -> run
com.jogamp.newt.awt.NewtCanvasAWT$4 -> com.jogamp.newt.awt.NewtCanvasAWT$4:
    com.jogamp.newt.awt.NewtCanvasAWT this$0 -> this$0
    void <init>(com.jogamp.newt.awt.NewtCanvasAWT) -> <init>
    void windowResized(com.jogamp.newt.event.WindowEvent) -> windowResized
    void windowGainedFocus(com.jogamp.newt.event.WindowEvent) -> windowGainedFocus
com.jogamp.newt.awt.NewtCanvasAWT$5 -> com.jogamp.newt.awt.NewtCanvasAWT$5:
    com.jogamp.newt.awt.NewtCanvasAWT this$0 -> this$0
    void <init>(com.jogamp.newt.awt.NewtCanvasAWT) -> <init>
    void run() -> run
com.jogamp.newt.awt.NewtCanvasAWT$6 -> com.jogamp.newt.awt.NewtCanvasAWT$6:
    com.jogamp.newt.awt.NewtCanvasAWT this$0 -> this$0
    void <init>(com.jogamp.newt.awt.NewtCanvasAWT) -> <init>
    void run() -> run
com.jogamp.newt.awt.NewtCanvasAWT$7 -> com.jogamp.newt.awt.NewtCanvasAWT$7:
    com.jogamp.newt.awt.NewtCanvasAWT this$0 -> this$0
    void <init>(com.jogamp.newt.awt.NewtCanvasAWT) -> <init>
    void run() -> run
com.jogamp.newt.awt.NewtCanvasAWT$8 -> com.jogamp.newt.awt.NewtCanvasAWT$8:
    com.jogamp.newt.awt.NewtCanvasAWT this$0 -> this$0
    void <init>(com.jogamp.newt.awt.NewtCanvasAWT) -> <init>
    void run() -> run
com.jogamp.newt.awt.NewtCanvasAWT$9 -> com.jogamp.newt.awt.NewtCanvasAWT$9:
    com.jogamp.newt.awt.NewtCanvasAWT this$0 -> this$0
    void <init>(com.jogamp.newt.awt.NewtCanvasAWT) -> <init>
    java.lang.Object run() -> run
com.jogamp.newt.awt.NewtCanvasAWT$ClearFocusOwner -> com.jogamp.newt.awt.NewtCanvasAWT$ClearFocusOwner:
    void <init>() -> <init>
    void run() -> run
    void <init>(com.jogamp.newt.awt.NewtCanvasAWT$1) -> <init>
com.jogamp.newt.awt.NewtCanvasAWT$FocusAction -> com.jogamp.newt.awt.NewtCanvasAWT$FocusAction:
    com.jogamp.newt.awt.NewtCanvasAWT this$0 -> this$0
    void <init>(com.jogamp.newt.awt.NewtCanvasAWT) -> <init>
    boolean run() -> run
com.jogamp.newt.awt.NewtCanvasAWT$FocusPropertyChangeListener -> com.jogamp.newt.awt.NewtCanvasAWT$FocusPropertyChangeListener:
    com.jogamp.newt.awt.NewtCanvasAWT this$0 -> this$0
    void <init>(com.jogamp.newt.awt.NewtCanvasAWT) -> <init>
    void propertyChange(java.beans.PropertyChangeEvent) -> propertyChange
com.jogamp.newt.awt.NewtCanvasAWT$FocusTraversalKeyListener -> com.jogamp.newt.awt.NewtCanvasAWT$FocusTraversalKeyListener:
    com.jogamp.newt.awt.NewtCanvasAWT this$0 -> this$0
    void <init>(com.jogamp.newt.awt.NewtCanvasAWT) -> <init>
    void keyPressed(com.jogamp.newt.event.KeyEvent) -> keyPressed
    void keyReleased(com.jogamp.newt.event.KeyEvent) -> keyReleased
    void handleKey(com.jogamp.newt.event.KeyEvent,boolean) -> handleKey
com.jogamp.newt.event.DoubleTapScrollGesture -> com.jogamp.newt.event.DoubleTapScrollGesture:
    int SCROLL_SLOP_PIXEL -> SCROLL_SLOP_PIXEL
    int DOUBLE_TAP_SLOP_PIXEL -> DOUBLE_TAP_SLOP_PIXEL
    float SCROLL_SLOP_MM -> SCROLL_SLOP_MM
    float DOUBLE_TAP_SLOP_MM -> DOUBLE_TAP_SLOP_MM
    int ST_NONE -> ST_NONE
    int ST_1PRESS -> ST_1PRESS
    int ST_2PRESS_T -> ST_2PRESS_T
    int ST_2PRESS_C -> ST_2PRESS_C
    int ST_SCROLL -> ST_SCROLL
    int scrollSlop -> scrollSlop
    int scrollSlopSquare -> scrollSlopSquare
    int doubleTapSlop -> doubleTapSlop
    int doubleTapSlopSquare -> doubleTapSlopSquare
    float[] scrollDistance -> scrollDistance
    int[] pIds -> pIds
    int gestureState -> gestureState
    int sqStartDist -> sqStartDist
    int lastX -> lastX
    int lastY -> lastY
    int pointerDownCount -> pointerDownCount
    com.jogamp.newt.event.MouseEvent hitGestureEvent -> hitGestureEvent
    int getSquareDistance(float,float,float,float) -> getSquareDistance
    int gesturePointers(com.jogamp.newt.event.MouseEvent,int) -> gesturePointers
    void <init>(int,int) -> <init>
    java.lang.String toString() -> toString
    void clear(boolean) -> clear
    boolean isWithinGesture() -> isWithinGesture
    boolean hasGesture() -> hasGesture
    com.jogamp.newt.event.InputEvent getGestureEvent() -> getGestureEvent
    float[] getScrollDistanceXY() -> getScrollDistanceXY
    boolean process(com.jogamp.newt.event.InputEvent) -> process
    void <clinit>() -> <clinit>
com.jogamp.newt.event.GestureHandler -> com.jogamp.newt.event.GestureHandler:
    boolean DEBUG -> DEBUG
    void clear(boolean) -> clear
    boolean hasGesture() -> hasGesture
    com.jogamp.newt.event.InputEvent getGestureEvent() -> getGestureEvent
    boolean isWithinGesture() -> isWithinGesture
    boolean process(com.jogamp.newt.event.InputEvent) -> process
    void <clinit>() -> <clinit>
com.jogamp.newt.event.GestureHandler$GestureEvent -> com.jogamp.newt.event.GestureHandler$GestureEvent:
    short EVENT_GESTURE_DETECTED -> EVENT_GESTURE_DETECTED
    com.jogamp.newt.event.GestureHandler handler -> handler
    com.jogamp.newt.event.InputEvent ie -> ie
    void <init>(java.lang.Object,long,int,com.jogamp.newt.event.GestureHandler,com.jogamp.newt.event.InputEvent) -> <init>
    void <init>(short,java.lang.Object,long,int,com.jogamp.newt.event.GestureHandler,com.jogamp.newt.event.InputEvent) -> <init>
    com.jogamp.newt.event.GestureHandler getHandler() -> getHandler
    com.jogamp.newt.event.InputEvent getTrigger() -> getTrigger
    java.lang.String toString() -> toString
com.jogamp.newt.event.GestureHandler$GestureListener -> com.jogamp.newt.event.GestureHandler$GestureListener:
    void gestureDetected(com.jogamp.newt.event.GestureHandler$GestureEvent) -> gestureDetected
com.jogamp.newt.event.InputEvent -> com.jogamp.newt.event.InputEvent:
    int SHIFT_MASK -> SHIFT_MASK
    int CTRL_MASK -> CTRL_MASK
    int META_MASK -> META_MASK
    int ALT_MASK -> ALT_MASK
    int ALT_GRAPH_MASK -> ALT_GRAPH_MASK
    int BUTTON1_MASK -> BUTTON1_MASK
    int BUTTON2_MASK -> BUTTON2_MASK
    int BUTTON3_MASK -> BUTTON3_MASK
    int BUTTON4_MASK -> BUTTON4_MASK
    int BUTTON5_MASK -> BUTTON5_MASK
    int BUTTON6_MASK -> BUTTON6_MASK
    int BUTTON7_MASK -> BUTTON7_MASK
    int BUTTON8_MASK -> BUTTON8_MASK
    int BUTTON9_MASK -> BUTTON9_MASK
    int BUTTONLAST_MASK -> BUTTONLAST_MASK
    int BUTTONALL_MASK -> BUTTONALL_MASK
    int AUTOREPEAT_MASK -> AUTOREPEAT_MASK
    int CONFINED_MASK -> CONFINED_MASK
    int INVISIBLE_MASK -> INVISIBLE_MASK
    int modifiers -> modifiers
    int getButtonMask(int) -> getButtonMask
    void <init>(short,java.lang.Object,long,int) -> <init>
    int getModifiers() -> getModifiers
    boolean isAltDown() -> isAltDown
    boolean isAltGraphDown() -> isAltGraphDown
    boolean isControlDown() -> isControlDown
    boolean isMetaDown() -> isMetaDown
    boolean isShiftDown() -> isShiftDown
    boolean isAutoRepeat() -> isAutoRepeat
    boolean isConfined() -> isConfined
    boolean isInvisible() -> isInvisible
    java.lang.StringBuilder getModifiersString(java.lang.StringBuilder) -> getModifiersString
    short[] getButtonsDown() -> getButtonsDown
    boolean isButtonDown(int) -> isButtonDown
    int getButtonDownCount() -> getButtonDownCount
    boolean isAnyButtonDown() -> isAnyButtonDown
    java.lang.String toString() -> toString
    java.lang.StringBuilder toString(java.lang.StringBuilder) -> toString
com.jogamp.newt.event.KeyEvent -> com.jogamp.newt.event.KeyEvent:
    short keyCode -> keyCode
    short keySym -> keySym
    char keyChar -> keyChar
    byte flags -> flags
    byte F_MODIFIER_MASK -> F_MODIFIER_MASK
    byte F_ACTION_MASK -> F_ACTION_MASK
    byte F_PRINTABLE_MASK -> F_PRINTABLE_MASK
    short EVENT_KEY_PRESSED -> EVENT_KEY_PRESSED
    short EVENT_KEY_RELEASED -> EVENT_KEY_RELEASED
    char NULL_CHAR -> NULL_CHAR
    com.jogamp.newt.event.KeyEvent$NonPrintableRange[] nonPrintableKeys -> nonPrintableKeys
    short VK_UNDEFINED -> VK_UNDEFINED
    short VK_FREE01 -> VK_FREE01
    short VK_HOME -> VK_HOME
    short VK_END -> VK_END
    short VK_FINAL -> VK_FINAL
    short VK_PRINTSCREEN -> VK_PRINTSCREEN
    short VK_FREE06 -> VK_FREE06
    short VK_FREE07 -> VK_FREE07
    short VK_BACK_SPACE -> VK_BACK_SPACE
    short VK_TAB -> VK_TAB
    short VK_FREE0A -> VK_FREE0A
    short VK_PAGE_DOWN -> VK_PAGE_DOWN
    short VK_CLEAR -> VK_CLEAR
    short VK_ENTER -> VK_ENTER
    short VK_FREE0E -> VK_FREE0E
    short VK_SHIFT -> VK_SHIFT
    short VK_PAGE_UP -> VK_PAGE_UP
    short VK_CONTROL -> VK_CONTROL
    short VK_ALT -> VK_ALT
    short VK_ALT_GRAPH -> VK_ALT_GRAPH
    short VK_CAPS_LOCK -> VK_CAPS_LOCK
    short VK_FREE15 -> VK_FREE15
    short VK_PAUSE -> VK_PAUSE
    short VK_SCROLL_LOCK -> VK_SCROLL_LOCK
    short VK_CANCEL -> VK_CANCEL
    short VK_FREE19 -> VK_FREE19
    short VK_INSERT -> VK_INSERT
    short VK_ESCAPE -> VK_ESCAPE
    short VK_CONVERT -> VK_CONVERT
    short VK_NONCONVERT -> VK_NONCONVERT
    short VK_ACCEPT -> VK_ACCEPT
    short VK_MODECHANGE -> VK_MODECHANGE
    short VK_SPACE -> VK_SPACE
    short VK_EXCLAMATION_MARK -> VK_EXCLAMATION_MARK
    short VK_QUOTEDBL -> VK_QUOTEDBL
    short VK_NUMBER_SIGN -> VK_NUMBER_SIGN
    short VK_DOLLAR -> VK_DOLLAR
    short VK_PERCENT -> VK_PERCENT
    short VK_AMPERSAND -> VK_AMPERSAND
    short VK_QUOTE -> VK_QUOTE
    short VK_LEFT_PARENTHESIS -> VK_LEFT_PARENTHESIS
    short VK_RIGHT_PARENTHESIS -> VK_RIGHT_PARENTHESIS
    short VK_ASTERISK -> VK_ASTERISK
    short VK_PLUS -> VK_PLUS
    short VK_COMMA -> VK_COMMA
    short VK_MINUS -> VK_MINUS
    short VK_PERIOD -> VK_PERIOD
    short VK_SLASH -> VK_SLASH
    short VK_0 -> VK_0
    short VK_1 -> VK_1
    short VK_2 -> VK_2
    short VK_3 -> VK_3
    short VK_4 -> VK_4
    short VK_5 -> VK_5
    short VK_6 -> VK_6
    short VK_7 -> VK_7
    short VK_8 -> VK_8
    short VK_9 -> VK_9
    short VK_COLON -> VK_COLON
    short VK_SEMICOLON -> VK_SEMICOLON
    short VK_LESS -> VK_LESS
    short VK_EQUALS -> VK_EQUALS
    short VK_GREATER -> VK_GREATER
    short VK_QUESTIONMARK -> VK_QUESTIONMARK
    short VK_AT -> VK_AT
    short VK_A -> VK_A
    short VK_B -> VK_B
    short VK_C -> VK_C
    short VK_D -> VK_D
    short VK_E -> VK_E
    short VK_F -> VK_F
    short VK_G -> VK_G
    short VK_H -> VK_H
    short VK_I -> VK_I
    short VK_J -> VK_J
    short VK_K -> VK_K
    short VK_L -> VK_L
    short VK_M -> VK_M
    short VK_N -> VK_N
    short VK_O -> VK_O
    short VK_P -> VK_P
    short VK_Q -> VK_Q
    short VK_R -> VK_R
    short VK_S -> VK_S
    short VK_T -> VK_T
    short VK_U -> VK_U
    short VK_V -> VK_V
    short VK_W -> VK_W
    short VK_X -> VK_X
    short VK_Y -> VK_Y
    short VK_Z -> VK_Z
    short VK_OPEN_BRACKET -> VK_OPEN_BRACKET
    short VK_BACK_SLASH -> VK_BACK_SLASH
    short VK_CLOSE_BRACKET -> VK_CLOSE_BRACKET
    short VK_CIRCUMFLEX -> VK_CIRCUMFLEX
    short VK_UNDERSCORE -> VK_UNDERSCORE
    short VK_BACK_QUOTE -> VK_BACK_QUOTE
    short VK_F1 -> VK_F1
    short VK_F2 -> VK_F2
    short VK_F3 -> VK_F3
    short VK_F4 -> VK_F4
    short VK_F5 -> VK_F5
    short VK_F6 -> VK_F6
    short VK_F7 -> VK_F7
    short VK_F8 -> VK_F8
    short VK_F9 -> VK_F9
    short VK_F10 -> VK_F10
    short VK_F11 -> VK_F11
    short VK_F12 -> VK_F12
    short VK_F13 -> VK_F13
    short VK_F14 -> VK_F14
    short VK_F15 -> VK_F15
    short VK_F16 -> VK_F16
    short VK_F17 -> VK_F17
    short VK_F18 -> VK_F18
    short VK_F19 -> VK_F19
    short VK_F20 -> VK_F20
    short VK_F21 -> VK_F21
    short VK_F22 -> VK_F22
    short VK_F23 -> VK_F23
    short VK_F24 -> VK_F24
    short VK_LEFT_BRACE -> VK_LEFT_BRACE
    short VK_PIPE -> VK_PIPE
    short VK_RIGHT_BRACE -> VK_RIGHT_BRACE
    short VK_TILDE -> VK_TILDE
    short VK_SEPARATOR -> VK_SEPARATOR
    short VK_NUMPAD0 -> VK_NUMPAD0
    short VK_NUMPAD1 -> VK_NUMPAD1
    short VK_NUMPAD2 -> VK_NUMPAD2
    short VK_NUMPAD3 -> VK_NUMPAD3
    short VK_NUMPAD4 -> VK_NUMPAD4
    short VK_NUMPAD5 -> VK_NUMPAD5
    short VK_NUMPAD6 -> VK_NUMPAD6
    short VK_NUMPAD7 -> VK_NUMPAD7
    short VK_NUMPAD8 -> VK_NUMPAD8
    short VK_NUMPAD9 -> VK_NUMPAD9
    short VK_DECIMAL -> VK_DECIMAL
    short VK_ADD -> VK_ADD
    short VK_SUBTRACT -> VK_SUBTRACT
    short VK_MULTIPLY -> VK_MULTIPLY
    short VK_DIVIDE -> VK_DIVIDE
    short VK_DELETE -> VK_DELETE
    short VK_NUM_LOCK -> VK_NUM_LOCK
    short VK_LEFT -> VK_LEFT
    short VK_UP -> VK_UP
    short VK_RIGHT -> VK_RIGHT
    short VK_DOWN -> VK_DOWN
    short VK_CONTEXT_MENU -> VK_CONTEXT_MENU
    short VK_WINDOWS -> VK_WINDOWS
    short VK_META -> VK_META
    short VK_HELP -> VK_HELP
    short VK_COMPOSE -> VK_COMPOSE
    short VK_BEGIN -> VK_BEGIN
    short VK_STOP -> VK_STOP
    short VK_INVERTED_EXCLAMATION_MARK -> VK_INVERTED_EXCLAMATION_MARK
    short VK_EURO_SIGN -> VK_EURO_SIGN
    short VK_CUT -> VK_CUT
    short VK_COPY -> VK_COPY
    short VK_PASTE -> VK_PASTE
    short VK_UNDO -> VK_UNDO
    short VK_AGAIN -> VK_AGAIN
    short VK_FIND -> VK_FIND
    short VK_PROPS -> VK_PROPS
    short VK_INPUT_METHOD_ON_OFF -> VK_INPUT_METHOD_ON_OFF
    short VK_CODE_INPUT -> VK_CODE_INPUT
    short VK_ROMAN_CHARACTERS -> VK_ROMAN_CHARACTERS
    short VK_ALL_CANDIDATES -> VK_ALL_CANDIDATES
    short VK_PREVIOUS_CANDIDATE -> VK_PREVIOUS_CANDIDATE
    short VK_ALPHANUMERIC -> VK_ALPHANUMERIC
    short VK_KATAKANA -> VK_KATAKANA
    short VK_HIRAGANA -> VK_HIRAGANA
    short VK_FULL_WIDTH -> VK_FULL_WIDTH
    short VK_HALF_WIDTH -> VK_HALF_WIDTH
    short VK_JAPANESE_KATAKANA -> VK_JAPANESE_KATAKANA
    short VK_JAPANESE_HIRAGANA -> VK_JAPANESE_HIRAGANA
    short VK_JAPANESE_ROMAN -> VK_JAPANESE_ROMAN
    short VK_KANA_LOCK -> VK_KANA_LOCK
    short VK_KEYBOARD_INVISIBLE -> VK_KEYBOARD_INVISIBLE
    void <init>(short,java.lang.Object,long,int,short,short,int,char) -> <init>
    com.jogamp.newt.event.KeyEvent create(short,java.lang.Object,long,int,short,short,char) -> create
    char getKeyChar() -> getKeyChar
    short getKeySymbol() -> getKeySymbol
    short getKeyCode() -> getKeyCode
    java.lang.String toString() -> toString
    java.lang.StringBuilder toString(java.lang.StringBuilder) -> toString
    java.lang.String getEventTypeString(short) -> getEventTypeString
    short utf16ToVKey(char) -> utf16ToVKey
    boolean isModifierKey(short) -> isModifierKey
    int getModifierMask(short) -> getModifierMask
    boolean isModifierKey() -> isModifierKey
    boolean isActionKey() -> isActionKey
    boolean isPrintableKey(short,boolean) -> isPrintableKey
    boolean isPrintableKey() -> isPrintableKey
    void <clinit>() -> <clinit>
com.jogamp.newt.event.KeyEvent$1 -> com.jogamp.newt.event.KeyEvent$1:
com.jogamp.newt.event.KeyEvent$NonPrintableRange -> com.jogamp.newt.event.KeyEvent$NonPrintableRange:
    short min -> min
    short max -> max
    boolean inclKeyChar -> inclKeyChar
    void <init>(short,short,boolean) -> <init>
    void <init>(short,short,boolean,com.jogamp.newt.event.KeyEvent$1) -> <init>
com.jogamp.newt.event.KeyListener -> com.jogamp.newt.event.KeyListener:
    void keyPressed(com.jogamp.newt.event.KeyEvent) -> keyPressed
    void keyReleased(com.jogamp.newt.event.KeyEvent) -> keyReleased
com.jogamp.newt.event.MonitorEvent -> com.jogamp.newt.event.MonitorEvent:
    short EVENT_MONITOR_MODE_CHANGE_NOTIFY -> EVENT_MONITOR_MODE_CHANGE_NOTIFY
    short EVENT_MONITOR_MODE_CHANGED -> EVENT_MONITOR_MODE_CHANGED
    com.jogamp.newt.MonitorMode mode -> mode
    void <init>(short,com.jogamp.newt.MonitorDevice,long,com.jogamp.newt.MonitorMode) -> <init>
    com.jogamp.newt.MonitorDevice getMonitor() -> getMonitor
    com.jogamp.newt.MonitorMode getMode() -> getMode
    java.lang.String getEventTypeString(short) -> getEventTypeString
    java.lang.String toString() -> toString
    java.lang.StringBuilder toString(java.lang.StringBuilder) -> toString
com.jogamp.newt.event.MonitorModeListener -> com.jogamp.newt.event.MonitorModeListener:
    void monitorModeChangeNotify(com.jogamp.newt.event.MonitorEvent) -> monitorModeChangeNotify
    void monitorModeChanged(com.jogamp.newt.event.MonitorEvent,boolean) -> monitorModeChanged
com.jogamp.newt.event.MouseEvent -> com.jogamp.newt.event.MouseEvent:
    short BUTTON1 -> BUTTON1
    short BUTTON2 -> BUTTON2
    short BUTTON3 -> BUTTON3
    short BUTTON4 -> BUTTON4
    short BUTTON5 -> BUTTON5
    short BUTTON6 -> BUTTON6
    short BUTTON7 -> BUTTON7
    short BUTTON8 -> BUTTON8
    short BUTTON9 -> BUTTON9
    short BUTTON_COUNT -> BUTTON_COUNT
    com.jogamp.newt.event.MouseEvent$PointerType[] pointerType -> pointerType
    short[] pointerID -> pointerID
    int[] x -> x
    int[] y -> y
    float[] pressure -> pressure
    short clickCount -> clickCount
    short button -> button
    float[] rotationXYZ -> rotationXYZ
    float rotationScale -> rotationScale
    float maxPressure -> maxPressure
    float[] constMousePressure0 -> constMousePressure0
    float[] constMousePressure1 -> constMousePressure1
    com.jogamp.newt.event.MouseEvent$PointerType[] constMousePointerTypes -> constMousePointerTypes
    short EVENT_MOUSE_CLICKED -> EVENT_MOUSE_CLICKED
    short EVENT_MOUSE_ENTERED -> EVENT_MOUSE_ENTERED
    short EVENT_MOUSE_EXITED -> EVENT_MOUSE_EXITED
    short EVENT_MOUSE_PRESSED -> EVENT_MOUSE_PRESSED
    short EVENT_MOUSE_RELEASED -> EVENT_MOUSE_RELEASED
    short EVENT_MOUSE_MOVED -> EVENT_MOUSE_MOVED
    short EVENT_MOUSE_DRAGGED -> EVENT_MOUSE_DRAGGED
    short EVENT_MOUSE_WHEEL_MOVED -> EVENT_MOUSE_WHEEL_MOVED
    float[] getRotationXYZ(float,int) -> getRotationXYZ
    short getClickTimeout() -> getClickTimeout
    void <init>(short,java.lang.Object,long,int,int,int,short,short,float[],float) -> <init>
    void <init>(short,java.lang.Object,long,int,com.jogamp.newt.event.MouseEvent$PointerType[],short[],int[],int[],float[],float,short,short,float[],float) -> <init>
    com.jogamp.newt.event.MouseEvent createVariant(short) -> createVariant
    int getPointerCount() -> getPointerCount
    com.jogamp.newt.event.MouseEvent$PointerType getPointerType(int) -> getPointerType
    com.jogamp.newt.event.MouseEvent$PointerType[] getAllPointerTypes() -> getAllPointerTypes
    short getPointerId(int) -> getPointerId
    int getPointerIdx(short) -> getPointerIdx
    short[] getAllPointerIDs() -> getAllPointerIDs
    short getButton() -> getButton
    short getClickCount() -> getClickCount
    int getX() -> getX
    int getY() -> getY
    int getX(int) -> getX
    int getY(int) -> getY
    int[] getAllX() -> getAllX
    int[] getAllY() -> getAllY
    float getPressure(boolean) -> getPressure
    float getPressure(int,boolean) -> getPressure
    float[] getAllPressures() -> getAllPressures
    float getMaxPressure() -> getMaxPressure
    float[] getRotation() -> getRotation
    float getRotationScale() -> getRotationScale
    java.lang.String toString() -> toString
    java.lang.StringBuilder toString(java.lang.StringBuilder) -> toString
    java.lang.String getEventTypeString(short) -> getEventTypeString
    void <clinit>() -> <clinit>
com.jogamp.newt.event.MouseEvent$PointerClass -> com.jogamp.newt.event.MouseEvent$PointerClass:
    com.jogamp.newt.event.MouseEvent$PointerClass Offscreen -> Offscreen
    com.jogamp.newt.event.MouseEvent$PointerClass Onscreen -> Onscreen
    com.jogamp.newt.event.MouseEvent$PointerClass Undefined -> Undefined
    com.jogamp.newt.event.MouseEvent$PointerClass[] $VALUES -> $VALUES
    com.jogamp.newt.event.MouseEvent$PointerClass[] values() -> values
    com.jogamp.newt.event.MouseEvent$PointerClass valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.jogamp.newt.event.MouseEvent$PointerType -> com.jogamp.newt.event.MouseEvent$PointerType:
    com.jogamp.newt.event.MouseEvent$PointerType Mouse -> Mouse
    com.jogamp.newt.event.MouseEvent$PointerType TouchPad -> TouchPad
    com.jogamp.newt.event.MouseEvent$PointerType TouchScreen -> TouchScreen
    com.jogamp.newt.event.MouseEvent$PointerType Pen -> Pen
    com.jogamp.newt.event.MouseEvent$PointerType Undefined -> Undefined
    com.jogamp.newt.event.MouseEvent$PointerClass pc -> pc
    com.jogamp.newt.event.MouseEvent$PointerType[] $VALUES -> $VALUES
    com.jogamp.newt.event.MouseEvent$PointerType[] values() -> values
    com.jogamp.newt.event.MouseEvent$PointerType valueOf(java.lang.String) -> valueOf
    com.jogamp.newt.event.MouseEvent$PointerClass getPointerClass() -> getPointerClass
    com.jogamp.newt.event.MouseEvent$PointerType valueOf(int) -> valueOf
    com.jogamp.newt.event.MouseEvent$PointerType[] valuesOf(int[]) -> valuesOf
    void <init>(java.lang.String,int,com.jogamp.newt.event.MouseEvent$PointerClass) -> <init>
    void <clinit>() -> <clinit>
com.jogamp.newt.event.MouseListener -> com.jogamp.newt.event.MouseListener:
    void mouseClicked(com.jogamp.newt.event.MouseEvent) -> mouseClicked
    void mouseEntered(com.jogamp.newt.event.MouseEvent) -> mouseEntered
    void mouseExited(com.jogamp.newt.event.MouseEvent) -> mouseExited
    void mousePressed(com.jogamp.newt.event.MouseEvent) -> mousePressed
    void mouseReleased(com.jogamp.newt.event.MouseEvent) -> mouseReleased
    void mouseMoved(com.jogamp.newt.event.MouseEvent) -> mouseMoved
    void mouseDragged(com.jogamp.newt.event.MouseEvent) -> mouseDragged
    void mouseWheelMoved(com.jogamp.newt.event.MouseEvent) -> mouseWheelMoved
com.jogamp.newt.event.NEWTEvent -> com.jogamp.newt.event.NEWTEvent:
    java.lang.Object consumedTag -> consumedTag
    short eventType -> eventType
    long when -> when
    java.lang.Object attachment -> attachment
    boolean DEBUG -> DEBUG
    void <init>(short,java.lang.Object,long) -> <init>
    short getEventType() -> getEventType
    long getWhen() -> getWhen
    void setAttachment(java.lang.Object) -> setAttachment
    java.lang.Object getAttachment() -> getAttachment
    boolean isConsumed() -> isConsumed
    void setConsumed(boolean) -> setConsumed
    java.lang.String toString() -> toString
    java.lang.StringBuilder toString(java.lang.StringBuilder) -> toString
    java.lang.String toHexString(short) -> toHexString
    void <clinit>() -> <clinit>
com.jogamp.newt.event.NEWTEventConsumer -> com.jogamp.newt.event.NEWTEventConsumer:
    boolean consumeEvent(com.jogamp.newt.event.NEWTEvent) -> consumeEvent
com.jogamp.newt.event.NEWTEventListener -> com.jogamp.newt.event.NEWTEventListener:
com.jogamp.newt.event.OutputEvent -> com.jogamp.newt.event.OutputEvent:
    void <init>(short,java.lang.Object,long) -> <init>
com.jogamp.newt.event.WindowAdapter -> com.jogamp.newt.event.WindowAdapter:
    void <init>() -> <init>
    void windowResized(com.jogamp.newt.event.WindowEvent) -> windowResized
    void windowMoved(com.jogamp.newt.event.WindowEvent) -> windowMoved
    void windowDestroyNotify(com.jogamp.newt.event.WindowEvent) -> windowDestroyNotify
    void windowDestroyed(com.jogamp.newt.event.WindowEvent) -> windowDestroyed
    void windowGainedFocus(com.jogamp.newt.event.WindowEvent) -> windowGainedFocus
    void windowLostFocus(com.jogamp.newt.event.WindowEvent) -> windowLostFocus
    void windowRepaint(com.jogamp.newt.event.WindowUpdateEvent) -> windowRepaint
com.jogamp.newt.event.WindowEvent -> com.jogamp.newt.event.WindowEvent:
    short EVENT_WINDOW_RESIZED -> EVENT_WINDOW_RESIZED
    short EVENT_WINDOW_MOVED -> EVENT_WINDOW_MOVED
    short EVENT_WINDOW_DESTROY_NOTIFY -> EVENT_WINDOW_DESTROY_NOTIFY
    short EVENT_WINDOW_GAINED_FOCUS -> EVENT_WINDOW_GAINED_FOCUS
    short EVENT_WINDOW_LOST_FOCUS -> EVENT_WINDOW_LOST_FOCUS
    short EVENT_WINDOW_REPAINT -> EVENT_WINDOW_REPAINT
    short EVENT_WINDOW_DESTROYED -> EVENT_WINDOW_DESTROYED
    void <init>(short,java.lang.Object,long) -> <init>
    java.lang.String getEventTypeString(short) -> getEventTypeString
    java.lang.String toString() -> toString
    java.lang.StringBuilder toString(java.lang.StringBuilder) -> toString
com.jogamp.newt.event.WindowListener -> com.jogamp.newt.event.WindowListener:
    void windowResized(com.jogamp.newt.event.WindowEvent) -> windowResized
    void windowMoved(com.jogamp.newt.event.WindowEvent) -> windowMoved
    void windowDestroyNotify(com.jogamp.newt.event.WindowEvent) -> windowDestroyNotify
    void windowDestroyed(com.jogamp.newt.event.WindowEvent) -> windowDestroyed
    void windowGainedFocus(com.jogamp.newt.event.WindowEvent) -> windowGainedFocus
    void windowLostFocus(com.jogamp.newt.event.WindowEvent) -> windowLostFocus
    void windowRepaint(com.jogamp.newt.event.WindowUpdateEvent) -> windowRepaint
com.jogamp.newt.event.WindowUpdateEvent -> com.jogamp.newt.event.WindowUpdateEvent:
    javax.media.nativewindow.util.Rectangle bounds -> bounds
    void <init>(short,java.lang.Object,long,javax.media.nativewindow.util.Rectangle) -> <init>
    javax.media.nativewindow.util.Rectangle getBounds() -> getBounds
    java.lang.String toString() -> toString
    java.lang.StringBuilder toString(java.lang.StringBuilder) -> toString
com.jogamp.newt.event.awt.AWTAdapter -> com.jogamp.newt.event.awt.AWTAdapter:
    boolean DEBUG_IMPLEMENTATION -> DEBUG_IMPLEMENTATION
    com.jogamp.newt.event.NEWTEventListener newtListener -> newtListener
    com.jogamp.newt.Window newtWindow -> newtWindow
    javax.media.nativewindow.NativeSurfaceHolder nsHolder -> nsHolder
    boolean consumeAWTEvent -> consumeAWTEvent
    boolean isSetup -> isSetup
    void <init>(com.jogamp.newt.event.NEWTEventListener,javax.media.nativewindow.NativeSurfaceHolder) -> <init>
    void <init>(com.jogamp.newt.event.NEWTEventListener,com.jogamp.newt.Window) -> <init>
    void <init>(com.jogamp.newt.Window) -> <init>
    void <init>() -> <init>
    com.jogamp.newt.event.awt.AWTAdapter setDownstream(com.jogamp.newt.Window) -> setDownstream
    com.jogamp.newt.event.awt.AWTAdapter clear() -> clear
    void setConsumeAWTEvent(boolean) -> setConsumeAWTEvent
    javax.media.nativewindow.NativeSurfaceHolder getNativeSurfaceHolder() -> getNativeSurfaceHolder
    com.jogamp.newt.Window getNewtWindow() -> getNewtWindow
    com.jogamp.newt.event.NEWTEventListener getNewtEventListener() -> getNewtEventListener
    com.jogamp.newt.event.awt.AWTAdapter addTo(java.awt.Component) -> addTo
    com.jogamp.newt.event.awt.AWTAdapter removeFrom(java.awt.Component) -> removeFrom
    com.jogamp.newt.event.awt.AWTAdapter$EventProcRes processEvent(boolean,com.jogamp.newt.event.NEWTEvent) -> processEvent
    void <clinit>() -> <clinit>
com.jogamp.newt.event.awt.AWTAdapter$EventProcRes -> com.jogamp.newt.event.awt.AWTAdapter$EventProcRes:
    com.jogamp.newt.event.awt.AWTAdapter$EventProcRes DISPATCH -> DISPATCH
    com.jogamp.newt.event.awt.AWTAdapter$EventProcRes ENQUEUED -> ENQUEUED
    com.jogamp.newt.event.awt.AWTAdapter$EventProcRes NOP -> NOP
    com.jogamp.newt.event.awt.AWTAdapter$EventProcRes[] $VALUES -> $VALUES
    com.jogamp.newt.event.awt.AWTAdapter$EventProcRes[] values() -> values
    com.jogamp.newt.event.awt.AWTAdapter$EventProcRes valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.jogamp.newt.event.awt.AWTKeyAdapter -> com.jogamp.newt.event.awt.AWTKeyAdapter:
    void <init>(com.jogamp.newt.event.KeyListener,javax.media.nativewindow.NativeSurfaceHolder) -> <init>
    void <init>(com.jogamp.newt.event.KeyListener,com.jogamp.newt.Window) -> <init>
    void <init>(com.jogamp.newt.Window) -> <init>
    void <init>() -> <init>
    com.jogamp.newt.event.awt.AWTAdapter addTo(java.awt.Component) -> addTo
    com.jogamp.newt.event.awt.AWTAdapter removeFrom(java.awt.Component) -> removeFrom
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
com.jogamp.newt.event.awt.AWTMouseAdapter -> com.jogamp.newt.event.awt.AWTMouseAdapter:
    void <init>(com.jogamp.newt.event.MouseListener,javax.media.nativewindow.NativeSurfaceHolder) -> <init>
    void <init>(com.jogamp.newt.event.MouseListener,com.jogamp.newt.Window) -> <init>
    void <init>(com.jogamp.newt.Window) -> <init>
    void <init>() -> <init>
    com.jogamp.newt.event.awt.AWTAdapter addTo(java.awt.Component) -> addTo
    com.jogamp.newt.event.awt.AWTAdapter removeFrom(java.awt.Component) -> removeFrom
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
    void mouseWheelMoved(java.awt.event.MouseWheelEvent) -> mouseWheelMoved
com.jogamp.newt.event.awt.AWTWindowAdapter -> com.jogamp.newt.event.awt.AWTWindowAdapter:
    com.jogamp.newt.event.awt.AWTWindowAdapter$WindowClosingListener windowClosingListener -> windowClosingListener
    void <init>(com.jogamp.newt.event.WindowListener,javax.media.nativewindow.NativeSurfaceHolder) -> <init>
    void <init>(com.jogamp.newt.event.WindowListener,com.jogamp.newt.Window) -> <init>
    void <init>(com.jogamp.newt.Window) -> <init>
    void <init>() -> <init>
    com.jogamp.newt.event.awt.AWTAdapter addTo(java.awt.Component) -> addTo
    com.jogamp.newt.event.awt.AWTAdapter removeWindowClosingFrom(java.awt.Component) -> removeWindowClosingFrom
    com.jogamp.newt.event.awt.AWTAdapter removeFrom(java.awt.Component) -> removeFrom
    java.awt.Window getWindow(java.awt.Component) -> getWindow
    void focusGained(java.awt.event.FocusEvent) -> focusGained
    void focusLost(java.awt.event.FocusEvent) -> focusLost
    void componentResized(java.awt.event.ComponentEvent) -> componentResized
    void componentMoved(java.awt.event.ComponentEvent) -> componentMoved
    void componentShown(java.awt.event.ComponentEvent) -> componentShown
    void componentHidden(java.awt.event.ComponentEvent) -> componentHidden
    void windowActivated(java.awt.event.WindowEvent) -> windowActivated
    void windowClosed(java.awt.event.WindowEvent) -> windowClosed
    void windowClosing(java.awt.event.WindowEvent) -> windowClosing
    void windowDeactivated(java.awt.event.WindowEvent) -> windowDeactivated
    void windowDeiconified(java.awt.event.WindowEvent) -> windowDeiconified
    void windowIconified(java.awt.event.WindowEvent) -> windowIconified
    void windowOpened(java.awt.event.WindowEvent) -> windowOpened
com.jogamp.newt.event.awt.AWTWindowAdapter$WindowClosingListener -> com.jogamp.newt.event.awt.AWTWindowAdapter$WindowClosingListener:
    com.jogamp.newt.event.awt.AWTWindowAdapter this$0 -> this$0
    void <init>(com.jogamp.newt.event.awt.AWTWindowAdapter) -> <init>
    void windowClosing(java.awt.event.WindowEvent) -> windowClosing
    void windowClosed(java.awt.event.WindowEvent) -> windowClosed
    void windowActivated(java.awt.event.WindowEvent) -> windowActivated
    void windowDeactivated(java.awt.event.WindowEvent) -> windowDeactivated
    void windowDeiconified(java.awt.event.WindowEvent) -> windowDeiconified
    void windowIconified(java.awt.event.WindowEvent) -> windowIconified
    void windowOpened(java.awt.event.WindowEvent) -> windowOpened
com.jogamp.newt.opengl.GLWindow -> com.jogamp.newt.opengl.GLWindow:
    jogamp.newt.WindowImpl window -> window
    javax.media.opengl.GLDrawableFactory factory -> factory
    void <init>(com.jogamp.newt.Window) -> <init>
    java.lang.Object getUpstreamWidget() -> getUpstreamWidget
    com.jogamp.common.util.locks.RecursiveLock getUpstreamLock() -> getUpstreamLock
    com.jogamp.newt.opengl.GLWindow create(javax.media.opengl.GLCapabilitiesImmutable) -> create
    com.jogamp.newt.opengl.GLWindow create(com.jogamp.newt.Screen,javax.media.opengl.GLCapabilitiesImmutable) -> create
    com.jogamp.newt.opengl.GLWindow create(com.jogamp.newt.Window) -> create
    com.jogamp.newt.opengl.GLWindow create(javax.media.nativewindow.NativeWindow,javax.media.opengl.GLCapabilitiesImmutable) -> create
    javax.media.nativewindow.WindowClosingProtocol$WindowClosingMode getDefaultCloseOperation() -> getDefaultCloseOperation
    javax.media.nativewindow.WindowClosingProtocol$WindowClosingMode setDefaultCloseOperation(javax.media.nativewindow.WindowClosingProtocol$WindowClosingMode) -> setDefaultCloseOperation
    javax.media.nativewindow.CapabilitiesChooser setCapabilitiesChooser(javax.media.nativewindow.CapabilitiesChooser) -> setCapabilitiesChooser
    javax.media.nativewindow.CapabilitiesImmutable getChosenCapabilities() -> getChosenCapabilities
    javax.media.nativewindow.CapabilitiesImmutable getRequestedCapabilities() -> getRequestedCapabilities
    com.jogamp.newt.Window getDelegatedWindow() -> getDelegatedWindow
    javax.media.nativewindow.NativeWindow getParent() -> getParent
    com.jogamp.newt.Screen getScreen() -> getScreen
    com.jogamp.newt.MonitorDevice getMainMonitor() -> getMainMonitor
    void setTitle(java.lang.String) -> setTitle
    java.lang.String getTitle() -> getTitle
    boolean isPointerVisible() -> isPointerVisible
    void setPointerVisible(boolean) -> setPointerVisible
    com.jogamp.newt.Display$PointerIcon getPointerIcon() -> getPointerIcon
    void setPointerIcon(com.jogamp.newt.Display$PointerIcon) -> setPointerIcon
    boolean isPointerConfined() -> isPointerConfined
    void confinePointer(boolean) -> confinePointer
    void setUndecorated(boolean) -> setUndecorated
    void warpPointer(int,int) -> warpPointer
    boolean isUndecorated() -> isUndecorated
    void setAlwaysOnTop(boolean) -> setAlwaysOnTop
    boolean isAlwaysOnTop() -> isAlwaysOnTop
    void setFocusAction(com.jogamp.newt.Window$FocusRunnable) -> setFocusAction
    void setKeyboardFocusHandler(com.jogamp.newt.event.KeyListener) -> setKeyboardFocusHandler
    void requestFocus() -> requestFocus
    void requestFocus(boolean) -> requestFocus
    boolean hasFocus() -> hasFocus
    javax.media.nativewindow.util.InsetsImmutable getInsets() -> getInsets
    int getX() -> getX
    int getY() -> getY
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    javax.media.nativewindow.util.Rectangle getBounds() -> getBounds
    int getSurfaceWidth() -> getSurfaceWidth
    int getSurfaceHeight() -> getSurfaceHeight
    int[] convertToWindowUnits(int[]) -> convertToWindowUnits
    int[] convertToPixelUnits(int[]) -> convertToPixelUnits
    void setSurfaceScale(int[]) -> setSurfaceScale
    int[] getRequestedSurfaceScale(int[]) -> getRequestedSurfaceScale
    int[] getCurrentSurfaceScale(int[]) -> getCurrentSurfaceScale
    int[] getNativeSurfaceScale(int[]) -> getNativeSurfaceScale
    float[] getPixelsPerMM(float[]) -> getPixelsPerMM
    void setPosition(int,int) -> setPosition
    void setTopLevelPosition(int,int) -> setTopLevelPosition
    boolean setFullscreen(boolean) -> setFullscreen
    boolean setFullscreen(java.util.List) -> setFullscreen
    boolean isFullscreen() -> isFullscreen
    boolean isVisible() -> isVisible
    java.lang.String toString() -> toString
    com.jogamp.newt.Window$ReparentOperation reparentWindow(javax.media.nativewindow.NativeWindow,int,int,int) -> reparentWindow
    boolean removeChild(javax.media.nativewindow.NativeWindow) -> removeChild
    boolean addChild(javax.media.nativewindow.NativeWindow) -> addChild
    void destroy() -> destroy
    void setWindowDestroyNotifyAction(java.lang.Runnable) -> setWindowDestroyNotifyAction
    void setVisible(boolean) -> setVisible
    void setVisible(boolean,boolean) -> setVisible
    void setSize(int,int) -> setSize
    void setSurfaceSize(int,int) -> setSurfaceSize
    void setTopLevelSize(int,int) -> setTopLevelSize
    boolean isNativeValid() -> isNativeValid
    javax.media.nativewindow.util.Point getLocationOnScreen(javax.media.nativewindow.util.Point) -> getLocationOnScreen
    void display() -> display
    boolean isGLStatePreservationSupported() -> isGLStatePreservationSupported
    javax.media.opengl.GLDrawableFactory getFactory() -> getFactory
    void swapBuffers() -> swapBuffers
    boolean consumeEvent(com.jogamp.newt.event.NEWTEvent) -> consumeEvent
    void windowRepaint(int,int,int,int) -> windowRepaint
    void enqueueEvent(boolean,com.jogamp.newt.event.NEWTEvent) -> enqueueEvent
    void runOnEDTIfAvail(boolean,java.lang.Runnable) -> runOnEDTIfAvail
    void sendWindowEvent(int) -> sendWindowEvent
    com.jogamp.newt.event.WindowListener getWindowListener(int) -> getWindowListener
    com.jogamp.newt.event.WindowListener[] getWindowListeners() -> getWindowListeners
    void removeWindowListener(com.jogamp.newt.event.WindowListener) -> removeWindowListener
    void addWindowListener(com.jogamp.newt.event.WindowListener) -> addWindowListener
    void addWindowListener(int,com.jogamp.newt.event.WindowListener) -> addWindowListener
    void setKeyboardVisible(boolean) -> setKeyboardVisible
    boolean isKeyboardVisible() -> isKeyboardVisible
    void addKeyListener(com.jogamp.newt.event.KeyListener) -> addKeyListener
    void addKeyListener(int,com.jogamp.newt.event.KeyListener) -> addKeyListener
    void removeKeyListener(com.jogamp.newt.event.KeyListener) -> removeKeyListener
    com.jogamp.newt.event.KeyListener getKeyListener(int) -> getKeyListener
    com.jogamp.newt.event.KeyListener[] getKeyListeners() -> getKeyListeners
    void addMouseListener(com.jogamp.newt.event.MouseListener) -> addMouseListener
    void addMouseListener(int,com.jogamp.newt.event.MouseListener) -> addMouseListener
    void removeMouseListener(com.jogamp.newt.event.MouseListener) -> removeMouseListener
    com.jogamp.newt.event.MouseListener getMouseListener(int) -> getMouseListener
    com.jogamp.newt.event.MouseListener[] getMouseListeners() -> getMouseListeners
    void setDefaultGesturesEnabled(boolean) -> setDefaultGesturesEnabled
    boolean areDefaultGesturesEnabled() -> areDefaultGesturesEnabled
    void addGestureHandler(com.jogamp.newt.event.GestureHandler) -> addGestureHandler
    void addGestureHandler(int,com.jogamp.newt.event.GestureHandler) -> addGestureHandler
    void removeGestureHandler(com.jogamp.newt.event.GestureHandler) -> removeGestureHandler
    void addGestureListener(com.jogamp.newt.event.GestureHandler$GestureListener) -> addGestureListener
    void addGestureListener(int,com.jogamp.newt.event.GestureHandler$GestureListener) -> addGestureListener
    void removeGestureListener(com.jogamp.newt.event.GestureHandler$GestureListener) -> removeGestureListener
    int lockSurface() -> lockSurface
    void unlockSurface() -> unlockSurface
    boolean isSurfaceLockedByOtherThread() -> isSurfaceLockedByOtherThread
    java.lang.Thread getSurfaceLockOwner() -> getSurfaceLockOwner
    boolean surfaceSwap() -> surfaceSwap
    void removeSurfaceUpdatedListener(javax.media.nativewindow.SurfaceUpdatedListener) -> removeSurfaceUpdatedListener
    void addSurfaceUpdatedListener(javax.media.nativewindow.SurfaceUpdatedListener) -> addSurfaceUpdatedListener
    void addSurfaceUpdatedListener(int,javax.media.nativewindow.SurfaceUpdatedListener) -> addSurfaceUpdatedListener
    void surfaceUpdated(java.lang.Object,javax.media.nativewindow.NativeSurface,long) -> surfaceUpdated
    long getWindowHandle() -> getWindowHandle
    long getSurfaceHandle() -> getSurfaceHandle
    javax.media.nativewindow.AbstractGraphicsConfiguration getGraphicsConfiguration() -> getGraphicsConfiguration
    long getDisplayHandle() -> getDisplayHandle
    int getScreenIndex() -> getScreenIndex
    void main(java.lang.String[]) -> main
    void access$000(com.jogamp.newt.opengl.GLWindow) -> access$000
    void access$100(com.jogamp.newt.opengl.GLWindow) -> access$100
    void access$200(com.jogamp.newt.opengl.GLWindow,int,int) -> access$200
    void access$300(com.jogamp.newt.opengl.GLWindow) -> access$300
    jogamp.opengl.GLDrawableImpl access$400(com.jogamp.newt.opengl.GLWindow) -> access$400
    jogamp.newt.WindowImpl access$500(com.jogamp.newt.opengl.GLWindow) -> access$500
    jogamp.opengl.GLContextImpl access$600(com.jogamp.newt.opengl.GLWindow) -> access$600
    jogamp.opengl.GLDrawableHelper access$700(com.jogamp.newt.opengl.GLWindow) -> access$700
    javax.media.opengl.GLDrawableFactory access$800(com.jogamp.newt.opengl.GLWindow) -> access$800
    javax.media.opengl.GLDrawableFactory access$802(com.jogamp.newt.opengl.GLWindow,javax.media.opengl.GLDrawableFactory) -> access$802
    jogamp.opengl.GLDrawableImpl access$902(com.jogamp.newt.opengl.GLWindow,jogamp.opengl.GLDrawableImpl) -> access$902
    jogamp.opengl.GLDrawableImpl access$1000(com.jogamp.newt.opengl.GLWindow) -> access$1000
    boolean access$1100(com.jogamp.newt.opengl.GLWindow) -> access$1100
    jogamp.opengl.GLContextImpl access$1202(com.jogamp.newt.opengl.GLWindow,jogamp.opengl.GLContextImpl) -> access$1202
    jogamp.opengl.GLDrawableImpl access$1300(com.jogamp.newt.opengl.GLWindow) -> access$1300
    int access$1400(com.jogamp.newt.opengl.GLWindow) -> access$1400
    jogamp.opengl.GLContextImpl access$1500(com.jogamp.newt.opengl.GLWindow) -> access$1500
com.jogamp.newt.opengl.GLWindow$1 -> com.jogamp.newt.opengl.GLWindow$1:
    com.jogamp.newt.opengl.GLWindow this$0 -> this$0
    void <init>(com.jogamp.newt.opengl.GLWindow) -> <init>
    void run() -> run
com.jogamp.newt.opengl.GLWindow$2 -> com.jogamp.newt.opengl.GLWindow$2:
    com.jogamp.newt.opengl.GLWindow this$0 -> this$0
    void <init>(com.jogamp.newt.opengl.GLWindow) -> <init>
    void windowRepaint(com.jogamp.newt.event.WindowUpdateEvent) -> windowRepaint
    void windowResized(com.jogamp.newt.event.WindowEvent) -> windowResized
com.jogamp.newt.opengl.GLWindow$3 -> com.jogamp.newt.opengl.GLWindow$3:
    void <init>() -> <init>
    void init(javax.media.opengl.GLAutoDrawable) -> init
    void reshape(javax.media.opengl.GLAutoDrawable,int,int,int,int) -> reshape
    void display(javax.media.opengl.GLAutoDrawable) -> display
    void dispose(javax.media.opengl.GLAutoDrawable) -> dispose
com.jogamp.newt.opengl.GLWindow$GLLifecycleHook -> com.jogamp.newt.opengl.GLWindow$GLLifecycleHook:
    javax.media.opengl.GLAnimatorControl savedAnimator -> savedAnimator
    com.jogamp.newt.opengl.GLWindow this$0 -> this$0
    void <init>(com.jogamp.newt.opengl.GLWindow) -> <init>
    void preserveGLStateAtDestroy(boolean) -> preserveGLStateAtDestroy
    void destroyActionPreLock() -> destroyActionPreLock
    void destroyActionInLock() -> destroyActionInLock
    void resetCounter() -> resetCounter
    void setVisibleActionPost(boolean,boolean) -> setVisibleActionPost
    boolean pauseRenderingAction() -> pauseRenderingAction
    void resumeRenderingAction() -> resumeRenderingAction
    void shutdownRenderingAction() -> shutdownRenderingAction
com.jogamp.newt.opengl.GLWindow$GLLifecycleHook$1 -> com.jogamp.newt.opengl.GLWindow$GLLifecycleHook$1:
    javax.media.opengl.GLAnimatorControl val$anim -> val$anim
    java.lang.Thread val$animThread -> val$animThread
    com.jogamp.newt.opengl.GLWindow$GLLifecycleHook this$1 -> this$1
    void <init>(com.jogamp.newt.opengl.GLWindow$GLLifecycleHook,javax.media.opengl.GLAnimatorControl,java.lang.Thread) -> <init>
    java.lang.Object run() -> run
com.jogamp.newt.swt.NewtCanvasSWT -> com.jogamp.newt.swt.NewtCanvasSWT:
    boolean DEBUG -> DEBUG
    javax.media.nativewindow.AbstractGraphicsScreen screen -> screen
    javax.media.nativewindow.WindowClosingProtocol$WindowClosingMode newtChildCloseOp -> newtChildCloseOp
    org.eclipse.swt.graphics.Rectangle clientArea -> clientArea
    com.jogamp.newt.swt.NewtCanvasSWT$SWTNativeWindow nativeWindow -> nativeWindow
    com.jogamp.newt.Window newtChild -> newtChild
    boolean newtChildReady -> newtChildReady
    boolean postSetSize -> postSetSize
    boolean postSetPos -> postSetPos
    com.jogamp.newt.swt.NewtCanvasSWT create(org.eclipse.swt.widgets.Composite,int,com.jogamp.newt.Window) -> create
    void <init>(org.eclipse.swt.widgets.Composite,int,com.jogamp.newt.Window) -> <init>
    void setBounds(int,int,int,int) -> setBounds
    boolean validateNative() -> validateNative
    void updateSizeCheck() -> updateSizeCheck
    void updatePosSizeCheck() -> updatePosSizeCheck
    void updatePosSizeCheck(int,int,int,int,boolean) -> updatePosSizeCheck
    void update() -> update
    void dispose() -> dispose
    javax.media.nativewindow.util.Point getParentLocationOnScreen() -> getParentLocationOnScreen
    javax.media.nativewindow.NativeWindow getNativeWindow() -> getNativeWindow
    javax.media.nativewindow.WindowClosingProtocol$WindowClosingMode getDefaultCloseOperation() -> getDefaultCloseOperation
    javax.media.nativewindow.WindowClosingProtocol$WindowClosingMode setDefaultCloseOperation(javax.media.nativewindow.WindowClosingProtocol$WindowClosingMode) -> setDefaultCloseOperation
    boolean isParent() -> isParent
    boolean isFullscreen() -> isFullscreen
    com.jogamp.newt.Window setNEWTChild(com.jogamp.newt.Window) -> setNEWTChild
    com.jogamp.newt.Window getNEWTChild() -> getNEWTChild
    boolean setParent(org.eclipse.swt.widgets.Composite) -> setParent
    void configureNewtChild(boolean) -> configureNewtChild
    void reparentWindow(boolean) -> reparentWindow
    void requestFocusNEWTChild() -> requestFocusNEWTChild
    boolean forceFocus() -> forceFocus
    java.lang.String newtWinHandleToHexString(com.jogamp.newt.Window) -> newtWinHandleToHexString
    java.lang.String toHexString(long) -> toHexString
    boolean access$000() -> access$000
    com.jogamp.newt.swt.NewtCanvasSWT$SWTNativeWindow access$100(com.jogamp.newt.swt.NewtCanvasSWT) -> access$100
    boolean access$200(com.jogamp.newt.swt.NewtCanvasSWT) -> access$200
    boolean access$300(com.jogamp.newt.swt.NewtCanvasSWT) -> access$300
    org.eclipse.swt.graphics.Rectangle access$400(com.jogamp.newt.swt.NewtCanvasSWT) -> access$400
    com.jogamp.newt.Window access$500(com.jogamp.newt.swt.NewtCanvasSWT) -> access$500
    boolean access$302(com.jogamp.newt.swt.NewtCanvasSWT,boolean) -> access$302
    boolean access$600(com.jogamp.newt.swt.NewtCanvasSWT) -> access$600
    boolean access$602(com.jogamp.newt.swt.NewtCanvasSWT,boolean) -> access$602
    boolean access$701(com.jogamp.newt.swt.NewtCanvasSWT) -> access$701
    javax.media.nativewindow.util.Point access$800(com.jogamp.newt.swt.NewtCanvasSWT) -> access$800
    void <clinit>() -> <clinit>
com.jogamp.newt.swt.NewtCanvasSWT$1 -> com.jogamp.newt.swt.NewtCanvasSWT$1:
    com.jogamp.newt.swt.NewtCanvasSWT[] val$res -> val$res
    org.eclipse.swt.widgets.Composite val$parent -> val$parent
    int val$style -> val$style
    com.jogamp.newt.Window val$child -> val$child
    void <init>(com.jogamp.newt.swt.NewtCanvasSWT[],org.eclipse.swt.widgets.Composite,int,com.jogamp.newt.Window) -> <init>
    void run() -> run
com.jogamp.newt.swt.NewtCanvasSWT$2 -> com.jogamp.newt.swt.NewtCanvasSWT$2:
    com.jogamp.newt.swt.NewtCanvasSWT this$0 -> this$0
    void <init>(com.jogamp.newt.swt.NewtCanvasSWT) -> <init>
    void handleEvent(org.eclipse.swt.widgets.Event) -> handleEvent
com.jogamp.newt.swt.NewtCanvasSWT$3 -> com.jogamp.newt.swt.NewtCanvasSWT$3:
    org.eclipse.swt.graphics.Point[] val$parentLoc -> val$parentLoc
    com.jogamp.newt.swt.NewtCanvasSWT this$0 -> this$0
    void <init>(com.jogamp.newt.swt.NewtCanvasSWT,org.eclipse.swt.graphics.Point[]) -> <init>
    void run() -> run
com.jogamp.newt.swt.NewtCanvasSWT$SWTNativeWindow -> com.jogamp.newt.swt.NewtCanvasSWT$SWTNativeWindow:
    javax.media.nativewindow.AbstractGraphicsConfiguration config -> config
    long nativeWindowHandle -> nativeWindowHandle
    javax.media.nativewindow.util.InsetsImmutable insets -> insets
    com.jogamp.newt.swt.NewtCanvasSWT this$0 -> this$0
    void <init>(com.jogamp.newt.swt.NewtCanvasSWT,javax.media.nativewindow.AbstractGraphicsConfiguration,long) -> <init>
    int lockSurface() -> lockSurface
    void unlockSurface() -> unlockSurface
    boolean isSurfaceLockedByOtherThread() -> isSurfaceLockedByOtherThread
    java.lang.Thread getSurfaceLockOwner() -> getSurfaceLockOwner
    boolean surfaceSwap() -> surfaceSwap
    void addSurfaceUpdatedListener(javax.media.nativewindow.SurfaceUpdatedListener) -> addSurfaceUpdatedListener
    void addSurfaceUpdatedListener(int,javax.media.nativewindow.SurfaceUpdatedListener) -> addSurfaceUpdatedListener
    void removeSurfaceUpdatedListener(javax.media.nativewindow.SurfaceUpdatedListener) -> removeSurfaceUpdatedListener
    long getSurfaceHandle() -> getSurfaceHandle
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int[] convertToWindowUnits(int[]) -> convertToWindowUnits
    int[] convertToPixelUnits(int[]) -> convertToPixelUnits
    int getSurfaceWidth() -> getSurfaceWidth
    int getSurfaceHeight() -> getSurfaceHeight
    javax.media.nativewindow.NativeSurface getNativeSurface() -> getNativeSurface
    javax.media.nativewindow.AbstractGraphicsConfiguration getGraphicsConfiguration() -> getGraphicsConfiguration
    long getDisplayHandle() -> getDisplayHandle
    int getScreenIndex() -> getScreenIndex
    void surfaceUpdated(java.lang.Object,javax.media.nativewindow.NativeSurface,long) -> surfaceUpdated
    void destroy() -> destroy
    javax.media.nativewindow.NativeWindow getParent() -> getParent
    long getWindowHandle() -> getWindowHandle
    javax.media.nativewindow.util.InsetsImmutable getInsets() -> getInsets
    int getX() -> getX
    int getY() -> getY
    javax.media.nativewindow.util.Point getLocationOnScreen(javax.media.nativewindow.util.Point) -> getLocationOnScreen
    boolean hasFocus() -> hasFocus
com.jogamp.newt.util.EDTUtil -> com.jogamp.newt.util.EDTUtil:
    long defaultEDTPollPeriod -> defaultEDTPollPeriod
    long getPollPeriod() -> getPollPeriod
    void setPollPeriod(long) -> setPollPeriod
    void start() -> start
    boolean isCurrentThreadEDT() -> isCurrentThreadEDT
    boolean isCurrentThreadNEDT() -> isCurrentThreadNEDT
    boolean isCurrentThreadEDTorNEDT() -> isCurrentThreadEDTorNEDT
    boolean isRunning() -> isRunning
    boolean invokeStop(boolean,java.lang.Runnable) -> invokeStop
    boolean invoke(boolean,java.lang.Runnable) -> invoke
    boolean waitUntilIdle() -> waitUntilIdle
    boolean waitUntilStopped() -> waitUntilStopped
com.jogamp.newt.util.MonitorModeUtil -> com.jogamp.newt.util.MonitorModeUtil:
    void <init>() -> <init>
    int getIndex(java.util.List,com.jogamp.newt.MonitorMode) -> getIndex
    int getIndexByHashCode(java.util.List,com.jogamp.newt.MonitorMode) -> getIndexByHashCode
    com.jogamp.newt.MonitorMode getByNativeSizeRateIdAndRotation(java.util.List,com.jogamp.newt.MonitorMode$SizeAndRRate,int,int) -> getByNativeSizeRateIdAndRotation
    void sort(java.util.List,boolean) -> sort
    java.util.List filterBySurfaceSize(java.util.List,javax.media.nativewindow.util.SurfaceSize) -> filterBySurfaceSize
    java.util.List filterByRotation(java.util.List,int) -> filterByRotation
    java.util.List filterByBpp(java.util.List,int) -> filterByBpp
    java.util.List filterByFlags(java.util.List,int) -> filterByFlags
    java.util.List filterByResolution(java.util.List,javax.media.nativewindow.util.DimensionImmutable) -> filterByResolution
    java.util.List filterByRate(java.util.List,float) -> filterByRate
    java.util.List getHighestAvailableBpp(java.util.List) -> getHighestAvailableBpp
    java.util.List getHighestAvailableRate(java.util.List) -> getHighestAvailableRate
com.jogamp.opengl.FBObject -> com.jogamp.opengl.FBObject:
    boolean DEBUG -> DEBUG
    int USER_MAX_TEXTURE_SIZE -> USER_MAX_TEXTURE_SIZE
    boolean FBOResizeQuirk -> FBOResizeQuirk
    boolean initialized -> initialized
    boolean fullFBOSupport -> fullFBOSupport
    boolean rgba8Avail -> rgba8Avail
    boolean depth24Avail -> depth24Avail
    boolean depth32Avail -> depth32Avail
    boolean stencil01Avail -> stencil01Avail
    boolean stencil04Avail -> stencil04Avail
    boolean stencil08Avail -> stencil08Avail
    boolean stencil16Avail -> stencil16Avail
    boolean packedDepthStencilAvail -> packedDepthStencilAvail
    int maxColorAttachments -> maxColorAttachments
    int maxSamples -> maxSamples
    int maxTextureSize -> maxTextureSize
    int maxRenderbufferSize -> maxRenderbufferSize
    int width -> width
    int height -> height
    int samples -> samples
    int vStatus -> vStatus
    boolean ignoreStatus -> ignoreStatus
    int fbName -> fbName
    boolean bound -> bound
    int colorbufferCount -> colorbufferCount
    int textureAttachmentCount -> textureAttachmentCount
    com.jogamp.opengl.FBObject$Colorbuffer[] colorbufferAttachments -> colorbufferAttachments
    com.jogamp.opengl.FBObject$RenderAttachment depth -> depth
    com.jogamp.opengl.FBObject$RenderAttachment stencil -> stencil
    com.jogamp.opengl.FBObject samplingSink -> samplingSink
    com.jogamp.opengl.FBObject$Colorbuffer samplingColorSink -> samplingColorSink
    boolean samplingSinkDirty -> samplingSinkDirty
    java.lang.String toHexString(int) -> toHexString
    com.jogamp.opengl.FBObject$TextureAttachment createColorTextureAttachment(javax.media.opengl.GL,boolean,int,int) -> createColorTextureAttachment
    com.jogamp.opengl.FBObject$TextureAttachment createColorTextureAttachment(javax.media.opengl.GL,boolean,int,int,int,int,int,int) -> createColorTextureAttachment
    com.jogamp.opengl.FBObject$TextureAttachment createColorTextureAttachment(int,int,int,int,int,int,int,int,int) -> createColorTextureAttachment
    boolean hasAlpha(int) -> hasAlpha
    void validateColorAttachmentPointRange(int) -> validateColorAttachmentPointRange
    void validateAddColorAttachment(int,com.jogamp.opengl.FBObject$Colorbuffer) -> validateAddColorAttachment
    void addColorAttachment(int,com.jogamp.opengl.FBObject$Colorbuffer) -> addColorAttachment
    void removeColorAttachment(int,com.jogamp.opengl.FBObject$Colorbuffer) -> removeColorAttachment
    com.jogamp.opengl.FBObject$Colorbuffer getColorbuffer(int) -> getColorbuffer
    int getColorbufferAttachmentPoint(com.jogamp.opengl.FBObject$Colorbuffer) -> getColorbufferAttachmentPoint
    com.jogamp.opengl.FBObject$Colorbuffer getColorbuffer(com.jogamp.opengl.FBObject$Colorbuffer) -> getColorbuffer
    boolean hasAttachmentUsingAlpha() -> hasAttachmentUsingAlpha
    void <init>() -> <init>
    void init(javax.media.opengl.GL,int,int,int) -> init
    void reset(javax.media.opengl.GL,int,int) -> reset
    void reset(javax.media.opengl.GL,int,int,int,boolean) -> reset
    void validateAttachmentSize(com.jogamp.opengl.FBObject$Attachment) -> validateAttachmentSize
    void formatToGLCapabilities(javax.media.opengl.GLCapabilities) -> formatToGLCapabilities
    int getStatus() -> getStatus
    java.lang.String getStatusString() -> getStatusString
    java.lang.String getStatusString(int) -> getStatusString
    boolean isStatusValid() -> isStatusValid
    int checkPreGLError(javax.media.opengl.GL) -> checkPreGLError
    boolean checkNoError(javax.media.opengl.GL,int,java.lang.String) -> checkNoError
    void checkInitialized() -> checkInitialized
    com.jogamp.opengl.FBObject$TextureAttachment attachTexture2D(javax.media.opengl.GL,int,boolean) -> attachTexture2D
    com.jogamp.opengl.FBObject$TextureAttachment attachTexture2D(javax.media.opengl.GL,int,boolean,int,int,int,int) -> attachTexture2D
    com.jogamp.opengl.FBObject$TextureAttachment attachTexture2D(javax.media.opengl.GL,int,int,int,int,int,int,int,int) -> attachTexture2D
    com.jogamp.opengl.FBObject$ColorAttachment createColorAttachment(boolean) -> createColorAttachment
    com.jogamp.opengl.FBObject$ColorAttachment createColorAttachment(int,int,int,int) -> createColorAttachment
    com.jogamp.opengl.FBObject$RenderAttachment createRenderAttachment(com.jogamp.opengl.FBObject$Attachment$Type,int,int,int,int) -> createRenderAttachment
    com.jogamp.opengl.FBObject$ColorAttachment attachColorbuffer(javax.media.opengl.GL,int,boolean) -> attachColorbuffer
    com.jogamp.opengl.FBObject$ColorAttachment attachColorbuffer(javax.media.opengl.GL,int,int) -> attachColorbuffer
    com.jogamp.opengl.FBObject$Colorbuffer attachColorbuffer(javax.media.opengl.GL,int,com.jogamp.opengl.FBObject$Colorbuffer) -> attachColorbuffer
    com.jogamp.opengl.FBObject$Colorbuffer attachColorbufferImpl(javax.media.opengl.GL,int,com.jogamp.opengl.FBObject$Colorbuffer) -> attachColorbufferImpl
    void attachRenderbuffer(javax.media.opengl.GL,com.jogamp.opengl.FBObject$Attachment$Type,int) -> attachRenderbuffer
    void attachRenderbuffer(javax.media.opengl.GL,int) -> attachRenderbuffer
    void attachRenderbufferImpl(javax.media.opengl.GL,com.jogamp.opengl.FBObject$Attachment$Type,int) -> attachRenderbufferImpl
    void attachRenderbufferImpl2(javax.media.opengl.GL,com.jogamp.opengl.FBObject$Attachment$Type,int) -> attachRenderbufferImpl2
    com.jogamp.opengl.FBObject$Colorbuffer detachColorbuffer(javax.media.opengl.GL,int,boolean) -> detachColorbuffer
    com.jogamp.opengl.FBObject$Colorbuffer detachColorbufferImpl(javax.media.opengl.GL,int,com.jogamp.opengl.FBObject$DetachAction,int) -> detachColorbufferImpl
    void freeAllColorbufferImpl(javax.media.opengl.GL) -> freeAllColorbufferImpl
    void detachRenderbuffer(javax.media.opengl.GL,com.jogamp.opengl.FBObject$Attachment$Type,boolean) -> detachRenderbuffer
    boolean isDepthStencilPackedFormat() -> isDepthStencilPackedFormat
    void detachRenderbufferImpl(javax.media.opengl.GL,com.jogamp.opengl.FBObject$Attachment$Type,com.jogamp.opengl.FBObject$DetachAction) -> detachRenderbufferImpl
    void freeAllRenderbufferImpl(javax.media.opengl.GL) -> freeAllRenderbufferImpl
    void detachAll(javax.media.opengl.GL) -> detachAll
    void detachAllColorbuffer(javax.media.opengl.GL) -> detachAllColorbuffer
    void detachAllTexturebuffer(javax.media.opengl.GL) -> detachAllTexturebuffer
    void detachAllRenderbuffer(javax.media.opengl.GL) -> detachAllRenderbuffer
    void detachAllImpl(javax.media.opengl.GL,boolean,boolean,int) -> detachAllImpl
    void destroy(javax.media.opengl.GL) -> destroy
    boolean sampleSinkSizeMismatch() -> sampleSinkSizeMismatch
    boolean sampleColorsinkUninit() -> sampleColorsinkUninit
    boolean sampleSinkDepthStencilMismatch() -> sampleSinkDepthStencilMismatch
    boolean sampleSinkFormatMismatch(javax.media.opengl.GL) -> sampleSinkFormatMismatch
    void resetSamplingSink(javax.media.opengl.GL) -> resetSamplingSink
    com.jogamp.opengl.FBObject setSamplingSink(com.jogamp.opengl.FBObject) -> setSamplingSink
    void bind(javax.media.opengl.GL) -> bind
    void unbind(javax.media.opengl.GL) -> unbind
    void markUnbound() -> markUnbound
    boolean isBound(javax.media.opengl.GL) -> isBound
    boolean isBound() -> isBound
    void syncSamplingSink(javax.media.opengl.GL) -> syncSamplingSink
    void use(javax.media.opengl.GL,com.jogamp.opengl.FBObject$TextureAttachment) -> use
    void unuse(javax.media.opengl.GL) -> unuse
    boolean hasFullFBOSupport() -> hasFullFBOSupport
    boolean supportsRGBA8() -> supportsRGBA8
    boolean supportsDepth(int) -> supportsDepth
    boolean supportsStencil(int) -> supportsStencil
    boolean supportsPackedDepthStencil() -> supportsPackedDepthStencil
    int getMaxColorAttachments() -> getMaxColorAttachments
    int getMaxTextureSize() -> getMaxTextureSize
    int getMaxRenderbufferSize() -> getMaxRenderbufferSize
    int getMaxSamples() -> getMaxSamples
    boolean isInitialized() -> isInitialized
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getNumSamples() -> getNumSamples
    int getWriteFramebuffer() -> getWriteFramebuffer
    int getReadFramebuffer() -> getReadFramebuffer
    int getDefaultReadBuffer() -> getDefaultReadBuffer
    int getColorbufferCount() -> getColorbufferCount
    int getTextureAttachmentCount() -> getTextureAttachmentCount
    com.jogamp.opengl.FBObject$RenderAttachment getStencilAttachment() -> getStencilAttachment
    com.jogamp.opengl.FBObject$RenderAttachment getDepthAttachment() -> getDepthAttachment
    com.jogamp.opengl.FBObject getSamplingSinkFBO() -> getSamplingSinkFBO
    com.jogamp.opengl.FBObject$Colorbuffer getSamplingSink() -> getSamplingSink
    boolean isSamplingBufferDirty() -> isSamplingBufferDirty
    int objectHashCode() -> objectHashCode
    java.lang.String toString() -> toString
    void updateStatus(javax.media.opengl.GL) -> updateStatus
    int access$000(javax.media.opengl.GL) -> access$000
    void <clinit>() -> <clinit>
com.jogamp.opengl.FBObject$1 -> com.jogamp.opengl.FBObject$1:
    int[] $SwitchMap$com$jogamp$opengl$FBObject$Attachment$Type -> $SwitchMap$com$jogamp$opengl$FBObject$Attachment$Type
    int[] $SwitchMap$com$jogamp$opengl$FBObject$DetachAction -> $SwitchMap$com$jogamp$opengl$FBObject$DetachAction
    void <clinit>() -> <clinit>
com.jogamp.opengl.FBObject$Attachment -> com.jogamp.opengl.FBObject$Attachment:
    com.jogamp.opengl.FBObject$Attachment$Type type -> type
    int format -> format
    int width -> width
    int height -> height
    int name -> name
    void <init>(com.jogamp.opengl.FBObject$Attachment$Type,int,int,int,int) -> <init>
    void formatToGLCapabilities(javax.media.opengl.GLCapabilities,boolean) -> formatToGLCapabilities
    int getFormat() -> getFormat
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    void setSize(int,int) -> setSize
    int getName() -> getName
    void setName(int) -> setName
    boolean initialize(javax.media.opengl.GL) -> initialize
    void free(javax.media.opengl.GL) -> free
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int objectHashCode() -> objectHashCode
    java.lang.String toString() -> toString
    com.jogamp.opengl.FBObject$Attachment$Type getType(int,int) -> getType
com.jogamp.opengl.FBObject$Attachment$Type -> com.jogamp.opengl.FBObject$Attachment$Type:
    com.jogamp.opengl.FBObject$Attachment$Type NONE -> NONE
    com.jogamp.opengl.FBObject$Attachment$Type DEPTH -> DEPTH
    com.jogamp.opengl.FBObject$Attachment$Type STENCIL -> STENCIL
    com.jogamp.opengl.FBObject$Attachment$Type DEPTH_STENCIL -> DEPTH_STENCIL
    com.jogamp.opengl.FBObject$Attachment$Type COLOR -> COLOR
    com.jogamp.opengl.FBObject$Attachment$Type COLOR_TEXTURE -> COLOR_TEXTURE
    com.jogamp.opengl.FBObject$Attachment$Type DEPTH_TEXTURE -> DEPTH_TEXTURE
    com.jogamp.opengl.FBObject$Attachment$Type STENCIL_TEXTURE -> STENCIL_TEXTURE
    com.jogamp.opengl.FBObject$Attachment$Type[] $VALUES -> $VALUES
    com.jogamp.opengl.FBObject$Attachment$Type[] values() -> values
    com.jogamp.opengl.FBObject$Attachment$Type valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    com.jogamp.opengl.FBObject$Attachment$Type determine(int) -> determine
    void <clinit>() -> <clinit>
com.jogamp.opengl.FBObject$ColorAttachment -> com.jogamp.opengl.FBObject$ColorAttachment:
    void <init>(int,int,int,int,int) -> <init>
    boolean isTextureAttachment() -> isTextureAttachment
    com.jogamp.opengl.FBObject$TextureAttachment getTextureAttachment() -> getTextureAttachment
    com.jogamp.opengl.FBObject$ColorAttachment getColorAttachment() -> getColorAttachment
com.jogamp.opengl.FBObject$Colorbuffer -> com.jogamp.opengl.FBObject$Colorbuffer:
    boolean initialize(javax.media.opengl.GL) -> initialize
    void free(javax.media.opengl.GL) -> free
    void formatToGLCapabilities(javax.media.opengl.GLCapabilities,boolean) -> formatToGLCapabilities
    boolean isTextureAttachment() -> isTextureAttachment
    com.jogamp.opengl.FBObject$TextureAttachment getTextureAttachment() -> getTextureAttachment
    com.jogamp.opengl.FBObject$ColorAttachment getColorAttachment() -> getColorAttachment
    int getFormat() -> getFormat
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getName() -> getName
com.jogamp.opengl.FBObject$DetachAction -> com.jogamp.opengl.FBObject$DetachAction:
    com.jogamp.opengl.FBObject$DetachAction NONE -> NONE
    com.jogamp.opengl.FBObject$DetachAction DISPOSE -> DISPOSE
    com.jogamp.opengl.FBObject$DetachAction RECREATE -> RECREATE
    com.jogamp.opengl.FBObject$DetachAction[] $VALUES -> $VALUES
    com.jogamp.opengl.FBObject$DetachAction[] values() -> values
    com.jogamp.opengl.FBObject$DetachAction valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.jogamp.opengl.FBObject$RenderAttachment -> com.jogamp.opengl.FBObject$RenderAttachment:
    int samples -> samples
    void <init>(com.jogamp.opengl.FBObject$Attachment$Type,int,int,int,int,int) -> <init>
    int getSamples() -> getSamples
    void setSamples(int) -> setSamples
    com.jogamp.opengl.FBObject$Attachment$Type validateType(com.jogamp.opengl.FBObject$Attachment$Type) -> validateType
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean initialize(javax.media.opengl.GL) -> initialize
    void free(javax.media.opengl.GL) -> free
    java.lang.String toString() -> toString
com.jogamp.opengl.FBObject$TextureAttachment -> com.jogamp.opengl.FBObject$TextureAttachment:
    int dataFormat -> dataFormat
    int dataType -> dataType
    int magFilter -> magFilter
    int minFilter -> minFilter
    int wrapS -> wrapS
    int wrapT -> wrapT
    void <init>(com.jogamp.opengl.FBObject$Attachment$Type,int,int,int,int,int,int,int,int,int,int) -> <init>
    com.jogamp.opengl.FBObject$Attachment$Type validateType(com.jogamp.opengl.FBObject$Attachment$Type) -> validateType
    boolean initialize(javax.media.opengl.GL) -> initialize
    void free(javax.media.opengl.GL) -> free
    boolean isTextureAttachment() -> isTextureAttachment
    com.jogamp.opengl.FBObject$TextureAttachment getTextureAttachment() -> getTextureAttachment
    com.jogamp.opengl.FBObject$ColorAttachment getColorAttachment() -> getColorAttachment
    java.lang.String toString() -> toString
com.jogamp.opengl.GLAutoDrawableDelegate -> com.jogamp.opengl.GLAutoDrawableDelegate:
    java.lang.Object upstreamWidget -> upstreamWidget
    com.jogamp.common.util.locks.RecursiveLock lock -> lock
    void <init>(javax.media.opengl.GLDrawable,javax.media.opengl.GLContext,java.lang.Object,boolean,com.jogamp.common.util.locks.RecursiveLock) -> <init>
    void windowRepaintOp() -> windowRepaintOp
    void windowResizedOp(int,int) -> windowResizedOp
    void windowDestroyNotifyOp() -> windowDestroyNotifyOp
    com.jogamp.common.util.locks.RecursiveLock getUpstreamLock() -> getUpstreamLock
    java.lang.Object getUpstreamWidget() -> getUpstreamWidget
    void setUpstreamWidget(java.lang.Object) -> setUpstreamWidget
    void destroy() -> destroy
    void destroyImplInLock() -> destroyImplInLock
    void display() -> display
    javax.media.opengl.GLDrawableFactory getFactory() -> getFactory
    void swapBuffers() -> swapBuffers
    java.lang.String toString() -> toString
com.jogamp.opengl.GLEventListenerState -> com.jogamp.opengl.GLEventListenerState:
    boolean DEBUG -> DEBUG
    javax.media.nativewindow.AbstractGraphicsDevice upstreamDevice -> upstreamDevice
    boolean proxyOwnsUpstreamDevice -> proxyOwnsUpstreamDevice
    javax.media.nativewindow.AbstractGraphicsDevice device -> device
    javax.media.opengl.GLCapabilitiesImmutable caps -> caps
    javax.media.opengl.GLContext context -> context
    javax.media.opengl.GLEventListener[] listeners -> listeners
    boolean[] listenersInit -> listenersInit
    javax.media.opengl.GLAnimatorControl anim -> anim
    boolean animStarted -> animStarted
    com.jogamp.common.util.locks.RecursiveLock upstreamLock -> upstreamLock
    javax.media.nativewindow.NativeSurface lockedSurface -> lockedSurface
    boolean owner -> owner
    java.lang.Runnable unlockOp -> unlockOp
    javax.media.opengl.GLRunnable setViewport -> setViewport
    javax.media.opengl.GLRunnable glFinish -> glFinish
    void <init>(javax.media.nativewindow.AbstractGraphicsDevice,boolean,javax.media.nativewindow.AbstractGraphicsDevice,javax.media.opengl.GLCapabilitiesImmutable,com.jogamp.common.util.locks.RecursiveLock,javax.media.nativewindow.NativeSurface,javax.media.opengl.GLContext,int,javax.media.opengl.GLAnimatorControl,boolean) -> <init>
    boolean isOwner() -> isOwner
    int listenerCount() -> listenerCount
    java.lang.Runnable getUnlockSurfaceOp() -> getUnlockSurfaceOp
    void destroy() -> destroy
    javax.media.nativewindow.AbstractGraphicsDevice cloneDevice(javax.media.nativewindow.AbstractGraphicsDevice) -> cloneDevice
    com.jogamp.opengl.GLEventListenerState moveFrom(javax.media.opengl.GLAutoDrawable) -> moveFrom
    com.jogamp.opengl.GLEventListenerState moveFrom(javax.media.opengl.GLAutoDrawable,boolean) -> moveFrom
    void moveTo(javax.media.opengl.GLAutoDrawable) -> moveTo
    void moveTo(javax.media.opengl.GLAutoDrawable,java.lang.Runnable) -> moveTo
    com.jogamp.common.util.locks.RecursiveLock access$000(com.jogamp.opengl.GLEventListenerState) -> access$000
    javax.media.nativewindow.NativeSurface access$100(com.jogamp.opengl.GLEventListenerState) -> access$100
    com.jogamp.common.util.locks.RecursiveLock access$002(com.jogamp.opengl.GLEventListenerState,com.jogamp.common.util.locks.RecursiveLock) -> access$002
    javax.media.nativewindow.NativeSurface access$102(com.jogamp.opengl.GLEventListenerState,javax.media.nativewindow.NativeSurface) -> access$102
    void <clinit>() -> <clinit>
com.jogamp.opengl.GLEventListenerState$1 -> com.jogamp.opengl.GLEventListenerState$1:
    com.jogamp.opengl.GLEventListenerState this$0 -> this$0
    void <init>(com.jogamp.opengl.GLEventListenerState) -> <init>
    void run() -> run
com.jogamp.opengl.GLEventListenerState$2 -> com.jogamp.opengl.GLEventListenerState$2:
    void <init>() -> <init>
    boolean run(javax.media.opengl.GLAutoDrawable) -> run
com.jogamp.opengl.GLEventListenerState$3 -> com.jogamp.opengl.GLEventListenerState$3:
    void <init>() -> <init>
    boolean run(javax.media.opengl.GLAutoDrawable) -> run
com.jogamp.opengl.GLRendererQuirks -> com.jogamp.opengl.GLRendererQuirks:
    int NoDoubleBufferedPBuffer -> NoDoubleBufferedPBuffer
    int NoDoubleBufferedBitmap -> NoDoubleBufferedBitmap
    int NoSetSwapInterval -> NoSetSwapInterval
    int NoOffscreenBitmap -> NoOffscreenBitmap
    int NoSetSwapIntervalPostRetarget -> NoSetSwapIntervalPostRetarget
    int GLSLBuggyDiscard -> GLSLBuggyDiscard
    int GLNonCompliant -> GLNonCompliant
    int GLFlushBeforeRelease -> GLFlushBeforeRelease
    int DontCloseX11Display -> DontCloseX11Display
    int NeedCurrCtx4ARBPixFmtQueries -> NeedCurrCtx4ARBPixFmtQueries
    int NeedCurrCtx4ARBCreateContext -> NeedCurrCtx4ARBCreateContext
    int NoFullFBOSupport -> NoFullFBOSupport
    int GLSLNonCompliant -> GLSLNonCompliant
    int GL4NeedsGL3Request -> GL4NeedsGL3Request
    int GLSharedContextBuggy -> GLSharedContextBuggy
    int GLES3ViaEGLES2Config -> GLES3ViaEGLES2Config
    int SingletonEGLDisplayOnly -> SingletonEGLDisplayOnly
    int NoMultiSamplingBuffers -> NoMultiSamplingBuffers
    int COUNT -> COUNT
    java.lang.String[] _names -> _names
    java.util.IdentityHashMap stickyDeviceQuirks -> stickyDeviceQuirks
    int _bitmask -> _bitmask
    com.jogamp.opengl.GLRendererQuirks getStickyDeviceQuirks(javax.media.nativewindow.AbstractGraphicsDevice) -> getStickyDeviceQuirks
    boolean areSameStickyDevice(javax.media.nativewindow.AbstractGraphicsDevice,javax.media.nativewindow.AbstractGraphicsDevice) -> areSameStickyDevice
    void addStickyDeviceQuirks(javax.media.nativewindow.AbstractGraphicsDevice,int[],int,int) -> addStickyDeviceQuirks
    void addStickyDeviceQuirks(javax.media.nativewindow.AbstractGraphicsDevice,com.jogamp.opengl.GLRendererQuirks) -> addStickyDeviceQuirks
    boolean existStickyDeviceQuirk(javax.media.nativewindow.AbstractGraphicsDevice,int) -> existStickyDeviceQuirk
    void pushStickyDeviceQuirks(javax.media.nativewindow.AbstractGraphicsDevice,com.jogamp.opengl.GLRendererQuirks) -> pushStickyDeviceQuirks
    void <init>() -> <init>
    void <init>(int[],int,int) -> <init>
    void addQuirks(int[],int,int) -> addQuirks
    void addQuirks(com.jogamp.opengl.GLRendererQuirks) -> addQuirks
    boolean exist(int) -> exist
    java.lang.StringBuilder toString(java.lang.StringBuilder) -> toString
    java.lang.String toString() -> toString
    void validateQuirk(int) -> validateQuirk
    java.lang.String toString(int) -> toString
    void <clinit>() -> <clinit>
com.jogamp.opengl.GLStateKeeper -> com.jogamp.opengl.GLStateKeeper:
    com.jogamp.opengl.GLStateKeeper$Listener setGLStateKeeperListener(com.jogamp.opengl.GLStateKeeper$Listener) -> setGLStateKeeperListener
    boolean isGLStatePreservationSupported() -> isGLStatePreservationSupported
    boolean preserveGLStateAtDestroy(boolean) -> preserveGLStateAtDestroy
    com.jogamp.opengl.GLEventListenerState getPreservedGLState() -> getPreservedGLState
    com.jogamp.opengl.GLEventListenerState clearPreservedGLState() -> clearPreservedGLState
com.jogamp.opengl.GLStateKeeper$Listener -> com.jogamp.opengl.GLStateKeeper$Listener:
    void glStatePreserveNotify(com.jogamp.opengl.GLStateKeeper) -> glStatePreserveNotify
    void glStateRestored(com.jogamp.opengl.GLStateKeeper) -> glStateRestored
com.jogamp.opengl.JoglVersion -> com.jogamp.opengl.JoglVersion:
    com.jogamp.opengl.JoglVersion jogampCommonVersionInfo -> jogampCommonVersionInfo
    void <init>(java.lang.String,java.util.jar.Manifest) -> <init>
    com.jogamp.opengl.JoglVersion getInstance() -> getInstance
    java.lang.StringBuilder toString(javax.media.opengl.GL,java.lang.StringBuilder) -> toString
    java.lang.String toString(javax.media.opengl.GL) -> toString
    java.lang.StringBuilder getAvailableCapabilitiesInfo(javax.media.opengl.GLDrawableFactory,javax.media.nativewindow.AbstractGraphicsDevice,java.lang.StringBuilder) -> getAvailableCapabilitiesInfo
    java.lang.StringBuilder getAllAvailableCapabilitiesInfo(javax.media.nativewindow.AbstractGraphicsDevice,java.lang.StringBuilder) -> getAllAvailableCapabilitiesInfo
    java.lang.StringBuilder getDefaultOpenGLInfo(javax.media.nativewindow.AbstractGraphicsDevice,java.lang.StringBuilder,boolean) -> getDefaultOpenGLInfo
    java.lang.StringBuilder getGLInfo(javax.media.opengl.GL,java.lang.StringBuilder) -> getGLInfo
    java.lang.StringBuilder getGLInfo(javax.media.opengl.GL,java.lang.StringBuilder,boolean) -> getGLInfo
    java.lang.StringBuilder getGLStrings(javax.media.opengl.GL,java.lang.StringBuilder) -> getGLStrings
    java.lang.StringBuilder getGLStrings(javax.media.opengl.GL,java.lang.StringBuilder,boolean) -> getGLStrings
    java.lang.StringBuilder getBriefOSGLBuildInfo(javax.media.opengl.GL,java.lang.StringBuilder) -> getBriefOSGLBuildInfo
    void main(java.lang.String[]) -> main
com.jogamp.opengl.math.FloatUtil -> com.jogamp.opengl.math.FloatUtil:
    boolean DEBUG -> DEBUG
    boolean machEpsilonAvail -> machEpsilonAvail
    float machEpsilon -> machEpsilon
    boolean DEBUG_EPSILON -> DEBUG_EPSILON
    float E -> E
    float PI -> PI
    float TWO_PI -> TWO_PI
    float HALF_PI -> HALF_PI
    float QUARTER_PI -> QUARTER_PI
    float SQUARED_PI -> SQUARED_PI
    float EPSILON -> EPSILON
    float INV_DEVIANCE -> INV_DEVIANCE
    void <init>() -> <init>
    float[] makeIdentity(float[],int) -> makeIdentity
    float[] makeIdentity(float[]) -> makeIdentity
    float[] makeTranslation(float[],int,boolean,float,float,float) -> makeTranslation
    float[] makeTranslation(float[],boolean,float,float,float) -> makeTranslation
    float[] makeScale(float[],int,boolean,float,float,float) -> makeScale
    float[] makeScale(float[],boolean,float,float,float) -> makeScale
    float[] makeRotationAxis(float[],int,float,float,float,float,float[]) -> makeRotationAxis
    float[] makeRotationEuler(float[],int,float,float,float) -> makeRotationEuler
    float[] makeOrtho(float[],int,boolean,float,float,float,float,float,float) -> makeOrtho
    float[] makeFrustum(float[],int,boolean,float,float,float,float,float,float) -> makeFrustum
    float[] makePerspective(float[],int,boolean,float,float,float,float) -> makePerspective
    float[] makePerspective(float[],int,boolean,com.jogamp.opengl.math.FovHVHalves,float,float) -> makePerspective
    float[] makeLookAt(float[],int,float[],int,float[],int,float[],int,float[]) -> makeLookAt
    float[] makePick(float[],int,float,float,float,float,int[],int,float[]) -> makePick
    float[] transposeMatrix(float[],int,float[],int) -> transposeMatrix
    float[] transposeMatrix(float[],float[]) -> transposeMatrix
    float matrixDeterminant(float[],int) -> matrixDeterminant
    float matrixDeterminant(float[]) -> matrixDeterminant
    float[] invertMatrix(float[],int,float[],int) -> invertMatrix
    float[] invertMatrix(float[],float[]) -> invertMatrix
    boolean mapObjToWinCoords(float,float,float,float[],int,float[],int,int[],int,float[],int,float[],float[]) -> mapObjToWinCoords
    boolean mapObjToWinCoords(float,float,float,float[],int[],int,float[],int,float[],float[]) -> mapObjToWinCoords
    boolean mapWinToObjCoords(float,float,float,float[],int,float[],int,int[],int,float[],int,float[],float[]) -> mapWinToObjCoords
    boolean mapWinToObjCoords(float,float,float,float[],int[],int,float[],int,float[],float[]) -> mapWinToObjCoords
    boolean mapWinToObjCoords(float,float,float,float,float[],int[],int,float[],int,float[],int,float[],float[]) -> mapWinToObjCoords
    boolean mapWinToObjCoords(float,float,float,float,float[],int,float[],int,int[],int,float,float,float[],int,float[],float[]) -> mapWinToObjCoords
    boolean mapWinToRay(float,float,float,float,float[],int,float[],int,int[],int,com.jogamp.opengl.math.Ray,float[],float[],float[]) -> mapWinToRay
    float[] multMatrix(float[],int,float[],int,float[],int) -> multMatrix
    float[] multMatrix(float[],float[],float[]) -> multMatrix
    float[] multMatrix(float[],int,float[],int) -> multMatrix
    float[] multMatrix(float[],float[]) -> multMatrix
    void multMatrix(java.nio.FloatBuffer,java.nio.FloatBuffer,float[]) -> multMatrix
    void multMatrix(java.nio.FloatBuffer,java.nio.FloatBuffer) -> multMatrix
    float[] multMatrixVec(float[],int,float[],int,float[],int) -> multMatrixVec
    float[] multMatrixVec(float[],float[],float[]) -> multMatrixVec
    void multMatrixVec(java.nio.FloatBuffer,float[],float[]) -> multMatrixVec
    float[] copyMatrixColumn(float[],int,int,float[],int) -> copyMatrixColumn
    float[] copyMatrixRow(float[],int,int,float[],int) -> copyMatrixRow
    java.lang.StringBuilder matrixRowToString(java.lang.StringBuilder,java.lang.String,java.nio.FloatBuffer,int,int,int,boolean,int) -> matrixRowToString
    java.lang.StringBuilder matrixRowToString(java.lang.StringBuilder,java.lang.String,float[],int,int,int,boolean,int) -> matrixRowToString
    java.lang.StringBuilder matrixToString(java.lang.StringBuilder,java.lang.String,java.lang.String,java.nio.FloatBuffer,int,int,int,boolean) -> matrixToString
    java.lang.StringBuilder matrixToString(java.lang.StringBuilder,java.lang.String,java.lang.String,float[],int,int,int,boolean) -> matrixToString
    java.lang.StringBuilder matrixToString(java.lang.StringBuilder,java.lang.String,java.lang.String,java.nio.FloatBuffer,int,java.nio.FloatBuffer,int,int,int,boolean) -> matrixToString
    java.lang.StringBuilder matrixToString(java.lang.StringBuilder,java.lang.String,java.lang.String,float[],int,float[],int,int,int,boolean) -> matrixToString
    void calculateMachineEpsilonFloat() -> calculateMachineEpsilonFloat
    float getMachineEpsilon() -> getMachineEpsilon
    boolean isEqual(float,float) -> isEqual
    boolean isEqual(float,float,float) -> isEqual
    int compare(float,float) -> compare
    int compare(float,float,float) -> compare
    boolean isZero(float,float) -> isZero
    float abs(float) -> abs
    float pow(float,float) -> pow
    float sin(float) -> sin
    float asin(float) -> asin
    float cos(float) -> cos
    float acos(float) -> acos
    float tan(float) -> tan
    float atan(float) -> atan
    float atan2(float,float) -> atan2
    float sqrt(float) -> sqrt
    float getZBufferEpsilon(int,float,float) -> getZBufferEpsilon
    int getZBufferValue(int,float,float,float) -> getZBufferValue
    float getOrthoWinZ(float,float,float) -> getOrthoWinZ
    void <clinit>() -> <clinit>
com.jogamp.opengl.math.FovHVHalves -> com.jogamp.opengl.math.FovHVHalves:
    float left -> left
    float right -> right
    float top -> top
    float bottom -> bottom
    boolean inTangents -> inTangents
    void <init>(float,float,float,float,boolean) -> <init>
    com.jogamp.opengl.math.FovHVHalves byRadians(float,float) -> byRadians
    com.jogamp.opengl.math.FovHVHalves byFovyRadianAndAspect(float,float) -> byFovyRadianAndAspect
    com.jogamp.opengl.math.FovHVHalves byRadians(float,float,float,float) -> byRadians
    com.jogamp.opengl.math.FovHVHalves byFovyRadianAndAspect(float,float,float,float) -> byFovyRadianAndAspect
    com.jogamp.opengl.math.FovHVHalves toTangents() -> toTangents
    float horzFov() -> horzFov
    float vertFov() -> vertFov
    java.lang.String toString() -> toString
    java.lang.String toStringInDegrees() -> toStringInDegrees
com.jogamp.opengl.math.Ray -> com.jogamp.opengl.math.Ray:
    float[] orig -> orig
    float[] dir -> dir
    void <init>() -> <init>
    java.lang.String toString() -> toString
com.jogamp.opengl.math.VectorUtil -> com.jogamp.opengl.math.VectorUtil:
    float[] VEC3_ONE -> VEC3_ONE
    float[] VEC3_ZERO -> VEC3_ZERO
    float[] VEC3_UNIT_Y -> VEC3_UNIT_Y
    float[] VEC3_UNIT_Y_NEG -> VEC3_UNIT_Y_NEG
    float[] VEC3_UNIT_Z -> VEC3_UNIT_Z
    float[] VEC3_UNIT_Z_NEG -> VEC3_UNIT_Z_NEG
    void <init>() -> <init>
    float[] copyVec2(float[],int,float[],int) -> copyVec2
    float[] copyVec3(float[],int,float[],int) -> copyVec3
    float[] copyVec4(float[],int,float[],int) -> copyVec4
    boolean isVec2Equal(float[],int,float[],int) -> isVec2Equal
    boolean isVec3Equal(float[],int,float[],int) -> isVec3Equal
    boolean isVec2Equal(float[],int,float[],int,float) -> isVec2Equal
    boolean isVec3Equal(float[],int,float[],int,float) -> isVec3Equal
    boolean isVec2Zero(float[],int) -> isVec2Zero
    boolean isVec3Zero(float[],int) -> isVec3Zero
    boolean isVec2Zero(float[],int,float) -> isVec2Zero
    boolean isVec3Zero(float[],int,float) -> isVec3Zero
    boolean isZero(float,float,float) -> isZero
    boolean isZero(float,float,float,float) -> isZero
    float distSquareVec3(float[],float[]) -> distSquareVec3
    float distVec3(float[],float[]) -> distVec3
    float dotVec3(float[],float[]) -> dotVec3
    float cosAngleVec3(float[],float[]) -> cosAngleVec3
    float angleVec3(float[],float[]) -> angleVec3
    float normSquareVec2(float[]) -> normSquareVec2
    float normSquareVec2(float[],int) -> normSquareVec2
    float normSquareVec3(float[]) -> normSquareVec3
    float normSquareVec3(float[],int) -> normSquareVec3
    float normVec2(float[]) -> normVec2
    float normVec3(float[]) -> normVec3
    float[] normalizeVec2(float[],float[]) -> normalizeVec2
    float[] normalizeVec2(float[]) -> normalizeVec2
    float[] normalizeVec3(float[],float[]) -> normalizeVec3
    float[] normalizeVec3(float[]) -> normalizeVec3
    float[] normalizeVec3(float[],int) -> normalizeVec3
    float[] scaleVec2(float[],float[],float) -> scaleVec2
    float[] scaleVec3(float[],float[],float) -> scaleVec3
    float[] scaleVec3(float[],float[],float[]) -> scaleVec3
    float[] scaleVec2(float[],float[],float[]) -> scaleVec2
    float[] divVec2(float[],float[],float) -> divVec2
    float[] divVec3(float[],float[],float) -> divVec3
    float[] divVec3(float[],float[],float[]) -> divVec3
    float[] divVec2(float[],float[],float[]) -> divVec2
    float[] addVec2(float[],float[],float[]) -> addVec2
    float[] addVec3(float[],float[],float[]) -> addVec3
    float[] subVec2(float[],float[],float[]) -> subVec2
    float[] subVec3(float[],float[],float[]) -> subVec3
    float[] crossVec3(float[],float[],float[]) -> crossVec3
    float[] crossVec3(float[],int,float[],int,float[],int) -> crossVec3
    float[] mulColMat4Vec3(float[],float[],float[]) -> mulColMat4Vec3
    float[] mulRowMat4Vec3(float[],float[],float[]) -> mulRowMat4Vec3
    float mid(float,float) -> mid
    float[] midVec3(float[],float[],float[]) -> midVec3
    float determinantVec3(float[],float[],float[]) -> determinantVec3
    boolean isCollinearVec3(float[],float[],float[]) -> isCollinearVec3
    boolean isInCircleVec2(com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable) -> isInCircleVec2
    float triAreaVec2(com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable) -> triAreaVec2
    float triAreaVec2(float[],float[],float[]) -> triAreaVec2
    boolean isInTriangleVec3(float[],float[],float[],float[],float[],float[],float[]) -> isInTriangleVec3
    boolean isVec3InTriangle3(float[],float[],float[],float[],float[],float[],float[],float[],float[]) -> isVec3InTriangle3
    boolean isVec3InTriangle3(float[],float[],float[],float[],float[],float[],float[],float[],float[],float) -> isVec3InTriangle3
    boolean ccw(com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable) -> ccw
    com.jogamp.opengl.math.VectorUtil$Winding getWinding(com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable) -> getWinding
    float area(java.util.ArrayList) -> area
    com.jogamp.opengl.math.VectorUtil$Winding getWinding(java.util.ArrayList) -> getWinding
    float[] getNormalVec2(float[],float[],float[]) -> getNormalVec2
    float[] getNormalVec3(float[],float[],float[],float[],float[],float[]) -> getNormalVec3
    float[] getPlaneVec3(float[],float[],float[]) -> getPlaneVec3
    float[] getPlaneVec3(float[],float[],float[],float[],float[],float[]) -> getPlaneVec3
    float[] line2PlaneIntersection(float[],com.jogamp.opengl.math.Ray,float[],float) -> line2PlaneIntersection
    float[] seg2SegIntersection(float[],com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable) -> seg2SegIntersection
    boolean testSeg2SegIntersection(com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable) -> testSeg2SegIntersection
    boolean testSeg2SegIntersection(com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,float) -> testSeg2SegIntersection
    float[] line2lineIntersection(float[],com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable) -> line2lineIntersection
    boolean testTri2SegIntersection(com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable) -> testTri2SegIntersection
    boolean testTri2SegIntersection(com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,com.jogamp.opengl.math.Vert2fImmutable,float) -> testTri2SegIntersection
    void <clinit>() -> <clinit>
com.jogamp.opengl.math.VectorUtil$Winding -> com.jogamp.opengl.math.VectorUtil$Winding:
    com.jogamp.opengl.math.VectorUtil$Winding CW -> CW
    com.jogamp.opengl.math.VectorUtil$Winding CCW -> CCW
    int dir -> dir
    com.jogamp.opengl.math.VectorUtil$Winding[] $VALUES -> $VALUES
    com.jogamp.opengl.math.VectorUtil$Winding[] values() -> values
    com.jogamp.opengl.math.VectorUtil$Winding valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
com.jogamp.opengl.math.Vert2fImmutable -> com.jogamp.opengl.math.Vert2fImmutable:
    float getX() -> getX
    float getY() -> getY
    int getCoordCount() -> getCoordCount
    float[] getCoord() -> getCoord
com.jogamp.opengl.util.AWTAnimatorImpl -> com.jogamp.opengl.util.AWTAnimatorImpl:
    java.util.List lightweights -> lightweights
    java.util.Map repaintManagers -> repaintManagers
    java.util.Map dirtyRegions -> dirtyRegions
    java.lang.Runnable drawWithRepaintManagerRunnable -> drawWithRepaintManagerRunnable
    void <init>() -> <init>
    void display(java.util.ArrayList,boolean,boolean) -> display
    boolean blockUntilDone(java.lang.Thread) -> blockUntilDone
    java.util.List access$000(com.jogamp.opengl.util.AWTAnimatorImpl) -> access$000
    java.util.Map access$100(com.jogamp.opengl.util.AWTAnimatorImpl) -> access$100
    java.util.Map access$200(com.jogamp.opengl.util.AWTAnimatorImpl) -> access$200
com.jogamp.opengl.util.AWTAnimatorImpl$1 -> com.jogamp.opengl.util.AWTAnimatorImpl$1:
    com.jogamp.opengl.util.AWTAnimatorImpl this$0 -> this$0
    void <init>(com.jogamp.opengl.util.AWTAnimatorImpl) -> <init>
    void run() -> run
com.jogamp.opengl.util.AnimatorBase -> com.jogamp.opengl.util.AnimatorBase:
    boolean DEBUG -> DEBUG
    long TO_WAIT_FOR_FINISH_LIFECYCLE_ACTION -> TO_WAIT_FOR_FINISH_LIFECYCLE_ACTION
    long POLLP_WAIT_FOR_FINISH_LIFECYCLE_ACTION -> POLLP_WAIT_FOR_FINISH_LIFECYCLE_ACTION
    int MODE_EXPECT_AWT_RENDERING_THREAD -> MODE_EXPECT_AWT_RENDERING_THREAD
    int modeBits -> modeBits
    com.jogamp.opengl.util.AnimatorBase$AnimatorImpl impl -> impl
    java.lang.String baseName -> baseName
    java.util.ArrayList drawables -> drawables
    boolean drawablesEmpty -> drawablesEmpty
    java.lang.Thread animThread -> animThread
    boolean ignoreExceptions -> ignoreExceptions
    boolean printExceptions -> printExceptions
    boolean exclusiveContext -> exclusiveContext
    java.lang.Thread userExclusiveContextThread -> userExclusiveContextThread
    javax.media.opengl.GLAnimatorControl$UncaughtExceptionHandler uncaughtExceptionHandler -> uncaughtExceptionHandler
    jogamp.opengl.FPSCounterImpl fpsCounter -> fpsCounter
    java.lang.Class awtAnimatorImplClazz -> awtAnimatorImplClazz
    com.jogamp.opengl.util.AnimatorBase$Condition waitForNotAnimatingIfEmptyCondition -> waitForNotAnimatingIfEmptyCondition
    void <init>() -> <init>
    boolean useAWTAnimatorImpl(int) -> useAWTAnimatorImpl
    void initImpl(boolean) -> initImpl
    java.lang.String getBaseName(java.lang.String) -> getBaseName
    void setModeBits(boolean,int) -> setModeBits
    int getModeBits() -> getModeBits
    void add(javax.media.opengl.GLAutoDrawable) -> add
    void remove(javax.media.opengl.GLAutoDrawable) -> remove
    java.lang.Thread setExclusiveContext(java.lang.Thread) -> setExclusiveContext
    boolean setExclusiveContext(boolean) -> setExclusiveContext
    boolean isExclusiveContextEnabled() -> isExclusiveContextEnabled
    java.lang.Thread getExclusiveContextThread() -> getExclusiveContextThread
    void setDrawablesExclCtxState(boolean) -> setDrawablesExclCtxState
    boolean validateDrawablesExclCtxState(java.lang.Thread) -> validateDrawablesExclCtxState
    java.lang.Thread getThread() -> getThread
    void display() -> display
    void setUpdateFPSFrames(int,java.io.PrintStream) -> setUpdateFPSFrames
    void resetFPSCounter() -> resetFPSCounter
    int getUpdateFPSFrames() -> getUpdateFPSFrames
    long getFPSStartTime() -> getFPSStartTime
    long getLastFPSUpdateTime() -> getLastFPSUpdateTime
    long getLastFPSPeriod() -> getLastFPSPeriod
    float getLastFPS() -> getLastFPS
    int getTotalFPSFrames() -> getTotalFPSFrames
    long getTotalFPSDuration() -> getTotalFPSDuration
    float getTotalFPS() -> getTotalFPS
    void setIgnoreExceptions(boolean) -> setIgnoreExceptions
    void setPrintExceptions(boolean) -> setPrintExceptions
    javax.media.opengl.GLAnimatorControl$UncaughtExceptionHandler getUncaughtExceptionHandler() -> getUncaughtExceptionHandler
    void setUncaughtExceptionHandler(javax.media.opengl.GLAnimatorControl$UncaughtExceptionHandler) -> setUncaughtExceptionHandler
    void handleUncaughtException(com.jogamp.opengl.util.AnimatorBase$UncaughtAnimatorException) -> handleUncaughtException
    void flushGLRunnables() -> flushGLRunnables
    boolean finishLifecycleAction(com.jogamp.opengl.util.AnimatorBase$Condition,long) -> finishLifecycleAction
    boolean isStarted() -> isStarted
    java.lang.String getThreadName() -> getThreadName
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.jogamp.opengl.util.AnimatorBase$1 -> com.jogamp.opengl.util.AnimatorBase$1:
    javax.media.opengl.GLAutoDrawable val$drawable -> val$drawable
    com.jogamp.opengl.util.AnimatorBase this$0 -> this$0
    void <init>(com.jogamp.opengl.util.AnimatorBase,javax.media.opengl.GLAutoDrawable) -> <init>
    boolean eval() -> eval
com.jogamp.opengl.util.AnimatorBase$2 -> com.jogamp.opengl.util.AnimatorBase$2:
    javax.media.opengl.GLAutoDrawable val$drawable -> val$drawable
    com.jogamp.opengl.util.AnimatorBase this$0 -> this$0
    void <init>(com.jogamp.opengl.util.AnimatorBase,javax.media.opengl.GLAutoDrawable) -> <init>
    boolean eval() -> eval
com.jogamp.opengl.util.AnimatorBase$3 -> com.jogamp.opengl.util.AnimatorBase$3:
    com.jogamp.opengl.util.AnimatorBase this$0 -> this$0
    void <init>(com.jogamp.opengl.util.AnimatorBase) -> <init>
    boolean eval() -> eval
com.jogamp.opengl.util.AnimatorBase$AnimatorImpl -> com.jogamp.opengl.util.AnimatorBase$AnimatorImpl:
    void display(java.util.ArrayList,boolean,boolean) -> display
    boolean blockUntilDone(java.lang.Thread) -> blockUntilDone
com.jogamp.opengl.util.AnimatorBase$Condition -> com.jogamp.opengl.util.AnimatorBase$Condition:
    boolean eval() -> eval
com.jogamp.opengl.util.AnimatorBase$UncaughtAnimatorException -> com.jogamp.opengl.util.AnimatorBase$UncaughtAnimatorException:
    javax.media.opengl.GLAutoDrawable drawable -> drawable
    void <init>(javax.media.opengl.GLAutoDrawable,java.lang.Throwable) -> <init>
    javax.media.opengl.GLAutoDrawable getGLAutoDrawable() -> getGLAutoDrawable
com.jogamp.opengl.util.DefaultAnimatorImpl -> com.jogamp.opengl.util.DefaultAnimatorImpl:
    void <init>() -> <init>
    void display(java.util.ArrayList,boolean,boolean) -> display
    boolean blockUntilDone(java.lang.Thread) -> blockUntilDone
com.jogamp.opengl.util.FPSAnimator -> com.jogamp.opengl.util.FPSAnimator:
    java.util.Timer timer -> timer
    com.jogamp.opengl.util.FPSAnimator$MainTask task -> task
    int fps -> fps
    boolean scheduleAtFixedRate -> scheduleAtFixedRate
    boolean isAnimating -> isAnimating
    boolean shouldRun -> shouldRun
    boolean shouldStop -> shouldStop
    int timerNo -> timerNo
    com.jogamp.opengl.util.AnimatorBase$Condition waitForStartedAddedCondition -> waitForStartedAddedCondition
    com.jogamp.opengl.util.AnimatorBase$Condition waitForStartedEmptyCondition -> waitForStartedEmptyCondition
    com.jogamp.opengl.util.AnimatorBase$Condition waitForStoppedCondition -> waitForStoppedCondition
    com.jogamp.opengl.util.AnimatorBase$Condition waitForPausedCondition -> waitForPausedCondition
    com.jogamp.opengl.util.AnimatorBase$Condition waitForResumeCondition -> waitForResumeCondition
    java.lang.String getBaseName(java.lang.String) -> getBaseName
    void <init>(int) -> <init>
    void <init>(int,boolean) -> <init>
    void <init>(javax.media.opengl.GLAutoDrawable,int) -> <init>
    void <init>(javax.media.opengl.GLAutoDrawable,int,boolean) -> <init>
    void setFPS(int) -> setFPS
    int getFPS() -> getFPS
    boolean isAnimatingImpl() -> isAnimatingImpl
    boolean isAnimating() -> isAnimating
    boolean isPaused() -> isPaused
    boolean start() -> start
    boolean stop() -> stop
    boolean pause() -> pause
    boolean resume() -> resume
    boolean access$002(com.jogamp.opengl.util.FPSAnimator,boolean) -> access$002
    boolean access$102(com.jogamp.opengl.util.FPSAnimator,boolean) -> access$102
    int access$200(com.jogamp.opengl.util.FPSAnimator) -> access$200
    boolean access$300(com.jogamp.opengl.util.FPSAnimator) -> access$300
    boolean access$000(com.jogamp.opengl.util.FPSAnimator) -> access$000
    boolean access$100(com.jogamp.opengl.util.FPSAnimator) -> access$100
    boolean access$400(com.jogamp.opengl.util.FPSAnimator) -> access$400
    boolean access$502(com.jogamp.opengl.util.FPSAnimator,boolean) -> access$502
    boolean access$500(com.jogamp.opengl.util.FPSAnimator) -> access$500
    void <clinit>() -> <clinit>
com.jogamp.opengl.util.FPSAnimator$1 -> com.jogamp.opengl.util.FPSAnimator$1:
    com.jogamp.opengl.util.FPSAnimator this$0 -> this$0
    void <init>(com.jogamp.opengl.util.FPSAnimator) -> <init>
    boolean eval() -> eval
com.jogamp.opengl.util.FPSAnimator$2 -> com.jogamp.opengl.util.FPSAnimator$2:
    com.jogamp.opengl.util.FPSAnimator this$0 -> this$0
    void <init>(com.jogamp.opengl.util.FPSAnimator) -> <init>
    boolean eval() -> eval
com.jogamp.opengl.util.FPSAnimator$3 -> com.jogamp.opengl.util.FPSAnimator$3:
    com.jogamp.opengl.util.FPSAnimator this$0 -> this$0
    void <init>(com.jogamp.opengl.util.FPSAnimator) -> <init>
    boolean eval() -> eval
com.jogamp.opengl.util.FPSAnimator$4 -> com.jogamp.opengl.util.FPSAnimator$4:
    com.jogamp.opengl.util.FPSAnimator this$0 -> this$0
    void <init>(com.jogamp.opengl.util.FPSAnimator) -> <init>
    boolean eval() -> eval
com.jogamp.opengl.util.FPSAnimator$5 -> com.jogamp.opengl.util.FPSAnimator$5:
    com.jogamp.opengl.util.FPSAnimator this$0 -> this$0
    void <init>(com.jogamp.opengl.util.FPSAnimator) -> <init>
    boolean eval() -> eval
com.jogamp.opengl.util.FPSAnimator$MainTask -> com.jogamp.opengl.util.FPSAnimator$MainTask:
    boolean justStarted -> justStarted
    boolean alreadyStopped -> alreadyStopped
    boolean alreadyPaused -> alreadyPaused
    com.jogamp.opengl.util.FPSAnimator this$0 -> this$0
    void <init>(com.jogamp.opengl.util.FPSAnimator) -> <init>
    void start(java.util.Timer) -> start
    boolean isActive() -> isActive
    java.lang.String toString() -> toString
    void run() -> run
com.jogamp.opengl.util.GLArrayDataWrapper -> com.jogamp.opengl.util.GLArrayDataWrapper:
    boolean DEBUG -> DEBUG
    boolean alive -> alive
    int index -> index
    int location -> location
    java.lang.String name -> name
    int componentsPerElement -> componentsPerElement
    int componentType -> componentType
    java.lang.Class componentClazz -> componentClazz
    int componentByteSize -> componentByteSize
    boolean normalized -> normalized
    int strideB -> strideB
    int strideL -> strideL
    java.nio.Buffer buffer -> buffer
    int mappedElementCount -> mappedElementCount
    boolean isVertexAttribute -> isVertexAttribute
    long vboOffset -> vboOffset
    int vboName -> vboName
    boolean vboEnabled -> vboEnabled
    int vboUsage -> vboUsage
    int vboTarget -> vboTarget
    com.jogamp.opengl.util.GLArrayDataWrapper createFixed(int,int,int,boolean,int,java.nio.Buffer,int,long,int,int) -> createFixed
    com.jogamp.opengl.util.GLArrayDataWrapper createFixed(int,int,int,boolean,int,int,int,long,int,int) -> createFixed
    com.jogamp.opengl.util.GLArrayDataWrapper createGLSL(java.lang.String,int,int,boolean,int,java.nio.Buffer,int,long,int,int) -> createGLSL
    com.jogamp.opengl.util.GLArrayDataWrapper createGLSL(java.lang.String,int,int,boolean,int,int,int,long,int,int) -> createGLSL
    boolean validate(javax.media.opengl.GLProfile,boolean) -> validate
    void associate(java.lang.Object,boolean) -> associate
    boolean isVertexAttribute() -> isVertexAttribute
    int getIndex() -> getIndex
    int getLocation() -> getLocation
    int setLocation(int) -> setLocation
    int setLocation(javax.media.opengl.GL2ES2,int) -> setLocation
    int setLocation(javax.media.opengl.GL2ES2,int,int) -> setLocation
    java.lang.String getName() -> getName
    long getVBOOffset() -> getVBOOffset
    int getVBOName() -> getVBOName
    boolean isVBO() -> isVBO
    int getVBOUsage() -> getVBOUsage
    int getVBOTarget() -> getVBOTarget
    java.nio.Buffer getBuffer() -> getBuffer
    int getComponentCount() -> getComponentCount
    int getComponentType() -> getComponentType
    int getComponentSizeInBytes() -> getComponentSizeInBytes
    int getElementCount() -> getElementCount
    int getSizeInBytes() -> getSizeInBytes
    boolean getNormalized() -> getNormalized
    int getStride() -> getStride
    java.lang.Class getBufferClass() -> getBufferClass
    void destroy(javax.media.opengl.GL) -> destroy
    java.lang.String toString() -> toString
    java.lang.Class getBufferClass(int) -> getBufferClass
    void setName(java.lang.String) -> setName
    void setVBOEnabled(boolean) -> setVBOEnabled
    void setVBOName(int) -> setVBOName
    void setVBOUsage(int) -> setVBOUsage
    void setVBOTarget(int) -> setVBOTarget
    void init(java.lang.String,int,int,int,boolean,int,java.nio.Buffer,int,boolean,int,long,int,int) -> init
    void <init>() -> <init>
    void <init>(com.jogamp.opengl.util.GLArrayDataWrapper) -> <init>
    void <clinit>() -> <clinit>
com.jogamp.opengl.util.GLBuffers -> com.jogamp.opengl.util.GLBuffers:
    void <init>() -> <init>
    boolean isSignedGLType(int) -> isSignedGLType
    boolean isGLTypeFixedPoint(int) -> isGLTypeFixedPoint
    int sizeOfGLType(int) -> sizeOfGLType
    java.nio.Buffer newDirectGLBuffer(int,int) -> newDirectGLBuffer
    java.nio.Buffer sliceGLBuffer(java.nio.ByteBuffer,int,int,int) -> sliceGLBuffer
    int glGetInteger(javax.media.opengl.GL,int,int[]) -> glGetInteger
    int sizeof(javax.media.opengl.GL,int[],int,int,int,int,boolean) -> sizeof
    int sizeof(javax.media.opengl.GL,int[],int,int,int,int,int,boolean) -> sizeof
    int bytesPerPixel(int,int) -> bytesPerPixel
    int componentCount(int) -> componentCount
    int getNextPowerOf2(int) -> getNextPowerOf2
    float[] getFloatArray(double[]) -> getFloatArray
com.jogamp.opengl.util.GLDrawableUtil -> com.jogamp.opengl.util.GLDrawableUtil:
    boolean DEBUG -> DEBUG
    javax.media.opengl.GLRunnable setViewport -> setViewport
    void <init>() -> <init>
    boolean isAnimatorStartedOnOtherThread(javax.media.opengl.GLAnimatorControl) -> isAnimatorStartedOnOtherThread
    boolean isAnimatorStarted(javax.media.opengl.GLAnimatorControl) -> isAnimatorStarted
    boolean isAnimatorAnimatingOnOtherThread(javax.media.opengl.GLAnimatorControl) -> isAnimatorAnimatingOnOtherThread
    boolean isAnimatorAnimating(javax.media.opengl.GLAnimatorControl) -> isAnimatorAnimating
    void moveGLEventListener(javax.media.opengl.GLAutoDrawable,javax.media.opengl.GLAutoDrawable,javax.media.opengl.GLEventListener,boolean) -> moveGLEventListener
    void moveAllGLEventListener(javax.media.opengl.GLAutoDrawable,javax.media.opengl.GLAutoDrawable,boolean) -> moveAllGLEventListener
    boolean isSwapGLContextSafe(javax.media.opengl.GLCapabilitiesImmutable,javax.media.opengl.GLCapabilitiesImmutable,javax.media.opengl.GLCapabilitiesImmutable) -> isSwapGLContextSafe
    void swapGLContextAndAllGLEventListener(javax.media.opengl.GLAutoDrawable,javax.media.opengl.GLAutoDrawable) -> swapGLContextAndAllGLEventListener
    void swapGLContext(javax.media.opengl.GLAutoDrawable,javax.media.opengl.GLAutoDrawable) -> swapGLContext
    boolean swapBuffersBeforeRead(javax.media.opengl.GLCapabilitiesImmutable) -> swapBuffersBeforeRead
    void <clinit>() -> <clinit>
com.jogamp.opengl.util.GLDrawableUtil$1 -> com.jogamp.opengl.util.GLDrawableUtil$1:
    void <init>() -> <init>
    boolean run(javax.media.opengl.GLAutoDrawable) -> run
com.jogamp.opengl.util.GLDrawableUtil$ReshapeGLEventListener -> com.jogamp.opengl.util.GLDrawableUtil$ReshapeGLEventListener:
    javax.media.opengl.GLEventListener listener -> listener
    boolean displayAfterReshape -> displayAfterReshape
    void <init>(javax.media.opengl.GLEventListener,boolean) -> <init>
    boolean run(javax.media.opengl.GLAutoDrawable) -> run
com.jogamp.opengl.util.GLPixelBuffer -> com.jogamp.opengl.util.GLPixelBuffer:
    com.jogamp.opengl.util.GLPixelBuffer$GLPixelBufferProvider defaultProviderNoRowStride -> defaultProviderNoRowStride
    com.jogamp.opengl.util.GLPixelBuffer$GLPixelBufferProvider defaultProviderWithRowStride -> defaultProviderWithRowStride
    com.jogamp.opengl.util.GLPixelBuffer$GLPixelAttributes pixelAttributes -> pixelAttributes
    int width -> width
    int height -> height
    int depth -> depth
    boolean pack -> pack
    int byteSize -> byteSize
    java.nio.Buffer buffer -> buffer
    int bufferElemSize -> bufferElemSize
    boolean allowRowStride -> allowRowStride
    boolean disposed -> disposed
    java.lang.StringBuilder toString(java.lang.StringBuilder) -> toString
    java.lang.String toString() -> toString
    void <init>(com.jogamp.opengl.util.GLPixelBuffer$GLPixelAttributes,int,int,int,boolean,java.nio.Buffer,boolean) -> <init>
    boolean getAllowRowStride() -> getAllowRowStride
    boolean isValid() -> isValid
    java.nio.Buffer rewind() -> rewind
    int position() -> position
    java.nio.Buffer position(int) -> position
    int capacity() -> capacity
    int limit() -> limit
    java.nio.Buffer flip() -> flip
    java.nio.Buffer clear() -> clear
    boolean requiresNewBuffer(javax.media.opengl.GL,int,int,int) -> requiresNewBuffer
    void dispose() -> dispose
    void <clinit>() -> <clinit>
com.jogamp.opengl.util.GLPixelBuffer$1 -> com.jogamp.opengl.util.GLPixelBuffer$1:
    int[] $SwitchMap$javax$media$nativewindow$util$PixelFormat -> $SwitchMap$javax$media$nativewindow$util$PixelFormat
    void <clinit>() -> <clinit>
com.jogamp.opengl.util.GLPixelBuffer$DefaultGLPixelBufferProvider -> com.jogamp.opengl.util.GLPixelBuffer$DefaultGLPixelBufferProvider:
    boolean allowRowStride -> allowRowStride
    void <init>(boolean) -> <init>
    boolean getAllowRowStride() -> getAllowRowStride
    com.jogamp.opengl.util.GLPixelBuffer$GLPixelAttributes getAttributes(javax.media.opengl.GL,int) -> getAttributes
    com.jogamp.opengl.util.GLPixelBuffer allocate(javax.media.opengl.GL,com.jogamp.opengl.util.GLPixelBuffer$GLPixelAttributes,int,int,int,boolean,int) -> allocate
com.jogamp.opengl.util.GLPixelBuffer$GLPixelAttributes -> com.jogamp.opengl.util.GLPixelBuffer$GLPixelAttributes:
    com.jogamp.opengl.util.GLPixelBuffer$GLPixelAttributes UNDEF -> UNDEF
    int componentCount -> componentCount
    int format -> format
    int type -> type
    int bytesPerPixel -> bytesPerPixel
    void <init>(int,int) -> <init>
    void <init>(int,int,int) -> <init>
    com.jogamp.opengl.util.GLPixelBuffer$GLPixelAttributes convert(javax.media.nativewindow.util.PixelFormat,javax.media.opengl.GLProfile) -> convert
    void <init>(int,int,int,boolean) -> <init>
    javax.media.nativewindow.util.PixelFormat getPixelFormat() -> getPixelFormat
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.jogamp.opengl.util.GLPixelBuffer$GLPixelBufferProvider -> com.jogamp.opengl.util.GLPixelBuffer$GLPixelBufferProvider:
    boolean getAllowRowStride() -> getAllowRowStride
    com.jogamp.opengl.util.GLPixelBuffer$GLPixelAttributes getAttributes(javax.media.opengl.GL,int) -> getAttributes
    com.jogamp.opengl.util.GLPixelBuffer allocate(javax.media.opengl.GL,com.jogamp.opengl.util.GLPixelBuffer$GLPixelAttributes,int,int,int,boolean,int) -> allocate
com.jogamp.opengl.util.GLPixelStorageModes -> com.jogamp.opengl.util.GLPixelStorageModes:
    int[] cachePack -> cachePack
    int[] cacheUnpack -> cacheUnpack
    boolean savedPack -> savedPack
    boolean savedUnpack -> savedUnpack
    void <init>() -> <init>
    void <init>(javax.media.opengl.GL) -> <init>
    void setPackAlignment(javax.media.opengl.GL,int) -> setPackAlignment
    void setUnpackAlignment(javax.media.opengl.GL,int) -> setUnpackAlignment
    void setAlignment(javax.media.opengl.GL,int,int) -> setAlignment
    void setPackRowLength(javax.media.opengl.GL2ES3,int) -> setPackRowLength
    void setUnpackRowLength(javax.media.opengl.GL2ES2,int) -> setUnpackRowLength
    void setRowLength(javax.media.opengl.GL2ES3,int,int) -> setRowLength
    void saveAll(javax.media.opengl.GL) -> saveAll
    void resetAll(javax.media.opengl.GL) -> resetAll
    void restore(javax.media.opengl.GL) -> restore
    void resetPack(javax.media.opengl.GL) -> resetPack
    void savePack(javax.media.opengl.GL) -> savePack
    void restorePack(javax.media.opengl.GL) -> restorePack
    void resetUnpack(javax.media.opengl.GL) -> resetUnpack
    void saveUnpack(javax.media.opengl.GL) -> saveUnpack
    void restoreUnpack(javax.media.opengl.GL) -> restoreUnpack
com.jogamp.opengl.util.ImmModeSink -> com.jogamp.opengl.util.ImmModeSink:
    boolean DEBUG_BEGIN_END -> DEBUG_BEGIN_END
    boolean DEBUG_DRAW -> DEBUG_DRAW
    boolean DEBUG_BUFFER -> DEBUG_BUFFER
    int GL_QUADS -> GL_QUADS
    int GL_QUAD_STRIP -> GL_QUAD_STRIP
    int GL_POLYGON -> GL_POLYGON
    com.jogamp.opengl.util.ImmModeSink$VBOSet vboSet -> vboSet
    java.util.ArrayList vboSetList -> vboSetList
    com.jogamp.opengl.util.ImmModeSink createFixed(int,int,int,int,int,int,int,int,int,int) -> createFixed
    com.jogamp.opengl.util.ImmModeSink createGLSL(int,int,int,int,int,int,int,int,int,int,com.jogamp.opengl.util.glsl.ShaderState) -> createGLSL
    com.jogamp.opengl.util.ImmModeSink createGLSL(int,int,int,int,int,int,int,int,int,int,int) -> createGLSL
    void destroy(javax.media.opengl.GL) -> destroy
    void reset() -> reset
    void reset(javax.media.opengl.GL) -> reset
    java.lang.String toString() -> toString
    void draw(javax.media.opengl.GL,boolean) -> draw
    void draw(javax.media.opengl.GL,java.nio.Buffer,boolean) -> draw
    void glBegin(int) -> glBegin
    void glEnd(javax.media.opengl.GL) -> glEnd
    void glEnd(javax.media.opengl.GL,boolean) -> glEnd
    void glEnd(javax.media.opengl.GL,java.nio.Buffer) -> glEnd
    void glEnd(javax.media.opengl.GL,java.nio.Buffer,boolean) -> glEnd
    void glVertexv(java.nio.Buffer) -> glVertexv
    void glNormalv(java.nio.Buffer) -> glNormalv
    void glColorv(java.nio.Buffer) -> glColorv
    void glTexCoordv(java.nio.Buffer) -> glTexCoordv
    void glVertex2f(float,float) -> glVertex2f
    void glVertex3f(float,float,float) -> glVertex3f
    void glNormal3f(float,float,float) -> glNormal3f
    void glColor3f(float,float,float) -> glColor3f
    void glColor4f(float,float,float,float) -> glColor4f
    void glTexCoord2f(float,float) -> glTexCoord2f
    void glTexCoord3f(float,float,float) -> glTexCoord3f
    void glVertex2s(short,short) -> glVertex2s
    void glVertex3s(short,short,short) -> glVertex3s
    void glNormal3s(short,short,short) -> glNormal3s
    void glColor3s(short,short,short) -> glColor3s
    void glColor4s(short,short,short,short) -> glColor4s
    void glTexCoord2s(short,short) -> glTexCoord2s
    void glTexCoord3s(short,short,short) -> glTexCoord3s
    void glVertex2b(byte,byte) -> glVertex2b
    void glVertex3b(byte,byte,byte) -> glVertex3b
    void glNormal3b(byte,byte,byte) -> glNormal3b
    void glColor3b(byte,byte,byte) -> glColor3b
    void glColor3ub(byte,byte,byte) -> glColor3ub
    void glColor4b(byte,byte,byte,byte) -> glColor4b
    void glColor4ub(byte,byte,byte,byte) -> glColor4ub
    void glTexCoord2b(byte,byte) -> glTexCoord2b
    void glTexCoord3b(byte,byte,byte) -> glTexCoord3b
    void <init>(int,int,int,int,int,int,int,int,int,boolean,int,com.jogamp.opengl.util.glsl.ShaderState,int) -> <init>
    boolean getUseVBO() -> getUseVBO
    int getResizeElementCount() -> getResizeElementCount
    void setResizeElementCount(int) -> setResizeElementCount
    void destroyList(javax.media.opengl.GL) -> destroyList
    void <clinit>() -> <clinit>
com.jogamp.opengl.util.ImmModeSink$VBOSet -> com.jogamp.opengl.util.ImmModeSink$VBOSet:
    boolean usingShaderProgram -> usingShaderProgram
    int glBufferUsage -> glBufferUsage
    int initialElementCount -> initialElementCount
    boolean useVBO -> useVBO
    boolean useGLSL -> useGLSL
    com.jogamp.opengl.util.glsl.ShaderState shaderState -> shaderState
    int shaderProgram -> shaderProgram
    int mode -> mode
    int modeOrig -> modeOrig
    int resizeElementCount -> resizeElementCount
    java.nio.ByteBuffer buffer -> buffer
    int vboName -> vboName
    int VERTEX -> VERTEX
    int COLOR -> COLOR
    int NORMAL -> NORMAL
    int TEXTCOORD -> TEXTCOORD
    int vCount -> vCount
    int cCount -> cCount
    int nCount -> nCount
    int tCount -> tCount
    int vOffset -> vOffset
    int cOffset -> cOffset
    int nOffset -> nOffset
    int tOffset -> tOffset
    int vElems -> vElems
    int cElems -> cElems
    int nElems -> nElems
    int tElems -> tElems
    int vComps -> vComps
    int cComps -> cComps
    int nComps -> nComps
    int tComps -> tComps
    int vCompsBytes -> vCompsBytes
    int cCompsBytes -> cCompsBytes
    int nCompsBytes -> nCompsBytes
    int tCompsBytes -> tCompsBytes
    int vDataType -> vDataType
    int cDataType -> cDataType
    int nDataType -> nDataType
    int tDataType -> tDataType
    boolean vDataTypeSigned -> vDataTypeSigned
    boolean cDataTypeSigned -> cDataTypeSigned
    boolean nDataTypeSigned -> nDataTypeSigned
    boolean tDataTypeSigned -> tDataTypeSigned
    int pageSize -> pageSize
    java.nio.Buffer vertexArray -> vertexArray
    java.nio.Buffer colorArray -> colorArray
    java.nio.Buffer normalArray -> normalArray
    java.nio.Buffer textCoordArray -> textCoordArray
    com.jogamp.opengl.util.GLArrayDataWrapper vArrayData -> vArrayData
    com.jogamp.opengl.util.GLArrayDataWrapper cArrayData -> cArrayData
    com.jogamp.opengl.util.GLArrayDataWrapper nArrayData -> nArrayData
    com.jogamp.opengl.util.GLArrayDataWrapper tArrayData -> tArrayData
    boolean sealed -> sealed
    boolean sealedGL -> sealedGL
    boolean bufferEnabled -> bufferEnabled
    boolean bufferWritten -> bufferWritten
    boolean bufferWrittenOnce -> bufferWrittenOnce
    boolean glslLocationSet -> glslLocationSet
    void <init>(int,int,int,int,int,int,int,int,int,boolean,int,com.jogamp.opengl.util.glsl.ShaderState,int) -> <init>
    int getResizeElementCount() -> getResizeElementCount
    void setResizeElementCount(int) -> setResizeElementCount
    boolean getUseVBO() -> getUseVBO
    com.jogamp.opengl.util.ImmModeSink$VBOSet regenerate(javax.media.opengl.GL) -> regenerate
    void checkSeal(boolean) -> checkSeal
    void useShaderProgram(javax.media.opengl.GL2ES2,boolean) -> useShaderProgram
    void draw(javax.media.opengl.GL,java.nio.Buffer,boolean,int) -> draw
    void glVertexv(java.nio.Buffer) -> glVertexv
    void glNormalv(java.nio.Buffer) -> glNormalv
    void glColorv(java.nio.Buffer) -> glColorv
    void glTexCoordv(java.nio.Buffer) -> glTexCoordv
    void glVertex2b(byte,byte) -> glVertex2b
    void glVertex3b(byte,byte,byte) -> glVertex3b
    void glVertex2s(short,short) -> glVertex2s
    void glVertex3s(short,short,short) -> glVertex3s
    void glVertex2f(float,float) -> glVertex2f
    void glVertex3f(float,float,float) -> glVertex3f
    void glNormal3b(byte,byte,byte) -> glNormal3b
    void glNormal3s(short,short,short) -> glNormal3s
    void glNormal3f(float,float,float) -> glNormal3f
    void glColor3b(byte,byte,byte) -> glColor3b
    void glColor3ub(byte,byte,byte) -> glColor3ub
    void glColor4b(byte,byte,byte,byte) -> glColor4b
    void glColor4ub(byte,byte,byte,byte) -> glColor4ub
    void glColor3s(short,short,short) -> glColor3s
    void glColor4s(short,short,short,short) -> glColor4s
    void glColor3f(float,float,float) -> glColor3f
    void glColor4f(float,float,float,float) -> glColor4f
    void glTexCoord2b(byte,byte) -> glTexCoord2b
    void glTexCoord3b(byte,byte,byte) -> glTexCoord3b
    void glTexCoord2s(short,short) -> glTexCoord2s
    void glTexCoord3s(short,short,short) -> glTexCoord3s
    void glTexCoord2f(float,float) -> glTexCoord2f
    void glTexCoord3f(float,float,float) -> glTexCoord3f
    void rewind() -> rewind
    void setShaderProgram(int) -> setShaderProgram
    boolean resetGLSLArrayLocation(javax.media.opengl.GL2ES2) -> resetGLSLArrayLocation
    void destroy(javax.media.opengl.GL) -> destroy
    void reset(javax.media.opengl.GL) -> reset
    void reset() -> reset
    void seal(javax.media.opengl.GL,boolean) -> seal
    void seal(boolean) -> seal
    void enableBuffer(javax.media.opengl.GL,boolean) -> enableBuffer
    void writeBuffer(javax.media.opengl.GL) -> writeBuffer
    void enableBufferFixed(javax.media.opengl.GL,boolean) -> enableBufferFixed
    void enableBufferGLSLShaderState(javax.media.opengl.GL,boolean) -> enableBufferGLSLShaderState
    void enableBufferGLSLSimple(javax.media.opengl.GL,boolean) -> enableBufferGLSLSimple
    java.lang.String toString() -> toString
    java.lang.String getElemUseCountStr() -> getElemUseCountStr
    boolean fitElementInBuffer(int) -> fitElementInBuffer
    boolean reallocateBuffer(int) -> reallocateBuffer
    boolean growBuffer(int) -> growBuffer
    void countAndPadding(int,int) -> countAndPadding
    int access$002(com.jogamp.opengl.util.ImmModeSink$VBOSet,int) -> access$002
    int access$102(com.jogamp.opengl.util.ImmModeSink$VBOSet,int) -> access$102
    int access$000(com.jogamp.opengl.util.ImmModeSink$VBOSet) -> access$000
    int access$100(com.jogamp.opengl.util.ImmModeSink$VBOSet) -> access$100
com.jogamp.opengl.util.PNGPixelRect -> com.jogamp.opengl.util.PNGPixelRect:
    boolean DEBUG -> DEBUG
    double[] dpi -> dpi
    com.jogamp.opengl.util.PNGPixelRect read(java.io.InputStream,javax.media.nativewindow.util.PixelFormat,boolean,int,boolean) -> read
    int getPixelLUMToAny(javax.media.nativewindow.util.PixelFormat,java.nio.ByteBuffer,int,byte,byte) -> getPixelLUMToAny
    int getPixelRGBA8ToAny(javax.media.nativewindow.util.PixelFormat,java.nio.ByteBuffer,int,int[],int,boolean) -> getPixelRGBA8ToAny
    int getPixelRGBSame(java.nio.ByteBuffer,int,int[],int,int) -> getPixelRGBSame
    int setPixelRGBA8(jogamp.opengl.util.pngj.ImageLine,int,java.nio.ByteBuffer,int,int,boolean) -> setPixelRGBA8
    void setPixelRGBA8(javax.media.nativewindow.util.PixelFormat,jogamp.opengl.util.pngj.ImageLine,int,int,int,boolean) -> setPixelRGBA8
    void <init>(javax.media.nativewindow.util.PixelFormat,javax.media.nativewindow.util.DimensionImmutable,int,boolean,java.nio.ByteBuffer,double,double) -> <init>
    void <init>(javax.media.nativewindow.util.PixelRectangle,double,double) -> <init>
    double[] getDpi() -> getDpi
    void write(java.io.OutputStream,boolean) -> write
    void write(javax.media.nativewindow.util.PixelFormat,javax.media.nativewindow.util.DimensionImmutable,int,boolean,java.nio.IntBuffer,double,double,java.io.OutputStream,boolean) -> write
    void <clinit>() -> <clinit>
com.jogamp.opengl.util.PNGPixelRect$1 -> com.jogamp.opengl.util.PNGPixelRect$1:
    int[] $SwitchMap$javax$media$nativewindow$util$PixelFormat -> $SwitchMap$javax$media$nativewindow$util$PixelFormat
    void <clinit>() -> <clinit>
com.jogamp.opengl.util.TileRenderer -> com.jogamp.opengl.util.TileRenderer:
    int TR_IMAGE_CLIPPING_WIDTH -> TR_IMAGE_CLIPPING_WIDTH
    int TR_IMAGE_CLIPPING_HEIGHT -> TR_IMAGE_CLIPPING_HEIGHT
    int TR_TILE_WIDTH -> TR_TILE_WIDTH
    int TR_TILE_HEIGHT -> TR_TILE_HEIGHT
    int TR_TILE_BORDER -> TR_TILE_BORDER
    int TR_TILE_X_OFFSET -> TR_TILE_X_OFFSET
    int TR_TILE_Y_OFFSET -> TR_TILE_Y_OFFSET
    int TR_ROWS -> TR_ROWS
    int TR_COLUMNS -> TR_COLUMNS
    int TR_CURRENT_TILE_NUM -> TR_CURRENT_TILE_NUM
    int TR_CURRENT_ROW -> TR_CURRENT_ROW
    int TR_CURRENT_COLUMN -> TR_CURRENT_COLUMN
    int TR_ROW_ORDER -> TR_ROW_ORDER
    int TR_TOP_TO_BOTTOM -> TR_TOP_TO_BOTTOM
    int TR_BOTTOM_TO_TOP -> TR_BOTTOM_TO_TOP
    int DEFAULT_TILE_WIDTH -> DEFAULT_TILE_WIDTH
    int DEFAULT_TILE_HEIGHT -> DEFAULT_TILE_HEIGHT
    int DEFAULT_TILE_BORDER -> DEFAULT_TILE_BORDER
    javax.media.nativewindow.util.Dimension tileSize -> tileSize
    javax.media.nativewindow.util.Dimension tileSizeNB -> tileSizeNB
    boolean isInit -> isInit
    javax.media.nativewindow.util.Dimension imageClippingDim -> imageClippingDim
    int tileBorder -> tileBorder
    int rowOrder -> rowOrder
    int rows -> rows
    int columns -> columns
    int currentTile -> currentTile
    int currentRow -> currentRow
    int currentColumn -> currentColumn
    int offsetX -> offsetX
    int offsetY -> offsetY
    boolean $assertionsDisabled -> $assertionsDisabled
    java.lang.StringBuilder tileDetails(java.lang.StringBuilder) -> tileDetails
    void <init>() -> <init>
    void setImageSize(int,int) -> setImageSize
    void clipImageSize(int,int) -> clipImageSize
    javax.media.nativewindow.util.DimensionImmutable getClippedImageSize() -> getClippedImageSize
    void setTileSize(int,int,int) -> setTileSize
    void setTileOffset(int,int) -> setTileOffset
    void reset() -> reset
    int getCurrentTile() -> getCurrentTile
    int getParam(int) -> getParam
    void setRowOrder(int) -> setRowOrder
    boolean isSetup() -> isSetup
    boolean eot() -> eot
    void beginTile(javax.media.opengl.GL) -> beginTile
    void endTile(javax.media.opengl.GL) -> endTile
    void <clinit>() -> <clinit>
com.jogamp.opengl.util.TileRendererBase -> com.jogamp.opengl.util.TileRendererBase:
    int TR_IMAGE_WIDTH -> TR_IMAGE_WIDTH
    int TR_IMAGE_HEIGHT -> TR_IMAGE_HEIGHT
    int TR_CURRENT_TILE_X_POS -> TR_CURRENT_TILE_X_POS
    int TR_CURRENT_TILE_Y_POS -> TR_CURRENT_TILE_Y_POS
    int TR_CURRENT_TILE_WIDTH -> TR_CURRENT_TILE_WIDTH
    int TR_CURRENT_TILE_HEIGHT -> TR_CURRENT_TILE_HEIGHT
    boolean DEBUG -> DEBUG
    javax.media.nativewindow.util.Dimension imageSize -> imageSize
    com.jogamp.opengl.util.GLPixelStorageModes psm -> psm
    com.jogamp.opengl.util.GLPixelBuffer imageBuffer -> imageBuffer
    com.jogamp.opengl.util.GLPixelBuffer tileBuffer -> tileBuffer
    boolean beginCalled -> beginCalled
    int currentTileXPos -> currentTileXPos
    int currentTileYPos -> currentTileYPos
    int currentTileWidth -> currentTileWidth
    int currentTileHeight -> currentTileHeight
    javax.media.opengl.GLAutoDrawable glad -> glad
    boolean gladRequiresPreSwap -> gladRequiresPreSwap
    boolean gladAutoSwapBufferMode -> gladAutoSwapBufferMode
    javax.media.opengl.GLEventListener[] listeners -> listeners
    boolean[] listenersInit -> listenersInit
    javax.media.opengl.GLEventListener glEventListenerPre -> glEventListenerPre
    javax.media.opengl.GLEventListener glEventListenerPost -> glEventListenerPost
    javax.media.opengl.GLEventListener tiledGLEL -> tiledGLEL
    java.lang.String hashStr(java.lang.Object) -> hashStr
    java.lang.StringBuilder tileDetails(java.lang.StringBuilder) -> tileDetails
    java.lang.StringBuilder toString(java.lang.StringBuilder) -> toString
    java.lang.String toString() -> toString
    void <init>() -> <init>
    int getParam(int) -> getParam
    void setTileBuffer(com.jogamp.opengl.util.GLPixelBuffer) -> setTileBuffer
    com.jogamp.opengl.util.GLPixelBuffer getTileBuffer() -> getTileBuffer
    void setImageSize(int,int) -> setImageSize
    javax.media.nativewindow.util.DimensionImmutable getImageSize() -> getImageSize
    void setImageBuffer(com.jogamp.opengl.util.GLPixelBuffer) -> setImageBuffer
    com.jogamp.opengl.util.GLPixelBuffer getImageBuffer() -> getImageBuffer
    void validateGL(javax.media.opengl.GL) -> validateGL
    boolean isSetup() -> isSetup
    boolean eot() -> eot
    void reset() -> reset
    void beginTile(javax.media.opengl.GL) -> beginTile
    void endTile(javax.media.opengl.GL) -> endTile
    boolean reqPreSwapBuffers(javax.media.opengl.GLCapabilitiesImmutable) -> reqPreSwapBuffers
    void attachAutoDrawable(javax.media.opengl.GLAutoDrawable) -> attachAutoDrawable
    javax.media.opengl.GLAutoDrawable getAttachedDrawable() -> getAttachedDrawable
    void detachAutoDrawable() -> detachAutoDrawable
    void setGLEventListener(javax.media.opengl.GLEventListener,javax.media.opengl.GLEventListener) -> setGLEventListener
    void display() -> display
    void <clinit>() -> <clinit>
com.jogamp.opengl.util.TileRendererBase$1 -> com.jogamp.opengl.util.TileRendererBase$1:
    com.jogamp.opengl.util.TileRenderer tileRenderer -> tileRenderer
    com.jogamp.opengl.util.TileRendererBase this$0 -> this$0
    void <init>(com.jogamp.opengl.util.TileRendererBase) -> <init>
    void init(javax.media.opengl.GLAutoDrawable) -> init
    void dispose(javax.media.opengl.GLAutoDrawable) -> dispose
    void display(javax.media.opengl.GLAutoDrawable) -> display
    void reshape(javax.media.opengl.GLAutoDrawable,int,int,int,int) -> reshape
com.jogamp.opengl.util.TileRendererBase$TileRendererListener -> com.jogamp.opengl.util.TileRendererBase$TileRendererListener:
    void addTileRendererNotify(com.jogamp.opengl.util.TileRendererBase) -> addTileRendererNotify
    void removeTileRendererNotify(com.jogamp.opengl.util.TileRendererBase) -> removeTileRendererNotify
    void reshapeTile(com.jogamp.opengl.util.TileRendererBase,int,int,int,int,int,int) -> reshapeTile
    void startTileRendering(com.jogamp.opengl.util.TileRendererBase) -> startTileRendering
    void endTileRendering(com.jogamp.opengl.util.TileRendererBase) -> endTileRendering
com.jogamp.opengl.util.awt.AWTGLPixelBuffer -> com.jogamp.opengl.util.awt.AWTGLPixelBuffer:
    com.jogamp.opengl.util.GLPixelBuffer$GLPixelAttributes awtPixelAttributesIntRGBA4 -> awtPixelAttributesIntRGBA4
    com.jogamp.opengl.util.GLPixelBuffer$GLPixelAttributes awtPixelAttributesIntRGB3 -> awtPixelAttributesIntRGB3
    java.awt.image.BufferedImage image -> image
    void <init>(com.jogamp.opengl.util.GLPixelBuffer$GLPixelAttributes,int,int,int,boolean,java.awt.image.BufferedImage,java.nio.Buffer,boolean) -> <init>
    void dispose() -> dispose
    java.awt.image.BufferedImage getAlignedImage(int,int) -> getAlignedImage
    boolean isDataBufferSource(java.awt.image.BufferedImage) -> isDataBufferSource
    java.lang.StringBuilder toString(java.lang.StringBuilder) -> toString
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.jogamp.opengl.util.awt.AWTGLPixelBuffer$AWTGLPixelBufferProvider -> com.jogamp.opengl.util.awt.AWTGLPixelBuffer$AWTGLPixelBufferProvider:
    boolean allowRowStride -> allowRowStride
    void <init>(boolean) -> <init>
    boolean getAllowRowStride() -> getAllowRowStride
    com.jogamp.opengl.util.GLPixelBuffer$GLPixelAttributes getAttributes(javax.media.opengl.GL,int) -> getAttributes
    com.jogamp.opengl.util.awt.AWTGLPixelBuffer allocate(javax.media.opengl.GL,com.jogamp.opengl.util.GLPixelBuffer$GLPixelAttributes,int,int,int,boolean,int) -> allocate
    com.jogamp.opengl.util.GLPixelBuffer allocate(javax.media.opengl.GL,com.jogamp.opengl.util.GLPixelBuffer$GLPixelAttributes,int,int,int,boolean,int) -> allocate
com.jogamp.opengl.util.awt.ImageUtil -> com.jogamp.opengl.util.awt.ImageUtil:
    void <init>() -> <init>
    void flipImageVertically(java.awt.image.BufferedImage) -> flipImageVertically
    java.awt.image.BufferedImage createCompatibleImage(int,int) -> createCompatibleImage
    java.awt.image.BufferedImage createThumbnail(java.awt.image.BufferedImage,int) -> createThumbnail
com.jogamp.opengl.util.awt.TextRenderer -> com.jogamp.opengl.util.awt.TextRenderer:
    boolean DEBUG -> DEBUG
    boolean DISABLE_GLYPH_CACHE -> DISABLE_GLYPH_CACHE
    boolean DRAW_BBOXES -> DRAW_BBOXES
    int kSize -> kSize
    int CYCLES_PER_FLUSH -> CYCLES_PER_FLUSH
    float MAX_VERTICAL_FRAGMENTATION -> MAX_VERTICAL_FRAGMENTATION
    int kQuadsPerBuffer -> kQuadsPerBuffer
    int kCoordsPerVertVerts -> kCoordsPerVertVerts
    int kCoordsPerVertTex -> kCoordsPerVertTex
    int kVertsPerQuad -> kVertsPerQuad
    int kTotalBufferSizeVerts -> kTotalBufferSizeVerts
    int kTotalBufferSizeCoordsVerts -> kTotalBufferSizeCoordsVerts
    int kTotalBufferSizeCoordsTex -> kTotalBufferSizeCoordsTex
    int kTotalBufferSizeBytesVerts -> kTotalBufferSizeBytesVerts
    int kTotalBufferSizeBytesTex -> kTotalBufferSizeBytesTex
    int kSizeInBytes_OneVertices_VertexData -> kSizeInBytes_OneVertices_VertexData
    int kSizeInBytes_OneVertices_TexData -> kSizeInBytes_OneVertices_TexData
    java.awt.Font font -> font
    boolean antialiased -> antialiased
    boolean useFractionalMetrics -> useFractionalMetrics
    boolean mipmap -> mipmap
    com.jogamp.opengl.util.packrect.RectanglePacker packer -> packer
    boolean haveMaxSize -> haveMaxSize
    com.jogamp.opengl.util.awt.TextRenderer$RenderDelegate renderDelegate -> renderDelegate
    com.jogamp.opengl.util.awt.TextureRenderer cachedBackingStore -> cachedBackingStore
    java.awt.Graphics2D cachedGraphics -> cachedGraphics
    java.awt.font.FontRenderContext cachedFontRenderContext -> cachedFontRenderContext
    java.util.Map stringLocations -> stringLocations
    com.jogamp.opengl.util.awt.TextRenderer$GlyphProducer mGlyphProducer -> mGlyphProducer
    int numRenderCycles -> numRenderCycles
    boolean inBeginEndPair -> inBeginEndPair
    boolean isOrthoMode -> isOrthoMode
    int beginRenderingWidth -> beginRenderingWidth
    int beginRenderingHeight -> beginRenderingHeight
    boolean beginRenderingDepthTestDisabled -> beginRenderingDepthTestDisabled
    boolean haveCachedColor -> haveCachedColor
    float cachedR -> cachedR
    float cachedG -> cachedG
    float cachedB -> cachedB
    float cachedA -> cachedA
    java.awt.Color cachedColor -> cachedColor
    boolean needToResetColor -> needToResetColor
    java.awt.Frame dbgFrame -> dbgFrame
    boolean debugged -> debugged
    com.jogamp.opengl.util.awt.TextRenderer$Pipelined_QuadRenderer mPipelinedQuadRenderer -> mPipelinedQuadRenderer
    boolean useVertexArrays -> useVertexArrays
    boolean isExtensionAvailable_GL_VERSION_1_5 -> isExtensionAvailable_GL_VERSION_1_5
    boolean checkFor_isExtensionAvailable_GL_VERSION_1_5 -> checkFor_isExtensionAvailable_GL_VERSION_1_5
    boolean smoothing -> smoothing
    char[] singleUnicode -> singleUnicode
    void <init>(java.awt.Font) -> <init>
    void <init>(java.awt.Font,boolean) -> <init>
    void <init>(java.awt.Font,boolean,boolean) -> <init>
    void <init>(java.awt.Font,boolean,boolean,com.jogamp.opengl.util.awt.TextRenderer$RenderDelegate) -> <init>
    void <init>(java.awt.Font,boolean,boolean,com.jogamp.opengl.util.awt.TextRenderer$RenderDelegate,boolean) -> <init>
    java.awt.geom.Rectangle2D getBounds(java.lang.String) -> getBounds
    java.awt.geom.Rectangle2D getBounds(java.lang.CharSequence) -> getBounds
    java.awt.Font getFont() -> getFont
    java.awt.font.FontRenderContext getFontRenderContext() -> getFontRenderContext
    void beginRendering(int,int) -> beginRendering
    void beginRendering(int,int,boolean) -> beginRendering
    void begin3DRendering() -> begin3DRendering
    void setColor(java.awt.Color) -> setColor
    void setColor(float,float,float,float) -> setColor
    void draw(java.lang.CharSequence,int,int) -> draw
    void draw(java.lang.String,int,int) -> draw
    void draw3D(java.lang.CharSequence,float,float,float,float) -> draw3D
    void draw3D(java.lang.String,float,float,float,float) -> draw3D
    float getCharWidth(char) -> getCharWidth
    void flush() -> flush
    void endRendering() -> endRendering
    void end3DRendering() -> end3DRendering
    void dispose() -> dispose
    java.awt.geom.Rectangle2D preNormalize(java.awt.geom.Rectangle2D) -> preNormalize
    java.awt.geom.Rectangle2D normalize(java.awt.geom.Rectangle2D) -> normalize
    com.jogamp.opengl.util.awt.TextureRenderer getBackingStore() -> getBackingStore
    java.awt.Graphics2D getGraphics2D() -> getGraphics2D
    void beginRendering(boolean,int,int,boolean) -> beginRendering
    void endRendering(boolean) -> endRendering
    void clearUnusedEntries() -> clearUnusedEntries
    void internal_draw3D(java.lang.CharSequence,float,float,float,float) -> internal_draw3D
    void flushGlyphPipeline() -> flushGlyphPipeline
    void draw3D_ROBUST(java.lang.CharSequence,float,float,float,float) -> draw3D_ROBUST
    void debug(javax.media.opengl.GL) -> debug
    void setUseVertexArrays(boolean) -> setUseVertexArrays
    boolean getUseVertexArrays() -> getUseVertexArrays
    void setSmoothing(boolean) -> setSmoothing
    boolean getSmoothing() -> getSmoothing
    boolean is15Available(javax.media.opengl.GL) -> is15Available
    com.jogamp.opengl.util.awt.TextRenderer$RenderDelegate access$100(com.jogamp.opengl.util.awt.TextRenderer) -> access$100
    boolean access$200(com.jogamp.opengl.util.awt.TextRenderer) -> access$200
    boolean access$300(com.jogamp.opengl.util.awt.TextRenderer) -> access$300
    boolean access$400() -> access$400
    boolean access$500(com.jogamp.opengl.util.awt.TextRenderer) -> access$500
    void access$600(com.jogamp.opengl.util.awt.TextRenderer) -> access$600
    com.jogamp.opengl.util.packrect.RectanglePacker access$700(com.jogamp.opengl.util.awt.TextRenderer) -> access$700
    java.util.Map access$800(com.jogamp.opengl.util.awt.TextRenderer) -> access$800
    com.jogamp.opengl.util.awt.TextRenderer$GlyphProducer access$900(com.jogamp.opengl.util.awt.TextRenderer) -> access$900
    boolean access$1000(com.jogamp.opengl.util.awt.TextRenderer,javax.media.opengl.GL) -> access$1000
    boolean access$1102(com.jogamp.opengl.util.awt.TextRenderer,boolean) -> access$1102
    boolean access$1200(com.jogamp.opengl.util.awt.TextRenderer) -> access$1200
    int access$1300(com.jogamp.opengl.util.awt.TextRenderer) -> access$1300
    int access$1400(com.jogamp.opengl.util.awt.TextRenderer) -> access$1400
    boolean access$1500(com.jogamp.opengl.util.awt.TextRenderer) -> access$1500
    boolean access$1600(com.jogamp.opengl.util.awt.TextRenderer) -> access$1600
    java.awt.Color access$1700(com.jogamp.opengl.util.awt.TextRenderer) -> access$1700
    float access$1800(com.jogamp.opengl.util.awt.TextRenderer) -> access$1800
    float access$1900(com.jogamp.opengl.util.awt.TextRenderer) -> access$1900
    float access$2000(com.jogamp.opengl.util.awt.TextRenderer) -> access$2000
    float access$2100(com.jogamp.opengl.util.awt.TextRenderer) -> access$2100
    boolean access$2202(com.jogamp.opengl.util.awt.TextRenderer,boolean) -> access$2202
    void access$2300(com.jogamp.opengl.util.awt.TextRenderer,java.lang.CharSequence,float,float,float,float) -> access$2300
    java.awt.Font access$2400(com.jogamp.opengl.util.awt.TextRenderer) -> access$2400
    com.jogamp.opengl.util.awt.TextureRenderer access$2500(com.jogamp.opengl.util.awt.TextRenderer) -> access$2500
    java.awt.geom.Rectangle2D access$2600(java.awt.geom.Rectangle2D) -> access$2600
    java.awt.geom.Rectangle2D access$2700(com.jogamp.opengl.util.awt.TextRenderer,java.awt.geom.Rectangle2D) -> access$2700
    java.awt.Graphics2D access$2800(com.jogamp.opengl.util.awt.TextRenderer) -> access$2800
    char[] access$2900(com.jogamp.opengl.util.awt.TextRenderer) -> access$2900
    boolean access$3000(com.jogamp.opengl.util.awt.TextRenderer) -> access$3000
    void <clinit>() -> <clinit>
com.jogamp.opengl.util.awt.TextRenderer$1 -> com.jogamp.opengl.util.awt.TextRenderer$1:
    java.util.List val$deadRects -> val$deadRects
    com.jogamp.opengl.util.awt.TextRenderer this$0 -> this$0
    void <init>(com.jogamp.opengl.util.awt.TextRenderer,java.util.List) -> <init>
    void visit(com.jogamp.opengl.util.packrect.Rect) -> visit
com.jogamp.opengl.util.awt.TextRenderer$2 -> com.jogamp.opengl.util.awt.TextRenderer$2:
    com.jogamp.opengl.util.FPSAnimator val$anim -> val$anim
    com.jogamp.opengl.util.awt.TextRenderer this$0 -> this$0
    void <init>(com.jogamp.opengl.util.awt.TextRenderer,com.jogamp.opengl.util.FPSAnimator) -> <init>
    void windowClosing(java.awt.event.WindowEvent) -> windowClosing
com.jogamp.opengl.util.awt.TextRenderer$2$1 -> com.jogamp.opengl.util.awt.TextRenderer$2$1:
    com.jogamp.opengl.util.awt.TextRenderer$2 this$1 -> this$1
    void <init>(com.jogamp.opengl.util.awt.TextRenderer$2) -> <init>
    void run() -> run
com.jogamp.opengl.util.awt.TextRenderer$CharSequenceIterator -> com.jogamp.opengl.util.awt.TextRenderer$CharSequenceIterator:
    java.lang.CharSequence mSequence -> mSequence
    int mLength -> mLength
    int mCurrentIndex -> mCurrentIndex
    void <init>() -> <init>
    void <init>(java.lang.CharSequence) -> <init>
    void initFromCharSequence(java.lang.CharSequence) -> initFromCharSequence
    char last() -> last
    char current() -> current
    char next() -> next
    char previous() -> previous
    char setIndex(int) -> setIndex
    int getBeginIndex() -> getBeginIndex
    int getEndIndex() -> getEndIndex
    int getIndex() -> getIndex
    java.lang.Object clone() -> clone
    char first() -> first
com.jogamp.opengl.util.awt.TextRenderer$CharacterCache -> com.jogamp.opengl.util.awt.TextRenderer$CharacterCache:
    java.lang.Character[] cache -> cache
    void <init>() -> <init>
    java.lang.Character valueOf(char) -> valueOf
    void <clinit>() -> <clinit>
com.jogamp.opengl.util.awt.TextRenderer$DebugListener -> com.jogamp.opengl.util.awt.TextRenderer$DebugListener:
    javax.media.opengl.glu.GLU glu -> glu
    java.awt.Frame frame -> frame
    com.jogamp.opengl.util.awt.TextRenderer this$0 -> this$0
    void <init>(com.jogamp.opengl.util.awt.TextRenderer,javax.media.opengl.GL,java.awt.Frame) -> <init>
    void display(javax.media.opengl.GLAutoDrawable) -> display
    void dispose(javax.media.opengl.GLAutoDrawable) -> dispose
    void init(javax.media.opengl.GLAutoDrawable) -> init
    void reshape(javax.media.opengl.GLAutoDrawable,int,int,int,int) -> reshape
    void displayChanged(javax.media.opengl.GLAutoDrawable,boolean,boolean) -> displayChanged
    java.awt.Frame access$3100(com.jogamp.opengl.util.awt.TextRenderer$DebugListener) -> access$3100
com.jogamp.opengl.util.awt.TextRenderer$DebugListener$1 -> com.jogamp.opengl.util.awt.TextRenderer$DebugListener$1:
    int val$w -> val$w
    int val$h -> val$h
    com.jogamp.opengl.util.awt.TextRenderer$DebugListener this$1 -> this$1
    void <init>(com.jogamp.opengl.util.awt.TextRenderer$DebugListener,int,int) -> <init>
    void run() -> run
com.jogamp.opengl.util.awt.TextRenderer$DefaultRenderDelegate -> com.jogamp.opengl.util.awt.TextRenderer$DefaultRenderDelegate:
    void <init>() -> <init>
    boolean intensityOnly() -> intensityOnly
    java.awt.geom.Rectangle2D getBounds(java.lang.CharSequence,java.awt.Font,java.awt.font.FontRenderContext) -> getBounds
    java.awt.geom.Rectangle2D getBounds(java.lang.String,java.awt.Font,java.awt.font.FontRenderContext) -> getBounds
    java.awt.geom.Rectangle2D getBounds(java.awt.font.GlyphVector,java.awt.font.FontRenderContext) -> getBounds
    void drawGlyphVector(java.awt.Graphics2D,java.awt.font.GlyphVector,int,int) -> drawGlyphVector
    void draw(java.awt.Graphics2D,java.lang.String,int,int) -> draw
com.jogamp.opengl.util.awt.TextRenderer$Glyph -> com.jogamp.opengl.util.awt.TextRenderer$Glyph:
    int unicodeID -> unicodeID
    int glyphCode -> glyphCode
    com.jogamp.opengl.util.awt.TextRenderer$GlyphProducer producer -> producer
    float advance -> advance
    java.awt.font.GlyphVector singleUnicodeGlyphVector -> singleUnicodeGlyphVector
    com.jogamp.opengl.util.packrect.Rect glyphRectForTextureMapping -> glyphRectForTextureMapping
    java.lang.String str -> str
    boolean needAdvance -> needAdvance
    com.jogamp.opengl.util.awt.TextRenderer this$0 -> this$0
    void <init>(com.jogamp.opengl.util.awt.TextRenderer,int,int,float,java.awt.font.GlyphVector,com.jogamp.opengl.util.awt.TextRenderer$GlyphProducer) -> <init>
    void <init>(com.jogamp.opengl.util.awt.TextRenderer,java.lang.String,boolean) -> <init>
    int getUnicodeID() -> getUnicodeID
    int getGlyphCode() -> getGlyphCode
    float getAdvance() -> getAdvance
    float draw3D(float,float,float,float) -> draw3D
    void clear() -> clear
    void upload() -> upload
    java.awt.font.GlyphVector getGlyphVector() -> getGlyphVector
com.jogamp.opengl.util.awt.TextRenderer$GlyphProducer -> com.jogamp.opengl.util.awt.TextRenderer$GlyphProducer:
    int undefined -> undefined
    java.awt.font.FontRenderContext fontRenderContext -> fontRenderContext
    java.util.List glyphsOutput -> glyphsOutput
    java.util.HashMap fullGlyphVectorCache -> fullGlyphVectorCache
    java.util.HashMap glyphMetricsCache -> glyphMetricsCache
    int[] unicodes2Glyphs -> unicodes2Glyphs
    com.jogamp.opengl.util.awt.TextRenderer$Glyph[] glyphCache -> glyphCache
    com.jogamp.opengl.util.awt.TextRenderer$CharSequenceIterator iter -> iter
    com.jogamp.opengl.util.awt.TextRenderer this$0 -> this$0
    void <init>(com.jogamp.opengl.util.awt.TextRenderer,int) -> <init>
    java.util.List getGlyphs(java.lang.CharSequence) -> getGlyphs
    void clearCacheEntry(int) -> clearCacheEntry
    void clearAllCacheEntries() -> clearAllCacheEntries
    void register(com.jogamp.opengl.util.awt.TextRenderer$Glyph) -> register
    float getGlyphPixelWidth(char) -> getGlyphPixelWidth
    com.jogamp.opengl.util.awt.TextRenderer$Glyph getGlyph(java.lang.CharSequence,java.awt.font.GlyphMetrics,int) -> getGlyph
    com.jogamp.opengl.util.awt.TextRenderer$Glyph getGlyph(int) -> getGlyph
    com.jogamp.opengl.util.awt.TextRenderer$Glyph getGlyph(int,java.awt.font.GlyphVector,java.awt.font.GlyphMetrics) -> getGlyph
com.jogamp.opengl.util.awt.TextRenderer$Manager -> com.jogamp.opengl.util.awt.TextRenderer$Manager:
    java.awt.Graphics2D g -> g
    com.jogamp.opengl.util.awt.TextRenderer this$0 -> this$0
    void <init>(com.jogamp.opengl.util.awt.TextRenderer) -> <init>
    java.lang.Object allocateBackingStore(int,int) -> allocateBackingStore
    void deleteBackingStore(java.lang.Object) -> deleteBackingStore
    boolean preExpand(com.jogamp.opengl.util.packrect.Rect,int) -> preExpand
    boolean additionFailed(com.jogamp.opengl.util.packrect.Rect,int) -> additionFailed
    boolean canCompact() -> canCompact
    void beginMovement(java.lang.Object,java.lang.Object) -> beginMovement
    void move(java.lang.Object,com.jogamp.opengl.util.packrect.Rect,java.lang.Object,com.jogamp.opengl.util.packrect.Rect) -> move
    void endMovement(java.lang.Object,java.lang.Object) -> endMovement
com.jogamp.opengl.util.awt.TextRenderer$Pipelined_QuadRenderer -> com.jogamp.opengl.util.awt.TextRenderer$Pipelined_QuadRenderer:
    int mOutstandingGlyphsVerticesPipeline -> mOutstandingGlyphsVerticesPipeline
    java.nio.FloatBuffer mTexCoords -> mTexCoords
    java.nio.FloatBuffer mVertCoords -> mVertCoords
    boolean usingVBOs -> usingVBOs
    int mVBO_For_ResuableTileVertices -> mVBO_For_ResuableTileVertices
    int mVBO_For_ResuableTileTexCoords -> mVBO_For_ResuableTileTexCoords
    com.jogamp.opengl.util.awt.TextRenderer this$0 -> this$0
    void <init>(com.jogamp.opengl.util.awt.TextRenderer) -> <init>
    void glTexCoord2f(float,float) -> glTexCoord2f
    void glVertex3f(float,float,float) -> glVertex3f
    void draw() -> draw
    void drawVertexArrays() -> drawVertexArrays
    void drawIMMEDIATE() -> drawIMMEDIATE
    void access$000(com.jogamp.opengl.util.awt.TextRenderer$Pipelined_QuadRenderer) -> access$000
com.jogamp.opengl.util.awt.TextRenderer$RenderDelegate -> com.jogamp.opengl.util.awt.TextRenderer$RenderDelegate:
    boolean intensityOnly() -> intensityOnly
    java.awt.geom.Rectangle2D getBounds(java.lang.String,java.awt.Font,java.awt.font.FontRenderContext) -> getBounds
    java.awt.geom.Rectangle2D getBounds(java.lang.CharSequence,java.awt.Font,java.awt.font.FontRenderContext) -> getBounds
    java.awt.geom.Rectangle2D getBounds(java.awt.font.GlyphVector,java.awt.font.FontRenderContext) -> getBounds
    void draw(java.awt.Graphics2D,java.lang.String,int,int) -> draw
    void drawGlyphVector(java.awt.Graphics2D,java.awt.font.GlyphVector,int,int) -> drawGlyphVector
com.jogamp.opengl.util.awt.TextRenderer$TextData -> com.jogamp.opengl.util.awt.TextRenderer$TextData:
    java.lang.String str -> str
    int unicodeID -> unicodeID
    java.awt.Point origin -> origin
    java.awt.geom.Rectangle2D origRect -> origRect
    boolean used -> used
    void <init>(java.lang.String,java.awt.Point,java.awt.geom.Rectangle2D,int) -> <init>
    java.lang.String string() -> string
    java.awt.Point origin() -> origin
    int origOriginX() -> origOriginX
    int origOriginY() -> origOriginY
    java.awt.geom.Rectangle2D origRect() -> origRect
    boolean used() -> used
    void markUsed() -> markUsed
    void clearUsed() -> clearUsed
com.jogamp.opengl.util.awt.TextureRenderer -> com.jogamp.opengl.util.awt.TextureRenderer:
    boolean alpha -> alpha
    boolean intensity -> intensity
    boolean mipmap -> mipmap
    boolean smoothing -> smoothing
    boolean smoothingChanged -> smoothingChanged
    java.awt.image.BufferedImage image -> image
    com.jogamp.opengl.util.texture.Texture texture -> texture
    com.jogamp.opengl.util.texture.awt.AWTTextureData textureData -> textureData
    boolean mustReallocateTexture -> mustReallocateTexture
    java.awt.Rectangle dirtyRegion -> dirtyRegion
    javax.media.opengl.glu.gl2.GLUgl2 glu -> glu
    float r -> r
    float g -> g
    float b -> b
    float a -> a
    float[] compArray -> compArray
    void <init>(int,int,boolean) -> <init>
    void <init>(int,int,boolean,boolean) -> <init>
    void <init>(int,int,boolean,boolean,boolean) -> <init>
    com.jogamp.opengl.util.awt.TextureRenderer createAlphaOnlyRenderer(int,int) -> createAlphaOnlyRenderer
    com.jogamp.opengl.util.awt.TextureRenderer createAlphaOnlyRenderer(int,int,boolean) -> createAlphaOnlyRenderer
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    java.awt.Dimension getSize() -> getSize
    java.awt.Dimension getSize(java.awt.Dimension) -> getSize
    void setSize(int,int) -> setSize
    void setSize(java.awt.Dimension) -> setSize
    void setSmoothing(boolean) -> setSmoothing
    boolean getSmoothing() -> getSmoothing
    java.awt.Graphics2D createGraphics() -> createGraphics
    java.awt.Image getImage() -> getImage
    void markDirty(int,int,int,int) -> markDirty
    com.jogamp.opengl.util.texture.Texture getTexture() -> getTexture
    void dispose() -> dispose
    void beginOrthoRendering(int,int) -> beginOrthoRendering
    void beginOrthoRendering(int,int,boolean) -> beginOrthoRendering
    void begin3DRendering() -> begin3DRendering
    void setColor(float,float,float,float) -> setColor
    void setColor(java.awt.Color) -> setColor
    void drawOrthoRect(int,int) -> drawOrthoRect
    void drawOrthoRect(int,int,int,int,int,int) -> drawOrthoRect
    void draw3DRect(float,float,float,int,int,int,int,float) -> draw3DRect
    void endOrthoRendering() -> endOrthoRendering
    void end3DRendering() -> end3DRendering
    boolean isUsingAutoMipmapGeneration() -> isUsingAutoMipmapGeneration
    void beginRendering(boolean,int,int,boolean) -> beginRendering
    void endRendering(boolean) -> endRendering
    void init(int,int) -> init
    void sync(int,int,int,int) -> sync
    boolean ensureTexture() -> ensureTexture
com.jogamp.opengl.util.glsl.ShaderCode -> com.jogamp.opengl.util.glsl.ShaderCode:
    boolean DEBUG_CODE -> DEBUG_CODE
    java.lang.String SUFFIX_VERTEX_SOURCE -> SUFFIX_VERTEX_SOURCE
    java.lang.String SUFFIX_VERTEX_BINARY -> SUFFIX_VERTEX_BINARY
    java.lang.String SUFFIX_GEOMETRY_SOURCE -> SUFFIX_GEOMETRY_SOURCE
    java.lang.String SUFFIX_GEOMETRY_BINARY -> SUFFIX_GEOMETRY_BINARY
    java.lang.String SUFFIX_FRAGMENT_SOURCE -> SUFFIX_FRAGMENT_SOURCE
    java.lang.String SUFFIX_FRAGMENT_BINARY -> SUFFIX_FRAGMENT_BINARY
    java.lang.String SUB_PATH_NVIDIA -> SUB_PATH_NVIDIA
    java.lang.String es2_default_precision_vp -> es2_default_precision_vp
    java.lang.String es2_default_precision_fp -> es2_default_precision_fp
    java.lang.String es3_default_precision_vp -> es3_default_precision_vp
    java.lang.String es3_default_precision_fp -> es3_default_precision_fp
    java.lang.String gl3_default_precision_vp_gp -> gl3_default_precision_vp_gp
    java.lang.String gl3_default_precision_fp -> gl3_default_precision_fp
    java.lang.String REQUIRE -> REQUIRE
    java.lang.String ENABLE -> ENABLE
    java.lang.String DISABLE -> DISABLE
    java.lang.String WARN -> WARN
    java.lang.CharSequence[][] shaderSource -> shaderSource
    java.nio.Buffer shaderBinary -> shaderBinary
    int shaderBinaryFormat -> shaderBinaryFormat
    java.nio.IntBuffer shader -> shader
    int shaderType -> shaderType
    int id -> id
    boolean valid -> valid
    int nextID -> nextID
    void <init>(int,int,java.lang.CharSequence[][]) -> <init>
    void <init>(int,int,int,java.nio.Buffer) -> <init>
    com.jogamp.opengl.util.glsl.ShaderCode create(javax.media.opengl.GL2ES2,int,int,java.lang.Class,java.lang.String[],boolean) -> create
    com.jogamp.opengl.util.glsl.ShaderCode create(int,int,java.lang.Class,int,java.lang.String) -> create
    java.lang.String getFileSuffix(boolean,int) -> getFileSuffix
    java.lang.String getBinarySubPath(int) -> getBinarySubPath
    com.jogamp.opengl.util.glsl.ShaderCode create(javax.media.opengl.GL2ES2,int,int,java.lang.Class,java.lang.String,java.lang.String[],java.lang.String,java.lang.String,boolean) -> create
    com.jogamp.opengl.util.glsl.ShaderCode create(javax.media.opengl.GL2ES2,int,java.lang.Class,java.lang.String,java.lang.String,java.lang.String,boolean) -> create
    int id() -> id
    int shaderType() -> shaderType
    java.lang.String shaderTypeStr() -> shaderTypeStr
    java.lang.String shaderTypeStr(int) -> shaderTypeStr
    int shaderBinaryFormat() -> shaderBinaryFormat
    java.nio.Buffer shaderBinary() -> shaderBinary
    java.lang.CharSequence[][] shaderSource() -> shaderSource
    boolean isValid() -> isValid
    java.nio.IntBuffer shader() -> shader
    boolean compile(javax.media.opengl.GL2ES2) -> compile
    boolean compile(javax.media.opengl.GL2ES2,java.io.PrintStream) -> compile
    void destroy(javax.media.opengl.GL2ES2) -> destroy
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void dumpShaderSource(java.io.PrintStream) -> dumpShaderSource
    int insertShaderSource(int,java.lang.String,int,java.lang.CharSequence) -> insertShaderSource
    int replaceInShaderSource(java.lang.String,java.lang.String) -> replaceInShaderSource
    int insertShaderSource(int,int,java.lang.CharSequence) -> insertShaderSource
    int insertShaderSource(int,int,java.lang.Class,java.lang.String) -> insertShaderSource
    int readShaderSource(java.lang.Class,java.net.URLConnection,java.lang.StringBuilder,int) -> readShaderSource
    void readShaderSource(java.lang.Class,java.net.URLConnection,java.lang.StringBuilder) -> readShaderSource
    java.lang.CharSequence readShaderSource(java.lang.Class,java.lang.String,boolean) -> readShaderSource
    java.nio.ByteBuffer readShaderBinary(java.lang.Class,java.lang.String) -> readShaderBinary
    java.lang.String createExtensionDirective(java.lang.String,java.lang.String) -> createExtensionDirective
    int addGLSLVersion(javax.media.opengl.GL2ES2) -> addGLSLVersion
    int addDefaultShaderPrecision(javax.media.opengl.GL2ES2,int) -> addDefaultShaderPrecision
    boolean requiresDefaultPrecision(javax.media.opengl.GL2ES2) -> requiresDefaultPrecision
    boolean requiresGL3DefaultPrecision(javax.media.opengl.GL2ES2) -> requiresGL3DefaultPrecision
    int defaultShaderCustomization(javax.media.opengl.GL2ES2,boolean,boolean) -> defaultShaderCustomization
    int defaultShaderCustomization(javax.media.opengl.GL2ES2,boolean,java.lang.String) -> defaultShaderCustomization
    int getNextID() -> getNextID
    void <clinit>() -> <clinit>
com.jogamp.opengl.util.glsl.ShaderProgram -> com.jogamp.opengl.util.glsl.ShaderProgram:
    boolean programLinked -> programLinked
    boolean programInUse -> programInUse
    int shaderProgram -> shaderProgram
    java.util.HashSet allShaderCode -> allShaderCode
    java.util.HashSet attachedShaderCode -> attachedShaderCode
    int id -> id
    int nextID -> nextID
    void <init>() -> <init>
    boolean linked() -> linked
    boolean inUse() -> inUse
    int program() -> program
    int id() -> id
    void destroy(javax.media.opengl.GL2ES2) -> destroy
    void release(javax.media.opengl.GL2ES2) -> release
    void release(javax.media.opengl.GL2ES2,boolean) -> release
    void add(com.jogamp.opengl.util.glsl.ShaderCode) -> add
    boolean contains(com.jogamp.opengl.util.glsl.ShaderCode) -> contains
    com.jogamp.opengl.util.glsl.ShaderCode getShader(int) -> getShader
    boolean init(javax.media.opengl.GL2ES2) -> init
    boolean add(javax.media.opengl.GL2ES2,com.jogamp.opengl.util.glsl.ShaderCode,java.io.PrintStream) -> add
    boolean replaceShader(javax.media.opengl.GL2ES2,com.jogamp.opengl.util.glsl.ShaderCode,com.jogamp.opengl.util.glsl.ShaderCode,java.io.PrintStream) -> replaceShader
    boolean link(javax.media.opengl.GL2ES2,java.io.PrintStream) -> link
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.StringBuilder toString(java.lang.StringBuilder) -> toString
    java.lang.String toString() -> toString
    boolean validateProgram(javax.media.opengl.GL2ES2,java.io.PrintStream) -> validateProgram
    void useProgram(javax.media.opengl.GL2ES2,boolean) -> useProgram
    void notifyNotInUse() -> notifyNotInUse
    int getNextID() -> getNextID
    void <clinit>() -> <clinit>
com.jogamp.opengl.util.glsl.ShaderState -> com.jogamp.opengl.util.glsl.ShaderState:
    boolean DEBUG -> DEBUG
    boolean verbose -> verbose
    com.jogamp.opengl.util.glsl.ShaderProgram shaderProgram -> shaderProgram
    java.util.HashMap activedAttribEnabledMap -> activedAttribEnabledMap
    java.util.HashMap activeAttribLocationMap -> activeAttribLocationMap
    java.util.HashMap activeAttribDataMap -> activeAttribDataMap
    java.util.ArrayList managedAttributes -> managedAttributes
    java.util.HashMap activeUniformLocationMap -> activeUniformLocationMap
    java.util.HashMap activeUniformDataMap -> activeUniformDataMap
    java.util.ArrayList managedUniforms -> managedUniforms
    java.util.HashMap attachedObjectsByString -> attachedObjectsByString
    boolean resetAllShaderData -> resetAllShaderData
    void <init>() -> <init>
    boolean verbose() -> verbose
    void setVerbose(boolean) -> setVerbose
    java.lang.Object getAttachedObject(java.lang.String) -> getAttachedObject
    java.lang.Object attachObject(java.lang.String,java.lang.Object) -> attachObject
    java.lang.Object detachObject(java.lang.String) -> detachObject
    void useProgram(javax.media.opengl.GL2ES2,boolean) -> useProgram
    boolean linked() -> linked
    boolean inUse() -> inUse
    boolean attachShaderProgram(javax.media.opengl.GL2ES2,com.jogamp.opengl.util.glsl.ShaderProgram,boolean) -> attachShaderProgram
    com.jogamp.opengl.util.glsl.ShaderProgram shaderProgram() -> shaderProgram
    void destroy(javax.media.opengl.GL2ES2) -> destroy
    void releaseAllData(javax.media.opengl.GL2ES2) -> releaseAllData
    void release(javax.media.opengl.GL2ES2,boolean,boolean,boolean) -> release
    int getCachedAttribLocation(java.lang.String) -> getCachedAttribLocation
    javax.media.opengl.GLArrayData getAttribute(java.lang.String) -> getAttribute
    boolean isActiveAttribute(javax.media.opengl.GLArrayData) -> isActiveAttribute
    void ownAttribute(javax.media.opengl.GLArrayData,boolean) -> ownAttribute
    boolean ownsAttribute(javax.media.opengl.GLArrayData) -> ownsAttribute
    void bindAttribLocation(javax.media.opengl.GL2ES2,int,java.lang.String) -> bindAttribLocation
    void bindAttribLocation(javax.media.opengl.GL2ES2,int,javax.media.opengl.GLArrayData) -> bindAttribLocation
    int getAttribLocation(javax.media.opengl.GL2ES2,java.lang.String) -> getAttribLocation
    int getAttribLocation(javax.media.opengl.GL2ES2,javax.media.opengl.GLArrayData) -> getAttribLocation
    boolean isVertexAttribArrayEnabled(java.lang.String) -> isVertexAttribArrayEnabled
    boolean isVertexAttribArrayEnabled(javax.media.opengl.GLArrayData) -> isVertexAttribArrayEnabled
    boolean enableVertexAttribArray(javax.media.opengl.GL2ES2,java.lang.String,int) -> enableVertexAttribArray
    boolean enableVertexAttribArray(javax.media.opengl.GL2ES2,java.lang.String) -> enableVertexAttribArray
    boolean enableVertexAttribArray(javax.media.opengl.GL2ES2,javax.media.opengl.GLArrayData) -> enableVertexAttribArray
    boolean disableVertexAttribArray(javax.media.opengl.GL2ES2,java.lang.String,int) -> disableVertexAttribArray
    boolean disableVertexAttribArray(javax.media.opengl.GL2ES2,java.lang.String) -> disableVertexAttribArray
    boolean disableVertexAttribArray(javax.media.opengl.GL2ES2,javax.media.opengl.GLArrayData) -> disableVertexAttribArray
    boolean vertexAttribPointer(javax.media.opengl.GL2ES2,javax.media.opengl.GLArrayData) -> vertexAttribPointer
    void releaseAllAttributes(javax.media.opengl.GL2ES2) -> releaseAllAttributes
    void disableAllVertexAttributeArrays(javax.media.opengl.GL2ES2,boolean) -> disableAllVertexAttributeArrays
    void relocateAttribute(javax.media.opengl.GL2ES2,javax.media.opengl.GLArrayData) -> relocateAttribute
    void resetAllAttributes(javax.media.opengl.GL2ES2) -> resetAllAttributes
    void setAttribute(javax.media.opengl.GL2ES2,javax.media.opengl.GLArrayData) -> setAttribute
    void setAllAttributes(javax.media.opengl.GL2ES2) -> setAllAttributes
    int getCachedUniformLocation(java.lang.String) -> getCachedUniformLocation
    void ownUniform(javax.media.opengl.GLUniformData) -> ownUniform
    boolean ownsUniform(javax.media.opengl.GLUniformData) -> ownsUniform
    int getUniformLocation(javax.media.opengl.GL2ES2,java.lang.String) -> getUniformLocation
    int getUniformLocation(javax.media.opengl.GL2ES2,javax.media.opengl.GLUniformData) -> getUniformLocation
    boolean uniform(javax.media.opengl.GL2ES2,javax.media.opengl.GLUniformData) -> uniform
    javax.media.opengl.GLUniformData getUniform(java.lang.String) -> getUniform
    void releaseAllUniforms(javax.media.opengl.GL2ES2) -> releaseAllUniforms
    void resetAllUniforms(javax.media.opengl.GL2ES2) -> resetAllUniforms
    java.lang.StringBuilder toString(java.lang.StringBuilder,boolean) -> toString
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.jogamp.opengl.util.glsl.ShaderUtil -> com.jogamp.opengl.util.glsl.ShaderUtil:
    java.lang.String implObjectKey -> implObjectKey
    void <init>() -> <init>
    java.lang.String getShaderInfoLog(javax.media.opengl.GL,int) -> getShaderInfoLog
    java.lang.String getProgramInfoLog(javax.media.opengl.GL,int) -> getProgramInfoLog
    boolean isShaderStatusValid(javax.media.opengl.GL,int,int,java.io.PrintStream) -> isShaderStatusValid
    boolean isShaderStatusValid(javax.media.opengl.GL,java.nio.IntBuffer,int,java.io.PrintStream) -> isShaderStatusValid
    boolean isProgramStatusValid(javax.media.opengl.GL,int,int) -> isProgramStatusValid
    boolean isProgramLinkStatusValid(javax.media.opengl.GL,int,java.io.PrintStream) -> isProgramLinkStatusValid
    boolean isProgramExecStatusValid(javax.media.opengl.GL,int,java.io.PrintStream) -> isProgramExecStatusValid
    void createShader(javax.media.opengl.GL,int,java.nio.IntBuffer) -> createShader
    java.util.Set getShaderBinaryFormats(javax.media.opengl.GL) -> getShaderBinaryFormats
    boolean isShaderCompilerAvailable(javax.media.opengl.GL) -> isShaderCompilerAvailable
    boolean isGeometryShaderSupported(javax.media.opengl.GL) -> isGeometryShaderSupported
    void shaderSource(javax.media.opengl.GL,int,java.lang.CharSequence[]) -> shaderSource
    void shaderSource(javax.media.opengl.GL,java.nio.IntBuffer,java.lang.CharSequence[][]) -> shaderSource
    void shaderBinary(javax.media.opengl.GL,java.nio.IntBuffer,int,java.nio.Buffer) -> shaderBinary
    void compileShader(javax.media.opengl.GL,java.nio.IntBuffer) -> compileShader
    void attachShader(javax.media.opengl.GL,int,java.nio.IntBuffer) -> attachShader
    void detachShader(javax.media.opengl.GL,int,java.nio.IntBuffer) -> detachShader
    void deleteShader(javax.media.opengl.GL,java.nio.IntBuffer) -> deleteShader
    boolean createAndLoadShader(javax.media.opengl.GL,java.nio.IntBuffer,int,int,java.nio.Buffer,java.io.PrintStream) -> createAndLoadShader
    boolean createAndCompileShader(javax.media.opengl.GL,java.nio.IntBuffer,int,java.lang.CharSequence[][],java.io.PrintStream) -> createAndCompileShader
    com.jogamp.opengl.util.glsl.ShaderUtil$ProfileInformation getProfileInformation(javax.media.opengl.GL) -> getProfileInformation
com.jogamp.opengl.util.glsl.ShaderUtil$1 -> com.jogamp.opengl.util.glsl.ShaderUtil$1:
com.jogamp.opengl.util.glsl.ShaderUtil$ProfileInformation -> com.jogamp.opengl.util.glsl.ShaderUtil$ProfileInformation:
    java.lang.Boolean shaderCompilerAvailable -> shaderCompilerAvailable
    java.util.Set shaderBinaryFormats -> shaderBinaryFormats
    void <init>() -> <init>
    void <init>(com.jogamp.opengl.util.glsl.ShaderUtil$1) -> <init>
com.jogamp.opengl.util.packrect.BackingStoreManager -> com.jogamp.opengl.util.packrect.BackingStoreManager:
    java.lang.Object allocateBackingStore(int,int) -> allocateBackingStore
    void deleteBackingStore(java.lang.Object) -> deleteBackingStore
    boolean canCompact() -> canCompact
    boolean preExpand(com.jogamp.opengl.util.packrect.Rect,int) -> preExpand
    boolean additionFailed(com.jogamp.opengl.util.packrect.Rect,int) -> additionFailed
    void beginMovement(java.lang.Object,java.lang.Object) -> beginMovement
    void move(java.lang.Object,com.jogamp.opengl.util.packrect.Rect,java.lang.Object,com.jogamp.opengl.util.packrect.Rect) -> move
    void endMovement(java.lang.Object,java.lang.Object) -> endMovement
com.jogamp.opengl.util.packrect.Level -> com.jogamp.opengl.util.packrect.Level:
    int width -> width
    int height -> height
    int yPos -> yPos
    com.jogamp.opengl.util.packrect.LevelSet holder -> holder
    java.util.List rects -> rects
    java.util.List freeList -> freeList
    int nextAddX -> nextAddX
    java.util.Comparator rectXComparator -> rectXComparator
    void <init>(int,int,int,com.jogamp.opengl.util.packrect.LevelSet) -> <init>
    int w() -> w
    int h() -> h
    int yPos() -> yPos
    boolean add(com.jogamp.opengl.util.packrect.Rect) -> add
    boolean remove(com.jogamp.opengl.util.packrect.Rect) -> remove
    boolean isEmpty() -> isEmpty
    boolean couldAllocateIfCompacted(com.jogamp.opengl.util.packrect.Rect) -> couldAllocateIfCompacted
    void compact(java.lang.Object,com.jogamp.opengl.util.packrect.BackingStoreManager) -> compact
    java.util.Iterator iterator() -> iterator
    void visit(com.jogamp.opengl.util.packrect.RectVisitor) -> visit
    void updateRectangleReferences() -> updateRectangleReferences
    void coalesceFreeList() -> coalesceFreeList
    void dumpFreeSpace() -> dumpFreeSpace
    void <clinit>() -> <clinit>
com.jogamp.opengl.util.packrect.Level$RectXComparator -> com.jogamp.opengl.util.packrect.Level$RectXComparator:
    void <init>() -> <init>
    int compare(com.jogamp.opengl.util.packrect.Rect,com.jogamp.opengl.util.packrect.Rect) -> compare
    boolean equals(java.lang.Object) -> equals
    int compare(java.lang.Object,java.lang.Object) -> compare
com.jogamp.opengl.util.packrect.LevelSet -> com.jogamp.opengl.util.packrect.LevelSet:
    java.util.List levels -> levels
    int nextAddY -> nextAddY
    int w -> w
    int h -> h
    void <init>(int,int) -> <init>
    int w() -> w
    int h() -> h
    boolean add(com.jogamp.opengl.util.packrect.Rect) -> add
    boolean remove(com.jogamp.opengl.util.packrect.Rect) -> remove
    boolean compactAndAdd(com.jogamp.opengl.util.packrect.Rect,java.lang.Object,com.jogamp.opengl.util.packrect.BackingStoreManager) -> compactAndAdd
    boolean canExpand(com.jogamp.opengl.util.packrect.Level,int) -> canExpand
    void expand(com.jogamp.opengl.util.packrect.Level,int,int) -> expand
    int getUsedHeight() -> getUsedHeight
    void setHeight(int) -> setHeight
    float verticalFragmentationRatio() -> verticalFragmentationRatio
    java.util.Iterator iterator() -> iterator
    void visit(com.jogamp.opengl.util.packrect.RectVisitor) -> visit
    void updateRectangleReferences() -> updateRectangleReferences
    void clear() -> clear
com.jogamp.opengl.util.packrect.Rect -> com.jogamp.opengl.util.packrect.Rect:
    int x -> x
    int y -> y
    int w -> w
    int h -> h
    com.jogamp.opengl.util.packrect.Level level -> level
    java.lang.Object userData -> userData
    com.jogamp.opengl.util.packrect.Rect nextLocation -> nextLocation
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
    void <init>(int,int,int,int,java.lang.Object) -> <init>
    int x() -> x
    int y() -> y
    int w() -> w
    int h() -> h
    java.lang.Object getUserData() -> getUserData
    com.jogamp.opengl.util.packrect.Rect getNextLocation() -> getNextLocation
    void setPosition(int,int) -> setPosition
    void setSize(int,int) -> setSize
    void setUserData(java.lang.Object) -> setUserData
    void setNextLocation(com.jogamp.opengl.util.packrect.Rect) -> setNextLocation
    int maxX() -> maxX
    int maxY() -> maxY
    boolean canContain(com.jogamp.opengl.util.packrect.Rect) -> canContain
    java.lang.String toString() -> toString
com.jogamp.opengl.util.packrect.RectVisitor -> com.jogamp.opengl.util.packrect.RectVisitor:
    void visit(com.jogamp.opengl.util.packrect.Rect) -> visit
com.jogamp.opengl.util.packrect.RectanglePacker -> com.jogamp.opengl.util.packrect.RectanglePacker:
    com.jogamp.opengl.util.packrect.BackingStoreManager manager -> manager
    java.lang.Object backingStore -> backingStore
    com.jogamp.opengl.util.packrect.LevelSet levels -> levels
    float EXPANSION_FACTOR -> EXPANSION_FACTOR
    float SHRINK_FACTOR -> SHRINK_FACTOR
    int initialWidth -> initialWidth
    int initialHeight -> initialHeight
    int maxWidth -> maxWidth
    int maxHeight -> maxHeight
    java.util.Comparator rectHComparator -> rectHComparator
    void <init>(com.jogamp.opengl.util.packrect.BackingStoreManager,int,int) -> <init>
    java.lang.Object getBackingStore() -> getBackingStore
    void setMaxSize(int,int) -> setMaxSize
    void add(com.jogamp.opengl.util.packrect.Rect) -> add
    void remove(com.jogamp.opengl.util.packrect.Rect) -> remove
    void visit(com.jogamp.opengl.util.packrect.RectVisitor) -> visit
    float verticalFragmentationRatio() -> verticalFragmentationRatio
    void compact() -> compact
    void compactImpl(com.jogamp.opengl.util.packrect.Rect) -> compactImpl
    void clear() -> clear
    void dispose() -> dispose
    void <clinit>() -> <clinit>
com.jogamp.opengl.util.packrect.RectanglePacker$RectHComparator -> com.jogamp.opengl.util.packrect.RectanglePacker$RectHComparator:
    void <init>() -> <init>
    int compare(com.jogamp.opengl.util.packrect.Rect,com.jogamp.opengl.util.packrect.Rect) -> compare
    boolean equals(java.lang.Object) -> equals
    int compare(java.lang.Object,java.lang.Object) -> compare
com.jogamp.opengl.util.texture.Texture -> com.jogamp.opengl.util.texture.Texture:
    int target -> target
    int texID -> texID
    int texWidth -> texWidth
    int texHeight -> texHeight
    int imgWidth -> imgWidth
    int imgHeight -> imgHeight
    float aspectRatio -> aspectRatio
    boolean mustFlipVertically -> mustFlipVertically
    boolean usingAutoMipmapGeneration -> usingAutoMipmapGeneration
    com.jogamp.opengl.util.texture.TextureCoords coords -> coords
    int estimatedMemorySize -> estimatedMemorySize
    boolean DEBUG -> DEBUG
    boolean VERBOSE -> VERBOSE
    boolean disableNPOT -> disableNPOT
    boolean disableTexRect -> disableTexRect
    java.lang.String toString() -> toString
    void <init>(javax.media.opengl.GL,com.jogamp.opengl.util.texture.TextureData) -> <init>
    void <init>(int) -> <init>
    void <init>(int,int,int,int,int,int,boolean) -> <init>
    void enable(javax.media.opengl.GL) -> enable
    void disable(javax.media.opengl.GL) -> disable
    void bind(javax.media.opengl.GL) -> bind
    void destroy(javax.media.opengl.GL) -> destroy
    int getTarget() -> getTarget
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getImageWidth() -> getImageWidth
    int getImageHeight() -> getImageHeight
    float getAspectRatio() -> getAspectRatio
    com.jogamp.opengl.util.texture.TextureCoords getImageTexCoords() -> getImageTexCoords
    com.jogamp.opengl.util.texture.TextureCoords getSubImageTexCoords(int,int,int,int) -> getSubImageTexCoords
    void updateImage(javax.media.opengl.GL,com.jogamp.opengl.util.texture.TextureData) -> updateImage
    boolean getMustFlipVertically() -> getMustFlipVertically
    void setMustFlipVertically(boolean) -> setMustFlipVertically
    void updateImage(javax.media.opengl.GL,com.jogamp.opengl.util.texture.TextureData,int) -> updateImage
    void updateSubImage(javax.media.opengl.GL,com.jogamp.opengl.util.texture.TextureData,int,int,int) -> updateSubImage
    void updateSubImage(javax.media.opengl.GL,com.jogamp.opengl.util.texture.TextureData,int,int,int,int,int,int,int) -> updateSubImage
    void setTexParameterf(javax.media.opengl.GL,int,float) -> setTexParameterf
    void setTexParameterfv(javax.media.opengl.GL,int,java.nio.FloatBuffer) -> setTexParameterfv
    void setTexParameterfv(javax.media.opengl.GL,int,float[],int) -> setTexParameterfv
    void setTexParameteri(javax.media.opengl.GL,int,int) -> setTexParameteri
    void setTexParameteriv(javax.media.opengl.GL,int,java.nio.IntBuffer) -> setTexParameteriv
    void setTexParameteriv(javax.media.opengl.GL,int,int[],int) -> setTexParameteriv
    int getTextureObject(javax.media.opengl.GL) -> getTextureObject
    int getTextureObject() -> getTextureObject
    int getEstimatedMemorySize() -> getEstimatedMemorySize
    boolean isUsingAutoMipmapGeneration() -> isUsingAutoMipmapGeneration
    boolean isPowerOfTwo(int) -> isPowerOfTwo
    int nextPowerOfTwo(int) -> nextPowerOfTwo
    void setImageSize(int,int,int) -> setImageSize
    void updateTexCoords() -> updateTexCoords
    void updateSubImageImpl(javax.media.opengl.GL,com.jogamp.opengl.util.texture.TextureData,int,int,int,int,int,int,int,int) -> updateSubImageImpl
    void checkCompressedTextureExtensions(javax.media.opengl.GL,com.jogamp.opengl.util.texture.TextureData) -> checkCompressedTextureExtensions
    boolean validateTexID(javax.media.opengl.GL,boolean) -> validateTexID
    boolean haveNPOT(javax.media.opengl.GL) -> haveNPOT
    boolean haveTexRect(javax.media.opengl.GL) -> haveTexRect
    boolean preferTexRect(javax.media.opengl.GL) -> preferTexRect
    void <clinit>() -> <clinit>
com.jogamp.opengl.util.texture.TextureCoords -> com.jogamp.opengl.util.texture.TextureCoords:
    float left -> left
    float bottom -> bottom
    float right -> right
    float top -> top
    void <init>(float,float,float,float) -> <init>
    float[] getST_LB_RB_LT_RT(float[],int,float,float) -> getST_LB_RB_LT_RT
    float left() -> left
    float right() -> right
    float bottom() -> bottom
    float top() -> top
    java.lang.String toString() -> toString
com.jogamp.opengl.util.texture.TextureData -> com.jogamp.opengl.util.texture.TextureData:
    int width -> width
    int height -> height
    int border -> border
    com.jogamp.opengl.util.GLPixelBuffer$GLPixelAttributes pixelAttributes -> pixelAttributes
    int internalFormat -> internalFormat
    boolean mipmap -> mipmap
    boolean dataIsCompressed -> dataIsCompressed
    boolean mustFlipVertically -> mustFlipVertically
    java.nio.Buffer buffer -> buffer
    java.nio.Buffer[] mipmapData -> mipmapData
    com.jogamp.opengl.util.texture.TextureData$Flusher flusher -> flusher
    int rowLength -> rowLength
    int alignment -> alignment
    int estimatedMemorySize -> estimatedMemorySize
    boolean haveEXTABGR -> haveEXTABGR
    boolean haveGL12 -> haveGL12
    javax.media.opengl.GLProfile glProfile -> glProfile
    com.jogamp.opengl.util.texture.TextureData$ColorSpace pixelCS -> pixelCS
    void <init>(javax.media.opengl.GLProfile,int,int,int,int,int,int,boolean,boolean,boolean,java.nio.Buffer,com.jogamp.opengl.util.texture.TextureData$Flusher) -> <init>
    void <init>(javax.media.opengl.GLProfile,int,int,int,int,com.jogamp.opengl.util.GLPixelBuffer$GLPixelAttributes,boolean,boolean,boolean,java.nio.Buffer,com.jogamp.opengl.util.texture.TextureData$Flusher) -> <init>
    void <init>(javax.media.opengl.GLProfile,int,int,int,int,int,int,boolean,boolean,java.nio.Buffer[],com.jogamp.opengl.util.texture.TextureData$Flusher) -> <init>
    void <init>(javax.media.opengl.GLProfile,int,int,int,int,com.jogamp.opengl.util.GLPixelBuffer$GLPixelAttributes,boolean,boolean,java.nio.Buffer[],com.jogamp.opengl.util.texture.TextureData$Flusher) -> <init>
    com.jogamp.opengl.util.texture.TextureData$ColorSpace getColorSpace() -> getColorSpace
    void setColorSpace(com.jogamp.opengl.util.texture.TextureData$ColorSpace) -> setColorSpace
    void <init>(javax.media.opengl.GLProfile) -> <init>
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getBorder() -> getBorder
    com.jogamp.opengl.util.GLPixelBuffer$GLPixelAttributes getPixelAttributes() -> getPixelAttributes
    int getPixelFormat() -> getPixelFormat
    int getPixelType() -> getPixelType
    int getInternalFormat() -> getInternalFormat
    boolean getMipmap() -> getMipmap
    boolean isDataCompressed() -> isDataCompressed
    boolean getMustFlipVertically() -> getMustFlipVertically
    java.nio.Buffer getBuffer() -> getBuffer
    java.nio.Buffer[] getMipmapData() -> getMipmapData
    int getAlignment() -> getAlignment
    int getRowLength() -> getRowLength
    void setWidth(int) -> setWidth
    void setHeight(int) -> setHeight
    void setBorder(int) -> setBorder
    void setPixelAttributes(com.jogamp.opengl.util.GLPixelBuffer$GLPixelAttributes) -> setPixelAttributes
    void setPixelFormat(int) -> setPixelFormat
    void setPixelType(int) -> setPixelType
    void setInternalFormat(int) -> setInternalFormat
    void setMipmap(boolean) -> setMipmap
    void setIsDataCompressed(boolean) -> setIsDataCompressed
    void setMustFlipVertically(boolean) -> setMustFlipVertically
    void setBuffer(java.nio.Buffer) -> setBuffer
    void setAlignment(int) -> setAlignment
    void setRowLength(int) -> setRowLength
    void setHaveEXTABGR(boolean) -> setHaveEXTABGR
    void setHaveGL12(boolean) -> setHaveGL12
    javax.media.opengl.GLProfile getGLProfile() -> getGLProfile
    int getEstimatedMemorySize() -> getEstimatedMemorySize
    void flush() -> flush
    void destroy() -> destroy
    java.lang.String toString() -> toString
    int estimatedMemorySize(java.nio.Buffer) -> estimatedMemorySize
com.jogamp.opengl.util.texture.TextureData$ColorSpace -> com.jogamp.opengl.util.texture.TextureData$ColorSpace:
    com.jogamp.opengl.util.texture.TextureData$ColorSpace RGB -> RGB
    com.jogamp.opengl.util.texture.TextureData$ColorSpace YCbCr -> YCbCr
    com.jogamp.opengl.util.texture.TextureData$ColorSpace YCCK -> YCCK
    com.jogamp.opengl.util.texture.TextureData$ColorSpace CMYK -> CMYK
    com.jogamp.opengl.util.texture.TextureData$ColorSpace[] $VALUES -> $VALUES
    com.jogamp.opengl.util.texture.TextureData$ColorSpace[] values() -> values
    com.jogamp.opengl.util.texture.TextureData$ColorSpace valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.jogamp.opengl.util.texture.TextureData$Flusher -> com.jogamp.opengl.util.texture.TextureData$Flusher:
    void flush() -> flush
com.jogamp.opengl.util.texture.TextureIO -> com.jogamp.opengl.util.texture.TextureIO:
    java.lang.String DDS -> DDS
    java.lang.String SGI -> SGI
    java.lang.String SGI_RGB -> SGI_RGB
    java.lang.String GIF -> GIF
    java.lang.String JPG -> JPG
    java.lang.String PNG -> PNG
    java.lang.String TGA -> TGA
    java.lang.String TIFF -> TIFF
    java.lang.String PAM -> PAM
    java.lang.String PPM -> PPM
    boolean DEBUG -> DEBUG
    boolean texRectEnabled -> texRectEnabled
    java.util.List textureProviders -> textureProviders
    java.util.List textureWriters -> textureWriters
    void <init>() -> <init>
    com.jogamp.opengl.util.texture.TextureData newTextureData(javax.media.opengl.GLProfile,java.io.File,boolean,java.lang.String) -> newTextureData
    com.jogamp.opengl.util.texture.TextureData newTextureData(javax.media.opengl.GLProfile,java.io.InputStream,boolean,java.lang.String) -> newTextureData
    com.jogamp.opengl.util.texture.TextureData newTextureData(javax.media.opengl.GLProfile,java.net.URL,boolean,java.lang.String) -> newTextureData
    com.jogamp.opengl.util.texture.TextureData newTextureData(javax.media.opengl.GLProfile,java.io.File,int,int,boolean,java.lang.String) -> newTextureData
    com.jogamp.opengl.util.texture.TextureData newTextureData(javax.media.opengl.GLProfile,java.io.InputStream,int,int,boolean,java.lang.String) -> newTextureData
    com.jogamp.opengl.util.texture.TextureData newTextureData(javax.media.opengl.GLProfile,java.net.URL,int,int,boolean,java.lang.String) -> newTextureData
    com.jogamp.opengl.util.texture.Texture newTexture(com.jogamp.opengl.util.texture.TextureData) -> newTexture
    com.jogamp.opengl.util.texture.Texture newTexture(javax.media.opengl.GL,com.jogamp.opengl.util.texture.TextureData) -> newTexture
    com.jogamp.opengl.util.texture.Texture newTexture(java.io.File,boolean) -> newTexture
    com.jogamp.opengl.util.texture.Texture newTexture(java.io.InputStream,boolean,java.lang.String) -> newTexture
    com.jogamp.opengl.util.texture.Texture newTexture(java.net.URL,boolean,java.lang.String) -> newTexture
    com.jogamp.opengl.util.texture.Texture newTexture(int) -> newTexture
    void write(com.jogamp.opengl.util.texture.Texture,java.io.File) -> write
    void write(com.jogamp.opengl.util.texture.TextureData,java.io.File) -> write
    void addTextureProvider(com.jogamp.opengl.util.texture.spi.TextureProvider) -> addTextureProvider
    void addTextureWriter(com.jogamp.opengl.util.texture.spi.TextureWriter) -> addTextureWriter
    void setTexRectEnabled(boolean) -> setTexRectEnabled
    boolean isTexRectEnabled() -> isTexRectEnabled
    com.jogamp.opengl.util.texture.TextureData newTextureDataImpl(javax.media.opengl.GLProfile,java.io.File,int,int,boolean,java.lang.String) -> newTextureDataImpl
    com.jogamp.opengl.util.texture.TextureData newTextureDataImpl(javax.media.opengl.GLProfile,java.io.InputStream,int,int,boolean,java.lang.String) -> newTextureDataImpl
    com.jogamp.opengl.util.texture.TextureData newTextureDataImpl(javax.media.opengl.GLProfile,java.net.URL,int,int,boolean,java.lang.String) -> newTextureDataImpl
    int glGetInteger(javax.media.opengl.GL,int) -> glGetInteger
    int glGetTexLevelParameteri(javax.media.opengl.GL2GL3,int,int,int) -> glGetTexLevelParameteri
    java.lang.String toLowerCase(java.lang.String) -> toLowerCase
    void <clinit>() -> <clinit>
com.jogamp.opengl.util.texture.TextureIO$DDSTextureProvider -> com.jogamp.opengl.util.texture.TextureIO$DDSTextureProvider:
    void <init>() -> <init>
    com.jogamp.opengl.util.texture.TextureData newTextureData(javax.media.opengl.GLProfile,java.io.File,int,int,boolean,java.lang.String) -> newTextureData
    com.jogamp.opengl.util.texture.TextureData newTextureData(javax.media.opengl.GLProfile,java.io.InputStream,int,int,boolean,java.lang.String) -> newTextureData
    com.jogamp.opengl.util.texture.TextureData newTextureData(javax.media.opengl.GLProfile,java.net.URL,int,int,boolean,java.lang.String) -> newTextureData
    com.jogamp.opengl.util.texture.TextureData newTextureData(javax.media.opengl.GLProfile,com.jogamp.opengl.util.texture.spi.DDSImage,int,int,boolean) -> newTextureData
com.jogamp.opengl.util.texture.TextureIO$DDSTextureProvider$1 -> com.jogamp.opengl.util.texture.TextureIO$DDSTextureProvider$1:
    com.jogamp.opengl.util.texture.spi.DDSImage val$image -> val$image
    com.jogamp.opengl.util.texture.TextureIO$DDSTextureProvider this$0 -> this$0
    void <init>(com.jogamp.opengl.util.texture.TextureIO$DDSTextureProvider,com.jogamp.opengl.util.texture.spi.DDSImage) -> <init>
    void flush() -> flush
com.jogamp.opengl.util.texture.TextureIO$DDSTextureWriter -> com.jogamp.opengl.util.texture.TextureIO$DDSTextureWriter:
    void <init>() -> <init>
    boolean write(java.io.File,com.jogamp.opengl.util.texture.TextureData) -> write
com.jogamp.opengl.util.texture.TextureIO$JPGTextureProvider -> com.jogamp.opengl.util.texture.TextureIO$JPGTextureProvider:
    void <init>() -> <init>
    com.jogamp.opengl.util.texture.TextureData newTextureData(javax.media.opengl.GLProfile,java.io.InputStream,int,int,boolean,java.lang.String) -> newTextureData
com.jogamp.opengl.util.texture.TextureIO$PNGTextureProvider -> com.jogamp.opengl.util.texture.TextureIO$PNGTextureProvider:
    void <init>() -> <init>
    com.jogamp.opengl.util.texture.TextureData newTextureData(javax.media.opengl.GLProfile,java.io.InputStream,int,int,boolean,java.lang.String) -> newTextureData
com.jogamp.opengl.util.texture.TextureIO$PNGTextureWriter -> com.jogamp.opengl.util.texture.TextureIO$PNGTextureWriter:
    void <init>() -> <init>
    boolean write(java.io.File,com.jogamp.opengl.util.texture.TextureData) -> write
com.jogamp.opengl.util.texture.TextureIO$SGITextureProvider -> com.jogamp.opengl.util.texture.TextureIO$SGITextureProvider:
    void <init>() -> <init>
    com.jogamp.opengl.util.texture.TextureData newTextureData(javax.media.opengl.GLProfile,java.io.InputStream,int,int,boolean,java.lang.String) -> newTextureData
com.jogamp.opengl.util.texture.TextureIO$SGITextureWriter -> com.jogamp.opengl.util.texture.TextureIO$SGITextureWriter:
    void <init>() -> <init>
    boolean write(java.io.File,com.jogamp.opengl.util.texture.TextureData) -> write
com.jogamp.opengl.util.texture.TextureIO$StreamBasedTextureProvider -> com.jogamp.opengl.util.texture.TextureIO$StreamBasedTextureProvider:
    void <init>() -> <init>
    com.jogamp.opengl.util.texture.TextureData newTextureData(javax.media.opengl.GLProfile,java.io.File,int,int,boolean,java.lang.String) -> newTextureData
    com.jogamp.opengl.util.texture.TextureData newTextureData(javax.media.opengl.GLProfile,java.net.URL,int,int,boolean,java.lang.String) -> newTextureData
com.jogamp.opengl.util.texture.TextureIO$TGATextureProvider -> com.jogamp.opengl.util.texture.TextureIO$TGATextureProvider:
    void <init>() -> <init>
    com.jogamp.opengl.util.texture.TextureData newTextureData(javax.media.opengl.GLProfile,java.io.InputStream,int,int,boolean,java.lang.String) -> newTextureData
com.jogamp.opengl.util.texture.TextureIO$TGATextureWriter -> com.jogamp.opengl.util.texture.TextureIO$TGATextureWriter:
    void <init>() -> <init>
    boolean write(java.io.File,com.jogamp.opengl.util.texture.TextureData) -> write
com.jogamp.opengl.util.texture.awt.AWTTextureData -> com.jogamp.opengl.util.texture.awt.AWTTextureData:
    java.awt.image.BufferedImage imageForLazyCustomConversion -> imageForLazyCustomConversion
    boolean expectingEXTABGR -> expectingEXTABGR
    boolean expectingGL12 -> expectingGL12
    java.awt.image.ColorModel rgbaColorModel -> rgbaColorModel
    java.awt.image.ColorModel rgbColorModel -> rgbColorModel
    void <init>(javax.media.opengl.GLProfile,int,int,boolean,java.awt.image.BufferedImage) -> <init>
    void validatePixelAttributes() -> validatePixelAttributes
    com.jogamp.opengl.util.GLPixelBuffer$GLPixelAttributes getPixelAttributes() -> getPixelAttributes
    int getPixelFormat() -> getPixelFormat
    int getPixelType() -> getPixelType
    java.nio.Buffer getBuffer() -> getBuffer
    void createFromImage(javax.media.opengl.GLProfile,java.awt.image.BufferedImage) -> createFromImage
    void setupLazyCustomConversion(java.awt.image.BufferedImage) -> setupLazyCustomConversion
    void createFromCustom(java.awt.image.BufferedImage) -> createFromCustom
    boolean isPackedInt(java.awt.image.BufferedImage) -> isPackedInt
    void revertPixelAttributes() -> revertPixelAttributes
    void createNIOBufferFromImage(java.awt.image.BufferedImage) -> createNIOBufferFromImage
    java.nio.Buffer wrapImageDataBuffer(java.awt.image.BufferedImage) -> wrapImageDataBuffer
    void <clinit>() -> <clinit>
com.jogamp.opengl.util.texture.spi.DDSImage -> com.jogamp.opengl.util.texture.spi.DDSImage:
    java.io.FileInputStream fis -> fis
    java.nio.channels.FileChannel chan -> chan
    java.nio.ByteBuffer buf -> buf
    com.jogamp.opengl.util.texture.spi.DDSImage$Header header -> header
    int DDSD_CAPS -> DDSD_CAPS
    int DDSD_HEIGHT -> DDSD_HEIGHT
    int DDSD_WIDTH -> DDSD_WIDTH
    int DDSD_PITCH -> DDSD_PITCH
    int DDSD_BACKBUFFERCOUNT -> DDSD_BACKBUFFERCOUNT
    int DDSD_ZBUFFERBITDEPTH -> DDSD_ZBUFFERBITDEPTH
    int DDSD_ALPHABITDEPTH -> DDSD_ALPHABITDEPTH
    int DDSD_LPSURFACE -> DDSD_LPSURFACE
    int DDSD_PIXELFORMAT -> DDSD_PIXELFORMAT
    int DDSD_MIPMAPCOUNT -> DDSD_MIPMAPCOUNT
    int DDSD_LINEARSIZE -> DDSD_LINEARSIZE
    int DDSD_DEPTH -> DDSD_DEPTH
    int DDPF_ALPHAPIXELS -> DDPF_ALPHAPIXELS
    int DDPF_ALPHA -> DDPF_ALPHA
    int DDPF_FOURCC -> DDPF_FOURCC
    int DDPF_PALETTEINDEXED4 -> DDPF_PALETTEINDEXED4
    int DDPF_PALETTEINDEXEDTO8 -> DDPF_PALETTEINDEXEDTO8
    int DDPF_PALETTEINDEXED8 -> DDPF_PALETTEINDEXED8
    int DDPF_RGB -> DDPF_RGB
    int DDPF_COMPRESSED -> DDPF_COMPRESSED
    int DDPF_RGBTOYUV -> DDPF_RGBTOYUV
    int DDPF_YUV -> DDPF_YUV
    int DDPF_ZBUFFER -> DDPF_ZBUFFER
    int DDPF_PALETTEINDEXED1 -> DDPF_PALETTEINDEXED1
    int DDPF_PALETTEINDEXED2 -> DDPF_PALETTEINDEXED2
    int DDPF_ZPIXELS -> DDPF_ZPIXELS
    int DDSCAPS_TEXTURE -> DDSCAPS_TEXTURE
    int DDSCAPS_MIPMAP -> DDSCAPS_MIPMAP
    int DDSCAPS_COMPLEX -> DDSCAPS_COMPLEX
    int DDSCAPS2_CUBEMAP -> DDSCAPS2_CUBEMAP
    int DDSCAPS2_CUBEMAP_POSITIVEX -> DDSCAPS2_CUBEMAP_POSITIVEX
    int DDSCAPS2_CUBEMAP_NEGATIVEX -> DDSCAPS2_CUBEMAP_NEGATIVEX
    int DDSCAPS2_CUBEMAP_POSITIVEY -> DDSCAPS2_CUBEMAP_POSITIVEY
    int DDSCAPS2_CUBEMAP_NEGATIVEY -> DDSCAPS2_CUBEMAP_NEGATIVEY
    int DDSCAPS2_CUBEMAP_POSITIVEZ -> DDSCAPS2_CUBEMAP_POSITIVEZ
    int DDSCAPS2_CUBEMAP_NEGATIVEZ -> DDSCAPS2_CUBEMAP_NEGATIVEZ
    int D3DFMT_UNKNOWN -> D3DFMT_UNKNOWN
    int D3DFMT_R8G8B8 -> D3DFMT_R8G8B8
    int D3DFMT_A8R8G8B8 -> D3DFMT_A8R8G8B8
    int D3DFMT_X8R8G8B8 -> D3DFMT_X8R8G8B8
    int D3DFMT_DXT1 -> D3DFMT_DXT1
    int D3DFMT_DXT2 -> D3DFMT_DXT2
    int D3DFMT_DXT3 -> D3DFMT_DXT3
    int D3DFMT_DXT4 -> D3DFMT_DXT4
    int D3DFMT_DXT5 -> D3DFMT_DXT5
    int MAGIC -> MAGIC
    com.jogamp.opengl.util.texture.spi.DDSImage read(java.lang.String) -> read
    com.jogamp.opengl.util.texture.spi.DDSImage read(java.io.File) -> read
    com.jogamp.opengl.util.texture.spi.DDSImage read(java.nio.ByteBuffer) -> read
    void close() -> close
    com.jogamp.opengl.util.texture.spi.DDSImage createFromData(int,int,int,java.nio.ByteBuffer[]) -> createFromData
    boolean isDDSImage(java.io.InputStream) -> isDDSImage
    void write(java.lang.String) -> write
    void write(java.io.File) -> write
    boolean isSurfaceDescFlagSet(int) -> isSurfaceDescFlagSet
    boolean isPixelFormatFlagSet(int) -> isPixelFormatFlagSet
    int getPixelFormat() -> getPixelFormat
    boolean isCubemap() -> isCubemap
    boolean isCubemapSidePresent(int) -> isCubemapSidePresent
    boolean isCompressed() -> isCompressed
    int getCompressionFormat() -> getCompressionFormat
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getDepth() -> getDepth
    int getNumMipMaps() -> getNumMipMaps
    com.jogamp.opengl.util.texture.spi.DDSImage$ImageInfo getMipMap(int) -> getMipMap
    com.jogamp.opengl.util.texture.spi.DDSImage$ImageInfo getMipMap(int,int) -> getMipMap
    com.jogamp.opengl.util.texture.spi.DDSImage$ImageInfo[] getAllMipMaps() -> getAllMipMaps
    com.jogamp.opengl.util.texture.spi.DDSImage$ImageInfo[] getAllMipMaps(int) -> getAllMipMaps
    java.lang.String getCompressionFormatName(int) -> getCompressionFormatName
    java.nio.ByteBuffer allocateBlankBuffer(int,int,int) -> allocateBlankBuffer
    void debugPrint() -> debugPrint
    void <init>() -> <init>
    void readFromFile(java.io.File) -> readFromFile
    void readFromBuffer(java.nio.ByteBuffer) -> readFromBuffer
    void initFromData(int,int,int,java.nio.ByteBuffer[]) -> initFromData
    void fixupHeader() -> fixupHeader
    int computeCompressedBlockSize(int,int,int,int) -> computeCompressedBlockSize
    int computeBlockSize(int,int,int,int) -> computeBlockSize
    int mipMapWidth(int) -> mipMapWidth
    int mipMapHeight(int) -> mipMapHeight
    int mipMapSizeInBytes(int) -> mipMapSizeInBytes
    int sideSizeInBytes() -> sideSizeInBytes
    int sideShiftInBytes(int) -> sideShiftInBytes
    boolean printIfRecognized(java.io.PrintStream,int,int,java.lang.String) -> printIfRecognized
com.jogamp.opengl.util.texture.spi.DDSImage$Header -> com.jogamp.opengl.util.texture.spi.DDSImage$Header:
    int size -> size
    int flags -> flags
    int height -> height
    int width -> width
    int pitchOrLinearSize -> pitchOrLinearSize
    int backBufferCountOrDepth -> backBufferCountOrDepth
    int mipMapCountOrAux -> mipMapCountOrAux
    int alphaBitDepth -> alphaBitDepth
    int reserved1 -> reserved1
    int surface -> surface
    int colorSpaceLowValue -> colorSpaceLowValue
    int colorSpaceHighValue -> colorSpaceHighValue
    int destBltColorSpaceLowValue -> destBltColorSpaceLowValue
    int destBltColorSpaceHighValue -> destBltColorSpaceHighValue
    int srcOverlayColorSpaceLowValue -> srcOverlayColorSpaceLowValue
    int srcOverlayColorSpaceHighValue -> srcOverlayColorSpaceHighValue
    int srcBltColorSpaceLowValue -> srcBltColorSpaceLowValue
    int srcBltColorSpaceHighValue -> srcBltColorSpaceHighValue
    int pfSize -> pfSize
    int pfFlags -> pfFlags
    int pfFourCC -> pfFourCC
    int pfRGBBitCount -> pfRGBBitCount
    int pfRBitMask -> pfRBitMask
    int pfGBitMask -> pfGBitMask
    int pfBBitMask -> pfBBitMask
    int pfABitMask -> pfABitMask
    int ddsCaps1 -> ddsCaps1
    int ddsCaps2 -> ddsCaps2
    int ddsCapsReserved1 -> ddsCapsReserved1
    int ddsCapsReserved2 -> ddsCapsReserved2
    int textureStage -> textureStage
    void <init>() -> <init>
    void read(java.nio.ByteBuffer) -> read
    void write(java.nio.ByteBuffer) -> write
    int size() -> size
    int pfSize() -> pfSize
    int writtenSize() -> writtenSize
    int access$000() -> access$000
    int access$100() -> access$100
    int access$200() -> access$200
com.jogamp.opengl.util.texture.spi.DDSImage$ImageInfo -> com.jogamp.opengl.util.texture.spi.DDSImage$ImageInfo:
    java.nio.ByteBuffer data -> data
    int width -> width
    int height -> height
    boolean isCompressed -> isCompressed
    int compressionFormat -> compressionFormat
    void <init>(java.nio.ByteBuffer,int,int,boolean,int) -> <init>
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    java.nio.ByteBuffer getData() -> getData
    boolean isCompressed() -> isCompressed
    int getCompressionFormat() -> getCompressionFormat
com.jogamp.opengl.util.texture.spi.JPEGImage -> com.jogamp.opengl.util.texture.spi.JPEGImage:
    boolean DEBUG -> DEBUG
    com.jogamp.opengl.util.texture.spi.JPEGImage$JPEGColorSink pixelStorage -> pixelStorage
    int pixelWidth -> pixelWidth
    int pixelHeight -> pixelHeight
    int glFormat -> glFormat
    int bytesPerPixel -> bytesPerPixel
    boolean reversedChannels -> reversedChannels
    java.nio.ByteBuffer data -> data
    com.jogamp.opengl.util.texture.spi.JPEGImage read(java.io.InputStream,com.jogamp.opengl.util.texture.TextureData$ColorSpace) -> read
    com.jogamp.opengl.util.texture.spi.JPEGImage read(java.io.InputStream) -> read
    void <init>(java.io.InputStream,com.jogamp.opengl.util.texture.TextureData$ColorSpace) -> <init>
    com.jogamp.opengl.util.texture.TextureData$ColorSpace getColorSpace() -> getColorSpace
    int getComponentCount() -> getComponentCount
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    boolean getHasReversedChannels() -> getHasReversedChannels
    int getGLFormat() -> getGLFormat
    int getGLType() -> getGLType
    int getBytesPerPixel() -> getBytesPerPixel
    java.nio.ByteBuffer getData() -> getData
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.jogamp.opengl.util.texture.spi.JPEGImage$1 -> com.jogamp.opengl.util.texture.spi.JPEGImage$1:
    int[] $SwitchMap$com$jogamp$opengl$util$texture$TextureData$ColorSpace -> $SwitchMap$com$jogamp$opengl$util$texture$TextureData$ColorSpace
    void <clinit>() -> <clinit>
com.jogamp.opengl.util.texture.spi.JPEGImage$JPEGColorSink -> com.jogamp.opengl.util.texture.spi.JPEGImage$JPEGColorSink:
    int width -> width
    int height -> height
    int sourceComponents -> sourceComponents
    com.jogamp.opengl.util.texture.TextureData$ColorSpace sourceCS -> sourceCS
    int storageComponents -> storageComponents
    com.jogamp.opengl.util.texture.TextureData$ColorSpace storageCS -> storageCS
    java.nio.ByteBuffer data -> data
    void <init>(com.jogamp.opengl.util.texture.TextureData$ColorSpace) -> <init>
    com.jogamp.opengl.util.texture.TextureData$ColorSpace allocate(int,int,com.jogamp.opengl.util.texture.TextureData$ColorSpace,int) -> allocate
    void storeRGB(int,int,byte,byte,byte) -> storeRGB
    void store2(int,int,byte,byte) -> store2
    void storeYCbCr(int,int,byte,byte,byte) -> storeYCbCr
    java.lang.String toString() -> toString
com.jogamp.opengl.util.texture.spi.LEDataInputStream -> com.jogamp.opengl.util.texture.spi.LEDataInputStream:
    java.io.DataInputStream dataIn -> dataIn
    void <init>(java.io.InputStream) -> <init>
    void close() -> close
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    void readFully(byte[]) -> readFully
    void readFully(byte[],int,int) -> readFully
    int skipBytes(int) -> skipBytes
    boolean readBoolean() -> readBoolean
    byte readByte() -> readByte
    int readUnsignedByte() -> readUnsignedByte
    short readShort() -> readShort
    int readUnsignedShort() -> readUnsignedShort
    char readChar() -> readChar
    int readInt() -> readInt
    long readLong() -> readLong
    float readFloat() -> readFloat
    double readDouble() -> readDouble
    java.lang.String readLine() -> readLine
    java.lang.String readUTF() -> readUTF
    java.lang.String readUTF(java.io.DataInput) -> readUTF
com.jogamp.opengl.util.texture.spi.NetPbmTextureWriter -> com.jogamp.opengl.util.texture.spi.NetPbmTextureWriter:
    int magic -> magic
    java.lang.String PPM -> PPM
    java.lang.String PAM -> PAM
    void <init>() -> <init>
    void <init>(int) -> <init>
    int getMagic() -> getMagic
    java.lang.String getSuffix() -> getSuffix
    boolean write(java.io.File,com.jogamp.opengl.util.texture.TextureData) -> write
    boolean writeImpl(java.io.File,com.jogamp.opengl.util.texture.TextureData) -> writeImpl
com.jogamp.opengl.util.texture.spi.SGIImage -> com.jogamp.opengl.util.texture.spi.SGIImage:
    com.jogamp.opengl.util.texture.spi.SGIImage$Header header -> header
    int format -> format
    byte[] data -> data
    int[] rowStart -> rowStart
    int[] rowSize -> rowSize
    int rleEnd -> rleEnd
    byte[] tmpData -> tmpData
    byte[] tmpRead -> tmpRead
    int MAGIC -> MAGIC
    void <init>(com.jogamp.opengl.util.texture.spi.SGIImage$Header) -> <init>
    com.jogamp.opengl.util.texture.spi.SGIImage read(java.lang.String) -> read
    com.jogamp.opengl.util.texture.spi.SGIImage read(java.io.InputStream) -> read
    void write(java.lang.String,boolean) -> write
    void write(java.io.File,boolean) -> write
    com.jogamp.opengl.util.texture.spi.SGIImage createFromData(int,int,boolean,byte[]) -> createFromData
    boolean isSGIImage(java.io.InputStream) -> isSGIImage
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getFormat() -> getFormat
    byte[] getData() -> getData
    java.lang.String toString() -> toString
    void decodeImage(java.io.DataInputStream) -> decodeImage
    void getRow(byte[],int,int) -> getRow
    void bwtorgba(byte[],byte[],int) -> bwtorgba
    void latorgba(byte[],byte[],byte[],int) -> latorgba
    void rgbtorgba(byte[],byte[],byte[],byte[],int) -> rgbtorgba
    void rgbatorgba(byte[],byte[],byte[],byte[],byte[],int) -> rgbatorgba
    byte imgref(byte[],int,int,int,int,int,int) -> imgref
    void writeHeader(java.io.DataOutputStream,int,int,int,boolean) -> writeHeader
    void writeImage(java.io.File,byte[],int,int,int,boolean) -> writeImage
    byte[] readAll(java.io.DataInputStream) -> readAll
com.jogamp.opengl.util.texture.spi.SGIImage$Header -> com.jogamp.opengl.util.texture.spi.SGIImage$Header:
    short magic -> magic
    byte storage -> storage
    byte bpc -> bpc
    short dimension -> dimension
    short xsize -> xsize
    short ysize -> ysize
    short zsize -> zsize
    int pixmin -> pixmin
    int pixmax -> pixmax
    int dummy -> dummy
    java.lang.String imagename -> imagename
    int colormap -> colormap
    void <init>() -> <init>
    void <init>(java.io.DataInputStream) -> <init>
    java.lang.String toString() -> toString
com.jogamp.opengl.util.texture.spi.TGAImage -> com.jogamp.opengl.util.texture.spi.TGAImage:
    com.jogamp.opengl.util.texture.spi.TGAImage$Header header -> header
    int format -> format
    int bpp -> bpp
    java.nio.ByteBuffer data -> data
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(com.jogamp.opengl.util.texture.spi.TGAImage$Header) -> <init>
    void decodeImage(javax.media.opengl.GLProfile,com.jogamp.opengl.util.texture.spi.LEDataInputStream) -> decodeImage
    void decodeRGBImageU24_32(javax.media.opengl.GLProfile,com.jogamp.opengl.util.texture.spi.LEDataInputStream) -> decodeRGBImageU24_32
    void decodeRGBImageRLE24_32(javax.media.opengl.GLProfile,com.jogamp.opengl.util.texture.spi.LEDataInputStream) -> decodeRGBImageRLE24_32
    void setupImage24_32(javax.media.opengl.GLProfile) -> setupImage24_32
    void swapBGR(byte[],int,int,int) -> swapBGR
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getGLFormat() -> getGLFormat
    int getBytesPerPixel() -> getBytesPerPixel
    java.nio.ByteBuffer getData() -> getData
    com.jogamp.opengl.util.texture.spi.TGAImage read(javax.media.opengl.GLProfile,java.lang.String) -> read
    com.jogamp.opengl.util.texture.spi.TGAImage read(javax.media.opengl.GLProfile,java.io.InputStream) -> read
    void write(java.lang.String) -> write
    void write(java.io.File) -> write
    com.jogamp.opengl.util.texture.spi.TGAImage createFromData(int,int,boolean,boolean,java.nio.ByteBuffer) -> createFromData
    void <clinit>() -> <clinit>
com.jogamp.opengl.util.texture.spi.TGAImage$Header -> com.jogamp.opengl.util.texture.spi.TGAImage$Header:
    int TYPE_NEW -> TYPE_NEW
    int TYPE_OLD -> TYPE_OLD
    int TYPE_UNK -> TYPE_UNK
    int NO_IMAGE -> NO_IMAGE
    int UCOLORMAPPED -> UCOLORMAPPED
    int UTRUECOLOR -> UTRUECOLOR
    int UBLACKWHITE -> UBLACKWHITE
    int COLORMAPPED -> COLORMAPPED
    int TRUECOLOR -> TRUECOLOR
    int BLACKWHITE -> BLACKWHITE
    int ID_ATTRIBPERPIXEL -> ID_ATTRIBPERPIXEL
    int ID_RIGHTTOLEFT -> ID_RIGHTTOLEFT
    int ID_TOPTOBOTTOM -> ID_TOPTOBOTTOM
    int ID_INTERLEAVE -> ID_INTERLEAVE
    int I_NOTINTERLEAVED -> I_NOTINTERLEAVED
    int I_TWOWAY -> I_TWOWAY
    int I_FOURWAY -> I_FOURWAY
    int tgaType -> tgaType
    int idLength -> idLength
    int colorMapType -> colorMapType
    int imageType -> imageType
    int firstEntryIndex -> firstEntryIndex
    int colorMapLength -> colorMapLength
    byte colorMapEntrySize -> colorMapEntrySize
    int xOrigin -> xOrigin
    int yOrigin -> yOrigin
    int width -> width
    int height -> height
    byte pixelDepth -> pixelDepth
    byte imageDescriptor -> imageDescriptor
    byte[] imageIDbuf -> imageIDbuf
    java.lang.String imageID -> imageID
    void <init>() -> <init>
    void <init>(com.jogamp.opengl.util.texture.spi.LEDataInputStream) -> <init>
    int tgaType() -> tgaType
    int idLength() -> idLength
    int colorMapType() -> colorMapType
    int imageType() -> imageType
    int firstEntryIndex() -> firstEntryIndex
    int colorMapLength() -> colorMapLength
    byte colorMapEntrySize() -> colorMapEntrySize
    int xOrigin() -> xOrigin
    int yOrigin() -> yOrigin
    int width() -> width
    int height() -> height
    byte pixelDepth() -> pixelDepth
    byte imageDescriptor() -> imageDescriptor
    byte attribPerPixel() -> attribPerPixel
    boolean rightToLeft() -> rightToLeft
    boolean topToBottom() -> topToBottom
    byte interleave() -> interleave
    byte[] imageIDbuf() -> imageIDbuf
    java.lang.String imageID() -> imageID
    java.lang.String toString() -> toString
    int size() -> size
    void write(java.nio.ByteBuffer) -> write
    byte access$000(com.jogamp.opengl.util.texture.spi.TGAImage$Header) -> access$000
    int access$100(com.jogamp.opengl.util.texture.spi.TGAImage$Header) -> access$100
    void access$200(com.jogamp.opengl.util.texture.spi.TGAImage$Header,java.nio.ByteBuffer) -> access$200
    int access$302(com.jogamp.opengl.util.texture.spi.TGAImage$Header,int) -> access$302
    int access$402(com.jogamp.opengl.util.texture.spi.TGAImage$Header,int) -> access$402
    int access$102(com.jogamp.opengl.util.texture.spi.TGAImage$Header,int) -> access$102
    byte access$002(com.jogamp.opengl.util.texture.spi.TGAImage$Header,byte) -> access$002
    byte access$502(com.jogamp.opengl.util.texture.spi.TGAImage$Header,byte) -> access$502
com.jogamp.opengl.util.texture.spi.TextureProvider -> com.jogamp.opengl.util.texture.spi.TextureProvider:
    com.jogamp.opengl.util.texture.TextureData newTextureData(javax.media.opengl.GLProfile,java.io.File,int,int,boolean,java.lang.String) -> newTextureData
    com.jogamp.opengl.util.texture.TextureData newTextureData(javax.media.opengl.GLProfile,java.io.InputStream,int,int,boolean,java.lang.String) -> newTextureData
    com.jogamp.opengl.util.texture.TextureData newTextureData(javax.media.opengl.GLProfile,java.net.URL,int,int,boolean,java.lang.String) -> newTextureData
com.jogamp.opengl.util.texture.spi.TextureWriter -> com.jogamp.opengl.util.texture.spi.TextureWriter:
    boolean write(java.io.File,com.jogamp.opengl.util.texture.TextureData) -> write
com.jogamp.opengl.util.texture.spi.awt.IIOTextureProvider -> com.jogamp.opengl.util.texture.spi.awt.IIOTextureProvider:
    boolean DEBUG -> DEBUG
    void <init>() -> <init>
    com.jogamp.opengl.util.texture.TextureData newTextureData(javax.media.opengl.GLProfile,java.io.File,int,int,boolean,java.lang.String) -> newTextureData
    com.jogamp.opengl.util.texture.TextureData newTextureData(javax.media.opengl.GLProfile,java.io.InputStream,int,int,boolean,java.lang.String) -> newTextureData
    com.jogamp.opengl.util.texture.TextureData newTextureData(javax.media.opengl.GLProfile,java.net.URL,int,int,boolean,java.lang.String) -> newTextureData
    void <clinit>() -> <clinit>
com.jogamp.opengl.util.texture.spi.awt.IIOTextureWriter -> com.jogamp.opengl.util.texture.spi.awt.IIOTextureWriter:
    void <init>() -> <init>
    boolean write(java.io.File,com.jogamp.opengl.util.texture.TextureData) -> write
com.metsci.glimpse.axis.Axis1D -> com.metsci.glimpse.axis.Axis1D:
    java.util.logging.Logger logger -> logger
    double selectionCenterValue -> selectionCenterValue
    double selectionSizeValue -> selectionSizeValue
    boolean selectionLocked -> selectionLocked
    double mousePosValue -> mousePosValue
    double minValue -> minValue
    double maxValue -> maxValue
    double pixelsPerValue -> pixelsPerValue
    double minValue_lastValid -> minValue_lastValid
    double maxValue_lastValid -> maxValue_lastValid
    com.metsci.glimpse.axis.UpdateMode updateMode -> updateMode
    boolean lockMin -> lockMin
    double lockMinValue -> lockMinValue
    boolean lockMax -> lockMax
    double lockMaxValue -> lockMaxValue
    boolean constrainMinDiff -> constrainMinDiff
    double minDiff -> minDiff
    boolean constrainMaxDiff -> constrainMaxDiff
    double maxDiff -> maxDiff
    int axisSizePixels -> axisSizePixels
    boolean initialized -> initialized
    double absoluteMin -> absoluteMin
    double absoluteMax -> absoluteMax
    java.util.List listeners -> listeners
    java.util.List children -> children
    com.metsci.glimpse.axis.Axis1D parentAxis -> parentAxis
    com.metsci.glimpse.axis.Axis1D orthogonalAxis -> orthogonalAxis
    double orthogonalAspectRatio -> orthogonalAspectRatio
    boolean linkChildren -> linkChildren
    void <init>(com.metsci.glimpse.axis.Axis1D) -> <init>
    void <init>() -> <init>
    void initialize(com.metsci.glimpse.axis.Axis1D) -> initialize
    com.metsci.glimpse.axis.Axis1D clone() -> clone
    void validate() -> validate
    void setParent(com.metsci.glimpse.axis.Axis1D) -> setParent
    void setParent(com.metsci.glimpse.axis.Axis1D,boolean) -> setParent
    void setLinkChildren(boolean) -> setLinkChildren
    void removeChildAxis(com.metsci.glimpse.axis.Axis1D) -> removeChildAxis
    void addChildAxis(com.metsci.glimpse.axis.Axis1D) -> addChildAxis
    void addAxisListener(com.metsci.glimpse.axis.listener.AxisListener1D) -> addAxisListener
    void removeAxisListener(com.metsci.glimpse.axis.listener.AxisListener1D) -> removeAxisListener
    void lockAspectRatio(com.metsci.glimpse.axis.Axis1D,double) -> lockAspectRatio
    void setMinSpan(double) -> setMinSpan
    void setMaxSpan(double) -> setMaxSpan
    void setConstrainMinSpan(boolean) -> setConstrainMinSpan
    void setConstrainMaxSpan(boolean) -> setConstrainMaxSpan
    boolean isMinSpanConstrained() -> isMinSpanConstrained
    boolean isMaxSpanConstrained() -> isMaxSpanConstrained
    void unlockAspectRatio() -> unlockAspectRatio
    void lockMin(double) -> lockMin
    void lockMax(double) -> lockMax
    void lock() -> lock
    void lockMin() -> lockMin
    void lockMax() -> lockMax
    void unlock() -> unlock
    void unlockMin() -> unlockMin
    void unlockMax() -> unlockMax
    void setUpdateMode(com.metsci.glimpse.axis.UpdateMode) -> setUpdateMode
    void setMin(double) -> setMin
    void setMax(double) -> setMax
    void setAbsoluteMin(double) -> setAbsoluteMin
    void setAbsoluteMax(double) -> setAbsoluteMax
    void setSelectionSize(double) -> setSelectionSize
    void setSelectionCenter(double) -> setSelectionCenter
    void setSelectionLock(boolean) -> setSelectionLock
    void setMouseValue(double) -> setMouseValue
    void setSizePixels(int) -> setSizePixels
    void setSizePixels(int,boolean) -> setSizePixels
    void setInitialized() -> setInitialized
    double getMinSpan() -> getMinSpan
    double getMaxSpan() -> getMaxSpan
    com.metsci.glimpse.axis.Axis1D getLockedAspectAxis() -> getLockedAspectAxis
    double getLockedAspectRatio() -> getLockedAspectRatio
    double getLockMin() -> getLockMin
    double getLockMax() -> getLockMax
    boolean isLockMin() -> isLockMin
    boolean isLockMax() -> isLockMax
    boolean isInitialized() -> isInitialized
    com.metsci.glimpse.axis.UpdateMode getUpdateMode() -> getUpdateMode
    double getMin() -> getMin
    double getMax() -> getMax
    double getAbsoluteMin() -> getAbsoluteMin
    double getAbsoluteMax() -> getAbsoluteMax
    double getSelectionSize() -> getSelectionSize
    double getSelectionCenter() -> getSelectionCenter
    boolean isSelectionLocked() -> isSelectionLocked
    int getSizePixels() -> getSizePixels
    double getMouseValue() -> getMouseValue
    double getPixelsPerValue() -> getPixelsPerValue
    double screenPixelToValue(double) -> screenPixelToValue
    int valueToScreenPixel(double) -> valueToScreenPixel
    double valueToScreenPixelUnits(double) -> valueToScreenPixelUnits
    void applyConstraints() -> applyConstraints
    void applyBoundConstraints() -> applyBoundConstraints
    void applyLockConstraints() -> applyLockConstraints
    void applyDiffConstraints() -> applyDiffConstraints
    void applyUpdateMode() -> applyUpdateMode
    void updateLinkedAxes() -> updateLinkedAxes
    void updateLinkedAxes(com.metsci.glimpse.axis.Axis1D[]) -> updateLinkedAxes
    void updateAspectRatio(com.metsci.glimpse.axis.Axis1D,double,java.util.Set) -> updateAspectRatio
    void updateAspectRatio(com.metsci.glimpse.axis.Axis1D,double) -> updateAspectRatio
    void updateOrthogonalAspectRatio(java.util.Set) -> updateOrthogonalAspectRatio
    double recenterMinValue0(double,double,double) -> recenterMinValue0
    void axisUpdated0(com.metsci.glimpse.axis.Axis1D) -> axisUpdated0
    double screenPixelToValue0(double,double) -> screenPixelToValue0
    int valueToScreenPixel0(double,double) -> valueToScreenPixel0
    double valueToScreenPixelUnits0(double,double) -> valueToScreenPixelUnits0
    void recalculateMinValue0() -> recalculateMinValue0
    void recalculateMaxValue0() -> recalculateMaxValue0
    void recalculatePixelsPerValue0() -> recalculatePixelsPerValue0
    void recalculateMinMaxValue0(double) -> recalculateMinMaxValue0
    void recalculateMinMaxValue0() -> recalculateMinMaxValue0
    double getCenterValue() -> getCenterValue
    void requestAxisUpdateUp() -> requestAxisUpdateUp
    void broadcastAxisUpdateUp(com.metsci.glimpse.axis.Axis1D,java.util.Set) -> broadcastAxisUpdateUp
    void axisUpdated(com.metsci.glimpse.axis.Axis1D,java.util.Set) -> axisUpdated
    void setDefaults() -> setDefaults
    double tweakUp(double) -> tweakUp
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
    void <clinit>() -> <clinit>
com.metsci.glimpse.axis.Axis2D -> com.metsci.glimpse.axis.Axis2D:
    com.metsci.glimpse.axis.Axis1D x -> x
    com.metsci.glimpse.axis.Axis1D y -> y
    void <init>(com.metsci.glimpse.axis.Axis1D,com.metsci.glimpse.axis.Axis1D) -> <init>
    void <init>() -> <init>
    com.metsci.glimpse.axis.Axis2D clone() -> clone
    void addAxisListener(com.metsci.glimpse.axis.listener.AxisListener2D) -> addAxisListener
    void lockAspectRatioXY(double) -> lockAspectRatioXY
    void validate() -> validate
    void applyConstraints() -> applyConstraints
    void updateLinkedAxes() -> updateLinkedAxes
    void unlockAspectRatioXY() -> unlockAspectRatioXY
    void centerOnPoint(double,double) -> centerOnPoint
    void set(double,double,double,double) -> set
    void lock() -> lock
    void unlock() -> unlock
    double getMinX() -> getMinX
    double getMaxX() -> getMaxX
    double getMinY() -> getMinY
    double getMaxY() -> getMaxY
    com.metsci.glimpse.axis.Axis1D getAxisX() -> getAxisX
    com.metsci.glimpse.axis.Axis1D getAxisY() -> getAxisY
    void setParent(com.metsci.glimpse.axis.Axis2D) -> setParent
    void setLinkChildren(boolean) -> setLinkChildren
    void setSizePixels(com.metsci.glimpse.context.GlimpseTargetStack) -> setSizePixels
    void setSizePixels(com.metsci.glimpse.context.GlimpseBounds) -> setSizePixels
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
com.metsci.glimpse.axis.Axis2D$1 -> com.metsci.glimpse.axis.Axis2D$1:
    com.metsci.glimpse.axis.listener.AxisListener2D val$listener -> val$listener
    com.metsci.glimpse.axis.Axis2D this$0 -> this$0
    void <init>(com.metsci.glimpse.axis.Axis2D,com.metsci.glimpse.axis.listener.AxisListener2D) -> <init>
    void axisUpdated(com.metsci.glimpse.axis.Axis1D) -> axisUpdated
com.metsci.glimpse.axis.Axis2D$2 -> com.metsci.glimpse.axis.Axis2D$2:
    com.metsci.glimpse.axis.listener.AxisListener2D val$listener -> val$listener
    com.metsci.glimpse.axis.Axis2D this$0 -> this$0
    void <init>(com.metsci.glimpse.axis.Axis2D,com.metsci.glimpse.axis.listener.AxisListener2D) -> <init>
    void axisUpdated(com.metsci.glimpse.axis.Axis1D) -> axisUpdated
com.metsci.glimpse.axis.AxisNotSetException -> com.metsci.glimpse.axis.AxisNotSetException:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    void <init>(com.metsci.glimpse.context.GlimpseContext) -> <init>
    void <init>(com.metsci.glimpse.painter.base.GlimpsePainter,com.metsci.glimpse.context.GlimpseContext) -> <init>
    void <init>(com.metsci.glimpse.context.GlimpseTargetStack) -> <init>
    void <init>(com.metsci.glimpse.painter.base.GlimpsePainter,com.metsci.glimpse.context.GlimpseTargetStack) -> <init>
    void <init>(java.lang.String) -> <init>
com.metsci.glimpse.axis.UpdateMode -> com.metsci.glimpse.axis.UpdateMode:
    com.metsci.glimpse.axis.UpdateMode MinMax -> MinMax
    com.metsci.glimpse.axis.UpdateMode MinScale -> MinScale
    com.metsci.glimpse.axis.UpdateMode CenterScale -> CenterScale
    com.metsci.glimpse.axis.UpdateMode FixedPixel -> FixedPixel
    boolean isScalePerserving -> isScalePerserving
    com.metsci.glimpse.axis.UpdateMode[] $VALUES -> $VALUES
    com.metsci.glimpse.axis.UpdateMode[] values() -> values
    com.metsci.glimpse.axis.UpdateMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,boolean) -> <init>
    boolean isScalePreserving() -> isScalePreserving
    void <clinit>() -> <clinit>
com.metsci.glimpse.axis.factory.AxisFactory1D -> com.metsci.glimpse.axis.factory.AxisFactory1D:
    com.metsci.glimpse.axis.Axis1D newAxis(com.metsci.glimpse.context.GlimpseTargetStack,com.metsci.glimpse.axis.Axis1D) -> newAxis
com.metsci.glimpse.axis.factory.AxisFactory2D -> com.metsci.glimpse.axis.factory.AxisFactory2D:
    com.metsci.glimpse.axis.Axis2D newAxis(com.metsci.glimpse.context.GlimpseTargetStack,com.metsci.glimpse.axis.Axis2D) -> newAxis
    com.metsci.glimpse.axis.factory.AxisFactory1D getAxisFactoryX(com.metsci.glimpse.context.GlimpseTargetStack) -> getAxisFactoryX
    com.metsci.glimpse.axis.factory.AxisFactory1D getAxisFactoryY(com.metsci.glimpse.context.GlimpseTargetStack) -> getAxisFactoryY
com.metsci.glimpse.axis.factory.DefaultAxisFactory1D -> com.metsci.glimpse.axis.factory.DefaultAxisFactory1D:
    void <init>() -> <init>
    com.metsci.glimpse.axis.Axis1D newAxis(com.metsci.glimpse.axis.Axis1D) -> newAxis
    com.metsci.glimpse.axis.Axis1D newAxis(com.metsci.glimpse.context.GlimpseTargetStack,com.metsci.glimpse.axis.Axis1D) -> newAxis
com.metsci.glimpse.axis.factory.DefaultAxisFactory2D -> com.metsci.glimpse.axis.factory.DefaultAxisFactory2D:
    void <init>() -> <init>
    com.metsci.glimpse.axis.Axis2D newAxis(com.metsci.glimpse.axis.Axis2D) -> newAxis
    com.metsci.glimpse.axis.Axis1D newAxisX(com.metsci.glimpse.axis.Axis2D) -> newAxisX
    com.metsci.glimpse.axis.Axis1D newAxisY(com.metsci.glimpse.axis.Axis2D) -> newAxisY
    com.metsci.glimpse.axis.Axis2D newAxis(com.metsci.glimpse.context.GlimpseTargetStack,com.metsci.glimpse.axis.Axis2D) -> newAxis
    com.metsci.glimpse.axis.factory.AxisFactory1D getAxisFactoryX(com.metsci.glimpse.context.GlimpseTargetStack) -> getAxisFactoryX
    com.metsci.glimpse.axis.factory.AxisFactory1D getAxisFactoryY(com.metsci.glimpse.context.GlimpseTargetStack) -> getAxisFactoryY
com.metsci.glimpse.axis.listener.AxisListener1D -> com.metsci.glimpse.axis.listener.AxisListener1D:
    void axisUpdated(com.metsci.glimpse.axis.Axis1D) -> axisUpdated
com.metsci.glimpse.axis.listener.AxisListener2D -> com.metsci.glimpse.axis.listener.AxisListener2D:
    void axisUpdated(com.metsci.glimpse.axis.Axis2D) -> axisUpdated
com.metsci.glimpse.axis.listener.mouse.AxisMouseListener -> com.metsci.glimpse.axis.listener.mouse.AxisMouseListener:
    double zoomConstant -> zoomConstant
    boolean allowSelectionLock -> allowSelectionLock
    boolean allowSelectionZoom -> allowSelectionZoom
    boolean allowPan -> allowPan
    boolean allowZoom -> allowZoom
    boolean anchoredX -> anchoredX
    boolean anchoredY -> anchoredY
    int anchorPixelsX -> anchorPixelsX
    int anchorPixelsY -> anchorPixelsY
    double anchorValueX -> anchorValueX
    double anchorValueY -> anchorValueY
    void <init>() -> <init>
    void addAxisMouseListener(com.metsci.glimpse.event.mouse.Mouseable) -> addAxisMouseListener
    void setAllowSelectionLock(boolean) -> setAllowSelectionLock
    void setAllowSelectionZoom(boolean) -> setAllowSelectionZoom
    void setAllowZoom(boolean) -> setAllowZoom
    void setAllowPan(boolean) -> setAllowPan
    int getDim(boolean,int,int) -> getDim
    double getDim(boolean,double,double) -> getDim
    void mouseWheelMoved(com.metsci.glimpse.event.mouse.GlimpseMouseEvent,com.metsci.glimpse.axis.Axis1D,boolean) -> mouseWheelMoved
    void mouseMoved(com.metsci.glimpse.event.mouse.GlimpseMouseEvent,com.metsci.glimpse.axis.Axis1D,boolean) -> mouseMoved
    void mousePressed(com.metsci.glimpse.event.mouse.GlimpseMouseEvent,com.metsci.glimpse.axis.Axis1D,boolean) -> mousePressed
    void mouseReleased(com.metsci.glimpse.event.mouse.GlimpseMouseEvent,com.metsci.glimpse.axis.Axis1D,boolean) -> mouseReleased
    void unanchor(com.metsci.glimpse.axis.Axis1D,boolean,int,int) -> unanchor
    void anchor(com.metsci.glimpse.axis.Axis1D,boolean,int,int) -> anchor
    void pan(com.metsci.glimpse.axis.Axis1D,boolean,int,int) -> pan
    void zoom(com.metsci.glimpse.axis.Axis1D,boolean,double,int,int) -> zoom
    void zoomSelection(com.metsci.glimpse.axis.Axis1D,boolean,double,int,int) -> zoomSelection
    void move(com.metsci.glimpse.axis.Axis1D,boolean,int,int) -> move
    void toggleSelectionLock(com.metsci.glimpse.axis.Axis1D) -> toggleSelectionLock
com.metsci.glimpse.axis.listener.mouse.AxisMouseListener1D -> com.metsci.glimpse.axis.listener.mouse.AxisMouseListener1D:
    void <init>() -> <init>
    com.metsci.glimpse.layout.GlimpseAxisLayout1D getAxisLayout(com.metsci.glimpse.event.mouse.GlimpseMouseEvent) -> getAxisLayout
    void mousePressed(com.metsci.glimpse.event.mouse.GlimpseMouseEvent) -> mousePressed
    void mouseMoved(com.metsci.glimpse.event.mouse.GlimpseMouseEvent) -> mouseMoved
    void mouseWheelMoved(com.metsci.glimpse.event.mouse.GlimpseMouseEvent) -> mouseWheelMoved
    void mouseReleased(com.metsci.glimpse.event.mouse.GlimpseMouseEvent) -> mouseReleased
    void mouseEntered(com.metsci.glimpse.event.mouse.GlimpseMouseEvent) -> mouseEntered
    void mouseExited(com.metsci.glimpse.event.mouse.GlimpseMouseEvent) -> mouseExited
    void validateAxes(com.metsci.glimpse.axis.Axis1D) -> validateAxes
com.metsci.glimpse.axis.listener.mouse.AxisMouseListener2D -> com.metsci.glimpse.axis.listener.mouse.AxisMouseListener2D:
    void <init>() -> <init>
    com.metsci.glimpse.layout.GlimpseAxisLayout2D getAxisLayout(com.metsci.glimpse.event.mouse.GlimpseMouseEvent) -> getAxisLayout
    void mousePressed(com.metsci.glimpse.event.mouse.GlimpseMouseEvent) -> mousePressed
    void mouseMoved(com.metsci.glimpse.event.mouse.GlimpseMouseEvent) -> mouseMoved
    void mouseWheelMoved(com.metsci.glimpse.event.mouse.GlimpseMouseEvent) -> mouseWheelMoved
    void mouseReleased(com.metsci.glimpse.event.mouse.GlimpseMouseEvent) -> mouseReleased
    void mouseEntered(com.metsci.glimpse.event.mouse.GlimpseMouseEvent) -> mouseEntered
    void mouseExited(com.metsci.glimpse.event.mouse.GlimpseMouseEvent) -> mouseExited
    void applyAndUpdate(com.metsci.glimpse.axis.Axis1D,com.metsci.glimpse.axis.Axis1D) -> applyAndUpdate
com.metsci.glimpse.axis.painter.ColorYAxisPainter -> com.metsci.glimpse.axis.painter.ColorYAxisPainter:
    com.metsci.glimpse.gl.texture.ColorTexture1D colorTexture -> colorTexture
    int colorBarSize -> colorBarSize
    boolean outline -> outline
    void <init>(com.metsci.glimpse.axis.painter.label.AxisLabelHandler) -> <init>
    void setEnableOutline(boolean) -> setEnableOutline
    void setColorScale(com.metsci.glimpse.gl.texture.ColorTexture1D) -> setColorScale
    void setColorBarSize(int) -> setColorBarSize
    void paintTo(com.metsci.glimpse.context.GlimpseContext,com.metsci.glimpse.context.GlimpseBounds,com.metsci.glimpse.axis.Axis1D) -> paintTo
    void paintColorScale(javax.media.opengl.GL2,com.metsci.glimpse.axis.Axis1D,int,int) -> paintColorScale
    void outlineColorQuad(javax.media.opengl.GL2,com.metsci.glimpse.axis.Axis1D,int,int) -> outlineColorQuad
    int getColorBarMinX(int) -> getColorBarMinX
    int getColorBarMaxX(int) -> getColorBarMaxX
com.metsci.glimpse.axis.painter.NumericAxisPainter -> com.metsci.glimpse.axis.painter.NumericAxisPainter:
    int tickBufferSize -> tickBufferSize
    int tickSize -> tickSize
    int textBufferSize -> textBufferSize
    int labelBufferSize -> labelBufferSize
    int tickLineWidth -> tickLineWidth
    int markerWidth -> markerWidth
    boolean keepLabelsForExtremaFullyVisible -> keepLabelsForExtremaFullyVisible
    boolean showLabelsForOffscreenTicks -> showLabelsForOffscreenTicks
    boolean showSelectionLine -> showSelectionLine
    boolean showLabel -> showLabel
    boolean showMinorTicks -> showMinorTicks
    com.jogamp.opengl.util.awt.TextRenderer textRenderer -> textRenderer
    java.awt.Font newFont -> newFont
    boolean antialias -> antialias
    float[] tickColor -> tickColor
    float[] tickLabelColor -> tickLabelColor
    float[] axisLabelColor -> axisLabelColor
    com.metsci.glimpse.axis.painter.label.AxisLabelHandler ticks -> ticks
    boolean fontSet -> fontSet
    boolean tickColorSet -> tickColorSet
    boolean labelColorSet -> labelColorSet
    void <init>(com.metsci.glimpse.axis.painter.label.AxisLabelHandler) -> <init>
    void setAxisLabel(java.lang.String) -> setAxisLabel
    void setShowLabelsForOffscreenTicks(boolean) -> setShowLabelsForOffscreenTicks
    void setKeepLabelsForExtremaFullyVisible(boolean) -> setKeepLabelsForExtremaFullyVisible
    void setShowLabel(boolean) -> setShowLabel
    void setFont(java.awt.Font) -> setFont
    void setFont(java.awt.Font,boolean) -> setFont
    void setTickSize(int) -> setTickSize
    void setTickBufferSize(int) -> setTickBufferSize
    void setTickLabelBufferSize(int) -> setTickLabelBufferSize
    void setAxisLabelBufferSize(int) -> setAxisLabelBufferSize
    void setMarkerWidth(int) -> setMarkerWidth
    void setShowMarker(boolean) -> setShowMarker
    void setTickColor(float[]) -> setTickColor
    void setTickLabelColor(float[]) -> setTickLabelColor
    void setAxisLabelColor(float[]) -> setAxisLabelColor
    void setShowMinorTicks(boolean) -> setShowMinorTicks
    com.metsci.glimpse.axis.painter.label.AxisLabelHandler getTickCalculator() -> getTickCalculator
    void setTickCalculator(com.metsci.glimpse.axis.painter.label.AxisLabelHandler) -> setTickCalculator
    void setLookAndFeel(com.metsci.glimpse.support.settings.LookAndFeel) -> setLookAndFeel
    void dispose(javax.media.opengl.GLContext) -> dispose
    void updateTextRenderer() -> updateTextRenderer
com.metsci.glimpse.axis.painter.NumericXAxisPainter -> com.metsci.glimpse.axis.painter.NumericXAxisPainter:
    boolean packLabel -> packLabel
    void <init>(com.metsci.glimpse.axis.painter.label.AxisLabelHandler) -> <init>
    void paintTo(com.metsci.glimpse.context.GlimpseContext,com.metsci.glimpse.context.GlimpseBounds,com.metsci.glimpse.axis.Axis1D) -> paintTo
    void paintTicks(javax.media.opengl.GL2,com.metsci.glimpse.axis.Axis1D,int,int) -> paintTicks
    void paintAxisLabel(javax.media.opengl.GL2,com.metsci.glimpse.axis.Axis1D,int,int) -> paintAxisLabel
    void paintSelectionLine(javax.media.opengl.GL2,com.metsci.glimpse.axis.Axis1D,int,int) -> paintSelectionLine
    int getAxisLabelPositionY(int,int) -> getAxisLabelPositionY
    int getTickTextPositionY(int,int) -> getTickTextPositionY
    int getTickTopY(int,int) -> getTickTopY
    int getTickBottomY(int,int) -> getTickBottomY
com.metsci.glimpse.axis.painter.NumericYAxisPainter -> com.metsci.glimpse.axis.painter.NumericYAxisPainter:
    void <init>(com.metsci.glimpse.axis.painter.label.AxisLabelHandler) -> <init>
    void paintTo(com.metsci.glimpse.context.GlimpseContext,com.metsci.glimpse.context.GlimpseBounds,com.metsci.glimpse.axis.Axis1D) -> paintTo
    void paintTicks(javax.media.opengl.GL2,com.metsci.glimpse.axis.Axis1D,int,int) -> paintTicks
    void paintAxisLabel(javax.media.opengl.GL2,com.metsci.glimpse.axis.Axis1D,int,int) -> paintAxisLabel
    void paintSelectionLine(javax.media.opengl.GL2,com.metsci.glimpse.axis.Axis1D,int,int) -> paintSelectionLine
    int getAxisLabelPositionX(int,int) -> getAxisLabelPositionX
    int getTickTextPositionX(int,int) -> getTickTextPositionX
    int getTickRightX(int,int) -> getTickRightX
    int getTickLeftX(int,int) -> getTickLeftX
com.metsci.glimpse.axis.painter.label.AxisLabelHandler -> com.metsci.glimpse.axis.painter.label.AxisLabelHandler:
    double[] getTickPositions(com.metsci.glimpse.axis.Axis1D) -> getTickPositions
    java.lang.String[] getTickLabels(com.metsci.glimpse.axis.Axis1D,double[]) -> getTickLabels
    double[] getMinorTickPositions(double[]) -> getMinorTickPositions
    java.lang.String getAxisLabel(com.metsci.glimpse.axis.Axis1D) -> getAxisLabel
    void setAxisLabel(java.lang.String) -> setAxisLabel
    com.metsci.glimpse.axis.painter.label.AxisUnitConverter getAxisUnitConverter() -> getAxisUnitConverter
    void setAxisUnitConverter(com.metsci.glimpse.axis.painter.label.AxisUnitConverter) -> setAxisUnitConverter
com.metsci.glimpse.axis.painter.label.AxisUnitConverter -> com.metsci.glimpse.axis.painter.label.AxisUnitConverter:
    double fromAxisUnits(double) -> fromAxisUnits
    double toAxisUnits(double) -> toAxisUnits
com.metsci.glimpse.axis.painter.label.AxisUnitConverters -> com.metsci.glimpse.axis.painter.label.AxisUnitConverters:
    com.metsci.glimpse.axis.painter.label.AxisUnitConverter identity -> identity
    com.metsci.glimpse.axis.painter.label.AxisUnitConverter suShownAsMeters -> suShownAsMeters
    com.metsci.glimpse.axis.painter.label.AxisUnitConverter suShownAsNauticalMiles -> suShownAsNauticalMiles
    com.metsci.glimpse.axis.painter.label.AxisUnitConverter suShownAsFeet -> suShownAsFeet
    com.metsci.glimpse.axis.painter.label.AxisUnitConverter suShownAsYards -> suShownAsYards
    com.metsci.glimpse.axis.painter.label.AxisUnitConverter suShownAsKiloyards -> suShownAsKiloyards
    com.metsci.glimpse.axis.painter.label.AxisUnitConverter suShownAsMetersPerSecond -> suShownAsMetersPerSecond
    com.metsci.glimpse.axis.painter.label.AxisUnitConverter suShownAsKnots -> suShownAsKnots
    com.metsci.glimpse.axis.painter.label.AxisUnitConverter suShownAsMicroseconds -> suShownAsMicroseconds
    com.metsci.glimpse.axis.painter.label.AxisUnitConverter suShownAsMilliseconds -> suShownAsMilliseconds
    com.metsci.glimpse.axis.painter.label.AxisUnitConverter suShownAsSeconds -> suShownAsSeconds
    com.metsci.glimpse.axis.painter.label.AxisUnitConverter suShownAsMinutes -> suShownAsMinutes
    com.metsci.glimpse.axis.painter.label.AxisUnitConverter suShownAsHours -> suShownAsHours
    com.metsci.glimpse.axis.painter.label.AxisUnitConverter suShownAsDays -> suShownAsDays
    com.metsci.glimpse.axis.painter.label.AxisUnitConverter suShownAsWeeks -> suShownAsWeeks
    com.metsci.glimpse.axis.painter.label.AxisUnitConverter suShownAsDegrees -> suShownAsDegrees
    com.metsci.glimpse.axis.painter.label.AxisUnitConverter suShownAsNavigationDegrees -> suShownAsNavigationDegrees
    void <init>() -> <init>
    com.metsci.glimpse.axis.painter.label.AxisUnitConverter negated(com.metsci.glimpse.axis.painter.label.AxisUnitConverter) -> negated
    void <clinit>() -> <clinit>
com.metsci.glimpse.axis.painter.label.AxisUnitConverters$1 -> com.metsci.glimpse.axis.painter.label.AxisUnitConverters$1:
    void <init>() -> <init>
    double fromAxisUnits(double) -> fromAxisUnits
    double toAxisUnits(double) -> toAxisUnits
com.metsci.glimpse.axis.painter.label.AxisUnitConverters$10 -> com.metsci.glimpse.axis.painter.label.AxisUnitConverters$10:
    void <init>() -> <init>
    double fromAxisUnits(double) -> fromAxisUnits
    double toAxisUnits(double) -> toAxisUnits
com.metsci.glimpse.axis.painter.label.AxisUnitConverters$11 -> com.metsci.glimpse.axis.painter.label.AxisUnitConverters$11:
    void <init>() -> <init>
    double fromAxisUnits(double) -> fromAxisUnits
    double toAxisUnits(double) -> toAxisUnits
com.metsci.glimpse.axis.painter.label.AxisUnitConverters$12 -> com.metsci.glimpse.axis.painter.label.AxisUnitConverters$12:
    void <init>() -> <init>
    double fromAxisUnits(double) -> fromAxisUnits
    double toAxisUnits(double) -> toAxisUnits
com.metsci.glimpse.axis.painter.label.AxisUnitConverters$13 -> com.metsci.glimpse.axis.painter.label.AxisUnitConverters$13:
    void <init>() -> <init>
    double fromAxisUnits(double) -> fromAxisUnits
    double toAxisUnits(double) -> toAxisUnits
com.metsci.glimpse.axis.painter.label.AxisUnitConverters$14 -> com.metsci.glimpse.axis.painter.label.AxisUnitConverters$14:
    void <init>() -> <init>
    double fromAxisUnits(double) -> fromAxisUnits
    double toAxisUnits(double) -> toAxisUnits
com.metsci.glimpse.axis.painter.label.AxisUnitConverters$15 -> com.metsci.glimpse.axis.painter.label.AxisUnitConverters$15:
    void <init>() -> <init>
    double fromAxisUnits(double) -> fromAxisUnits
    double toAxisUnits(double) -> toAxisUnits
com.metsci.glimpse.axis.painter.label.AxisUnitConverters$16 -> com.metsci.glimpse.axis.painter.label.AxisUnitConverters$16:
    void <init>() -> <init>
    double fromAxisUnits(double) -> fromAxisUnits
    double toAxisUnits(double) -> toAxisUnits
com.metsci.glimpse.axis.painter.label.AxisUnitConverters$17 -> com.metsci.glimpse.axis.painter.label.AxisUnitConverters$17:
    void <init>() -> <init>
    double fromAxisUnits(double) -> fromAxisUnits
    double toAxisUnits(double) -> toAxisUnits
com.metsci.glimpse.axis.painter.label.AxisUnitConverters$18 -> com.metsci.glimpse.axis.painter.label.AxisUnitConverters$18:
    void <init>() -> <init>
    double fromAxisUnits(double) -> fromAxisUnits
    double toAxisUnits(double) -> toAxisUnits
com.metsci.glimpse.axis.painter.label.AxisUnitConverters$2 -> com.metsci.glimpse.axis.painter.label.AxisUnitConverters$2:
    com.metsci.glimpse.axis.painter.label.AxisUnitConverter val$c -> val$c
    void <init>(com.metsci.glimpse.axis.painter.label.AxisUnitConverter) -> <init>
    double fromAxisUnits(double) -> fromAxisUnits
    double toAxisUnits(double) -> toAxisUnits
com.metsci.glimpse.axis.painter.label.AxisUnitConverters$3 -> com.metsci.glimpse.axis.painter.label.AxisUnitConverters$3:
    void <init>() -> <init>
    double fromAxisUnits(double) -> fromAxisUnits
    double toAxisUnits(double) -> toAxisUnits
com.metsci.glimpse.axis.painter.label.AxisUnitConverters$4 -> com.metsci.glimpse.axis.painter.label.AxisUnitConverters$4:
    void <init>() -> <init>
    double fromAxisUnits(double) -> fromAxisUnits
    double toAxisUnits(double) -> toAxisUnits
com.metsci.glimpse.axis.painter.label.AxisUnitConverters$5 -> com.metsci.glimpse.axis.painter.label.AxisUnitConverters$5:
    void <init>() -> <init>
    double fromAxisUnits(double) -> fromAxisUnits
    double toAxisUnits(double) -> toAxisUnits
com.metsci.glimpse.axis.painter.label.AxisUnitConverters$6 -> com.metsci.glimpse.axis.painter.label.AxisUnitConverters$6:
    void <init>() -> <init>
    double fromAxisUnits(double) -> fromAxisUnits
    double toAxisUnits(double) -> toAxisUnits
com.metsci.glimpse.axis.painter.label.AxisUnitConverters$7 -> com.metsci.glimpse.axis.painter.label.AxisUnitConverters$7:
    void <init>() -> <init>
    double fromAxisUnits(double) -> fromAxisUnits
    double toAxisUnits(double) -> toAxisUnits
com.metsci.glimpse.axis.painter.label.AxisUnitConverters$8 -> com.metsci.glimpse.axis.painter.label.AxisUnitConverters$8:
    void <init>() -> <init>
    double fromAxisUnits(double) -> fromAxisUnits
    double toAxisUnits(double) -> toAxisUnits
com.metsci.glimpse.axis.painter.label.AxisUnitConverters$9 -> com.metsci.glimpse.axis.painter.label.AxisUnitConverters$9:
    void <init>() -> <init>
    double fromAxisUnits(double) -> fromAxisUnits
    double toAxisUnits(double) -> toAxisUnits
com.metsci.glimpse.axis.painter.label.GridAxisLabelHandler -> com.metsci.glimpse.axis.painter.label.GridAxisLabelHandler:
    int tickSpacing -> tickSpacing
    int minorTickCount -> minorTickCount
    java.text.NumberFormat tickNumberFormatter -> tickNumberFormatter
    java.text.NumberFormat orderNumberFormatter -> orderNumberFormatter
    java.lang.String axisLabel -> axisLabel
    java.lang.String axisUnits -> axisUnits
    java.lang.String axisKiloUnits -> axisKiloUnits
    java.lang.String axisMilliUnits -> axisMilliUnits
    com.metsci.glimpse.axis.painter.label.AxisUnitConverter converter -> converter
    void <init>() -> <init>
    com.metsci.glimpse.axis.painter.label.AxisUnitConverter getAxisUnitConverter() -> getAxisUnitConverter
    void setAxisUnitConverter(com.metsci.glimpse.axis.painter.label.AxisUnitConverter) -> setAxisUnitConverter
    double[] getTickPositions(com.metsci.glimpse.axis.Axis1D) -> getTickPositions
    java.lang.String[] getTickLabels(com.metsci.glimpse.axis.Axis1D,double[]) -> getTickLabels
    double[] getMinorTickPositions(double[]) -> getMinorTickPositions
    java.lang.String getAxisLabel(com.metsci.glimpse.axis.Axis1D) -> getAxisLabel
    void setTickSpacing(int) -> setTickSpacing
    void setMinorTickCount(int) -> setMinorTickCount
    void setAxisLabel(java.lang.String) -> setAxisLabel
    void setAxisUnits(java.lang.String,boolean) -> setAxisUnits
    void setAxisUnits(java.lang.String,java.lang.String,java.lang.String) -> setAxisUnits
    java.lang.String axisLabel(int) -> axisLabel
    double tickInterval(com.metsci.glimpse.axis.Axis1D) -> tickInterval
    java.lang.String tickString(com.metsci.glimpse.axis.Axis1D,double,int) -> tickString
    double tickInterval(com.metsci.glimpse.axis.Axis1D,double) -> tickInterval
    double[] tickPositions(com.metsci.glimpse.axis.Axis1D,double) -> tickPositions
    int getOrderTick(double) -> getOrderTick
    int getOrderAxis(com.metsci.glimpse.axis.Axis1D) -> getOrderAxis
    void updateFormatter(int,int) -> updateFormatter
com.metsci.glimpse.axis.painter.label.GridAxisLabelHandler$1 -> com.metsci.glimpse.axis.painter.label.GridAxisLabelHandler$1:
    com.metsci.glimpse.axis.painter.label.GridAxisLabelHandler this$0 -> this$0
    void <init>(com.metsci.glimpse.axis.painter.label.GridAxisLabelHandler) -> <init>
    double fromAxisUnits(double) -> fromAxisUnits
    double toAxisUnits(double) -> toAxisUnits
com.metsci.glimpse.axis.tagged.Constraint -> com.metsci.glimpse.axis.tagged.Constraint:
    java.lang.String getName() -> getName
    void applyConstraint(com.metsci.glimpse.axis.tagged.TaggedAxis1D) -> applyConstraint
com.metsci.glimpse.axis.tagged.NamedConstraint -> com.metsci.glimpse.axis.tagged.NamedConstraint:
    java.lang.String name -> name
    void <init>(java.lang.String) -> <init>
    java.lang.String getName() -> getName
com.metsci.glimpse.axis.tagged.Tag -> com.metsci.glimpse.axis.tagged.Tag:
    java.lang.String TEX_COORD_ATTR -> TEX_COORD_ATTR
    java.util.Comparator tagValueComparator -> tagValueComparator
    java.lang.String name -> name
    double value -> value
    java.util.Map attributeMap -> attributeMap
    void <init>(com.metsci.glimpse.axis.tagged.Tag) -> <init>
    void <init>(java.lang.String,double) -> <init>
    void <init>(java.lang.String) -> <init>
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    double getValue() -> getValue
    void setValue(double) -> setValue
    com.metsci.glimpse.axis.tagged.Tag setAttribute(java.lang.String,java.lang.Object) -> setAttribute
    boolean hasAttribute(java.lang.String) -> hasAttribute
    java.lang.Object getAttribute(java.lang.String) -> getAttribute
    float getAttributeFloat(java.lang.String) -> getAttributeFloat
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void <clinit>() -> <clinit>
com.metsci.glimpse.axis.tagged.Tag$1 -> com.metsci.glimpse.axis.tagged.Tag$1:
    void <init>() -> <init>
    int compare(com.metsci.glimpse.axis.tagged.Tag,com.metsci.glimpse.axis.tagged.Tag) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.metsci.glimpse.axis.tagged.TaggedAxis1D -> com.metsci.glimpse.axis.tagged.TaggedAxis1D:
    java.util.Map tagMap -> tagMap
    java.util.Map constraintMap -> constraintMap
    java.util.List tags -> tags
    java.util.Collection constraints -> constraints
    java.util.Comparator valueComparator -> valueComparator
    void <init>(com.metsci.glimpse.axis.Axis1D) -> <init>
    void <init>() -> <init>
    void initialize(com.metsci.glimpse.axis.Axis1D) -> initialize
    com.metsci.glimpse.axis.Axis1D clone() -> clone
    void validateTags() -> validateTags
    com.metsci.glimpse.axis.tagged.Tag addTag(com.metsci.glimpse.axis.tagged.Tag) -> addTag
    com.metsci.glimpse.axis.tagged.Tag addTag(java.lang.String,double) -> addTag
    void removeTag(java.lang.String) -> removeTag
    void removeAllTags() -> removeAllTags
    void addConstraint(com.metsci.glimpse.axis.tagged.Constraint) -> addConstraint
    void removeConstraint(java.lang.String) -> removeConstraint
    java.util.Collection getAllConstraints() -> getAllConstraints
    void removeAllConstraints() -> removeAllConstraints
    com.metsci.glimpse.axis.tagged.Tag getTag(java.lang.String) -> getTag
    java.util.List getSortedTags() -> getSortedTags
    void applyTagConstraints() -> applyTagConstraints
    void updateTagArray() -> updateTagArray
    void updateConstraintArray() -> updateConstraintArray
    void axisUpdated0(com.metsci.glimpse.axis.Axis1D) -> axisUpdated0
    java.lang.Object clone() -> clone
com.metsci.glimpse.axis.tagged.TaggedAxis1D$1 -> com.metsci.glimpse.axis.tagged.TaggedAxis1D$1:
    com.metsci.glimpse.axis.tagged.TaggedAxis1D this$0 -> this$0
    void <init>(com.metsci.glimpse.axis.tagged.TaggedAxis1D) -> <init>
    int compare(com.metsci.glimpse.axis.tagged.Tag,com.metsci.glimpse.axis.tagged.Tag) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.metsci.glimpse.axis.tagged.TaggedAxisMouseListener1D -> com.metsci.glimpse.axis.tagged.TaggedAxisMouseListener1D:
    int MAX_PIXEL_DISTANCE -> MAX_PIXEL_DISTANCE
    double tagAnchor -> tagAnchor
    int maxDistance -> maxDistance
    com.metsci.glimpse.axis.tagged.Tag selectedTag -> selectedTag
    boolean dragTogether -> dragTogether
    boolean enableDragTogether -> enableDragTogether
    void <init>(int) -> <init>
    void <init>() -> <init>
    void setDragTagsTogether(boolean) -> setDragTagsTogether
    void mouseMoved(com.metsci.glimpse.event.mouse.GlimpseMouseEvent,com.metsci.glimpse.axis.Axis1D,boolean) -> mouseMoved
    void mousePressed(com.metsci.glimpse.event.mouse.GlimpseMouseEvent,com.metsci.glimpse.axis.Axis1D,boolean) -> mousePressed
    void updateTagSelection(com.metsci.glimpse.event.mouse.GlimpseMouseEvent,com.metsci.glimpse.axis.Axis1D,boolean) -> updateTagSelection
    void mouseReleased(com.metsci.glimpse.event.mouse.GlimpseMouseEvent,com.metsci.glimpse.axis.Axis1D,boolean) -> mouseReleased
    com.metsci.glimpse.axis.tagged.Tag getSelectedTag(com.metsci.glimpse.axis.tagged.TaggedAxis1D,java.util.List,int,int) -> getSelectedTag
com.metsci.glimpse.axis.tagged.painter.TaggedColorYAxisPainter -> com.metsci.glimpse.axis.tagged.painter.TaggedColorYAxisPainter:
    float DEFAULT_TAG_POINTER_OUTLINE_WIDTH -> DEFAULT_TAG_POINTER_OUTLINE_WIDTH
    int DEFAULT_TAG_POINTER_HEIGHT -> DEFAULT_TAG_POINTER_HEIGHT
    int DEFAULT_TAG_HEIGHT -> DEFAULT_TAG_HEIGHT
    int DEFAULT_TAG_HALFBASE -> DEFAULT_TAG_HALFBASE
    float[] tagColor -> tagColor
    boolean tagColorSet -> tagColorSet
    int tagHalfWidth -> tagHalfWidth
    int tagHeight -> tagHeight
    int tagPointerHeight -> tagPointerHeight
    float tagPointerOutlineWidth -> tagPointerOutlineWidth
    void <init>(com.metsci.glimpse.axis.painter.label.AxisLabelHandler) -> <init>
    void setTagColor(float[]) -> setTagColor
    void setTagHalfWidth(int) -> setTagHalfWidth
    void setTagHeight(int) -> setTagHeight
    void setLookAndFeel(com.metsci.glimpse.support.settings.LookAndFeel) -> setLookAndFeel
    void paintTo(com.metsci.glimpse.context.GlimpseContext,com.metsci.glimpse.context.GlimpseBounds,com.metsci.glimpse.axis.Axis1D) -> paintTo
    void paintTags(javax.media.opengl.GL2,com.metsci.glimpse.axis.tagged.TaggedAxis1D,int,int) -> paintTags
    void paintTag(javax.media.opengl.GL2,com.metsci.glimpse.axis.tagged.Tag,com.metsci.glimpse.axis.tagged.TaggedAxis1D,int,int) -> paintTag
    int getTagMinX(int) -> getTagMinX
    int getTagMaxX(int) -> getTagMaxX
    int getTagPointerMaxX(int) -> getTagPointerMaxX
com.metsci.glimpse.axis.tagged.painter.TaggedPartialColorYAxisPainter -> com.metsci.glimpse.axis.tagged.painter.TaggedPartialColorYAxisPainter:
    java.nio.FloatBuffer vertexCoords -> vertexCoords
    java.nio.FloatBuffer textureCoords -> textureCoords
    void <init>(com.metsci.glimpse.axis.painter.label.AxisLabelHandler) -> <init>
    void paintColorScale(javax.media.opengl.GL2,com.metsci.glimpse.axis.Axis1D,int,int) -> paintColorScale
    int updateCoordinateBuffers(com.metsci.glimpse.axis.tagged.TaggedAxis1D,int,int) -> updateCoordinateBuffers
com.metsci.glimpse.axis.tagged.shader.TaggedColorScaleShader -> com.metsci.glimpse.axis.tagged.shader.TaggedColorScaleShader:
    java.lang.String DEFAULT_SHADER_SOURCE -> DEFAULT_SHADER_SOURCE
    com.metsci.glimpse.gl.shader.ShaderArg dataTexUnit -> dataTexUnit
    com.metsci.glimpse.gl.shader.ShaderArg colorTexUnit -> colorTexUnit
    com.metsci.glimpse.gl.shader.ShaderArg vertexCoordTexUnit -> vertexCoordTexUnit
    com.metsci.glimpse.gl.shader.ShaderArg textureCoordTexUnit -> textureCoordTexUnit
    com.metsci.glimpse.gl.shader.ShaderArg sizeArg -> sizeArg
    com.metsci.glimpse.gl.shader.ShaderArg alphaArg -> alphaArg
    com.metsci.glimpse.gl.shader.ShaderArg discardNaN -> discardNaN
    com.metsci.glimpse.gl.shader.ShaderArg discardAbove -> discardAbove
    com.metsci.glimpse.gl.shader.ShaderArg discardBelow -> discardBelow
    com.metsci.glimpse.axis.tagged.TaggedAxis1D taggedAxis -> taggedAxis
    void <init>(com.metsci.glimpse.axis.tagged.TaggedAxis1D,int,int,int,int,java.lang.String) -> <init>
    void <init>(com.metsci.glimpse.axis.tagged.TaggedAxis1D,int,int,int,int) -> <init>
    com.metsci.glimpse.gl.shader.ShaderSource readSource(java.lang.String) -> readSource
    void axisUpdated(com.metsci.glimpse.axis.Axis1D) -> axisUpdated
    void setSizeArgValue() -> setSizeArgValue
    void setAlpha(float) -> setAlpha
    void setDiscardNaN(boolean) -> setDiscardNaN
    void setDiscardAbove(boolean) -> setDiscardAbove
    void setDiscardBelow(boolean) -> setDiscardBelow
    boolean preLink(javax.media.opengl.GL,int) -> preLink
    void preDisplay(javax.media.opengl.GL) -> preDisplay
    void postDisplay(javax.media.opengl.GL) -> postDisplay
com.metsci.glimpse.canvas.GlimpseCanvas -> com.metsci.glimpse.canvas.GlimpseCanvas:
    javax.media.opengl.GLProfile getGLProfile() -> getGLProfile
    javax.media.opengl.GLAutoDrawable getGLDrawable() -> getGLDrawable
    javax.media.opengl.GLContext getGLContext() -> getGLContext
    com.metsci.glimpse.context.GlimpseContext getGlimpseContext() -> getGlimpseContext
    com.metsci.glimpse.context.GlimpseBounds getTargetBounds() -> getTargetBounds
    void paint() -> paint
    void destroy() -> destroy
    void disposeAttached() -> disposeAttached
    void dispose() -> dispose
    void disposePainter(com.metsci.glimpse.painter.base.GlimpsePainter) -> disposePainter
    boolean isDestroyed() -> isDestroyed
    void addDisposeListener(javax.media.opengl.GLRunnable) -> addDisposeListener
com.metsci.glimpse.canvas.LayoutManager -> com.metsci.glimpse.canvas.LayoutManager:
    com.metsci.glimpse.canvas.LayoutManager$LayoutOrderComparator comparator -> comparator
    java.util.Map layoutMap -> layoutMap
    java.util.List layoutList -> layoutList
    java.util.List unmodifiableLayoutList -> unmodifiableLayoutList
    void <init>() -> <init>
    void removeLayout(com.metsci.glimpse.layout.GlimpseLayout) -> removeLayout
    void removeAllLayouts() -> removeAllLayouts
    void addLayout(com.metsci.glimpse.layout.GlimpseLayout) -> addLayout
    void addLayout(com.metsci.glimpse.layout.GlimpseLayout,int) -> addLayout
    void setZOrder(com.metsci.glimpse.layout.GlimpseLayout,int) -> setZOrder
    java.util.List getLayoutList() -> getLayoutList
    void updateLayoutList() -> updateLayoutList
com.metsci.glimpse.canvas.LayoutManager$LayoutOrder -> com.metsci.glimpse.canvas.LayoutManager$LayoutOrder:
    com.metsci.glimpse.layout.GlimpseLayout layout -> layout
    int zOrder -> zOrder
    void <init>(com.metsci.glimpse.layout.GlimpseLayout) -> <init>
    void <init>(com.metsci.glimpse.layout.GlimpseLayout,int) -> <init>
    com.metsci.glimpse.layout.GlimpseLayout getLayout() -> getLayout
    int getZOrder() -> getZOrder
    void setZOrder(int) -> setZOrder
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.metsci.glimpse.canvas.LayoutManager$LayoutOrderComparator -> com.metsci.glimpse.canvas.LayoutManager$LayoutOrderComparator:
    void <init>() -> <init>
    int compare(com.metsci.glimpse.canvas.LayoutManager$LayoutOrder,com.metsci.glimpse.canvas.LayoutManager$LayoutOrder) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.metsci.glimpse.canvas.NewtGlimpseCanvas -> com.metsci.glimpse.canvas.NewtGlimpseCanvas:
    com.jogamp.newt.opengl.GLWindow getGLWindow() -> getGLWindow
com.metsci.glimpse.canvas.NewtSwingGlimpseCanvas -> com.metsci.glimpse.canvas.NewtSwingGlimpseCanvas:
    java.util.logging.Logger logger -> logger
    long serialVersionUID -> serialVersionUID
    javax.media.opengl.GLProfile glProfile -> glProfile
    javax.media.opengl.GLCapabilities glCapabilities -> glCapabilities
    com.jogamp.newt.opengl.GLWindow glWindow -> glWindow
    com.jogamp.newt.awt.NewtCanvasAWT glCanvas -> glCanvas
    boolean isEventConsumer -> isEventConsumer
    boolean isEventGenerator -> isEventGenerator
    boolean isDestroyed -> isDestroyed
    com.metsci.glimpse.canvas.LayoutManager layoutManager -> layoutManager
    com.metsci.glimpse.event.mouse.newt.MouseWrapperNewt mouseHelper -> mouseHelper
    java.util.List disposeListeners -> disposeListeners
    void <init>(java.lang.String,javax.media.opengl.GLContext) -> <init>
    void <init>(javax.media.opengl.GLProfile,javax.media.opengl.GLContext) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(javax.media.opengl.GLContext) -> <init>
    void <init>() -> <init>
    void init(javax.media.opengl.GLProfile,javax.media.opengl.GLContext) -> init
    com.metsci.glimpse.event.mouse.newt.MouseWrapperNewt createMouseWrapper() -> createMouseWrapper
    javax.media.opengl.GLEventListener createGLEventListener() -> createGLEventListener
    javax.media.opengl.GLProfile getGLProfile() -> getGLProfile
    com.jogamp.newt.awt.NewtCanvasAWT getCanvas() -> getCanvas
    javax.media.opengl.GLAutoDrawable getGLDrawable() -> getGLDrawable
    com.jogamp.newt.opengl.GLWindow getGLWindow() -> getGLWindow
    com.metsci.glimpse.context.GlimpseContext getGlimpseContext() -> getGlimpseContext
    void setLookAndFeel(com.metsci.glimpse.support.settings.LookAndFeel) -> setLookAndFeel
    void addLayout(com.metsci.glimpse.layout.GlimpseLayout) -> addLayout
    void addLayout(com.metsci.glimpse.layout.GlimpseLayout,int) -> addLayout
    void setZOrder(com.metsci.glimpse.layout.GlimpseLayout,int) -> setZOrder
    void removeLayout(com.metsci.glimpse.layout.GlimpseLayout) -> removeLayout
    void removeAllLayouts() -> removeAllLayouts
    java.util.List getTargetChildren() -> getTargetChildren
    java.awt.Dimension getDimension() -> getDimension
    com.metsci.glimpse.context.GlimpseBounds getTargetBounds(com.metsci.glimpse.context.GlimpseTargetStack) -> getTargetBounds
    com.metsci.glimpse.context.GlimpseBounds getTargetBounds() -> getTargetBounds
    void paint() -> paint
    javax.media.opengl.GLContext getGLContext() -> getGLContext
    java.lang.String toString() -> toString
    boolean isEventConsumer() -> isEventConsumer
    void setEventConsumer(boolean) -> setEventConsumer
    boolean isEventGenerator() -> isEventGenerator
    void setEventGenerator(boolean) -> setEventGenerator
    void destroy() -> destroy
    boolean isDestroyed() -> isDestroyed
    void addDisposeListener(javax.media.opengl.GLRunnable) -> addDisposeListener
    void dispose() -> dispose
    void disposeAttached() -> disposeAttached
    void disposePainter(com.metsci.glimpse.painter.base.GlimpsePainter) -> disposePainter
    java.util.logging.Logger access$000() -> access$000
    void <clinit>() -> <clinit>
com.metsci.glimpse.canvas.NewtSwingGlimpseCanvas$1 -> com.metsci.glimpse.canvas.NewtSwingGlimpseCanvas$1:
    com.metsci.glimpse.canvas.NewtSwingGlimpseCanvas this$0 -> this$0
    void <init>(com.metsci.glimpse.canvas.NewtSwingGlimpseCanvas) -> <init>
    void init(javax.media.opengl.GLAutoDrawable) -> init
    void display(javax.media.opengl.GLAutoDrawable) -> display
    void reshape(javax.media.opengl.GLAutoDrawable,int,int,int,int) -> reshape
    void dispose(javax.media.opengl.GLAutoDrawable) -> dispose
com.metsci.glimpse.canvas.NewtSwingGlimpseCanvas$2 -> com.metsci.glimpse.canvas.NewtSwingGlimpseCanvas$2:
    com.metsci.glimpse.canvas.NewtSwingGlimpseCanvas this$0 -> this$0
    void <init>(com.metsci.glimpse.canvas.NewtSwingGlimpseCanvas) -> <init>
    boolean run(javax.media.opengl.GLAutoDrawable) -> run
com.metsci.glimpse.canvas.NewtSwingGlimpseCanvas$3 -> com.metsci.glimpse.canvas.NewtSwingGlimpseCanvas$3:
    com.metsci.glimpse.painter.base.GlimpsePainter val$painter -> val$painter
    com.metsci.glimpse.canvas.NewtSwingGlimpseCanvas this$0 -> this$0
    void <init>(com.metsci.glimpse.canvas.NewtSwingGlimpseCanvas,com.metsci.glimpse.painter.base.GlimpsePainter) -> <init>
    boolean run(javax.media.opengl.GLAutoDrawable) -> run
com.metsci.glimpse.context.GlimpseBounds -> com.metsci.glimpse.context.GlimpseBounds:
    com.metsci.glimpse.context.GlimpseBounds EMPTY_BOUNDS -> EMPTY_BOUNDS
    int x -> x
    int y -> y
    int width -> width
    int height -> height
    void <init>(java.awt.Dimension) -> <init>
    void <init>(int,int,int,int) -> <init>
    int getX() -> getX
    int getY() -> getY
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    boolean isValid() -> isValid
    boolean contains(int,int) -> contains
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.metsci.glimpse.context.GlimpseContext -> com.metsci.glimpse.context.GlimpseContext:
    javax.media.opengl.GLContext getGLContext() -> getGLContext
    javax.media.opengl.GL getGL() -> getGL
    com.metsci.glimpse.context.GlimpseTargetStack getTargetStack() -> getTargetStack
    int getDPI() -> getDPI
com.metsci.glimpse.context.GlimpseContextImpl -> com.metsci.glimpse.context.GlimpseContextImpl:
    java.lang.String defaultDpiKey -> defaultDpiKey
    int defaultDpiValue -> defaultDpiValue
    javax.media.opengl.GLContext glContext -> glContext
    com.metsci.glimpse.context.GlimpseTargetStack targetStack -> targetStack
    int dpi -> dpi
    void <init>(javax.media.opengl.GLContext) -> <init>
    void <init>(com.metsci.glimpse.canvas.GlimpseCanvas) -> <init>
    javax.media.opengl.GLContext getGLContext() -> getGLContext
    javax.media.opengl.GL getGL() -> getGL
    com.metsci.glimpse.context.GlimpseTargetStack getTargetStack() -> getTargetStack
    int getDPI() -> getDPI
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.metsci.glimpse.context.GlimpseTarget -> com.metsci.glimpse.context.GlimpseTarget:
    boolean isEventConsumer() -> isEventConsumer
    void setEventConsumer(boolean) -> setEventConsumer
    boolean isEventGenerator() -> isEventGenerator
    void setEventGenerator(boolean) -> setEventGenerator
    void addLayout(com.metsci.glimpse.layout.GlimpseLayout) -> addLayout
    void addLayout(com.metsci.glimpse.layout.GlimpseLayout,int) -> addLayout
    void setZOrder(com.metsci.glimpse.layout.GlimpseLayout,int) -> setZOrder
    void removeLayout(com.metsci.glimpse.layout.GlimpseLayout) -> removeLayout
    void removeAllLayouts() -> removeAllLayouts
    java.util.List getTargetChildren() -> getTargetChildren
    com.metsci.glimpse.context.GlimpseBounds getTargetBounds(com.metsci.glimpse.context.GlimpseTargetStack) -> getTargetBounds
    void setLookAndFeel(com.metsci.glimpse.support.settings.LookAndFeel) -> setLookAndFeel
com.metsci.glimpse.context.GlimpseTargetStack -> com.metsci.glimpse.context.GlimpseTargetStack:
    com.metsci.glimpse.context.GlimpseTargetStack push(com.metsci.glimpse.context.GlimpseTarget,com.metsci.glimpse.context.GlimpseBounds) -> push
    com.metsci.glimpse.context.GlimpseTargetStack push(com.metsci.glimpse.context.GlimpseTarget) -> push
    com.metsci.glimpse.context.GlimpseTargetStack push(com.metsci.glimpse.context.GlimpseTargetStack) -> push
    com.metsci.glimpse.context.GlimpseTargetStack pop() -> pop
    com.metsci.glimpse.context.GlimpseTarget getTarget() -> getTarget
    com.metsci.glimpse.context.GlimpseBounds getBounds() -> getBounds
    java.util.List getTargetList() -> getTargetList
    java.util.List getBoundsList() -> getBoundsList
    int getSize() -> getSize
com.metsci.glimpse.context.GlimpseTargetStackImpl -> com.metsci.glimpse.context.GlimpseTargetStackImpl:
    java.util.LinkedList targetStack -> targetStack
    java.util.List targetStackUnmod -> targetStackUnmod
    java.util.LinkedList boundStack -> boundStack
    java.util.List boundStackUnmod -> boundStackUnmod
    void <init>(com.metsci.glimpse.context.GlimpseTarget[]) -> <init>
    void <init>(com.metsci.glimpse.canvas.GlimpseCanvas) -> <init>
    com.metsci.glimpse.context.GlimpseTargetStack push(com.metsci.glimpse.context.GlimpseTarget,com.metsci.glimpse.context.GlimpseBounds) -> push
    com.metsci.glimpse.context.GlimpseTargetStack push(com.metsci.glimpse.context.GlimpseTarget) -> push
    com.metsci.glimpse.context.GlimpseTargetStack push(com.metsci.glimpse.context.GlimpseTargetStack) -> push
    com.metsci.glimpse.context.GlimpseTargetStack pop() -> pop
    com.metsci.glimpse.context.GlimpseTarget getTarget() -> getTarget
    com.metsci.glimpse.context.GlimpseBounds getBounds() -> getBounds
    java.util.List getTargetList() -> getTargetList
    java.util.List getBoundsList() -> getBoundsList
    int getSize() -> getSize
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.metsci.glimpse.context.TargetStackUtil -> com.metsci.glimpse.context.TargetStackUtil:
    void <init>() -> <init>
    com.metsci.glimpse.context.GlimpseTargetStack newTargetStack(com.metsci.glimpse.context.GlimpseTargetStack) -> newTargetStack
    com.metsci.glimpse.context.GlimpseTargetStack newTargetStack(com.metsci.glimpse.context.GlimpseTarget[]) -> newTargetStack
    boolean endsWith(com.metsci.glimpse.context.GlimpseTargetStack,com.metsci.glimpse.context.GlimpseTargetStack) -> endsWith
    boolean startsWith(com.metsci.glimpse.context.GlimpseTargetStack,com.metsci.glimpse.context.GlimpseTargetStack) -> startsWith
    com.metsci.glimpse.context.GlimpseTargetStack popTo(com.metsci.glimpse.context.GlimpseTargetStack,com.metsci.glimpse.context.GlimpseTarget) -> popTo
    com.metsci.glimpse.context.GlimpseTargetStack pushToBottom(com.metsci.glimpse.context.GlimpseTargetStack,int,int) -> pushToBottom
    com.metsci.glimpse.event.mouse.GlimpseMouseEvent translateCoordinates(com.metsci.glimpse.event.mouse.GlimpseMouseEvent,com.metsci.glimpse.context.GlimpseTarget) -> translateCoordinates
com.metsci.glimpse.event.mouse.GlimpseMouseAllListener -> com.metsci.glimpse.event.mouse.GlimpseMouseAllListener:
com.metsci.glimpse.event.mouse.GlimpseMouseEvent -> com.metsci.glimpse.event.mouse.GlimpseMouseEvent:
    com.metsci.glimpse.context.GlimpseTargetStack stack -> stack
    java.util.EnumSet modifiers -> modifiers
    java.util.EnumSet buttons -> buttons
    double wheelIncrement -> wheelIncrement
    int clickCount -> clickCount
    int[] x -> x
    int[] y -> y
    boolean handled -> handled
    void <init>(com.metsci.glimpse.context.GlimpseTargetStack,int[],int[]) -> <init>
    void <init>(com.metsci.glimpse.context.GlimpseTargetStack,int[],int[],int) -> <init>
    void <init>(com.metsci.glimpse.context.GlimpseTargetStack,java.util.EnumSet,java.util.EnumSet,int[],int[]) -> <init>
    void <init>(com.metsci.glimpse.event.mouse.GlimpseMouseEvent) -> <init>
    void <init>(com.metsci.glimpse.event.mouse.GlimpseMouseEvent,com.metsci.glimpse.context.GlimpseTargetStack,int[],int[]) -> <init>
    void <init>(com.metsci.glimpse.event.mouse.GlimpseMouseEvent,com.metsci.glimpse.context.GlimpseTargetStack,int,int) -> <init>
    void <init>(com.metsci.glimpse.context.GlimpseTargetStack,java.util.EnumSet,java.util.EnumSet,int[],int[],double,int) -> <init>
    void <init>(com.metsci.glimpse.context.GlimpseTargetStack,java.util.EnumSet,java.util.EnumSet,int,int,double,int) -> <init>
    void <init>(com.metsci.glimpse.context.GlimpseTargetStack,java.util.EnumSet,java.util.EnumSet,int[],int[],double,int,boolean) -> <init>
    boolean isHandled() -> isHandled
    void setHandled(boolean) -> setHandled
    java.util.EnumSet getModifiers() -> getModifiers
    java.util.EnumSet getButtons() -> getButtons
    boolean isKeyDown(com.metsci.glimpse.event.mouse.ModifierKey) -> isKeyDown
    boolean isButtonDown(com.metsci.glimpse.event.mouse.MouseButton) -> isButtonDown
    boolean isAnyButtonDown() -> isAnyButtonDown
    int getX() -> getX
    int[] getAllX() -> getAllX
    int getScreenPixelsX() -> getScreenPixelsX
    double getAxisCoordinatesX() -> getAxisCoordinatesX
    int getY() -> getY
    int[] getAllY() -> getAllY
    double getAxisCoordinatesY() -> getAxisCoordinatesY
    int getScreenPixelsY() -> getScreenPixelsY
    double getWheelIncrement() -> getWheelIncrement
    int getClickCount() -> getClickCount
    com.metsci.glimpse.context.GlimpseTargetStack getTargetStack() -> getTargetStack
    com.metsci.glimpse.axis.Axis1D getAxis1D() -> getAxis1D
    com.metsci.glimpse.axis.Axis2D getAxis2D() -> getAxis2D
    java.lang.String toString() -> toString
com.metsci.glimpse.event.mouse.GlimpseMouseListener -> com.metsci.glimpse.event.mouse.GlimpseMouseListener:
    void mouseEntered(com.metsci.glimpse.event.mouse.GlimpseMouseEvent) -> mouseEntered
    void mouseExited(com.metsci.glimpse.event.mouse.GlimpseMouseEvent) -> mouseExited
    void mousePressed(com.metsci.glimpse.event.mouse.GlimpseMouseEvent) -> mousePressed
    void mouseReleased(com.metsci.glimpse.event.mouse.GlimpseMouseEvent) -> mouseReleased
com.metsci.glimpse.event.mouse.GlimpseMouseMotionListener -> com.metsci.glimpse.event.mouse.GlimpseMouseMotionListener:
    void mouseMoved(com.metsci.glimpse.event.mouse.GlimpseMouseEvent) -> mouseMoved
com.metsci.glimpse.event.mouse.GlimpseMouseWheelListener -> com.metsci.glimpse.event.mouse.GlimpseMouseWheelListener:
    void mouseWheelMoved(com.metsci.glimpse.event.mouse.GlimpseMouseEvent) -> mouseWheelMoved
com.metsci.glimpse.event.mouse.ModifierKey -> com.metsci.glimpse.event.mouse.ModifierKey:
    com.metsci.glimpse.event.mouse.ModifierKey Shift -> Shift
    com.metsci.glimpse.event.mouse.ModifierKey Ctrl -> Ctrl
    com.metsci.glimpse.event.mouse.ModifierKey Alt -> Alt
    com.metsci.glimpse.event.mouse.ModifierKey Meta -> Meta
    com.metsci.glimpse.event.mouse.ModifierKey[] $VALUES -> $VALUES
    com.metsci.glimpse.event.mouse.ModifierKey[] values() -> values
    com.metsci.glimpse.event.mouse.ModifierKey valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.metsci.glimpse.event.mouse.MouseButton -> com.metsci.glimpse.event.mouse.MouseButton:
    com.metsci.glimpse.event.mouse.MouseButton Button1 -> Button1
    com.metsci.glimpse.event.mouse.MouseButton Button2 -> Button2
    com.metsci.glimpse.event.mouse.MouseButton Button3 -> Button3
    com.metsci.glimpse.event.mouse.MouseButton[] $VALUES -> $VALUES
    com.metsci.glimpse.event.mouse.MouseButton[] values() -> values
    com.metsci.glimpse.event.mouse.MouseButton valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.metsci.glimpse.event.mouse.MouseWrapper -> com.metsci.glimpse.event.mouse.MouseWrapper:
    com.metsci.glimpse.canvas.GlimpseCanvas canvas -> canvas
    java.util.LinkedList dragHoveredSet -> dragHoveredSet
    java.util.LinkedList hoveredSet -> hoveredSet
    void <init>(com.metsci.glimpse.canvas.GlimpseCanvas) -> <init>
    java.util.List getContainingTargets(java.lang.Object) -> getContainingTargets
    boolean getContainingTargets(java.lang.Object,com.metsci.glimpse.context.GlimpseContext,java.util.List) -> getContainingTargets
    boolean handleInterior(java.lang.Object,com.metsci.glimpse.context.GlimpseContext,com.metsci.glimpse.context.GlimpseBounds) -> handleInterior
    com.metsci.glimpse.event.mouse.Mouseable getMouseTarget(com.metsci.glimpse.context.GlimpseTargetStack) -> getMouseTarget
    java.util.List clearAllHovered() -> clearAllHovered
    void setAllHovered(java.util.List) -> setAllHovered
    java.util.List clearDragHovered() -> clearDragHovered
    void addDragHovered(com.metsci.glimpse.context.GlimpseTargetStack) -> addDragHovered
    void setDragHovered(java.util.List) -> setDragHovered
    boolean isDragHovered() -> isDragHovered
    java.util.List copyDragHovered() -> copyDragHovered
    java.util.List getDragHovered() -> getDragHovered
    java.util.List clearHovered() -> clearHovered
    void addHovered(com.metsci.glimpse.context.GlimpseTargetStack) -> addHovered
    void setHovered(java.util.List) -> setHovered
    boolean isHovered() -> isHovered
    java.util.List copyHovered() -> copyHovered
    java.util.List getHovered() -> getHovered
    boolean isButtonDown(java.lang.Object) -> isButtonDown
    boolean isInterior(java.lang.Object,com.metsci.glimpse.context.GlimpseBounds) -> isInterior
    boolean isValid(java.lang.Object,com.metsci.glimpse.context.GlimpseBounds) -> isValid
    com.metsci.glimpse.event.mouse.GlimpseMouseEvent toGlimpseEvent(java.lang.Object,com.metsci.glimpse.context.GlimpseTargetStack) -> toGlimpseEvent
    com.metsci.glimpse.event.mouse.GlimpseMouseEvent toGlimpseEventWheel(java.lang.Object,com.metsci.glimpse.context.GlimpseTargetStack) -> toGlimpseEventWheel
    void notifyMouseEnteredExited(java.lang.Object,java.util.List,java.util.List) -> notifyMouseEnteredExited
    void notifyMouseEntered(java.lang.Object,com.metsci.glimpse.context.GlimpseTargetStack) -> notifyMouseEntered
    void notifyMouseEntered(java.lang.Object,java.util.List) -> notifyMouseEntered
    void notifyMouseExited(java.lang.Object,com.metsci.glimpse.context.GlimpseTargetStack) -> notifyMouseExited
    void notifyMouseExited(java.lang.Object,java.util.List) -> notifyMouseExited
com.metsci.glimpse.event.mouse.MouseWrapperImpl -> com.metsci.glimpse.event.mouse.MouseWrapperImpl:
    void <init>(com.metsci.glimpse.canvas.GlimpseCanvas) -> <init>
    void mouseClicked0(java.lang.Object) -> mouseClicked0
    void mouseEntered0(java.lang.Object) -> mouseEntered0
    void mouseExited0(java.lang.Object) -> mouseExited0
    boolean mousePressed0(java.lang.Object) -> mousePressed0
    boolean mouseReleased0(java.lang.Object) -> mouseReleased0
    boolean mouseDragged0(java.lang.Object) -> mouseDragged0
    boolean mouseMoved0(java.lang.Object) -> mouseMoved0
    boolean mouseWheelMoved0(java.lang.Object) -> mouseWheelMoved0
com.metsci.glimpse.event.mouse.Mouseable -> com.metsci.glimpse.event.mouse.Mouseable:
    java.util.Collection getGlimpseMouseListeners() -> getGlimpseMouseListeners
    java.util.Collection getGlimpseMouseMotionListeners() -> getGlimpseMouseMotionListeners
    java.util.Collection getGlimpseMouseWheelListeners() -> getGlimpseMouseWheelListeners
    void addGlimpseMouseAllListener(com.metsci.glimpse.event.mouse.GlimpseMouseAllListener) -> addGlimpseMouseAllListener
    void addGlimpseMouseListener(com.metsci.glimpse.event.mouse.GlimpseMouseListener) -> addGlimpseMouseListener
    void addGlimpseMouseMotionListener(com.metsci.glimpse.event.mouse.GlimpseMouseMotionListener) -> addGlimpseMouseMotionListener
    void addGlimpseMouseWheelListener(com.metsci.glimpse.event.mouse.GlimpseMouseWheelListener) -> addGlimpseMouseWheelListener
    void removeGlimpseMouseAllListener(com.metsci.glimpse.event.mouse.GlimpseMouseAllListener) -> removeGlimpseMouseAllListener
    void removeGlimpseMouseListener(com.metsci.glimpse.event.mouse.GlimpseMouseListener) -> removeGlimpseMouseListener
    void removeGlimpseMouseMotionListener(com.metsci.glimpse.event.mouse.GlimpseMouseMotionListener) -> removeGlimpseMouseMotionListener
    void removeGlimpseMouseWheelListener(com.metsci.glimpse.event.mouse.GlimpseMouseWheelListener) -> removeGlimpseMouseWheelListener
    void removeAllGlimpseListeners() -> removeAllGlimpseListeners
com.metsci.glimpse.event.mouse.newt.GlimpseMouseWrapper -> com.metsci.glimpse.event.mouse.newt.GlimpseMouseWrapper:
    void <init>() -> <init>
    com.metsci.glimpse.event.mouse.GlimpseMouseEvent fromMouseEvent(com.jogamp.newt.event.MouseEvent) -> fromMouseEvent
    com.metsci.glimpse.event.mouse.GlimpseMouseEvent fromMouseEvent(com.jogamp.newt.event.MouseEvent,com.metsci.glimpse.context.GlimpseTargetStack,int,int) -> fromMouseEvent
    java.util.EnumSet getMouseButtons(com.jogamp.newt.event.MouseEvent) -> getMouseButtons
    double getWheelIncrement(com.jogamp.newt.event.MouseEvent) -> getWheelIncrement
    java.util.EnumSet getModifierKeys(com.jogamp.newt.event.MouseEvent) -> getModifierKeys
com.metsci.glimpse.event.mouse.newt.MouseWrapperNewt -> com.metsci.glimpse.event.mouse.newt.MouseWrapperNewt:
    com.jogamp.newt.opengl.GLWindow glWindow -> glWindow
    void <init>(com.metsci.glimpse.canvas.NewtGlimpseCanvas) -> <init>
    boolean isInterior(com.jogamp.newt.event.MouseEvent,com.metsci.glimpse.context.GlimpseBounds) -> isInterior
    boolean isButtonDown(com.jogamp.newt.event.MouseEvent) -> isButtonDown
    boolean isValid(com.jogamp.newt.event.MouseEvent,com.metsci.glimpse.context.GlimpseBounds) -> isValid
    com.jogamp.newt.event.MouseEvent toLocalCoords(com.jogamp.newt.event.MouseEvent,com.metsci.glimpse.context.GlimpseTargetStack) -> toLocalCoords
    int[] getX(com.jogamp.newt.event.MouseEvent,com.metsci.glimpse.context.GlimpseBounds) -> getX
    int[] getY(com.jogamp.newt.event.MouseEvent,com.metsci.glimpse.context.GlimpseBounds,int) -> getY
    com.jogamp.newt.event.MouseEvent$PointerType[] getPointerTypes(com.jogamp.newt.event.MouseEvent) -> getPointerTypes
    float[] getPressure(com.jogamp.newt.event.MouseEvent) -> getPressure
    short[] getPointerIds(com.jogamp.newt.event.MouseEvent) -> getPointerIds
    com.metsci.glimpse.event.mouse.GlimpseMouseEvent toGlimpseEvent(com.jogamp.newt.event.MouseEvent) -> toGlimpseEvent
    com.metsci.glimpse.event.mouse.GlimpseMouseEvent toGlimpseEvent(com.jogamp.newt.event.MouseEvent,com.metsci.glimpse.context.GlimpseTargetStack) -> toGlimpseEvent
    com.metsci.glimpse.event.mouse.GlimpseMouseEvent toGlimpseEventWheel(com.jogamp.newt.event.MouseEvent,com.metsci.glimpse.context.GlimpseTargetStack) -> toGlimpseEventWheel
    void mouseClicked(com.jogamp.newt.event.MouseEvent) -> mouseClicked
    void mousePressed(com.jogamp.newt.event.MouseEvent) -> mousePressed
    void mouseReleased(com.jogamp.newt.event.MouseEvent) -> mouseReleased
    void mouseEntered(com.jogamp.newt.event.MouseEvent) -> mouseEntered
    void mouseExited(com.jogamp.newt.event.MouseEvent) -> mouseExited
    void mouseDragged(com.jogamp.newt.event.MouseEvent) -> mouseDragged
    void mouseMoved(com.jogamp.newt.event.MouseEvent) -> mouseMoved
    void mouseWheelMoved(com.jogamp.newt.event.MouseEvent) -> mouseWheelMoved
    com.metsci.glimpse.event.mouse.GlimpseMouseEvent toGlimpseEventWheel(java.lang.Object,com.metsci.glimpse.context.GlimpseTargetStack) -> toGlimpseEventWheel
    com.metsci.glimpse.event.mouse.GlimpseMouseEvent toGlimpseEvent(java.lang.Object,com.metsci.glimpse.context.GlimpseTargetStack) -> toGlimpseEvent
    boolean isValid(java.lang.Object,com.metsci.glimpse.context.GlimpseBounds) -> isValid
    boolean isInterior(java.lang.Object,com.metsci.glimpse.context.GlimpseBounds) -> isInterior
    boolean isButtonDown(java.lang.Object) -> isButtonDown
com.metsci.glimpse.gl.GLCapabilityEventListener -> com.metsci.glimpse.gl.GLCapabilityEventListener:
    java.util.logging.Logger logger -> logger
    java.lang.String name -> name
    void <init>(java.util.logging.Logger,java.lang.String) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.util.logging.Logger) -> <init>
    void <init>() -> <init>
    void init(javax.media.opengl.GLAutoDrawable) -> init
    void dispose(javax.media.opengl.GLAutoDrawable) -> dispose
    void display(javax.media.opengl.GLAutoDrawable) -> display
    void reshape(javax.media.opengl.GLAutoDrawable,int,int,int,int) -> reshape
com.metsci.glimpse.gl.shader.GLShaderUtils -> com.metsci.glimpse.gl.shader.GLShaderUtils:
    void <init>() -> <init>
    void logShaderArgs(java.util.logging.Logger,java.util.logging.Level,com.metsci.glimpse.gl.shader.ShaderArg[],java.lang.String) -> logShaderArgs
    boolean logGLProgramInfoLog(java.util.logging.Logger,javax.media.opengl.GL2,int,java.lang.String) -> logGLProgramInfoLog
    boolean logGLShaderInfoLog(java.util.logging.Logger,javax.media.opengl.GL2,int,java.lang.String) -> logGLShaderInfoLog
    java.lang.String logGLShaderInfoLog(javax.media.opengl.GL2,int) -> logGLShaderInfoLog
    java.lang.String getGLProgramInfoLog(javax.media.opengl.GL2,int) -> getGLProgramInfoLog
com.metsci.glimpse.gl.shader.Pipeline -> com.metsci.glimpse.gl.shader.Pipeline:
    java.util.logging.Logger logger -> logger
    java.lang.String name -> name
    com.metsci.glimpse.gl.shader.Shader geometryShader -> geometryShader
    com.metsci.glimpse.gl.shader.Shader vertexShader -> vertexShader
    com.metsci.glimpse.gl.shader.Shader fragmentShader -> fragmentShader
    int glProgramHandle -> glProgramHandle
    boolean isEmpty -> isEmpty
    boolean isDirty -> isDirty
    boolean isLinked -> isLinked
    com.metsci.glimpse.gl.shader.Pipeline empty -> empty
    void <init>(java.lang.String,com.metsci.glimpse.gl.shader.Shader,com.metsci.glimpse.gl.shader.Shader,com.metsci.glimpse.gl.shader.Shader) -> <init>
    void verify(com.metsci.glimpse.gl.shader.Shader,com.metsci.glimpse.gl.shader.Shader,com.metsci.glimpse.gl.shader.Shader) -> verify
    java.lang.String getName() -> getName
    java.lang.String toString() -> toString
    boolean isLinked(javax.media.opengl.GL) -> isLinked
    void beginUse(javax.media.opengl.GL2) -> beginUse
    void endUse(javax.media.opengl.GL2) -> endUse
    boolean compileAndLink(javax.media.opengl.GL2) -> compileAndLink
    void dispose(javax.media.opengl.GLContext) -> dispose
    void <clinit>() -> <clinit>
com.metsci.glimpse.gl.shader.Shader -> com.metsci.glimpse.gl.shader.Shader:
    java.util.logging.Logger logger -> logger
    java.lang.String name -> name
    com.metsci.glimpse.gl.shader.ShaderType type -> type
    com.metsci.glimpse.gl.shader.ShaderSource[] sources -> sources
    com.metsci.glimpse.gl.shader.ShaderArg[] args -> args
    int[] glShaderHandles -> glShaderHandles
    int[] glArgHandles -> glArgHandles
    com.metsci.glimpse.gl.shader.ShaderSource[] getSource(java.lang.String[]) -> getSource
    void <init>(java.lang.String,com.metsci.glimpse.gl.shader.ShaderType,java.lang.String[]) -> <init>
    void <init>(java.lang.String,com.metsci.glimpse.gl.shader.ShaderType,com.metsci.glimpse.gl.shader.ShaderSource[]) -> <init>
    void <init>(java.lang.String,com.metsci.glimpse.gl.shader.ShaderType,boolean,java.lang.String[]) -> <init>
    void <init>(java.lang.String,com.metsci.glimpse.gl.shader.ShaderType,boolean,com.metsci.glimpse.gl.shader.ShaderSource[]) -> <init>
    com.metsci.glimpse.gl.shader.ShaderArg[] verify(com.metsci.glimpse.gl.shader.ShaderType,com.metsci.glimpse.gl.shader.ShaderSource[]) -> verify
    com.metsci.glimpse.gl.shader.ShaderArg getArg(java.lang.String) -> getArg
    java.lang.String getName() -> getName
    com.metsci.glimpse.gl.shader.ShaderType getType() -> getType
    boolean preLink(javax.media.opengl.GL,int) -> preLink
    void preDisplay(javax.media.opengl.GL) -> preDisplay
    void postDisplay(javax.media.opengl.GL) -> postDisplay
    java.lang.String toString() -> toString
    boolean compileAndAttach(javax.media.opengl.GL,int) -> compileAndAttach
    boolean getShaderArgHandles(javax.media.opengl.GL,int) -> getShaderArgHandles
    void updateArgValues(javax.media.opengl.GL) -> updateArgValues
    void dispose(javax.media.opengl.GLContext) -> dispose
    void <clinit>() -> <clinit>
com.metsci.glimpse.gl.shader.ShaderArg -> com.metsci.glimpse.gl.shader.ShaderArg:
    java.util.logging.Logger logger -> logger
    java.util.concurrent.locks.ReentrantLock lock -> lock
    java.lang.String name -> name
    java.lang.String toStringResult -> toStringResult
    com.metsci.glimpse.gl.shader.ShaderArgType type -> type
    com.metsci.glimpse.gl.shader.ShaderArgQualifier qual -> qual
    com.metsci.glimpse.gl.shader.ShaderArgInOut inout -> inout
    java.lang.Object lastPushedValue -> lastPushedValue
    java.lang.Object currentValue -> currentValue
    boolean dirty -> dirty
    void <init>(java.lang.String,com.metsci.glimpse.gl.shader.ShaderArgType,com.metsci.glimpse.gl.shader.ShaderArgQualifier,com.metsci.glimpse.gl.shader.ShaderArgInOut) -> <init>
    java.lang.String getName() -> getName
    com.metsci.glimpse.gl.shader.ShaderArgType getType() -> getType
    com.metsci.glimpse.gl.shader.ShaderArgQualifier getQual() -> getQual
    com.metsci.glimpse.gl.shader.ShaderArgInOut getInOut() -> getInOut
    boolean isDirty() -> isDirty
    void makeDirty() -> makeDirty
    void setValue(java.lang.Object) -> setValue
    void update(javax.media.opengl.GL2,int) -> update
    int getIntValue() -> getIntValue
    float getFloatValue() -> getFloatValue
    boolean getBooleanValue() -> getBooleanValue
    float[] getFloatArrayValue() -> getFloatArrayValue
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.metsci.glimpse.gl.shader.ShaderArg$1 -> com.metsci.glimpse.gl.shader.ShaderArg$1:
    int[] $SwitchMap$com$metsci$glimpse$gl$shader$ShaderArgType -> $SwitchMap$com$metsci$glimpse$gl$shader$ShaderArgType
    void <clinit>() -> <clinit>
com.metsci.glimpse.gl.shader.ShaderArgInOut -> com.metsci.glimpse.gl.shader.ShaderArgInOut:
    com.metsci.glimpse.gl.shader.ShaderArgInOut IN -> IN
    com.metsci.glimpse.gl.shader.ShaderArgInOut OUT -> OUT
    com.metsci.glimpse.gl.shader.ShaderArgInOut INOUT -> INOUT
    com.metsci.glimpse.gl.shader.ShaderArgInOut[] $VALUES -> $VALUES
    com.metsci.glimpse.gl.shader.ShaderArgInOut[] values() -> values
    com.metsci.glimpse.gl.shader.ShaderArgInOut valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.metsci.glimpse.gl.shader.ShaderArgQualifier -> com.metsci.glimpse.gl.shader.ShaderArgQualifier:
    com.metsci.glimpse.gl.shader.ShaderArgQualifier CONST -> CONST
    com.metsci.glimpse.gl.shader.ShaderArgQualifier ATTRIBUTE -> ATTRIBUTE
    com.metsci.glimpse.gl.shader.ShaderArgQualifier VARYING -> VARYING
    com.metsci.glimpse.gl.shader.ShaderArgQualifier INVARIANT_VARYING -> INVARIANT_VARYING
    com.metsci.glimpse.gl.shader.ShaderArgQualifier UNIFORM -> UNIFORM
    com.metsci.glimpse.gl.shader.ShaderArgQualifier[] $VALUES -> $VALUES
    com.metsci.glimpse.gl.shader.ShaderArgQualifier[] values() -> values
    com.metsci.glimpse.gl.shader.ShaderArgQualifier valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.metsci.glimpse.gl.shader.ShaderArgType -> com.metsci.glimpse.gl.shader.ShaderArgType:
    com.metsci.glimpse.gl.shader.ShaderArgType FLOAT -> FLOAT
    com.metsci.glimpse.gl.shader.ShaderArgType INT -> INT
    com.metsci.glimpse.gl.shader.ShaderArgType BOOLEAN -> BOOLEAN
    com.metsci.glimpse.gl.shader.ShaderArgType VEC2 -> VEC2
    com.metsci.glimpse.gl.shader.ShaderArgType VEC3 -> VEC3
    com.metsci.glimpse.gl.shader.ShaderArgType VEC4 -> VEC4
    com.metsci.glimpse.gl.shader.ShaderArgType BVEC2 -> BVEC2
    com.metsci.glimpse.gl.shader.ShaderArgType BVEC3 -> BVEC3
    com.metsci.glimpse.gl.shader.ShaderArgType BVEC4 -> BVEC4
    com.metsci.glimpse.gl.shader.ShaderArgType IVEC2 -> IVEC2
    com.metsci.glimpse.gl.shader.ShaderArgType IVEC3 -> IVEC3
    com.metsci.glimpse.gl.shader.ShaderArgType IVEC4 -> IVEC4
    com.metsci.glimpse.gl.shader.ShaderArgType MAT2 -> MAT2
    com.metsci.glimpse.gl.shader.ShaderArgType MAT3 -> MAT3
    com.metsci.glimpse.gl.shader.ShaderArgType MAT4 -> MAT4
    com.metsci.glimpse.gl.shader.ShaderArgType SAMPLER_1D -> SAMPLER_1D
    com.metsci.glimpse.gl.shader.ShaderArgType ISAMPLER_1D -> ISAMPLER_1D
    com.metsci.glimpse.gl.shader.ShaderArgType USAMPLER_1D -> USAMPLER_1D
    com.metsci.glimpse.gl.shader.ShaderArgType SAMPLER_2D -> SAMPLER_2D
    com.metsci.glimpse.gl.shader.ShaderArgType ISAMPLER_2D -> ISAMPLER_2D
    com.metsci.glimpse.gl.shader.ShaderArgType USAMPLER_2D -> USAMPLER_2D
    com.metsci.glimpse.gl.shader.ShaderArgType SAMPLER_CUBE -> SAMPLER_CUBE
    com.metsci.glimpse.gl.shader.ShaderArgType SAMPLER_1D_ARRAY -> SAMPLER_1D_ARRAY
    com.metsci.glimpse.gl.shader.ShaderArgType SAMPLER_2D_ARRAY -> SAMPLER_2D_ARRAY
    com.metsci.glimpse.gl.shader.ShaderArgType[] $VALUES -> $VALUES
    com.metsci.glimpse.gl.shader.ShaderArgType[] values() -> values
    com.metsci.glimpse.gl.shader.ShaderArgType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.metsci.glimpse.gl.shader.ShaderSource -> com.metsci.glimpse.gl.shader.ShaderSource:
    java.util.logging.Logger logger -> logger
    java.lang.String[] lines -> lines
    void <init>(java.lang.String,com.metsci.glimpse.util.io.StreamOpener) -> <init>
    java.lang.String[] getSourceLines() -> getSourceLines
    java.lang.String getSource() -> getSource
    java.lang.String[] readSource(java.io.InputStream) -> readSource
    boolean containsMain() -> containsMain
    java.util.List extractArgs() -> extractArgs
    void <clinit>() -> <clinit>
com.metsci.glimpse.gl.shader.ShaderType -> com.metsci.glimpse.gl.shader.ShaderType:
    com.metsci.glimpse.gl.shader.ShaderType vertex -> vertex
    com.metsci.glimpse.gl.shader.ShaderType geometry -> geometry
    com.metsci.glimpse.gl.shader.ShaderType fragment -> fragment
    int glShaderTypeCode -> glShaderTypeCode
    com.metsci.glimpse.gl.shader.ShaderType[] $VALUES -> $VALUES
    com.metsci.glimpse.gl.shader.ShaderType[] values() -> values
    com.metsci.glimpse.gl.shader.ShaderType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    int glTypeCode() -> glTypeCode
    void <clinit>() -> <clinit>
com.metsci.glimpse.gl.shader.grammar.GlslArgLexer -> com.metsci.glimpse.gl.shader.grammar.GlslArgLexer:
    int EOF -> EOF
    int T__63 -> T__63
    int ATTRIBUTE -> ATTRIBUTE
    int BOOL -> BOOL
    int BREAK -> BREAK
    int BVEC2 -> BVEC2
    int BVEC3 -> BVEC3
    int BVEC4 -> BVEC4
    int COMMENT -> COMMENT
    int CONST -> CONST
    int CONTINUE -> CONTINUE
    int DIRECTIVE -> DIRECTIVE
    int DISCARD -> DISCARD
    int DO -> DO
    int ELSE -> ELSE
    int FALSE -> FALSE
    int FLOAT -> FLOAT
    int FOR -> FOR
    int HIGH_PRECISION -> HIGH_PRECISION
    int IDENTIFIER -> IDENTIFIER
    int IF -> IF
    int IN -> IN
    int INOUT -> INOUT
    int INT -> INT
    int INVARIANT -> INVARIANT
    int ISAMPLER1D -> ISAMPLER1D
    int ISAMPLER2D -> ISAMPLER2D
    int IVEC2 -> IVEC2
    int IVEC3 -> IVEC3
    int IVEC4 -> IVEC4
    int LCURLY -> LCURLY
    int LOW_PRECISION -> LOW_PRECISION
    int LPAREN -> LPAREN
    int MAT2 -> MAT2
    int MAT3 -> MAT3
    int MAT4 -> MAT4
    int MEDIUM_PRECISION -> MEDIUM_PRECISION
    int MULTILINE_COMMENT -> MULTILINE_COMMENT
    int OUT -> OUT
    int PRECISION -> PRECISION
    int RCURLY -> RCURLY
    int RETURN -> RETURN
    int RPAREN -> RPAREN
    int SAMPLER1D -> SAMPLER1D
    int SAMPLER1DARRAY -> SAMPLER1DARRAY
    int SAMPLER2D -> SAMPLER2D
    int SAMPLER2DARRAY -> SAMPLER2DARRAY
    int SAMPLERCUBE -> SAMPLERCUBE
    int SEMI -> SEMI
    int STRUCT -> STRUCT
    int TRUE -> TRUE
    int UNIFORM -> UNIFORM
    int USAMPLER1D -> USAMPLER1D
    int USAMPLER2D -> USAMPLER2D
    int VARYING -> VARYING
    int VEC2 -> VEC2
    int VEC3 -> VEC3
    int VEC4 -> VEC4
    int VOID -> VOID
    int WHILE -> WHILE
    int WHITESPACE -> WHITESPACE
    com.metsci.glimpse.gl.shader.grammar.GlslArgLexer$DFA5 dfa5 -> dfa5
    java.lang.String DFA5_eotS -> DFA5_eotS
    java.lang.String DFA5_eofS -> DFA5_eofS
    java.lang.String DFA5_minS -> DFA5_minS
    java.lang.String DFA5_maxS -> DFA5_maxS
    java.lang.String DFA5_acceptS -> DFA5_acceptS
    java.lang.String DFA5_specialS -> DFA5_specialS
    java.lang.String[] DFA5_transitionS -> DFA5_transitionS
    short[] DFA5_eot -> DFA5_eot
    short[] DFA5_eof -> DFA5_eof
    char[] DFA5_min -> DFA5_min
    char[] DFA5_max -> DFA5_max
    short[] DFA5_accept -> DFA5_accept
    short[] DFA5_special -> DFA5_special
    short[][] DFA5_transition -> DFA5_transition
    org.antlr.runtime.Lexer[] getDelegates() -> getDelegates
    void <init>() -> <init>
    void <init>(org.antlr.runtime.CharStream) -> <init>
    void <init>(org.antlr.runtime.CharStream,org.antlr.runtime.RecognizerSharedState) -> <init>
    java.lang.String getGrammarFileName() -> getGrammarFileName
    void mT__63() -> mT__63
    void mLCURLY() -> mLCURLY
    void mRCURLY() -> mRCURLY
    void mLPAREN() -> mLPAREN
    void mRPAREN() -> mRPAREN
    void mSEMI() -> mSEMI
    void mATTRIBUTE() -> mATTRIBUTE
    void mBOOL() -> mBOOL
    void mBREAK() -> mBREAK
    void mBVEC2() -> mBVEC2
    void mBVEC3() -> mBVEC3
    void mBVEC4() -> mBVEC4
    void mCONST() -> mCONST
    void mCONTINUE() -> mCONTINUE
    void mDISCARD() -> mDISCARD
    void mDO() -> mDO
    void mELSE() -> mELSE
    void mFALSE() -> mFALSE
    void mFLOAT() -> mFLOAT
    void mFOR() -> mFOR
    void mHIGH_PRECISION() -> mHIGH_PRECISION
    void mIF() -> mIF
    void mIN() -> mIN
    void mINOUT() -> mINOUT
    void mINT() -> mINT
    void mINVARIANT() -> mINVARIANT
    void mIVEC2() -> mIVEC2
    void mIVEC3() -> mIVEC3
    void mIVEC4() -> mIVEC4
    void mLOW_PRECISION() -> mLOW_PRECISION
    void mMAT2() -> mMAT2
    void mMAT3() -> mMAT3
    void mMAT4() -> mMAT4
    void mMEDIUM_PRECISION() -> mMEDIUM_PRECISION
    void mOUT() -> mOUT
    void mPRECISION() -> mPRECISION
    void mRETURN() -> mRETURN
    void mSAMPLER2D() -> mSAMPLER2D
    void mISAMPLER2D() -> mISAMPLER2D
    void mUSAMPLER2D() -> mUSAMPLER2D
    void mSAMPLER1D() -> mSAMPLER1D
    void mISAMPLER1D() -> mISAMPLER1D
    void mUSAMPLER1D() -> mUSAMPLER1D
    void mSAMPLERCUBE() -> mSAMPLERCUBE
    void mSAMPLER1DARRAY() -> mSAMPLER1DARRAY
    void mSAMPLER2DARRAY() -> mSAMPLER2DARRAY
    void mSTRUCT() -> mSTRUCT
    void mTRUE() -> mTRUE
    void mUNIFORM() -> mUNIFORM
    void mVARYING() -> mVARYING
    void mVEC2() -> mVEC2
    void mVEC3() -> mVEC3
    void mVEC4() -> mVEC4
    void mVOID() -> mVOID
    void mWHILE() -> mWHILE
    void mIDENTIFIER() -> mIDENTIFIER
    void mWHITESPACE() -> mWHITESPACE
    void mCOMMENT() -> mCOMMENT
    void mDIRECTIVE() -> mDIRECTIVE
    void mMULTILINE_COMMENT() -> mMULTILINE_COMMENT
    void mTokens() -> mTokens
    void <clinit>() -> <clinit>
com.metsci.glimpse.gl.shader.grammar.GlslArgLexer$DFA5 -> com.metsci.glimpse.gl.shader.grammar.GlslArgLexer$DFA5:
    com.metsci.glimpse.gl.shader.grammar.GlslArgLexer this$0 -> this$0
    void <init>(com.metsci.glimpse.gl.shader.grammar.GlslArgLexer,org.antlr.runtime.BaseRecognizer) -> <init>
    java.lang.String getDescription() -> getDescription
com.metsci.glimpse.gl.shader.grammar.GlslArgParser -> com.metsci.glimpse.gl.shader.grammar.GlslArgParser:
    java.lang.String[] tokenNames -> tokenNames
    int EOF -> EOF
    int T__63 -> T__63
    int ATTRIBUTE -> ATTRIBUTE
    int BOOL -> BOOL
    int BREAK -> BREAK
    int BVEC2 -> BVEC2
    int BVEC3 -> BVEC3
    int BVEC4 -> BVEC4
    int COMMENT -> COMMENT
    int CONST -> CONST
    int CONTINUE -> CONTINUE
    int DIRECTIVE -> DIRECTIVE
    int DISCARD -> DISCARD
    int DO -> DO
    int ELSE -> ELSE
    int FALSE -> FALSE
    int FLOAT -> FLOAT
    int FOR -> FOR
    int HIGH_PRECISION -> HIGH_PRECISION
    int IDENTIFIER -> IDENTIFIER
    int IF -> IF
    int IN -> IN
    int INOUT -> INOUT
    int INT -> INT
    int INVARIANT -> INVARIANT
    int ISAMPLER1D -> ISAMPLER1D
    int ISAMPLER2D -> ISAMPLER2D
    int IVEC2 -> IVEC2
    int IVEC3 -> IVEC3
    int IVEC4 -> IVEC4
    int LCURLY -> LCURLY
    int LOW_PRECISION -> LOW_PRECISION
    int LPAREN -> LPAREN
    int MAT2 -> MAT2
    int MAT3 -> MAT3
    int MAT4 -> MAT4
    int MEDIUM_PRECISION -> MEDIUM_PRECISION
    int MULTILINE_COMMENT -> MULTILINE_COMMENT
    int OUT -> OUT
    int PRECISION -> PRECISION
    int RCURLY -> RCURLY
    int RETURN -> RETURN
    int RPAREN -> RPAREN
    int SAMPLER1D -> SAMPLER1D
    int SAMPLER1DARRAY -> SAMPLER1DARRAY
    int SAMPLER2D -> SAMPLER2D
    int SAMPLER2DARRAY -> SAMPLER2DARRAY
    int SAMPLERCUBE -> SAMPLERCUBE
    int SEMI -> SEMI
    int STRUCT -> STRUCT
    int TRUE -> TRUE
    int UNIFORM -> UNIFORM
    int USAMPLER1D -> USAMPLER1D
    int USAMPLER2D -> USAMPLER2D
    int VARYING -> VARYING
    int VEC2 -> VEC2
    int VEC3 -> VEC3
    int VEC4 -> VEC4
    int VOID -> VOID
    int WHILE -> WHILE
    int WHITESPACE -> WHITESPACE
    org.antlr.runtime.tree.TreeAdaptor adaptor -> adaptor
    org.antlr.runtime.BitSet FOLLOW_parameter_in_shader71 -> FOLLOW_parameter_in_shader71
    org.antlr.runtime.BitSet FOLLOW_VOID_in_shader78 -> FOLLOW_VOID_in_shader78
    org.antlr.runtime.BitSet FOLLOW_63_in_shader81 -> FOLLOW_63_in_shader81
    org.antlr.runtime.BitSet FOLLOW_LPAREN_in_shader84 -> FOLLOW_LPAREN_in_shader84
    org.antlr.runtime.BitSet FOLLOW_VOID_in_shader88 -> FOLLOW_VOID_in_shader88
    org.antlr.runtime.BitSet FOLLOW_RPAREN_in_shader93 -> FOLLOW_RPAREN_in_shader93
    org.antlr.runtime.BitSet FOLLOW_LCURLY_in_shader96 -> FOLLOW_LCURLY_in_shader96
    org.antlr.runtime.BitSet FOLLOW_qualifier_in_parameter125 -> FOLLOW_qualifier_in_parameter125
    org.antlr.runtime.BitSet FOLLOW_inout_in_parameter136 -> FOLLOW_inout_in_parameter136
    org.antlr.runtime.BitSet FOLLOW_type_in_parameter147 -> FOLLOW_type_in_parameter147
    org.antlr.runtime.BitSet FOLLOW_identifier_in_parameter157 -> FOLLOW_identifier_in_parameter157
    org.antlr.runtime.BitSet FOLLOW_SEMI_in_parameter165 -> FOLLOW_SEMI_in_parameter165
    org.antlr.runtime.BitSet FOLLOW_VOID_in_type187 -> FOLLOW_VOID_in_type187
    org.antlr.runtime.BitSet FOLLOW_FLOAT_in_type193 -> FOLLOW_FLOAT_in_type193
    org.antlr.runtime.BitSet FOLLOW_INT_in_type208 -> FOLLOW_INT_in_type208
    org.antlr.runtime.BitSet FOLLOW_BOOL_in_type225 -> FOLLOW_BOOL_in_type225
    org.antlr.runtime.BitSet FOLLOW_VEC2_in_type241 -> FOLLOW_VEC2_in_type241
    org.antlr.runtime.BitSet FOLLOW_VEC3_in_type257 -> FOLLOW_VEC3_in_type257
    org.antlr.runtime.BitSet FOLLOW_VEC4_in_type273 -> FOLLOW_VEC4_in_type273
    org.antlr.runtime.BitSet FOLLOW_BVEC2_in_type289 -> FOLLOW_BVEC2_in_type289
    org.antlr.runtime.BitSet FOLLOW_BVEC3_in_type304 -> FOLLOW_BVEC3_in_type304
    org.antlr.runtime.BitSet FOLLOW_BVEC4_in_type319 -> FOLLOW_BVEC4_in_type319
    org.antlr.runtime.BitSet FOLLOW_IVEC2_in_type334 -> FOLLOW_IVEC2_in_type334
    org.antlr.runtime.BitSet FOLLOW_IVEC3_in_type349 -> FOLLOW_IVEC3_in_type349
    org.antlr.runtime.BitSet FOLLOW_IVEC4_in_type364 -> FOLLOW_IVEC4_in_type364
    org.antlr.runtime.BitSet FOLLOW_MAT2_in_type379 -> FOLLOW_MAT2_in_type379
    org.antlr.runtime.BitSet FOLLOW_MAT3_in_type395 -> FOLLOW_MAT3_in_type395
    org.antlr.runtime.BitSet FOLLOW_MAT4_in_type411 -> FOLLOW_MAT4_in_type411
    org.antlr.runtime.BitSet FOLLOW_SAMPLER1D_in_type427 -> FOLLOW_SAMPLER1D_in_type427
    org.antlr.runtime.BitSet FOLLOW_ISAMPLER1D_in_type438 -> FOLLOW_ISAMPLER1D_in_type438
    org.antlr.runtime.BitSet FOLLOW_USAMPLER1D_in_type448 -> FOLLOW_USAMPLER1D_in_type448
    org.antlr.runtime.BitSet FOLLOW_SAMPLER2D_in_type458 -> FOLLOW_SAMPLER2D_in_type458
    org.antlr.runtime.BitSet FOLLOW_ISAMPLER2D_in_type469 -> FOLLOW_ISAMPLER2D_in_type469
    org.antlr.runtime.BitSet FOLLOW_USAMPLER2D_in_type479 -> FOLLOW_USAMPLER2D_in_type479
    org.antlr.runtime.BitSet FOLLOW_SAMPLERCUBE_in_type489 -> FOLLOW_SAMPLERCUBE_in_type489
    org.antlr.runtime.BitSet FOLLOW_SAMPLER1DARRAY_in_type498 -> FOLLOW_SAMPLER1DARRAY_in_type498
    org.antlr.runtime.BitSet FOLLOW_SAMPLER2DARRAY_in_type509 -> FOLLOW_SAMPLER2DARRAY_in_type509
    org.antlr.runtime.BitSet FOLLOW_CONST_in_qualifier531 -> FOLLOW_CONST_in_qualifier531
    org.antlr.runtime.BitSet FOLLOW_ATTRIBUTE_in_qualifier554 -> FOLLOW_ATTRIBUTE_in_qualifier554
    org.antlr.runtime.BitSet FOLLOW_VARYING_in_qualifier573 -> FOLLOW_VARYING_in_qualifier573
    org.antlr.runtime.BitSet FOLLOW_INVARIANT_in_qualifier594 -> FOLLOW_INVARIANT_in_qualifier594
    org.antlr.runtime.BitSet FOLLOW_VARYING_in_qualifier596 -> FOLLOW_VARYING_in_qualifier596
    org.antlr.runtime.BitSet FOLLOW_UNIFORM_in_qualifier607 -> FOLLOW_UNIFORM_in_qualifier607
    org.antlr.runtime.BitSet FOLLOW_IN_in_inout639 -> FOLLOW_IN_in_inout639
    org.antlr.runtime.BitSet FOLLOW_OUT_in_inout650 -> FOLLOW_OUT_in_inout650
    org.antlr.runtime.BitSet FOLLOW_INOUT_in_inout660 -> FOLLOW_INOUT_in_inout660
    org.antlr.runtime.BitSet FOLLOW_IDENTIFIER_in_identifier679 -> FOLLOW_IDENTIFIER_in_identifier679
    org.antlr.runtime.Parser[] getDelegates() -> getDelegates
    void <init>(org.antlr.runtime.TokenStream) -> <init>
    void <init>(org.antlr.runtime.TokenStream,org.antlr.runtime.RecognizerSharedState) -> <init>
    void setTreeAdaptor(org.antlr.runtime.tree.TreeAdaptor) -> setTreeAdaptor
    org.antlr.runtime.tree.TreeAdaptor getTreeAdaptor() -> getTreeAdaptor
    java.lang.String[] getTokenNames() -> getTokenNames
    java.lang.String getGrammarFileName() -> getGrammarFileName
    com.metsci.glimpse.gl.shader.grammar.GlslArgParser$shader_return shader() -> shader
    com.metsci.glimpse.gl.shader.grammar.GlslArgParser$parameter_return parameter() -> parameter
    com.metsci.glimpse.gl.shader.grammar.GlslArgParser$type_return type() -> type
    com.metsci.glimpse.gl.shader.grammar.GlslArgParser$qualifier_return qualifier() -> qualifier
    com.metsci.glimpse.gl.shader.grammar.GlslArgParser$inout_return inout() -> inout
    com.metsci.glimpse.gl.shader.grammar.GlslArgParser$identifier_return identifier() -> identifier
    void <clinit>() -> <clinit>
com.metsci.glimpse.gl.shader.grammar.GlslArgParser$identifier_return -> com.metsci.glimpse.gl.shader.grammar.GlslArgParser$identifier_return:
    java.lang.String result -> result
    org.antlr.runtime.tree.CommonTree tree -> tree
    void <init>() -> <init>
    org.antlr.runtime.tree.CommonTree getTree() -> getTree
    java.lang.Object getTree() -> getTree
com.metsci.glimpse.gl.shader.grammar.GlslArgParser$inout_return -> com.metsci.glimpse.gl.shader.grammar.GlslArgParser$inout_return:
    com.metsci.glimpse.gl.shader.ShaderArgInOut result -> result
    org.antlr.runtime.tree.CommonTree tree -> tree
    void <init>() -> <init>
    org.antlr.runtime.tree.CommonTree getTree() -> getTree
    java.lang.Object getTree() -> getTree
com.metsci.glimpse.gl.shader.grammar.GlslArgParser$parameter_return -> com.metsci.glimpse.gl.shader.grammar.GlslArgParser$parameter_return:
    com.metsci.glimpse.gl.shader.ShaderArg result -> result
    org.antlr.runtime.tree.CommonTree tree -> tree
    void <init>() -> <init>
    org.antlr.runtime.tree.CommonTree getTree() -> getTree
    java.lang.Object getTree() -> getTree
com.metsci.glimpse.gl.shader.grammar.GlslArgParser$qualifier_return -> com.metsci.glimpse.gl.shader.grammar.GlslArgParser$qualifier_return:
    com.metsci.glimpse.gl.shader.ShaderArgQualifier result -> result
    org.antlr.runtime.tree.CommonTree tree -> tree
    void <init>() -> <init>
    org.antlr.runtime.tree.CommonTree getTree() -> getTree
    java.lang.Object getTree() -> getTree
com.metsci.glimpse.gl.shader.grammar.GlslArgParser$shader_return -> com.metsci.glimpse.gl.shader.grammar.GlslArgParser$shader_return:
    java.util.List result -> result
    org.antlr.runtime.tree.CommonTree tree -> tree
    void <init>() -> <init>
    org.antlr.runtime.tree.CommonTree getTree() -> getTree
    java.lang.Object getTree() -> getTree
com.metsci.glimpse.gl.shader.grammar.GlslArgParser$type_return -> com.metsci.glimpse.gl.shader.grammar.GlslArgParser$type_return:
    com.metsci.glimpse.gl.shader.ShaderArgType result -> result
    org.antlr.runtime.tree.CommonTree tree -> tree
    void <init>() -> <init>
    org.antlr.runtime.tree.CommonTree getTree() -> getTree
    java.lang.Object getTree() -> getTree
com.metsci.glimpse.gl.texture.AbstractTexture -> com.metsci.glimpse.gl.texture.AbstractTexture:
    java.util.concurrent.locks.ReentrantLock lock -> lock
    boolean glAllocated -> glAllocated
    int glHandle -> glHandle
    boolean dirty -> dirty
    int[] dim -> dim
    void <init>(int) -> <init>
    void <init>(int,int) -> <init>
    void <init>(int,int,int) -> <init>
    int[] getHandles() -> getHandles
    void makeDirty() -> makeDirty
    boolean isDirty() -> isDirty
    int getNumDimension() -> getNumDimension
    int getDimensionSize(int) -> getDimensionSize
    boolean isResident(javax.media.opengl.GL2) -> isResident
    boolean prepare(javax.media.opengl.GL2,int) -> prepare
    void allocate_genHandles(javax.media.opengl.GL) -> allocate_genHandles
    void dispose(javax.media.opengl.GLContext) -> dispose
    void prepare_setTexParameters(javax.media.opengl.GL) -> prepare_setTexParameters
    void prepare_setPixelStore(javax.media.opengl.GL) -> prepare_setPixelStore
    void prepare_setData(javax.media.opengl.GL2) -> prepare_setData
com.metsci.glimpse.gl.texture.ColorTexture1D -> com.metsci.glimpse.gl.texture.ColorTexture1D:
    java.nio.FloatBuffer rgba -> rgba
    void <init>(int) -> <init>
    void prepare_setTexParameters(javax.media.opengl.GL) -> prepare_setTexParameters
    void prepare_setPixelStore(javax.media.opengl.GL) -> prepare_setPixelStore
    void prepare_setData(javax.media.opengl.GL2) -> prepare_setData
    void setColorGradient(com.metsci.glimpse.support.colormap.ColorGradient) -> setColorGradient
    void mutate(com.metsci.glimpse.gl.texture.ColorTexture1D$MutatorColor1D) -> mutate
com.metsci.glimpse.gl.texture.ColorTexture1D$Builder -> com.metsci.glimpse.gl.texture.ColorTexture1D$Builder:
    void <init>() -> <init>
    void getColor(int,int,float[]) -> getColor
    void mutate(java.nio.FloatBuffer,int) -> mutate
com.metsci.glimpse.gl.texture.ColorTexture1D$ColorGradientBuilder -> com.metsci.glimpse.gl.texture.ColorTexture1D$ColorGradientBuilder:
    com.metsci.glimpse.support.colormap.ColorGradient gradient -> gradient
    void <init>(com.metsci.glimpse.support.colormap.ColorGradient) -> <init>
    void getColor(int,int,float[]) -> getColor
com.metsci.glimpse.gl.texture.ColorTexture1D$MutatorColor1D -> com.metsci.glimpse.gl.texture.ColorTexture1D$MutatorColor1D:
    void mutate(java.nio.FloatBuffer,int) -> mutate
com.metsci.glimpse.gl.texture.DrawableTexture -> com.metsci.glimpse.gl.texture.DrawableTexture:
    void draw(javax.media.opengl.GL2,int,java.util.Collection) -> draw
com.metsci.glimpse.gl.texture.FloatTexture1D -> com.metsci.glimpse.gl.texture.FloatTexture1D:
    java.nio.FloatBuffer data -> data
    void <init>(int) -> <init>
    void prepare_setTexParameters(javax.media.opengl.GL) -> prepare_setTexParameters
    void prepare_setData(javax.media.opengl.GL2) -> prepare_setData
    void prepare_setPixelStore(javax.media.opengl.GL) -> prepare_setPixelStore
    void mutate(com.metsci.glimpse.gl.texture.FloatTexture1D$MutatorFloat1D) -> mutate
com.metsci.glimpse.gl.texture.FloatTexture1D$MutatorFloat1D -> com.metsci.glimpse.gl.texture.FloatTexture1D$MutatorFloat1D:
    void mutate(java.nio.FloatBuffer,int) -> mutate
com.metsci.glimpse.gl.texture.Texture -> com.metsci.glimpse.gl.texture.Texture:
    int[] getHandles() -> getHandles
    void makeDirty() -> makeDirty
    boolean isDirty() -> isDirty
    int getNumDimension() -> getNumDimension
    int getDimensionSize(int) -> getDimensionSize
    boolean isResident(javax.media.opengl.GL2) -> isResident
    boolean prepare(javax.media.opengl.GL2,int) -> prepare
    void dispose(javax.media.opengl.GLContext) -> dispose
com.metsci.glimpse.gl.util.GLCapabilityUtils -> com.metsci.glimpse.gl.util.GLCapabilityUtils:
    java.lang.String glVendorDocumentation -> glVendorDocumentation
    java.lang.String glRendererDocumentation -> glRendererDocumentation
    java.lang.String glVersionDocumentation -> glVersionDocumentation
    java.lang.String glShaderVersionDocumentation -> glShaderVersionDocumentation
    java.lang.String glExtensionDocumentation -> glExtensionDocumentation
    void <init>() -> <init>
    void logGLBufferProperties(java.util.logging.Logger,java.util.logging.Level,javax.media.opengl.GLContext,java.lang.String) -> logGLBufferProperties
    void logGLVersionInfo(java.util.logging.Logger,java.util.logging.Level,javax.media.opengl.GLContext) -> logGLVersionInfo
    void logGLVersionInfo(java.util.logging.Logger,java.util.logging.Level,javax.media.opengl.GLContext,boolean) -> logGLVersionInfo
    void logGLExtensions(java.util.logging.Logger,java.util.logging.Level,javax.media.opengl.GLContext,boolean) -> logGLExtensions
    void logGLMaximumValues(java.util.logging.Logger,java.util.logging.Level,javax.media.opengl.GLContext) -> logGLMaximumValues
    int getGLMaxVertexAttributes(javax.media.opengl.GL) -> getGLMaxVertexAttributes
    int getGLMaxGeometryShaderOutput(javax.media.opengl.GL) -> getGLMaxGeometryShaderOutput
    int getGLMaxTextureEdgeLength(javax.media.opengl.GL) -> getGLMaxTextureEdgeLength
    int getGLMaxTextureBufferSize(javax.media.opengl.GL) -> getGLMaxTextureBufferSize
    int getGLMaxElementsIndices(javax.media.opengl.GL) -> getGLMaxElementsIndices
    int getGLMaxElementsVertices(javax.media.opengl.GL) -> getGLMaxElementsVertices
    java.lang.String getGLVendorString(javax.media.opengl.GL) -> getGLVendorString
    java.lang.String getGLRendererString(javax.media.opengl.GL) -> getGLRendererString
    java.lang.String getGLVersionString(javax.media.opengl.GL) -> getGLVersionString
    java.lang.String getGLShaderVersionString(javax.media.opengl.GL) -> getGLShaderVersionString
    java.lang.String getGLExtensions(javax.media.opengl.GL) -> getGLExtensions
com.metsci.glimpse.gl.util.GLErrorUtils -> com.metsci.glimpse.gl.util.GLErrorUtils:
    void <init>() -> <init>
    boolean logGLError(java.util.logging.Logger,java.util.logging.Level,javax.media.opengl.GL,java.lang.String) -> logGLError
com.metsci.glimpse.gl.util.GLUtils -> com.metsci.glimpse.gl.util.GLUtils:
    void <init>() -> <init>
    int genBuffer(javax.media.opengl.GL) -> genBuffer
    int genTexture(javax.media.opengl.GL) -> genTexture
    int queryGLInteger(int,javax.media.opengl.GL) -> queryGLInteger
    boolean queryGLBoolean(int,javax.media.opengl.GL) -> queryGLBoolean
    int getGLTextureDim(int) -> getGLTextureDim
    int getGLTextureUnit(int) -> getGLTextureUnit
    javax.media.opengl.GLOffscreenAutoDrawable newOffscreenDrawable() -> newOffscreenDrawable
    javax.media.opengl.GLOffscreenAutoDrawable newOffscreenDrawable(java.lang.String) -> newOffscreenDrawable
    javax.media.opengl.GLOffscreenAutoDrawable newOffscreenDrawable(javax.media.opengl.GLProfile) -> newOffscreenDrawable
    javax.media.opengl.GLOffscreenAutoDrawable newOffscreenDrawable(javax.media.opengl.GLContext) -> newOffscreenDrawable
    javax.media.opengl.GLOffscreenAutoDrawable newOffscreenDrawable(javax.media.opengl.GLProfile,javax.media.opengl.GLContext) -> newOffscreenDrawable
    javax.media.opengl.GLOffscreenAutoDrawable newOffscreenDrawable(javax.media.opengl.GLCapabilities,javax.media.opengl.GLProfile,javax.media.opengl.GLContext) -> newOffscreenDrawable
    javax.media.opengl.GLProfile getDefaultGLProfile() -> getDefaultGLProfile
    java.lang.String profileNameOf(javax.media.opengl.GLContext) -> profileNameOf
    java.lang.String profileNameOf(javax.media.opengl.GLContext,java.lang.String) -> profileNameOf
    com.jogamp.opengl.util.FPSAnimator startFpsAnimator(int,com.metsci.glimpse.canvas.GlimpseCanvas[]) -> startFpsAnimator
    java.lang.Runnable newPaintJob(com.metsci.glimpse.canvas.GlimpseCanvas) -> newPaintJob
    void setLookAndFeel(com.metsci.glimpse.support.settings.LookAndFeel,com.metsci.glimpse.context.GlimpseTarget[]) -> setLookAndFeel
com.metsci.glimpse.gl.util.GLUtils$1 -> com.metsci.glimpse.gl.util.GLUtils$1:
    com.metsci.glimpse.canvas.GlimpseCanvas val$canvas -> val$canvas
    void <init>(com.metsci.glimpse.canvas.GlimpseCanvas) -> <init>
    void run() -> run
com.metsci.glimpse.layout.GlimpseAxisLayout1D -> com.metsci.glimpse.layout.GlimpseAxisLayout1D:
    com.metsci.glimpse.layout.GlimpseLayoutCache cache -> cache
    com.metsci.glimpse.axis.Axis1D axis -> axis
    boolean defaultSet -> defaultSet
    com.metsci.glimpse.axis.factory.AxisFactory1D factory -> factory
    void <init>(com.metsci.glimpse.layout.GlimpseLayout,java.lang.String,com.metsci.glimpse.axis.Axis1D) -> <init>
    void <init>(com.metsci.glimpse.layout.GlimpseLayout,com.metsci.glimpse.axis.Axis1D) -> <init>
    void <init>(java.lang.String,com.metsci.glimpse.axis.Axis1D) -> <init>
    void <init>(com.metsci.glimpse.axis.Axis1D) -> <init>
    void <init>(com.metsci.glimpse.layout.GlimpseLayout,java.lang.String) -> <init>
    void <init>(com.metsci.glimpse.layout.GlimpseLayout) -> <init>
    void <init>() -> <init>
    void preLayout(com.metsci.glimpse.context.GlimpseTargetStack,com.metsci.glimpse.context.GlimpseBounds) -> preLayout
    boolean isHorizontal() -> isHorizontal
    com.metsci.glimpse.axis.Axis1D getAxis(com.metsci.glimpse.axis.Axis2D) -> getAxis
    int getSize(com.metsci.glimpse.context.GlimpseBounds) -> getSize
    void clearCache() -> clearCache
    void setAxis(com.metsci.glimpse.axis.Axis1D) -> setAxis
    void setAxis(com.metsci.glimpse.context.GlimpseTargetStack,com.metsci.glimpse.axis.Axis1D) -> setAxis
    void setAxis(com.metsci.glimpse.context.GlimpseContext,com.metsci.glimpse.axis.Axis1D) -> setAxis
    com.metsci.glimpse.axis.factory.AxisFactory1D getAxisFactory() -> getAxisFactory
    void setAxisFactory(com.metsci.glimpse.axis.factory.AxisFactory1D) -> setAxisFactory
    boolean isAxisSet() -> isAxisSet
    boolean isAxisFactorySet() -> isAxisFactorySet
    com.metsci.glimpse.axis.Axis1D getAxis() -> getAxis
    com.metsci.glimpse.axis.Axis1D getAxis(com.metsci.glimpse.context.GlimpseContext) -> getAxis
    com.metsci.glimpse.axis.Axis1D getAxis(com.metsci.glimpse.context.GlimpseTargetStack) -> getAxis
    com.metsci.glimpse.axis.factory.AxisFactory1D getAxisFactory0(com.metsci.glimpse.context.GlimpseTargetStack) -> getAxisFactory0
    com.metsci.glimpse.axis.Axis1D getCachedAxis0(com.metsci.glimpse.axis.Axis1D,com.metsci.glimpse.axis.factory.AxisFactory1D,com.metsci.glimpse.context.GlimpseTargetStack) -> getCachedAxis0
    com.metsci.glimpse.axis.Axis1D getCachedAxis0(com.metsci.glimpse.axis.Axis1D,com.metsci.glimpse.axis.factory.AxisFactory1D,com.metsci.glimpse.context.GlimpseContext) -> getCachedAxis0
com.metsci.glimpse.layout.GlimpseAxisLayout2D -> com.metsci.glimpse.layout.GlimpseAxisLayout2D:
    com.metsci.glimpse.layout.GlimpseLayoutCache cache -> cache
    com.metsci.glimpse.axis.Axis2D axis -> axis
    boolean defaultSet -> defaultSet
    com.metsci.glimpse.axis.factory.AxisFactory2D factory -> factory
    void <init>(com.metsci.glimpse.layout.GlimpseLayout,java.lang.String,com.metsci.glimpse.axis.Axis2D) -> <init>
    void <init>(com.metsci.glimpse.layout.GlimpseLayout,com.metsci.glimpse.axis.Axis2D) -> <init>
    void <init>(java.lang.String,com.metsci.glimpse.axis.Axis2D) -> <init>
    void <init>(com.metsci.glimpse.axis.Axis2D) -> <init>
    void <init>(com.metsci.glimpse.axis.Axis1D,com.metsci.glimpse.axis.Axis1D) -> <init>
    void <init>(com.metsci.glimpse.layout.GlimpseLayout,java.lang.String) -> <init>
    void <init>(com.metsci.glimpse.layout.GlimpseLayout) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>() -> <init>
    void preLayout(com.metsci.glimpse.context.GlimpseTargetStack,com.metsci.glimpse.context.GlimpseBounds) -> preLayout
    void clearCache() -> clearCache
    void setAxis(com.metsci.glimpse.axis.Axis2D) -> setAxis
    void setAxis(com.metsci.glimpse.context.GlimpseTargetStack,com.metsci.glimpse.axis.Axis2D) -> setAxis
    void setAxis(com.metsci.glimpse.context.GlimpseContext,com.metsci.glimpse.axis.Axis2D) -> setAxis
    com.metsci.glimpse.axis.factory.AxisFactory2D getAxisFactory() -> getAxisFactory
    void setAxisFactory(com.metsci.glimpse.axis.factory.AxisFactory2D) -> setAxisFactory
    boolean isAxisSet() -> isAxisSet
    boolean isAxisFactorySet() -> isAxisFactorySet
    com.metsci.glimpse.axis.Axis2D getAxis() -> getAxis
    com.metsci.glimpse.axis.Axis2D getAxis(com.metsci.glimpse.context.GlimpseContext) -> getAxis
    com.metsci.glimpse.axis.Axis2D getAxis(com.metsci.glimpse.context.GlimpseTargetStack) -> getAxis
    com.metsci.glimpse.axis.factory.AxisFactory2D getAxisFactory0(com.metsci.glimpse.context.GlimpseTargetStack) -> getAxisFactory0
    com.metsci.glimpse.axis.Axis2D getCachedAxis0(com.metsci.glimpse.axis.Axis2D,com.metsci.glimpse.axis.factory.AxisFactory2D,com.metsci.glimpse.context.GlimpseTargetStack) -> getCachedAxis0
    com.metsci.glimpse.axis.Axis2D getCachedAxis0(com.metsci.glimpse.axis.Axis2D,com.metsci.glimpse.axis.factory.AxisFactory2D,com.metsci.glimpse.context.GlimpseContext) -> getCachedAxis0
com.metsci.glimpse.layout.GlimpseAxisLayoutX -> com.metsci.glimpse.layout.GlimpseAxisLayoutX:
    void <init>(com.metsci.glimpse.layout.GlimpseLayout,java.lang.String,com.metsci.glimpse.axis.Axis1D) -> <init>
    void <init>(com.metsci.glimpse.layout.GlimpseLayout,com.metsci.glimpse.axis.Axis1D) -> <init>
    void <init>(java.lang.String,com.metsci.glimpse.axis.Axis1D) -> <init>
    void <init>(com.metsci.glimpse.axis.Axis1D) -> <init>
    void <init>(com.metsci.glimpse.layout.GlimpseLayout,java.lang.String) -> <init>
    void <init>(com.metsci.glimpse.layout.GlimpseLayout) -> <init>
    void <init>() -> <init>
    com.metsci.glimpse.axis.Axis1D getAxis(com.metsci.glimpse.axis.Axis2D) -> getAxis
    int getSize(com.metsci.glimpse.context.GlimpseBounds) -> getSize
    boolean isHorizontal() -> isHorizontal
com.metsci.glimpse.layout.GlimpseAxisLayoutY -> com.metsci.glimpse.layout.GlimpseAxisLayoutY:
    void <init>(com.metsci.glimpse.layout.GlimpseLayout,java.lang.String,com.metsci.glimpse.axis.Axis1D) -> <init>
    void <init>(com.metsci.glimpse.layout.GlimpseLayout,com.metsci.glimpse.axis.Axis1D) -> <init>
    void <init>(java.lang.String,com.metsci.glimpse.axis.Axis1D) -> <init>
    void <init>(com.metsci.glimpse.axis.Axis1D) -> <init>
    void <init>(com.metsci.glimpse.layout.GlimpseLayout,java.lang.String) -> <init>
    void <init>(com.metsci.glimpse.layout.GlimpseLayout) -> <init>
    void <init>() -> <init>
    com.metsci.glimpse.axis.Axis1D getAxis(com.metsci.glimpse.axis.Axis2D) -> getAxis
    int getSize(com.metsci.glimpse.context.GlimpseBounds) -> getSize
    boolean isHorizontal() -> isHorizontal
com.metsci.glimpse.layout.GlimpseLayout -> com.metsci.glimpse.layout.GlimpseLayout:
    java.lang.String name -> name
    com.metsci.glimpse.layout.GlimpseLayoutCache layoutClean -> layoutClean
    com.metsci.glimpse.layout.GlimpseLayoutCache layoutCache -> layoutCache
    com.metsci.glimpse.layout.GlimpseLayoutDelegate layoutDelegate -> layoutDelegate
    com.metsci.glimpse.canvas.LayoutManager manager -> manager
    java.util.concurrent.locks.ReentrantLock lock -> lock
    java.util.Set mouseListeners -> mouseListeners
    java.util.Set mouseMotionListeners -> mouseMotionListeners
    java.util.Set mouseWheelListeners -> mouseWheelListeners
    java.util.Collection mouseListenersUnmodifiable -> mouseListenersUnmodifiable
    java.util.Collection mouseMotionListenersUnmodifiable -> mouseMotionListenersUnmodifiable
    java.util.Collection mouseWheelListenersUnmodifiable -> mouseWheelListenersUnmodifiable
    boolean isEventGenerator -> isEventGenerator
    boolean isEventConsumer -> isEventConsumer
    boolean isVisible -> isVisible
    void <init>(com.metsci.glimpse.layout.GlimpseLayout,java.lang.String) -> <init>
    void <init>(com.metsci.glimpse.layout.GlimpseLayout) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>() -> <init>
    java.util.concurrent.locks.ReentrantLock getLock() -> getLock
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    void setLayoutManager(com.metsci.glimpse.layout.GlimpseLayoutManager) -> setLayoutManager
    void setLayoutData(java.lang.Object) -> setLayoutData
    void removeLayout(com.metsci.glimpse.layout.GlimpseLayout) -> removeLayout
    void removeAllLayouts() -> removeAllLayouts
    void removeAll() -> removeAll
    void setZOrder(com.metsci.glimpse.layout.GlimpseLayout,int) -> setZOrder
    void setZOrder(com.metsci.glimpse.painter.base.GlimpsePainter,int) -> setZOrder
    void addLayout(com.metsci.glimpse.layout.GlimpseLayout) -> addLayout
    void addLayout(com.metsci.glimpse.layout.GlimpseLayout,com.metsci.glimpse.painter.base.GlimpsePainterCallback) -> addLayout
    void addLayout(com.metsci.glimpse.layout.GlimpseLayout,int) -> addLayout
    void addLayout(com.metsci.glimpse.layout.GlimpseLayout,com.metsci.glimpse.painter.base.GlimpsePainterCallback,int) -> addLayout
    void addPainter(com.metsci.glimpse.painter.base.GlimpsePainter) -> addPainter
    void addPainter(com.metsci.glimpse.painter.base.GlimpsePainter,com.metsci.glimpse.painter.base.GlimpsePainterCallback) -> addPainter
    void addPainter(com.metsci.glimpse.painter.base.GlimpsePainter,int) -> addPainter
    void addPainter(com.metsci.glimpse.painter.base.GlimpsePainter,com.metsci.glimpse.painter.base.GlimpsePainterCallback,int) -> addPainter
    void addPainter0(com.metsci.glimpse.painter.base.GlimpsePainter,com.metsci.glimpse.painter.base.GlimpsePainterCallback,int) -> addPainter0
    void removePainter(com.metsci.glimpse.painter.base.GlimpsePainter) -> removePainter
    void invalidateLayout() -> invalidateLayout
    com.metsci.glimpse.context.GlimpseBounds layoutTo(com.metsci.glimpse.context.GlimpseTargetStack) -> layoutTo
    com.metsci.glimpse.context.GlimpseBounds layoutTo(com.metsci.glimpse.context.GlimpseContext) -> layoutTo
    void paintTo(com.metsci.glimpse.context.GlimpseContext) -> paintTo
    com.metsci.glimpse.context.GlimpseBounds getTargetBounds(com.metsci.glimpse.context.GlimpseTargetStack) -> getTargetBounds
    java.util.List getTargetChildren() -> getTargetChildren
    void dispose(com.metsci.glimpse.context.GlimpseContext) -> dispose
    boolean isDisposed() -> isDisposed
    java.lang.String toString() -> toString
    java.util.Collection getGlimpseMouseListeners() -> getGlimpseMouseListeners
    java.util.Collection getGlimpseMouseMotionListeners() -> getGlimpseMouseMotionListeners
    java.util.Collection getGlimpseMouseWheelListeners() -> getGlimpseMouseWheelListeners
    void addGlimpseMouseListener(com.metsci.glimpse.event.mouse.GlimpseMouseListener) -> addGlimpseMouseListener
    void addGlimpseMouseMotionListener(com.metsci.glimpse.event.mouse.GlimpseMouseMotionListener) -> addGlimpseMouseMotionListener
    void addGlimpseMouseWheelListener(com.metsci.glimpse.event.mouse.GlimpseMouseWheelListener) -> addGlimpseMouseWheelListener
    void addGlimpseMouseAllListener(com.metsci.glimpse.event.mouse.GlimpseMouseAllListener) -> addGlimpseMouseAllListener
    void removeGlimpseMouseAllListener(com.metsci.glimpse.event.mouse.GlimpseMouseAllListener) -> removeGlimpseMouseAllListener
    void removeGlimpseMouseListener(com.metsci.glimpse.event.mouse.GlimpseMouseListener) -> removeGlimpseMouseListener
    void removeGlimpseMouseMotionListener(com.metsci.glimpse.event.mouse.GlimpseMouseMotionListener) -> removeGlimpseMouseMotionListener
    void removeGlimpseMouseWheelListener(com.metsci.glimpse.event.mouse.GlimpseMouseWheelListener) -> removeGlimpseMouseWheelListener
    void removeAllGlimpseListeners() -> removeAllGlimpseListeners
    boolean isDirty(com.metsci.glimpse.context.GlimpseTargetStack) -> isDirty
    void setDirty(com.metsci.glimpse.context.GlimpseTargetStack,boolean) -> setDirty
    void cacheBounds(com.metsci.glimpse.context.GlimpseContext,com.metsci.glimpse.context.GlimpseBounds) -> cacheBounds
    void cacheBounds(com.metsci.glimpse.context.GlimpseTargetStack,com.metsci.glimpse.context.GlimpseBounds) -> cacheBounds
    com.metsci.glimpse.context.GlimpseBounds getBounds(com.metsci.glimpse.context.GlimpseContext) -> getBounds
    void preLayout(com.metsci.glimpse.context.GlimpseTargetStack,com.metsci.glimpse.context.GlimpseBounds) -> preLayout
    void preLayout(com.metsci.glimpse.context.GlimpseContext,com.metsci.glimpse.context.GlimpseBounds) -> preLayout
    com.metsci.glimpse.layout.GlimpseLayoutManager getLayoutManager() -> getLayoutManager
    com.metsci.glimpse.layout.GlimpseLayoutDelegate getDelegate() -> getDelegate
    void mouseEntered(com.metsci.glimpse.event.mouse.GlimpseMouseEvent) -> mouseEntered
    void mouseExited(com.metsci.glimpse.event.mouse.GlimpseMouseEvent) -> mouseExited
    void mousePressed(com.metsci.glimpse.event.mouse.GlimpseMouseEvent) -> mousePressed
    void mouseReleased(com.metsci.glimpse.event.mouse.GlimpseMouseEvent) -> mouseReleased
    void mouseMoved(com.metsci.glimpse.event.mouse.GlimpseMouseEvent) -> mouseMoved
    void mouseWheelMoved(com.metsci.glimpse.event.mouse.GlimpseMouseEvent) -> mouseWheelMoved
    void setLookAndFeel(com.metsci.glimpse.support.settings.LookAndFeel) -> setLookAndFeel
    boolean isEventConsumer() -> isEventConsumer
    void setEventConsumer(boolean) -> setEventConsumer
    boolean isEventGenerator() -> isEventGenerator
    void setEventGenerator(boolean) -> setEventGenerator
    void setVisible(boolean) -> setVisible
    boolean isVisible() -> isVisible
com.metsci.glimpse.layout.GlimpseLayoutCache -> com.metsci.glimpse.layout.GlimpseLayoutCache:
    java.util.Map map -> map
    void <init>() -> <init>
    java.lang.Object getValue(com.metsci.glimpse.context.GlimpseContext) -> getValue
    java.lang.Object getValue(com.metsci.glimpse.context.GlimpseTargetStack) -> getValue
    java.lang.Object getValueNoBoundsCheck(com.metsci.glimpse.context.GlimpseContext) -> getValueNoBoundsCheck
    java.lang.Object getValueNoBoundsCheck(com.metsci.glimpse.context.GlimpseTargetStack) -> getValueNoBoundsCheck
    void setValue(com.metsci.glimpse.context.GlimpseTargetStack,java.lang.Object) -> setValue
    void setValue(com.metsci.glimpse.context.GlimpseContext,java.lang.Object) -> setValue
    void clear() -> clear
    boolean compareBounds(java.util.List,java.util.List) -> compareBounds
com.metsci.glimpse.layout.GlimpseLayoutDelegate -> com.metsci.glimpse.layout.GlimpseLayoutDelegate:
    int DEFAULT -> DEFAULT
    int DEFAULT_WIDTH -> DEFAULT_WIDTH
    int DEFAULT_HEIGHT -> DEFAULT_HEIGHT
    int x -> x
    int y -> y
    int width -> width
    int height -> height
    boolean isDisposed -> isDisposed
    boolean visualPadding -> visualPadding
    boolean zeroMinSize -> zeroMinSize
    com.metsci.glimpse.layout.GlimpseLayoutManager layoutManager -> layoutManager
    java.lang.Object layoutData -> layoutData
    com.metsci.glimpse.layout.GlimpseLayout layout -> layout
    com.metsci.glimpse.layout.GlimpseLayoutDelegate layoutParent -> layoutParent
    java.util.List layoutChildren -> layoutChildren
    java.util.LinkedHashMap memberMap -> memberMap
    java.util.List memberList -> memberList
    void <init>(com.metsci.glimpse.layout.GlimpseLayout) -> <init>
    com.metsci.glimpse.context.GlimpseBounds getClippedBounds(com.metsci.glimpse.context.GlimpseContext) -> getClippedBounds
    void paintTo(com.metsci.glimpse.context.GlimpseContext) -> paintTo
    void layoutTo(com.metsci.glimpse.context.GlimpseContext,com.metsci.glimpse.context.GlimpseBounds) -> layoutTo
    void layoutTo(com.metsci.glimpse.context.GlimpseTargetStack,com.metsci.glimpse.context.GlimpseBounds) -> layoutTo
    void setLookAndFeel(com.metsci.glimpse.support.settings.LookAndFeel) -> setLookAndFeel
    void invalidateLayout() -> invalidateLayout
    void removeLayout(com.metsci.glimpse.layout.GlimpseLayout) -> removeLayout
    void removeAll() -> removeAll
    void addLayout(com.metsci.glimpse.layout.GlimpseLayout) -> addLayout
    void addLayout(com.metsci.glimpse.layout.GlimpseLayout,com.metsci.glimpse.painter.base.GlimpsePainterCallback,int) -> addLayout
    void addPainter(com.metsci.glimpse.painter.base.GlimpsePainter) -> addPainter
    void addPainter(com.metsci.glimpse.painter.base.GlimpsePainter,com.metsci.glimpse.painter.base.GlimpsePainterCallback,int) -> addPainter
    void removePainter(com.metsci.glimpse.painter.base.GlimpsePainter) -> removePainter
    void setZOrder(com.metsci.glimpse.painter.base.GlimpsePainter,int) -> setZOrder
    void updateMemeberList() -> updateMemeberList
    com.metsci.glimpse.context.GlimpseBounds getCachedBounds(com.metsci.glimpse.context.GlimpseContext) -> getCachedBounds
    void cacheBounds(com.metsci.glimpse.context.GlimpseContext,com.metsci.glimpse.context.GlimpseBounds) -> cacheBounds
    void cacheBounds(com.metsci.glimpse.context.GlimpseTargetStack,com.metsci.glimpse.context.GlimpseBounds) -> cacheBounds
    com.metsci.glimpse.context.GlimpseBounds getBounds() -> getBounds
    java.lang.Object getLayoutData() -> getLayoutData
    void setLayoutManager(com.metsci.glimpse.layout.GlimpseLayoutManager) -> setLayoutManager
    com.metsci.glimpse.layout.GlimpseLayoutManager getLayoutManager() -> getLayoutManager
    void setLayoutData(java.lang.Object) -> setLayoutData
    void setParent(com.metsci.glimpse.layout.GlimpseLayoutDelegate) -> setParent
    void dispose(com.metsci.glimpse.context.GlimpseContext) -> dispose
    boolean isDisposed() -> isDisposed
    void setBounds(com.metsci.glimpse.context.GlimpseBounds) -> setBounds
    void setBounds(int,int,int,int) -> setBounds
    com.metsci.glimpse.layout.GlimpseLayoutDelegate getComponent() -> getComponent
    int getX() -> getX
    int getY() -> getY
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    java.awt.Dimension computeSize(int,int) -> computeSize
    int getMinimumWidth(int) -> getMinimumWidth
    int getMinimumHeight(int) -> getMinimumHeight
    int getPreferredWidth(int) -> getPreferredWidth
    int getPreferredHeight(int) -> getPreferredHeight
    int getMaximumWidth(int) -> getMaximumWidth
    int getMaximumHeight(int) -> getMaximumHeight
    boolean isVisible() -> isVisible
    int getBaseline(int,int) -> getBaseline
    boolean hasBaseline() -> hasBaseline
    com.metsci.glimpse.layout.GlimpseLayoutDelegate getParent() -> getParent
    java.lang.String getLinkId() -> getLinkId
    int getLayoutHashCode() -> getLayoutHashCode
    boolean isPadded() -> isPadded
    void setPadding(boolean) -> setPadding
    int[] getVisualPadding() -> getVisualPadding
    int getComponetType(boolean) -> getComponetType
    java.lang.RuntimeException screenAccessException() -> screenAccessException
    void paintDebugOutline() -> paintDebugOutline
    float getPixelUnitFactor(boolean) -> getPixelUnitFactor
    int getHorizontalScreenDPI() -> getHorizontalScreenDPI
    int getVerticalScreenDPI() -> getVerticalScreenDPI
    int getScreenWidth() -> getScreenWidth
    int getScreenHeight() -> getScreenHeight
    int getScreenLocationX() -> getScreenLocationX
    int getScreenLocationY() -> getScreenLocationY
    net.miginfocom.layout.ComponentWrapper[] getComponents() -> getComponents
    int getComponentCount() -> getComponentCount
    com.metsci.glimpse.layout.GlimpseLayoutManager getLayout() -> getLayout
    boolean isLeftToRight() -> isLeftToRight
    void paintDebugCell(int,int,int,int) -> paintDebugCell
    net.miginfocom.layout.ContainerWrapper getParent() -> getParent
    java.lang.Object getComponent() -> getComponent
    java.lang.Object getLayout() -> getLayout
com.metsci.glimpse.layout.GlimpseLayoutDelegate$1 -> com.metsci.glimpse.layout.GlimpseLayoutDelegate$1:
    com.metsci.glimpse.layout.GlimpseLayoutDelegate this$0 -> this$0
    void <init>(com.metsci.glimpse.layout.GlimpseLayoutDelegate) -> <init>
    int compare(com.metsci.glimpse.layout.GlimpseLayoutDelegate$Member,com.metsci.glimpse.layout.GlimpseLayoutDelegate$Member) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.metsci.glimpse.layout.GlimpseLayoutDelegate$Member -> com.metsci.glimpse.layout.GlimpseLayoutDelegate$Member:
    com.metsci.glimpse.painter.base.GlimpsePainter painter -> painter
    com.metsci.glimpse.painter.base.GlimpsePainterCallback callback -> callback
    int zOrder -> zOrder
    void <init>(com.metsci.glimpse.painter.base.GlimpsePainter,com.metsci.glimpse.painter.base.GlimpsePainterCallback,int) -> <init>
    void setZOrder(int) -> setZOrder
    int getZOrder() -> getZOrder
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.metsci.glimpse.layout.GlimpseLayoutManager -> com.metsci.glimpse.layout.GlimpseLayoutManager:
    void layout(com.metsci.glimpse.layout.GlimpseLayoutDelegate) -> layout
com.metsci.glimpse.layout.GlimpseLayoutManagerMig -> com.metsci.glimpse.layout.GlimpseLayoutManagerMig:
    net.miginfocom.layout.LC lc -> lc
    net.miginfocom.layout.AC cc -> cc
    net.miginfocom.layout.AC rc -> rc
    java.util.ArrayList callbackList -> callbackList
    int cacheHash -> cacheHash
    net.miginfocom.layout.Grid gridCache -> gridCache
    java.util.Map childDataCache -> childDataCache
    java.util.Map childConstraintCache -> childConstraintCache
    void <init>() -> <init>
    void <init>(net.miginfocom.layout.LC,net.miginfocom.layout.AC,net.miginfocom.layout.AC) -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    void setLayoutConstraints(java.lang.String) -> setLayoutConstraints
    void setColumnConstraints(java.lang.String) -> setColumnConstraints
    void setRowConstraints(java.lang.String) -> setRowConstraints
    void setChildConstraint(com.metsci.glimpse.layout.GlimpseLayoutDelegate,java.lang.Object,boolean) -> setChildConstraint
    void addLayoutCallback(net.miginfocom.layout.LayoutCallback) -> addLayoutCallback
    void removeLayoutCallback(net.miginfocom.layout.LayoutCallback) -> removeLayoutCallback
    void checkCache(com.metsci.glimpse.layout.GlimpseLayoutDelegate) -> checkCache
    boolean checkChildCache(com.metsci.glimpse.layout.GlimpseLayoutDelegate) -> checkChildCache
    void layout(com.metsci.glimpse.layout.GlimpseLayoutDelegate) -> layout
com.metsci.glimpse.painter.base.GlimpseDataPainter2D -> com.metsci.glimpse.painter.base.GlimpseDataPainter2D:
    boolean pointSmooth -> pointSmooth
    boolean lineSmooth -> lineSmooth
    boolean blend -> blend
    void <init>() -> <init>
    void paintTo(javax.media.opengl.GL2,com.metsci.glimpse.context.GlimpseBounds,com.metsci.glimpse.axis.Axis2D) -> paintTo
    boolean isPointSmooth() -> isPointSmooth
    void setPointSmooth(boolean) -> setPointSmooth
    boolean isLineSmooth() -> isLineSmooth
    void setLineSmooth(boolean) -> setLineSmooth
    boolean isAlphaBlend() -> isAlphaBlend
    void setAlphaBlend(boolean) -> setAlphaBlend
    void paintTo(com.metsci.glimpse.context.GlimpseContext,com.metsci.glimpse.context.GlimpseBounds,com.metsci.glimpse.axis.Axis2D) -> paintTo
com.metsci.glimpse.painter.base.GlimpsePainter -> com.metsci.glimpse.painter.base.GlimpsePainter:
    void paintTo(com.metsci.glimpse.context.GlimpseContext) -> paintTo
    void setLookAndFeel(com.metsci.glimpse.support.settings.LookAndFeel) -> setLookAndFeel
    void setVisible(boolean) -> setVisible
    boolean isVisible() -> isVisible
    void dispose(com.metsci.glimpse.context.GlimpseContext) -> dispose
    boolean isDisposed() -> isDisposed
com.metsci.glimpse.painter.base.GlimpsePainter1D -> com.metsci.glimpse.painter.base.GlimpsePainter1D:
    void <init>() -> <init>
    void paintTo(com.metsci.glimpse.context.GlimpseContext,com.metsci.glimpse.context.GlimpseBounds,com.metsci.glimpse.axis.Axis1D) -> paintTo
    void paintTo(com.metsci.glimpse.context.GlimpseContext,com.metsci.glimpse.context.GlimpseBounds) -> paintTo
com.metsci.glimpse.painter.base.GlimpsePainter2D -> com.metsci.glimpse.painter.base.GlimpsePainter2D:
    void <init>() -> <init>
    void paintTo(com.metsci.glimpse.context.GlimpseContext,com.metsci.glimpse.context.GlimpseBounds,com.metsci.glimpse.axis.Axis2D) -> paintTo
    void paintTo(com.metsci.glimpse.context.GlimpseContext,com.metsci.glimpse.context.GlimpseBounds) -> paintTo
com.metsci.glimpse.painter.base.GlimpsePainterCallback -> com.metsci.glimpse.painter.base.GlimpsePainterCallback:
    void prePaint(com.metsci.glimpse.painter.base.GlimpsePainter,com.metsci.glimpse.context.GlimpseContext) -> prePaint
    void postPaint(com.metsci.glimpse.painter.base.GlimpsePainter,com.metsci.glimpse.context.GlimpseContext) -> postPaint
com.metsci.glimpse.painter.base.GlimpsePainterImpl -> com.metsci.glimpse.painter.base.GlimpsePainterImpl:
    java.util.logging.Logger logger -> logger
    int BYTES_PER_FLOAT -> BYTES_PER_FLOAT
    boolean disposed -> disposed
    java.util.concurrent.locks.ReentrantLock disposeLock -> disposeLock
    boolean displayOn -> displayOn
    boolean doErrorHandling -> doErrorHandling
    java.lang.String errorPrefix -> errorPrefix
    void paintTo(com.metsci.glimpse.context.GlimpseContext,com.metsci.glimpse.context.GlimpseBounds) -> paintTo
    void <init>() -> <init>
    void setErrorHandling(boolean) -> setErrorHandling
    void setVisible(boolean) -> setVisible
    boolean isVisible() -> isVisible
    void setLookAndFeel(com.metsci.glimpse.support.settings.LookAndFeel) -> setLookAndFeel
    void paintTo(com.metsci.glimpse.context.GlimpseContext) -> paintTo
    void dispose(com.metsci.glimpse.context.GlimpseContext) -> dispose
    void dispose(javax.media.opengl.GLContext) -> dispose
    boolean isDisposed() -> isDisposed
    boolean glHandleError(javax.media.opengl.GL) -> glHandleError
    boolean glHandleError(javax.media.opengl.GL,java.lang.String) -> glHandleError
    void <clinit>() -> <clinit>
com.metsci.glimpse.painter.decoration.BackgroundPainter -> com.metsci.glimpse.painter.decoration.BackgroundPainter:
    float[] backgroundColor -> backgroundColor
    boolean colorSet -> colorSet
    java.lang.String lafColorKey -> lafColorKey
    boolean displayOn -> displayOn
    void <init>() -> <init>
    void <init>(boolean) -> <init>
    void setVisible(boolean) -> setVisible
    boolean isVisible() -> isVisible
    float[] getColor() -> getColor
    com.metsci.glimpse.painter.decoration.BackgroundPainter setColor(float[]) -> setColor
    com.metsci.glimpse.painter.decoration.BackgroundPainter setColor(float,float,float,float) -> setColor
    void setLookAndFeelKey(java.lang.String) -> setLookAndFeelKey
    void paintTo(com.metsci.glimpse.context.GlimpseContext) -> paintTo
    void setLookAndFeel(com.metsci.glimpse.support.settings.LookAndFeel) -> setLookAndFeel
    void dispose(com.metsci.glimpse.context.GlimpseContext) -> dispose
    boolean isDisposed() -> isDisposed
com.metsci.glimpse.painter.decoration.BorderPainter -> com.metsci.glimpse.painter.decoration.BorderPainter:
    float[] borderColor -> borderColor
    boolean colorSet -> colorSet
    float lineWidth -> lineWidth
    int stippleFactor -> stippleFactor
    short stipplePattern -> stipplePattern
    boolean stippleOn -> stippleOn
    boolean drawTop -> drawTop
    boolean drawBottom -> drawBottom
    boolean drawRight -> drawRight
    boolean drawLeft -> drawLeft
    void <init>() -> <init>
    com.metsci.glimpse.painter.decoration.BorderPainter setDrawTop(boolean) -> setDrawTop
    com.metsci.glimpse.painter.decoration.BorderPainter setDrawBottom(boolean) -> setDrawBottom
    com.metsci.glimpse.painter.decoration.BorderPainter setDrawLeft(boolean) -> setDrawLeft
    com.metsci.glimpse.painter.decoration.BorderPainter setDrawRight(boolean) -> setDrawRight
    com.metsci.glimpse.painter.decoration.BorderPainter setDotted(boolean) -> setDotted
    com.metsci.glimpse.painter.decoration.BorderPainter setLineWidth(float) -> setLineWidth
    com.metsci.glimpse.painter.decoration.BorderPainter setColor(float[]) -> setColor
    com.metsci.glimpse.painter.decoration.BorderPainter setColor(float,float,float,float) -> setColor
    void setLookAndFeel(com.metsci.glimpse.support.settings.LookAndFeel) -> setLookAndFeel
    void paintTo(com.metsci.glimpse.context.GlimpseContext,com.metsci.glimpse.context.GlimpseBounds) -> paintTo
com.metsci.glimpse.painter.decoration.CrosshairPainter -> com.metsci.glimpse.painter.decoration.CrosshairPainter:
    float[] xorColor -> xorColor
    float[] cursorColor -> cursorColor
    float[] shadeColor -> shadeColor
    float lineWidth -> lineWidth
    boolean showSelectionBox -> showSelectionBox
    boolean shadeSelectionBox -> shadeSelectionBox
    boolean showSelectionCrosshairs -> showSelectionCrosshairs
    boolean hideHorizontalHairs -> hideHorizontalHairs
    boolean hideVerticalHairs -> hideVerticalHairs
    boolean paintXor -> paintXor
    boolean colorSet -> colorSet
    void <init>() -> <init>
    void setCursorColor(float[]) -> setCursorColor
    void setCursorColor(float,float,float,float) -> setCursorColor
    void setShadeColor(float[]) -> setShadeColor
    void setShadeColor(float,float,float,float) -> setShadeColor
    void setHideVerticalHairs(boolean) -> setHideVerticalHairs
    void setHideHorizontalHairs(boolean) -> setHideHorizontalHairs
    void setLineWidth(float) -> setLineWidth
    void showSelectionBox(boolean) -> showSelectionBox
    void setShadeSelectionBox(boolean) -> setShadeSelectionBox
    void showSelectionCrosshairs(boolean) -> showSelectionCrosshairs
    void setXor(boolean) -> setXor
    void conditionallyEnableXor(javax.media.opengl.GL2) -> conditionallyEnableXor
    void conditionallyDisableXor(javax.media.opengl.GL) -> conditionallyDisableXor
    void setLookAndFeel(com.metsci.glimpse.support.settings.LookAndFeel) -> setLookAndFeel
    void paintTo(javax.media.opengl.GL2,com.metsci.glimpse.context.GlimpseBounds,com.metsci.glimpse.axis.Axis2D) -> paintTo
com.metsci.glimpse.painter.decoration.GridPainter -> com.metsci.glimpse.painter.decoration.GridPainter:
    short CASE3 -> CASE3
    short CASE2 -> CASE2
    short CASE1 -> CASE1
    short CASE0 -> CASE0
    float[] majorLineColor -> majorLineColor
    int majorLineThickness -> majorLineThickness
    float[] minorLineColor -> minorLineColor
    int minorLineThickness -> minorLineThickness
    boolean showHorizontal -> showHorizontal
    boolean showVertical -> showVertical
    boolean showMinorTicks -> showMinorTicks
    boolean stipple -> stipple
    com.metsci.glimpse.axis.painter.label.AxisLabelHandler ticksX -> ticksX
    com.metsci.glimpse.axis.painter.label.AxisLabelHandler ticksY -> ticksY
    void <init>(com.metsci.glimpse.axis.painter.label.AxisLabelHandler,com.metsci.glimpse.axis.painter.label.AxisLabelHandler) -> <init>
    void <init>() -> <init>
    void setDotted(boolean) -> setDotted
    com.metsci.glimpse.painter.decoration.GridPainter setLineColor(float,float,float,float) -> setLineColor
    com.metsci.glimpse.painter.decoration.GridPainter setLineColor(float[]) -> setLineColor
    com.metsci.glimpse.painter.decoration.GridPainter setMinorLineColor(float[]) -> setMinorLineColor
    com.metsci.glimpse.painter.decoration.GridPainter setShowMinorGrid(boolean) -> setShowMinorGrid
    com.metsci.glimpse.painter.decoration.GridPainter setShowVerticalLines(boolean) -> setShowVerticalLines
    com.metsci.glimpse.painter.decoration.GridPainter setShowHorizontalLines(boolean) -> setShowHorizontalLines
    com.metsci.glimpse.painter.decoration.GridPainter setTickHandlerX(com.metsci.glimpse.axis.painter.label.AxisLabelHandler) -> setTickHandlerX
    com.metsci.glimpse.painter.decoration.GridPainter setTickHandlerY(com.metsci.glimpse.axis.painter.label.AxisLabelHandler) -> setTickHandlerY
    void glLineStipple(javax.media.opengl.GL2,com.metsci.glimpse.axis.Axis1D,com.metsci.glimpse.axis.painter.label.AxisUnitConverter) -> glLineStipple
    void glLineStipple(javax.media.opengl.GL2,int) -> glLineStipple
    void paintTo(javax.media.opengl.GL2,com.metsci.glimpse.context.GlimpseBounds,com.metsci.glimpse.axis.Axis2D) -> paintTo
    void <clinit>() -> <clinit>
com.metsci.glimpse.painter.info.SimpleTextPainter -> com.metsci.glimpse.painter.info.SimpleTextPainter:
    float[] textColor -> textColor
    float[] textColorNoBackground -> textColorNoBackground
    boolean textColorSet -> textColorSet
    boolean paintBackground -> paintBackground
    float[] backgroundColor -> backgroundColor
    boolean backgroundColorSet -> backgroundColorSet
    boolean paintBorder -> paintBorder
    float[] borderColor -> borderColor
    boolean borderColorSet -> borderColorSet
    int horizontalPadding -> horizontalPadding
    int verticalPadding -> verticalPadding
    com.metsci.glimpse.painter.info.SimpleTextPainter$HorizontalPosition hPos -> hPos
    com.metsci.glimpse.painter.info.SimpleTextPainter$VerticalPosition vPos -> vPos
    com.jogamp.opengl.util.awt.TextRenderer textRenderer -> textRenderer
    boolean fontSet -> fontSet
    java.lang.String sizeText -> sizeText
    java.lang.String text -> text
    boolean horizontal -> horizontal
    java.awt.Font newFont -> newFont
    boolean antialias -> antialias
    void <init>() -> <init>
    com.metsci.glimpse.painter.info.SimpleTextPainter setHorizontalLabels(boolean) -> setHorizontalLabels
    com.metsci.glimpse.painter.info.SimpleTextPainter setPaintBackground(boolean) -> setPaintBackground
    com.metsci.glimpse.painter.info.SimpleTextPainter setBackgroundColor(float[]) -> setBackgroundColor
    com.metsci.glimpse.painter.info.SimpleTextPainter setPaintBorder(boolean) -> setPaintBorder
    com.metsci.glimpse.painter.info.SimpleTextPainter setBorderColor(float[]) -> setBorderColor
    com.metsci.glimpse.painter.info.SimpleTextPainter setHorizontalPosition(com.metsci.glimpse.painter.info.SimpleTextPainter$HorizontalPosition) -> setHorizontalPosition
    com.metsci.glimpse.painter.info.SimpleTextPainter setVerticalPosition(com.metsci.glimpse.painter.info.SimpleTextPainter$VerticalPosition) -> setVerticalPosition
    com.metsci.glimpse.painter.info.SimpleTextPainter setFont(java.awt.Font) -> setFont
    com.metsci.glimpse.painter.info.SimpleTextPainter setFont(java.awt.Font,boolean) -> setFont
    com.metsci.glimpse.painter.info.SimpleTextPainter setFont(int,boolean) -> setFont
    com.metsci.glimpse.painter.info.SimpleTextPainter setFont(int,boolean,boolean) -> setFont
    com.metsci.glimpse.painter.info.SimpleTextPainter setSizeText(java.lang.String) -> setSizeText
    com.metsci.glimpse.painter.info.SimpleTextPainter setText(java.lang.String) -> setText
    java.lang.String getText() -> getText
    com.metsci.glimpse.painter.info.SimpleTextPainter setPadding(int) -> setPadding
    com.metsci.glimpse.painter.info.SimpleTextPainter setVerticalPadding(int) -> setVerticalPadding
    com.metsci.glimpse.painter.info.SimpleTextPainter setHorizontalPadding(int) -> setHorizontalPadding
    com.metsci.glimpse.painter.info.SimpleTextPainter setColor(float[]) -> setColor
    com.metsci.glimpse.painter.info.SimpleTextPainter setColor(float,float,float,float) -> setColor
    int getVerticalPadding() -> getVerticalPadding
    int getHorizontalPadding() -> getHorizontalPadding
    void setLookAndFeel(com.metsci.glimpse.support.settings.LookAndFeel) -> setLookAndFeel
    void dispose(com.metsci.glimpse.context.GlimpseContext) -> dispose
    java.awt.geom.Rectangle2D getTextBounds() -> getTextBounds
    void paintToHorizontal(javax.media.opengl.GL2,int,int,java.awt.geom.Rectangle2D) -> paintToHorizontal
    void paintToVertical(javax.media.opengl.GL2,int,int,java.awt.geom.Rectangle2D) -> paintToVertical
    void paintTo(com.metsci.glimpse.context.GlimpseContext,com.metsci.glimpse.context.GlimpseBounds) -> paintTo
    void updateTextRenderer() -> updateTextRenderer
com.metsci.glimpse.painter.info.SimpleTextPainter$1 -> com.metsci.glimpse.painter.info.SimpleTextPainter$1:
    int[] $SwitchMap$com$metsci$glimpse$painter$info$SimpleTextPainter$HorizontalPosition -> $SwitchMap$com$metsci$glimpse$painter$info$SimpleTextPainter$HorizontalPosition
    int[] $SwitchMap$com$metsci$glimpse$painter$info$SimpleTextPainter$VerticalPosition -> $SwitchMap$com$metsci$glimpse$painter$info$SimpleTextPainter$VerticalPosition
    void <clinit>() -> <clinit>
com.metsci.glimpse.painter.info.SimpleTextPainter$HorizontalPosition -> com.metsci.glimpse.painter.info.SimpleTextPainter$HorizontalPosition:
    com.metsci.glimpse.painter.info.SimpleTextPainter$HorizontalPosition Left -> Left
    com.metsci.glimpse.painter.info.SimpleTextPainter$HorizontalPosition Center -> Center
    com.metsci.glimpse.painter.info.SimpleTextPainter$HorizontalPosition Right -> Right
    com.metsci.glimpse.painter.info.SimpleTextPainter$HorizontalPosition[] $VALUES -> $VALUES
    com.metsci.glimpse.painter.info.SimpleTextPainter$HorizontalPosition[] values() -> values
    com.metsci.glimpse.painter.info.SimpleTextPainter$HorizontalPosition valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.metsci.glimpse.painter.info.SimpleTextPainter$VerticalPosition -> com.metsci.glimpse.painter.info.SimpleTextPainter$VerticalPosition:
    com.metsci.glimpse.painter.info.SimpleTextPainter$VerticalPosition Bottom -> Bottom
    com.metsci.glimpse.painter.info.SimpleTextPainter$VerticalPosition Center -> Center
    com.metsci.glimpse.painter.info.SimpleTextPainter$VerticalPosition Top -> Top
    com.metsci.glimpse.painter.info.SimpleTextPainter$VerticalPosition[] $VALUES -> $VALUES
    com.metsci.glimpse.painter.info.SimpleTextPainter$VerticalPosition[] values() -> values
    com.metsci.glimpse.painter.info.SimpleTextPainter$VerticalPosition valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.metsci.glimpse.painter.plot.HistogramPainter -> com.metsci.glimpse.painter.plot.HistogramPainter:
    int FLOATS_PER_BAR -> FLOATS_PER_BAR
    float[] barColor -> barColor
    int[] bufferHandle -> bufferHandle
    java.nio.FloatBuffer dataBuffer -> dataBuffer
    java.util.concurrent.locks.ReentrantLock dataBufferLock -> dataBufferLock
    int dataSize -> dataSize
    boolean newData -> newData
    boolean bufferInitialized -> bufferInitialized
    float binSize -> binSize
    float binStart -> binStart
    float minY -> minY
    float maxY -> maxY
    float minX -> minX
    float maxX -> maxX
    boolean asDensity -> asDensity
    void <init>(boolean) -> <init>
    void <init>() -> <init>
    void setColor(float[]) -> setColor
    void setColor(float,float,float,float) -> setColor
    void autoAdjustAxisBounds(com.metsci.glimpse.axis.Axis2D) -> autoAdjustAxisBounds
    void setData(double[]) -> setData
    void setData(double[],int) -> setData
    void setData(float[]) -> setData
    void setData(float[],int) -> setData
    void setData(double[],double,double) -> setData
    void setData(double[],int,double,double) -> setData
    void setData(it.unimi.dsi.fastutil.floats.Float2IntMap,float) -> setData
    void setData(it.unimi.dsi.fastutil.floats.Float2IntMap,int,float) -> setData
    void setData(double[],float,float) -> setData
    void setData(float[],int,float,float) -> setData
    float getBinSize() -> getBinSize
    float getBinStart() -> getBinStart
    float getMinY() -> getMinY
    float getMaxY() -> getMaxY
    float getMinX() -> getMinX
    float getMaxX() -> getMaxX
    float getBin(double,double,double) -> getBin
    void dispose(javax.media.opengl.GLContext) -> dispose
    void paintTo(javax.media.opengl.GL2,com.metsci.glimpse.context.GlimpseBounds,com.metsci.glimpse.axis.Axis2D) -> paintTo
com.metsci.glimpse.painter.texture.HeatMapPainter -> com.metsci.glimpse.painter.texture.HeatMapPainter:
    java.util.logging.Logger logger -> logger
    com.metsci.glimpse.support.texture.FloatTextureProjected2D heatMap -> heatMap
    com.metsci.glimpse.gl.texture.ColorTexture1D colorScale -> colorScale
    com.metsci.glimpse.support.shader.SampledColorScaleShader fragShader -> fragShader
    void <init>(com.metsci.glimpse.axis.Axis1D) -> <init>
    void loadDefaultPipeline(com.metsci.glimpse.axis.Axis1D) -> loadDefaultPipeline
    void setAlpha(float) -> setAlpha
    void setData(com.metsci.glimpse.support.texture.FloatTextureProjected2D) -> setData
    void setColorScale(com.metsci.glimpse.gl.texture.ColorTexture1D) -> setColorScale
    com.metsci.glimpse.gl.texture.ColorTexture1D getColorScale() -> getColorScale
    com.metsci.glimpse.support.texture.FloatTextureProjected2D getData() -> getData
    com.metsci.glimpse.support.projection.Projection getProjection() -> getProjection
    void <clinit>() -> <clinit>
com.metsci.glimpse.painter.texture.ShadedTexturePainter -> com.metsci.glimpse.painter.texture.ShadedTexturePainter:
    int DEFAULT_DRAWABLE_TEXTURE_UNIT -> DEFAULT_DRAWABLE_TEXTURE_UNIT
    int DEFAULT_NONDRAWABLE_TEXTURE_UNIT -> DEFAULT_NONDRAWABLE_TEXTURE_UNIT
    java.util.concurrent.locks.ReentrantLock lock -> lock
    java.util.Set nonDrawableTextures -> nonDrawableTextures
    java.util.Set drawableTextures -> drawableTextures
    com.metsci.glimpse.gl.shader.Pipeline pipeline -> pipeline
    void <init>() -> <init>
    void setPipeline(com.metsci.glimpse.gl.shader.Pipeline) -> setPipeline
    void addDrawableTexture(com.metsci.glimpse.gl.texture.DrawableTexture) -> addDrawableTexture
    void addDrawableTexture(com.metsci.glimpse.gl.texture.DrawableTexture,int) -> addDrawableTexture
    void removeDrawableTexture(com.metsci.glimpse.gl.texture.DrawableTexture) -> removeDrawableTexture
    void removeAllDrawableTextures() -> removeAllDrawableTextures
    void addNonDrawableTexture(com.metsci.glimpse.gl.texture.Texture) -> addNonDrawableTexture
    void addNonDrawableTexture(com.metsci.glimpse.gl.texture.Texture,int) -> addNonDrawableTexture
    void removeNonDrawableTexture(com.metsci.glimpse.gl.texture.Texture) -> removeNonDrawableTexture
    void removeAllNonDrawableTextures() -> removeAllNonDrawableTextures
    void paintTo(com.metsci.glimpse.context.GlimpseContext,com.metsci.glimpse.context.GlimpseBounds,com.metsci.glimpse.axis.Axis2D) -> paintTo
    void draw(com.metsci.glimpse.painter.texture.TextureUnit,javax.media.opengl.GL2) -> draw
    void prepare(com.metsci.glimpse.painter.texture.TextureUnit,javax.media.opengl.GL2) -> prepare
    void dispose(javax.media.opengl.GLContext) -> dispose
com.metsci.glimpse.painter.texture.TaggedHeatMapPainter -> com.metsci.glimpse.painter.texture.TaggedHeatMapPainter:
    int DEFAULT_DATA_COORD_UNIT -> DEFAULT_DATA_COORD_UNIT
    int DEFAULT_TEX_COORD_UNIT -> DEFAULT_TEX_COORD_UNIT
    com.metsci.glimpse.gl.texture.FloatTexture1D vertexCoordTex -> vertexCoordTex
    com.metsci.glimpse.gl.texture.FloatTexture1D textureCoordTex -> textureCoordTex
    com.metsci.glimpse.axis.tagged.shader.TaggedColorScaleShader fragShader -> fragShader
    com.metsci.glimpse.axis.tagged.TaggedAxis1D taggedAxis -> taggedAxis
    void <init>(com.metsci.glimpse.axis.tagged.TaggedAxis1D) -> <init>
    void loadDefaultPipeline(com.metsci.glimpse.axis.Axis1D) -> loadDefaultPipeline
    void setAlpha(float) -> setAlpha
    void setDiscardNaN(boolean) -> setDiscardNaN
    void setDiscardAbove(boolean) -> setDiscardAbove
    void setDiscardBelow(boolean) -> setDiscardBelow
    void axisUpdated(com.metsci.glimpse.axis.Axis1D) -> axisUpdated
    void updateTextureArrays() -> updateTextureArrays
com.metsci.glimpse.painter.texture.TaggedHeatMapPainter$1 -> com.metsci.glimpse.painter.texture.TaggedHeatMapPainter$1:
    java.util.List val$tags -> val$tags
    com.metsci.glimpse.painter.texture.TaggedHeatMapPainter this$0 -> this$0
    void <init>(com.metsci.glimpse.painter.texture.TaggedHeatMapPainter,java.util.List) -> <init>
    void mutate(java.nio.FloatBuffer,int) -> mutate
com.metsci.glimpse.painter.texture.TaggedHeatMapPainter$2 -> com.metsci.glimpse.painter.texture.TaggedHeatMapPainter$2:
    java.util.List val$tags -> val$tags
    com.metsci.glimpse.painter.texture.TaggedHeatMapPainter this$0 -> this$0
    void <init>(com.metsci.glimpse.painter.texture.TaggedHeatMapPainter,java.util.List) -> <init>
    void mutate(java.nio.FloatBuffer,int) -> mutate
com.metsci.glimpse.painter.texture.TextureUnit -> com.metsci.glimpse.painter.texture.TextureUnit:
    int textureUnit -> textureUnit
    com.metsci.glimpse.gl.texture.Texture texture -> texture
    void <init>(com.metsci.glimpse.gl.texture.Texture) -> <init>
    void <init>(int,com.metsci.glimpse.gl.texture.Texture) -> <init>
    boolean prepare(javax.media.opengl.GL2) -> prepare
    int getTextureUnit() -> getTextureUnit
    com.metsci.glimpse.gl.texture.Texture getTexture() -> getTexture
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.metsci.glimpse.plot.ColorAxisPlot2D -> com.metsci.glimpse.plot.ColorAxisPlot2D:
    void <init>() -> <init>
    void initializePainters() -> initializePainters
    com.metsci.glimpse.axis.painter.NumericAxisPainter createAxisPainterZ(com.metsci.glimpse.axis.painter.label.AxisLabelHandler) -> createAxisPainterZ
    void setColorScale(com.metsci.glimpse.gl.texture.ColorTexture1D) -> setColorScale
    java.lang.String toString() -> toString
com.metsci.glimpse.plot.Plot2D -> com.metsci.glimpse.plot.Plot2D:
    int BACKGROUND_LAYER -> BACKGROUND_LAYER
    int DATA_LAYER -> DATA_LAYER
    int FOREGROUND_LAYER -> FOREGROUND_LAYER
    int outerBorder -> outerBorder
    int axisThicknessX -> axisThicknessX
    int axisThicknessY -> axisThicknessY
    int axisThicknessZ -> axisThicknessZ
    int titleSpacing -> titleSpacing
    java.lang.String title -> title
    boolean showTitle -> showTitle
    com.metsci.glimpse.painter.decoration.BackgroundPainter backgroundPainter -> backgroundPainter
    com.metsci.glimpse.layout.GlimpseLayout titleLayout -> titleLayout
    com.metsci.glimpse.layout.GlimpseAxisLayout1D axisLayoutX -> axisLayoutX
    com.metsci.glimpse.layout.GlimpseAxisLayout1D axisLayoutY -> axisLayoutY
    com.metsci.glimpse.layout.GlimpseAxisLayout1D axisLayoutZ -> axisLayoutZ
    com.metsci.glimpse.layout.GlimpseAxisLayout2D axisLayoutXY -> axisLayoutXY
    com.metsci.glimpse.axis.Axis2D axisXY -> axisXY
    com.metsci.glimpse.axis.Axis1D axisZ -> axisZ
    com.metsci.glimpse.painter.info.SimpleTextPainter titlePainter -> titlePainter
    com.metsci.glimpse.axis.painter.NumericAxisPainter painterX -> painterX
    com.metsci.glimpse.axis.painter.NumericAxisPainter painterY -> painterY
    com.metsci.glimpse.axis.painter.NumericAxisPainter painterZ -> painterZ
    com.metsci.glimpse.axis.painter.label.GridAxisLabelHandler tickX -> tickX
    com.metsci.glimpse.axis.painter.label.GridAxisLabelHandler tickY -> tickY
    com.metsci.glimpse.axis.painter.label.GridAxisLabelHandler tickZ -> tickZ
    com.metsci.glimpse.axis.listener.mouse.AxisMouseListener mouseListenerX -> mouseListenerX
    com.metsci.glimpse.axis.listener.mouse.AxisMouseListener mouseListenerY -> mouseListenerY
    com.metsci.glimpse.axis.listener.mouse.AxisMouseListener mouseListenerZ -> mouseListenerZ
    com.metsci.glimpse.axis.listener.mouse.AxisMouseListener mouseListenerXY -> mouseListenerXY
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void initialize() -> initialize
    void initializeAxes() -> initializeAxes
    void initializeParentLayout() -> initializeParentLayout
    void initializeLookAndFeel() -> initializeLookAndFeel
    void updatePainterLayout() -> updatePainterLayout
    void initializePainters() -> initializePainters
    void attachAxisMouseListeners() -> attachAxisMouseListeners
    void removeAxisMouseListener(com.metsci.glimpse.event.mouse.Mouseable,com.metsci.glimpse.axis.listener.mouse.AxisMouseListener) -> removeAxisMouseListener
    void attachAxisMouseListener(com.metsci.glimpse.event.mouse.Mouseable,com.metsci.glimpse.axis.listener.mouse.AxisMouseListener) -> attachAxisMouseListener
    com.metsci.glimpse.axis.listener.mouse.AxisMouseListener createAxisMouseListenerX() -> createAxisMouseListenerX
    com.metsci.glimpse.axis.listener.mouse.AxisMouseListener createAxisMouseListenerY() -> createAxisMouseListenerY
    com.metsci.glimpse.axis.listener.mouse.AxisMouseListener createAxisMouseListenerZ() -> createAxisMouseListenerZ
    com.metsci.glimpse.axis.listener.mouse.AxisMouseListener createAxisMouseListenerXY() -> createAxisMouseListenerXY
    com.metsci.glimpse.painter.info.SimpleTextPainter createTitlePainter() -> createTitlePainter
    com.metsci.glimpse.axis.Axis1D createAxisX() -> createAxisX
    com.metsci.glimpse.axis.Axis1D createAxisY() -> createAxisY
    com.metsci.glimpse.axis.Axis1D createAxisZ() -> createAxisZ
    com.metsci.glimpse.axis.painter.label.GridAxisLabelHandler createLabelHandlerX() -> createLabelHandlerX
    com.metsci.glimpse.axis.painter.label.GridAxisLabelHandler createLabelHandlerY() -> createLabelHandlerY
    com.metsci.glimpse.axis.painter.label.GridAxisLabelHandler createLabelHandlerZ() -> createLabelHandlerZ
    com.metsci.glimpse.axis.painter.NumericAxisPainter createAxisPainterX(com.metsci.glimpse.axis.painter.label.AxisLabelHandler) -> createAxisPainterX
    com.metsci.glimpse.axis.painter.NumericAxisPainter createAxisPainterY(com.metsci.glimpse.axis.painter.label.AxisLabelHandler) -> createAxisPainterY
    com.metsci.glimpse.axis.painter.NumericAxisPainter createAxisPainterZ(com.metsci.glimpse.axis.painter.label.AxisLabelHandler) -> createAxisPainterZ
    int getTopInset() -> getTopInset
    com.metsci.glimpse.layout.GlimpseLayoutManagerMig getLayoutManager() -> getLayoutManager
    void setBackgroundColor(float[]) -> setBackgroundColor
    void addAxisListener(com.metsci.glimpse.axis.listener.AxisListener2D) -> addAxisListener
    void setUpdateModeZ(com.metsci.glimpse.axis.UpdateMode) -> setUpdateModeZ
    void setUpdateModeXY(com.metsci.glimpse.axis.UpdateMode) -> setUpdateModeXY
    void setAxisFont(java.awt.Font) -> setAxisFont
    void setAxisFont(java.awt.Font,boolean) -> setAxisFont
    void setAxisColor(float[]) -> setAxisColor
    void setTitleFont(java.awt.Font) -> setTitleFont
    void setTitleFont(java.awt.Font,boolean) -> setTitleFont
    void setTitle(java.lang.String) -> setTitle
    void setTitleColor(float[]) -> setTitleColor
    void showTitle(boolean) -> showTitle
    void setBorderSize(int) -> setBorderSize
    void setAxisSizeX(int) -> setAxisSizeX
    void setAxisSizeY(int) -> setAxisSizeY
    void setAxisSizeZ(int) -> setAxisSizeZ
    void setTitleHeight(int) -> setTitleHeight
    com.metsci.glimpse.axis.Axis2D getAxis() -> getAxis
    com.metsci.glimpse.axis.Axis1D getAxisX() -> getAxisX
    com.metsci.glimpse.axis.Axis1D getAxisY() -> getAxisY
    com.metsci.glimpse.axis.Axis1D getAxisZ() -> getAxisZ
    void setTickSize(int) -> setTickSize
    void setTickColor(float[]) -> setTickColor
    void setTickLabelColor(float[]) -> setTickLabelColor
    void setAxisLabelColor(float[]) -> setAxisLabelColor
    void setMinorTickCount(int) -> setMinorTickCount
    void setShowMinorTicks(boolean) -> setShowMinorTicks
    void setAxisLabelZ(java.lang.String) -> setAxisLabelZ
    void setAxisLabelZ(java.lang.String,java.lang.String) -> setAxisLabelZ
    void setAxisLabelZ(java.lang.String,java.lang.String,boolean) -> setAxisLabelZ
    void setShowAxisMarkerZ(boolean) -> setShowAxisMarkerZ
    void setShowMinorTicksZ(boolean) -> setShowMinorTicksZ
    void setMarkerWidthZ(int) -> setMarkerWidthZ
    void setTickSpacingZ(int) -> setTickSpacingZ
    void setMinorTickCountZ(int) -> setMinorTickCountZ
    void setAxisLabelX(java.lang.String) -> setAxisLabelX
    void setAxisLabelX(java.lang.String,java.lang.String) -> setAxisLabelX
    void setAxisLabelX(java.lang.String,java.lang.String,boolean) -> setAxisLabelX
    void setShowAxisMarkerX(boolean) -> setShowAxisMarkerX
    void setShowMinorTicksX(boolean) -> setShowMinorTicksX
    void setMarkerWidthX(int) -> setMarkerWidthX
    void setTickSpacingX(int) -> setTickSpacingX
    void setMinorTickCountX(int) -> setMinorTickCountX
    void setAxisLabelY(java.lang.String) -> setAxisLabelY
    void setAxisLabelY(java.lang.String,java.lang.String) -> setAxisLabelY
    void setAxisLabelY(java.lang.String,java.lang.String,boolean) -> setAxisLabelY
    void setShowAxisMarkerY(boolean) -> setShowAxisMarkerY
    void setShowMinorTicksY(boolean) -> setShowMinorTicksY
    void setMarkerWidthY(int) -> setMarkerWidthY
    void setTickSpacingY(int) -> setTickSpacingY
    void setMinorTickCountY(int) -> setMinorTickCountY
    void validate() -> validate
    void setAbsoluteMaxX(double) -> setAbsoluteMaxX
    void setAbsoluteMinX(double) -> setAbsoluteMinX
    void setAbsoluteMaxY(double) -> setAbsoluteMaxY
    void setAbsoluteMinY(double) -> setAbsoluteMinY
    void setAbsoluteMaxZ(double) -> setAbsoluteMaxZ
    void setAbsoluteMinZ(double) -> setAbsoluteMinZ
    void setMaxX(double) -> setMaxX
    void setMinX(double) -> setMinX
    void setMaxY(double) -> setMaxY
    void setMinY(double) -> setMinY
    void setMaxZ(double) -> setMaxZ
    void setMinZ(double) -> setMinZ
    void lockMaxX(double) -> lockMaxX
    void lockMinX(double) -> lockMinX
    void lockMaxY(double) -> lockMaxY
    void lockMinY(double) -> lockMinY
    void lockMaxZ(double) -> lockMaxZ
    void lockMinZ(double) -> lockMinZ
    void unlockMaxX() -> unlockMaxX
    void unlockMinX() -> unlockMinX
    void unlockMaxY() -> unlockMaxY
    void unlockMinY() -> unlockMinY
    void unlockMaxZ() -> unlockMaxZ
    void unlockMinZ() -> unlockMinZ
    void setSelectionSize(double) -> setSelectionSize
    void lockAspectRatioXY(double) -> lockAspectRatioXY
    com.metsci.glimpse.axis.painter.NumericAxisPainter getAxisPainterX() -> getAxisPainterX
    com.metsci.glimpse.axis.painter.NumericAxisPainter getAxisPainterY() -> getAxisPainterY
    com.metsci.glimpse.axis.painter.NumericAxisPainter getAxisPainterZ() -> getAxisPainterZ
    com.metsci.glimpse.axis.painter.label.GridAxisLabelHandler getLabelHandlerX() -> getLabelHandlerX
    com.metsci.glimpse.axis.painter.label.GridAxisLabelHandler getLabelHandlerY() -> getLabelHandlerY
    com.metsci.glimpse.axis.painter.label.GridAxisLabelHandler getLabelHandlerZ() -> getLabelHandlerZ
    com.metsci.glimpse.layout.GlimpseLayout getLayoutX() -> getLayoutX
    com.metsci.glimpse.layout.GlimpseLayout getLayoutY() -> getLayoutY
    com.metsci.glimpse.layout.GlimpseLayout getLayoutZ() -> getLayoutZ
    com.metsci.glimpse.layout.GlimpseAxisLayout2D getLayoutCenter() -> getLayoutCenter
    com.metsci.glimpse.layout.GlimpseLayout getLayoutTitle() -> getLayoutTitle
    com.metsci.glimpse.context.GlimpseTargetStack getTargetStackX() -> getTargetStackX
    com.metsci.glimpse.context.GlimpseTargetStack getTargetStackY() -> getTargetStackY
    com.metsci.glimpse.context.GlimpseTargetStack getTargetStackZ() -> getTargetStackZ
    com.metsci.glimpse.context.GlimpseTargetStack getTargetStackCenter() -> getTargetStackCenter
    com.metsci.glimpse.context.GlimpseTargetStack getTargetStackTitle() -> getTargetStackTitle
    void addGlimpseMouseListener(com.metsci.glimpse.event.mouse.GlimpseMouseListener) -> addGlimpseMouseListener
    void addGlimpseMouseMotionListener(com.metsci.glimpse.event.mouse.GlimpseMouseMotionListener) -> addGlimpseMouseMotionListener
    void addGlimpseMouseWheelListener(com.metsci.glimpse.event.mouse.GlimpseMouseWheelListener) -> addGlimpseMouseWheelListener
    void addGlimpseMouseAllListener(com.metsci.glimpse.event.mouse.GlimpseMouseAllListener) -> addGlimpseMouseAllListener
    void removeGlimpseMouseAllListener(com.metsci.glimpse.event.mouse.GlimpseMouseAllListener) -> removeGlimpseMouseAllListener
    void removeGlimpseMouseListener(com.metsci.glimpse.event.mouse.GlimpseMouseListener) -> removeGlimpseMouseListener
    void removeGlimpseMouseMotionListener(com.metsci.glimpse.event.mouse.GlimpseMouseMotionListener) -> removeGlimpseMouseMotionListener
    void removeGlimpseMouseWheelListener(com.metsci.glimpse.event.mouse.GlimpseMouseWheelListener) -> removeGlimpseMouseWheelListener
    java.lang.String toString() -> toString
    com.metsci.glimpse.layout.GlimpseLayoutManager getLayoutManager() -> getLayoutManager
    void <clinit>() -> <clinit>
com.metsci.glimpse.plot.SimplePlot2D -> com.metsci.glimpse.plot.SimplePlot2D:
    com.metsci.glimpse.painter.decoration.BorderPainter borderPainter -> borderPainter
    com.metsci.glimpse.painter.decoration.BackgroundPainter plotBackgroundPainter -> plotBackgroundPainter
    com.metsci.glimpse.painter.decoration.GridPainter gridPainter -> gridPainter
    com.metsci.glimpse.painter.decoration.CrosshairPainter crosshairPainter -> crosshairPainter
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void initializePainters() -> initializePainters
    void addPainterBackground(com.metsci.glimpse.painter.base.GlimpsePainter) -> addPainterBackground
    void addPainterForeground(com.metsci.glimpse.painter.base.GlimpsePainter) -> addPainterForeground
    void setZOrder(com.metsci.glimpse.painter.base.GlimpsePainter,int) -> setZOrder
    void addPainter(com.metsci.glimpse.painter.base.GlimpsePainter) -> addPainter
    void addPainter(com.metsci.glimpse.painter.base.GlimpsePainter,com.metsci.glimpse.painter.base.GlimpsePainterCallback) -> addPainter
    void addPainter(com.metsci.glimpse.painter.base.GlimpsePainter,int) -> addPainter
    void addPainter(com.metsci.glimpse.painter.base.GlimpsePainter,com.metsci.glimpse.painter.base.GlimpsePainterCallback,int) -> addPainter
    void removePainter(com.metsci.glimpse.painter.base.GlimpsePainter) -> removePainter
    void setPlotBackgroundColor(float[]) -> setPlotBackgroundColor
    void setBackgroundColor(float[]) -> setBackgroundColor
    com.metsci.glimpse.painter.decoration.CrosshairPainter getCrosshairPainter() -> getCrosshairPainter
    com.metsci.glimpse.painter.decoration.BorderPainter getBorderPainter() -> getBorderPainter
    com.metsci.glimpse.painter.decoration.GridPainter getGridPainter() -> getGridPainter
    java.lang.String toString() -> toString
com.metsci.glimpse.plot.TaggedColorAxisPlot2D -> com.metsci.glimpse.plot.TaggedColorAxisPlot2D:
    void <init>() -> <init>
    com.metsci.glimpse.axis.Axis1D createAxisZ() -> createAxisZ
    com.metsci.glimpse.axis.listener.mouse.AxisMouseListener createAxisMouseListenerZ() -> createAxisMouseListenerZ
    com.metsci.glimpse.axis.painter.NumericAxisPainter createAxisPainterZ(com.metsci.glimpse.axis.painter.label.AxisLabelHandler) -> createAxisPainterZ
    com.metsci.glimpse.axis.tagged.TaggedAxis1D getAxisZ() -> getAxisZ
    com.metsci.glimpse.axis.Axis1D getAxisZ() -> getAxisZ
com.metsci.glimpse.support.color.GlimpseColor -> com.metsci.glimpse.support.color.GlimpseColor:
    void <init>() -> <init>
    float[] fromColorRgb(float,float,float) -> fromColorRgb
    float[] fromColorRgba(float,float,float,float) -> fromColorRgba
    float[] fromColorRgb(int,int,int) -> fromColorRgb
    float[] fromColorRgba(int,int,int,int) -> fromColorRgba
    float[] fromColorHsb(float,float,float) -> fromColorHsb
    float[] fromColorAwt(java.awt.Color) -> fromColorAwt
    float[] fromColorHex(java.lang.String) -> fromColorHex
    java.awt.Color toColorAwt(float[]) -> toColorAwt
    java.lang.String toColorHex(float[]) -> toColorHex
    void glClearColor(javax.media.opengl.GL,float[]) -> glClearColor
    void setColor(com.jogamp.opengl.util.awt.TextRenderer,float[]) -> setColor
    void glColor(javax.media.opengl.GL2,float[]) -> glColor
    void glColor(javax.media.opengl.GL2,float[],float) -> glColor
    java.lang.String getString(float[]) -> getString
    float[] addRgb(float[],float) -> addRgb
    float[] add(float[],float[]) -> add
    float[] getRed() -> getRed
    float[] getRed(float) -> getRed
    float[] getGreen() -> getGreen
    float[] getGreen(float) -> getGreen
    float[] getYellow() -> getYellow
    float[] getYellow(float) -> getYellow
    float[] getCyan() -> getCyan
    float[] getCyan(float) -> getCyan
    float[] getMagenta() -> getMagenta
    float[] getMagenta(float) -> getMagenta
    float[] getBlue() -> getBlue
    float[] getBlue(float) -> getBlue
    float[] getWhite() -> getWhite
    float[] getWhite(float) -> getWhite
    float[] getBlack() -> getBlack
    float[] getBlack(float) -> getBlack
    float[] getGray() -> getGray
    float[] getGray(float) -> getGray
com.metsci.glimpse.support.colormap.ColorGradient -> com.metsci.glimpse.support.colormap.ColorGradient:
    void toColor(float,float[]) -> toColor
com.metsci.glimpse.support.colormap.ColorGradients -> com.metsci.glimpse.support.colormap.ColorGradients:
    com.metsci.glimpse.support.colormap.ColorGradient clearToBlack -> clearToBlack
    com.metsci.glimpse.support.colormap.ColorGradient blackToClear -> blackToClear
    com.metsci.glimpse.support.colormap.ColorGradient gray -> gray
    com.metsci.glimpse.support.colormap.ColorGradient jet -> jet
    com.metsci.glimpse.support.colormap.ColorGradient greenBone -> greenBone
    com.metsci.glimpse.support.colormap.ColorGradient purpleBone -> purpleBone
    com.metsci.glimpse.support.colormap.ColorGradient reverseBone -> reverseBone
    com.metsci.glimpse.support.colormap.ColorGradient bathymetry -> bathymetry
    com.metsci.glimpse.support.colormap.ColorGradient topography -> topography
    com.metsci.glimpse.support.colormap.ColorGradient reverse(com.metsci.glimpse.support.colormap.ColorGradient) -> reverse
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.metsci.glimpse.support.colormap.ColorGradients$1 -> com.metsci.glimpse.support.colormap.ColorGradients$1:
    void <init>() -> <init>
    void toColor(float,float[]) -> toColor
com.metsci.glimpse.support.colormap.ColorGradients$10 -> com.metsci.glimpse.support.colormap.ColorGradients$10:
    com.metsci.glimpse.support.colormap.ColorGradient val$gradient -> val$gradient
    void <init>(com.metsci.glimpse.support.colormap.ColorGradient) -> <init>
    void toColor(float,float[]) -> toColor
com.metsci.glimpse.support.colormap.ColorGradients$2 -> com.metsci.glimpse.support.colormap.ColorGradients$2:
    void <init>() -> <init>
    void toColor(float,float[]) -> toColor
com.metsci.glimpse.support.colormap.ColorGradients$3 -> com.metsci.glimpse.support.colormap.ColorGradients$3:
    void <init>() -> <init>
    void toColor(float,float[]) -> toColor
com.metsci.glimpse.support.colormap.ColorGradients$4 -> com.metsci.glimpse.support.colormap.ColorGradients$4:
    void <init>() -> <init>
    void toColor(float,float[]) -> toColor
com.metsci.glimpse.support.colormap.ColorGradients$5 -> com.metsci.glimpse.support.colormap.ColorGradients$5:
    void <init>() -> <init>
    void toColor(float,float[]) -> toColor
com.metsci.glimpse.support.colormap.ColorGradients$6 -> com.metsci.glimpse.support.colormap.ColorGradients$6:
    void <init>() -> <init>
    void toColor(float,float[]) -> toColor
com.metsci.glimpse.support.colormap.ColorGradients$7 -> com.metsci.glimpse.support.colormap.ColorGradients$7:
    void <init>() -> <init>
    void toColor(float,float[]) -> toColor
com.metsci.glimpse.support.colormap.ColorGradients$8 -> com.metsci.glimpse.support.colormap.ColorGradients$8:
    void <init>() -> <init>
    void toColor(float,float[]) -> toColor
com.metsci.glimpse.support.colormap.ColorGradients$9 -> com.metsci.glimpse.support.colormap.ColorGradients$9:
    void <init>() -> <init>
    void toColor(float,float[]) -> toColor
com.metsci.glimpse.support.font.FontUtils -> com.metsci.glimpse.support.font.FontUtils:
    java.util.logging.Logger logger -> logger
    boolean foundVerdana -> foundVerdana
    void <init>() -> <init>
    java.awt.Font getDefaultPlain(float) -> getDefaultPlain
    java.awt.Font getDefaultBold(float) -> getDefaultBold
    java.awt.Font getDefaultItalic(float) -> getDefaultItalic
    java.awt.Font getDefaultBoldItalic(float) -> getDefaultBoldItalic
    java.awt.Font getBitstreamVeraSansPlain(float) -> getBitstreamVeraSansPlain
    java.awt.Font getBitstreamVeraSansBold(float) -> getBitstreamVeraSansBold
    java.awt.Font getBitstreamVeraSansItalic(float) -> getBitstreamVeraSansItalic
    java.awt.Font getBitstreamVeraSansBoldItalic(float) -> getBitstreamVeraSansBoldItalic
    java.awt.Font getSilkscreen() -> getSilkscreen
    java.awt.Font getSilkscreenPlain() -> getSilkscreenPlain
    java.awt.Font getSilkscreenBold() -> getSilkscreenBold
    java.awt.Font getSilkscreenItalic() -> getSilkscreenItalic
    java.awt.Font getSilkscreenBoldItalic() -> getSilkscreenBoldItalic
    java.awt.Font getVerdanaPlain(float) -> getVerdanaPlain
    java.awt.Font getVerdanaBold(float) -> getVerdanaBold
    java.awt.Font getVerdanaItalic(float) -> getVerdanaItalic
    java.awt.Font getVerdanaBoldItalic(float) -> getVerdanaBoldItalic
    java.awt.Font loadTrueTypeFont(java.lang.String,float,int) -> loadTrueTypeFont
    void <clinit>() -> <clinit>
com.metsci.glimpse.support.projection.FlatProjection -> com.metsci.glimpse.support.projection.FlatProjection:
    double minX -> minX
    double maxX -> maxX
    double minY -> minY
    double maxY -> maxY
    double minTexX -> minTexX
    double maxTexX -> maxTexX
    double minTexY -> minTexY
    double maxTexY -> maxTexY
    double diffX -> diffX
    double diffY -> diffY
    double diffTexX -> diffTexX
    double diffTexY -> diffTexY
    void <init>(com.metsci.glimpse.axis.Axis2D) -> <init>
    void <init>(double,double,double,double) -> <init>
    void <init>(com.metsci.glimpse.axis.Axis2D,double,double,double,double) -> <init>
    void <init>(double,double,double,double,double,double,double,double) -> <init>
    void getVertexXY(double,double,float[]) -> getVertexXY
    void getVertexXYZ(double,double,float[]) -> getVertexXYZ
    int getSizeX(int) -> getSizeX
    int getSizeY(int) -> getSizeY
    double getTextureFractionX(double,double) -> getTextureFractionX
    double getTextureFractionY(double,double) -> getTextureFractionY
    double getMinX() -> getMinX
    double getMaxX() -> getMaxX
    double getMinY() -> getMinY
    double getMaxY() -> getMaxY
com.metsci.glimpse.support.projection.InvertibleProjection -> com.metsci.glimpse.support.projection.InvertibleProjection:
    double getTextureFractionX(double,double) -> getTextureFractionX
    double getTextureFractionY(double,double) -> getTextureFractionY
com.metsci.glimpse.support.projection.Projection -> com.metsci.glimpse.support.projection.Projection:
    void getVertexXY(double,double,float[]) -> getVertexXY
    void getVertexXYZ(double,double,float[]) -> getVertexXYZ
    int getSizeX(int) -> getSizeX
    int getSizeY(int) -> getSizeY
com.metsci.glimpse.support.settings.AbstractLookAndFeel -> com.metsci.glimpse.support.settings.AbstractLookAndFeel:
    java.lang.String TOOLTIP_BACKGROUND_COLOR -> TOOLTIP_BACKGROUND_COLOR
    java.lang.String TOOLTIP_TEXT_COLOR -> TOOLTIP_TEXT_COLOR
    java.lang.String AXIS_TEXT_COLOR -> AXIS_TEXT_COLOR
    java.lang.String AXIS_TICK_COLOR -> AXIS_TICK_COLOR
    java.lang.String AXIS_TAG_COLOR -> AXIS_TAG_COLOR
    java.lang.String AXIS_FONT -> AXIS_FONT
    java.lang.String TITLE_FONT -> TITLE_FONT
    java.lang.String CROSSHAIR_COLOR -> CROSSHAIR_COLOR
    java.lang.String BORDER_COLOR -> BORDER_COLOR
    java.lang.String FRAME_BACKGROUND_COLOR -> FRAME_BACKGROUND_COLOR
    java.lang.String PLOT_BACKGROUND_COLOR -> PLOT_BACKGROUND_COLOR
    java.util.Map map -> map
    void <init>() -> <init>
    java.lang.Object getValue(java.lang.String) -> getValue
    float[] getColor(java.lang.String) -> getColor
    float getFloat(java.lang.String) -> getFloat
    java.awt.Font getFont(java.lang.String) -> getFont
    void <clinit>() -> <clinit>
com.metsci.glimpse.support.settings.DefaultLookAndFeel -> com.metsci.glimpse.support.settings.DefaultLookAndFeel:
    void <init>() -> <init>
com.metsci.glimpse.support.settings.LookAndFeel -> com.metsci.glimpse.support.settings.LookAndFeel:
    java.lang.Object getValue(java.lang.String) -> getValue
    float[] getColor(java.lang.String) -> getColor
    java.awt.Font getFont(java.lang.String) -> getFont
    float getFloat(java.lang.String) -> getFloat
com.metsci.glimpse.support.settings.SwingLookAndFeel -> com.metsci.glimpse.support.settings.SwingLookAndFeel:
    void <init>() -> <init>
com.metsci.glimpse.support.shader.SampledColorScaleShader -> com.metsci.glimpse.support.shader.SampledColorScaleShader:
    com.metsci.glimpse.gl.shader.ShaderArg dataMin -> dataMin
    com.metsci.glimpse.gl.shader.ShaderArg dataMax -> dataMax
    com.metsci.glimpse.gl.shader.ShaderArg alpha -> alpha
    com.metsci.glimpse.gl.shader.ShaderArg dataTexUnit -> dataTexUnit
    com.metsci.glimpse.gl.shader.ShaderArg colorTexUnit -> colorTexUnit
    void <init>(com.metsci.glimpse.axis.Axis1D,int,int) -> <init>
    void <init>(java.lang.String) -> <init>
    void initialize(com.metsci.glimpse.axis.Axis1D,int,int) -> initialize
    com.metsci.glimpse.gl.shader.ShaderSource readSource(java.lang.String) -> readSource
    void setAlpha(float) -> setAlpha
    boolean preLink(javax.media.opengl.GL,int) -> preLink
    void preDisplay(javax.media.opengl.GL) -> preDisplay
    void postDisplay(javax.media.opengl.GL) -> postDisplay
    void axisUpdated(com.metsci.glimpse.axis.Axis1D) -> axisUpdated
    void setTargetTexUnit(int) -> setTargetTexUnit
    void setColorTexUnit(int) -> setColorTexUnit
    double getMin(com.metsci.glimpse.axis.Axis1D) -> getMin
    double getMax(com.metsci.glimpse.axis.Axis1D) -> getMax
com.metsci.glimpse.support.shader.geometry.SimpleShader -> com.metsci.glimpse.support.shader.geometry.SimpleShader:
    java.util.logging.Logger logger -> logger
    void <init>(java.lang.String,com.metsci.glimpse.gl.shader.ShaderType,java.lang.String) -> <init>
    com.metsci.glimpse.gl.shader.Shader passVertex() -> passVertex
    com.metsci.glimpse.gl.shader.Shader passFragment() -> passFragment
    com.metsci.glimpse.gl.shader.ShaderSource getSource(java.lang.String) -> getSource
    void logGlError(javax.media.opengl.GL) -> logGlError
    boolean preLink(javax.media.opengl.GL,int) -> preLink
    void preDisplay(javax.media.opengl.GL) -> preDisplay
    void postDisplay(javax.media.opengl.GL) -> postDisplay
    void <clinit>() -> <clinit>
com.metsci.glimpse.support.texture.FloatTextureProjected2D -> com.metsci.glimpse.support.texture.FloatTextureProjected2D:
    java.util.logging.Logger logger -> logger
    void <init>(int,int) -> <init>
    void <init>(int,int,boolean) -> <init>
    java.nio.Buffer prepare_setPixelStore(javax.media.opengl.GL,int) -> prepare_setPixelStore
    void prepare_setData(javax.media.opengl.GL2) -> prepare_setData
    int getRequiredCapacityBytes() -> getRequiredCapacityBytes
    float getData(int) -> getData
    void setData(float[][]) -> setData
    void setData(float[][],boolean) -> setData
    void setData(double[][]) -> setData
    void setData(double[][],boolean) -> setData
    void mutate(com.metsci.glimpse.support.texture.FloatTextureProjected2D$MutatorFloat2D) -> mutate
    java.util.logging.Logger access$000() -> access$000
    void <clinit>() -> <clinit>
com.metsci.glimpse.support.texture.FloatTextureProjected2D$MutatorFloat2D -> com.metsci.glimpse.support.texture.FloatTextureProjected2D$MutatorFloat2D:
    void mutate(java.nio.FloatBuffer,int,int) -> mutate
com.metsci.glimpse.support.texture.FloatTextureProjected2D$SetDataMutator -> com.metsci.glimpse.support.texture.FloatTextureProjected2D$SetDataMutator:
    float[][] dataf -> dataf
    double[][] datad -> datad
    boolean flip -> flip
    void <init>(float[][],boolean) -> <init>
    void <init>(double[][],boolean) -> <init>
    void <init>(float[][]) -> <init>
    void <init>(double[][]) -> <init>
    void mutate(java.nio.FloatBuffer,int,int) -> mutate
    void mutatef(java.nio.FloatBuffer,int,int) -> mutatef
    void mutated(java.nio.FloatBuffer,int,int) -> mutated
com.metsci.glimpse.support.texture.TextureProjected2D -> com.metsci.glimpse.support.texture.TextureProjected2D:
    int NUM_DIMENSIONS -> NUM_DIMENSIONS
    int VERTICES_PER_QUAD -> VERTICES_PER_QUAD
    int BYTES_PER_FLOAT -> BYTES_PER_FLOAT
    java.util.logging.Logger logger -> logger
    com.metsci.glimpse.support.projection.Projection projection -> projection
    java.nio.ByteBuffer data -> data
    java.nio.FloatBuffer coordBuffer -> coordBuffer
    boolean useVertexZCoord -> useVertexZCoord
    int floatsPerVertex -> floatsPerVertex
    int numTextures -> numTextures
    int textureCountX -> textureCountX
    int textureCountY -> textureCountY
    int maxTextureSize -> maxTextureSize
    int[] textureHandles -> textureHandles
    int[] vertexCoordHandles -> vertexCoordHandles
    int[] texCoordHandles -> texCoordHandles
    int[] texStartsX -> texStartsX
    int[] texStartsY -> texStartsY
    int[] texSizesX -> texSizesX
    int[] texSizesY -> texSizesY
    int[] texQuadCounts -> texQuadCounts
    java.util.concurrent.locks.ReentrantLock lock -> lock
    boolean glAllocated -> glAllocated
    boolean dirty -> dirty
    boolean projectionDirty -> projectionDirty
    int dataSizeX -> dataSizeX
    int dataSizeY -> dataSizeY
    void <init>(int,int,boolean) -> <init>
    void prepare_setData(javax.media.opengl.GL2) -> prepare_setData
    int getRequiredCapacityBytes() -> getRequiredCapacityBytes
    float getData(int) -> getData
    double getDataValue(double,double) -> getDataValue
    float getDataValue(int,int) -> getDataValue
    void makeProjectionDirty() -> makeProjectionDirty
    int[] getHandles() -> getHandles
    void makeDirty() -> makeDirty
    boolean isDirty() -> isDirty
    int getNumDimension() -> getNumDimension
    int getDimensionSize(int) -> getDimensionSize
    boolean prepare(javax.media.opengl.GL2,int) -> prepare
    void draw(javax.media.opengl.GL2,int) -> draw
    void draw(javax.media.opengl.GL2,int,java.util.Collection) -> draw
    void dispose(javax.media.opengl.GLContext) -> dispose
    int getTextureType() -> getTextureType
    void prepare_glState(javax.media.opengl.GL) -> prepare_glState
    void allocate_calcSizes(javax.media.opengl.GL) -> allocate_calcSizes
    void allocate_genTextureHandles(javax.media.opengl.GL) -> allocate_genTextureHandles
    void allocate_genBuffers(javax.media.opengl.GL) -> allocate_genBuffers
    int getMaxGLTextureSize(javax.media.opengl.GL) -> getMaxGLTextureSize
    int getQuadCountForTexture(int,int,int,int,int) -> getQuadCountForTexture
    void prepare_setCoords(javax.media.opengl.GL) -> prepare_setCoords
    void putVerticesCoords(int,int,int,int,int,float[]) -> putVerticesCoords
    void putVertexCoords(int,double,double,float[]) -> putVertexCoords
    void putVerticesTexCoords(int,int,int,int,int) -> putVerticesTexCoords
    void putVertexTexCoords(int,double,double) -> putVertexTexCoords
    void prepare_setTexParameters(javax.media.opengl.GL) -> prepare_setTexParameters
    java.nio.ByteBuffer newByteBuffer() -> newByteBuffer
    boolean isResident(javax.media.opengl.GL2) -> isResident
    void resize(int,int) -> resize
    void setProjection(com.metsci.glimpse.support.projection.Projection) -> setProjection
    com.metsci.glimpse.support.projection.Projection getProjection() -> getProjection
    void <clinit>() -> <clinit>
com.metsci.glimpse.swt.canvas.NewtSwtGlimpseCanvas -> com.metsci.glimpse.swt.canvas.NewtSwtGlimpseCanvas:
    java.util.logging.Logger logger -> logger
    javax.media.opengl.GLProfile glProfile -> glProfile
    javax.media.opengl.GLCapabilities glCapabilities -> glCapabilities
    com.jogamp.newt.opengl.GLWindow glWindow -> glWindow
    com.jogamp.newt.swt.NewtCanvasSWT glCanvas -> glCanvas
    boolean isEventConsumer -> isEventConsumer
    boolean isEventGenerator -> isEventGenerator
    boolean isDestroyed -> isDestroyed
    com.metsci.glimpse.canvas.LayoutManager layoutManager -> layoutManager
    com.metsci.glimpse.event.mouse.newt.MouseWrapperNewt mouseHelper -> mouseHelper
    java.util.List disposeListeners -> disposeListeners
    java.awt.Dimension dimension -> dimension
    void <init>(org.eclipse.swt.widgets.Composite,javax.media.opengl.GLProfile,int) -> <init>
    void <init>(org.eclipse.swt.widgets.Composite,javax.media.opengl.GLContext,int) -> <init>
    void <init>(org.eclipse.swt.widgets.Composite,javax.media.opengl.GLProfile,javax.media.opengl.GLContext,int) -> <init>
    void <init>(org.eclipse.swt.widgets.Composite,java.lang.String,javax.media.opengl.GLContext,int) -> <init>
    void init(org.eclipse.swt.widgets.Composite,javax.media.opengl.GLProfile,javax.media.opengl.GLContext,int) -> init
    void addDisposeListener(org.eclipse.swt.widgets.Shell,javax.media.opengl.GLAutoDrawable) -> addDisposeListener
    javax.media.opengl.GLEventListener createGLEventListener() -> createGLEventListener
    com.jogamp.newt.swt.NewtCanvasSWT getCanvas() -> getCanvas
    javax.media.opengl.GLProfile getGLProfile() -> getGLProfile
    javax.media.opengl.GLAutoDrawable getGLDrawable() -> getGLDrawable
    com.jogamp.newt.opengl.GLWindow getGLWindow() -> getGLWindow
    com.metsci.glimpse.context.GlimpseContext getGlimpseContext() -> getGlimpseContext
    void setLookAndFeel(com.metsci.glimpse.support.settings.LookAndFeel) -> setLookAndFeel
    void addLayout(com.metsci.glimpse.layout.GlimpseLayout) -> addLayout
    void addLayout(com.metsci.glimpse.layout.GlimpseLayout,int) -> addLayout
    void setZOrder(com.metsci.glimpse.layout.GlimpseLayout,int) -> setZOrder
    void removeLayout(com.metsci.glimpse.layout.GlimpseLayout) -> removeLayout
    void removeAllLayouts() -> removeAllLayouts
    java.util.List getTargetChildren() -> getTargetChildren
    java.awt.Dimension getDimension() -> getDimension
    com.metsci.glimpse.context.GlimpseBounds getTargetBounds(com.metsci.glimpse.context.GlimpseTargetStack) -> getTargetBounds
    com.metsci.glimpse.context.GlimpseBounds getTargetBounds() -> getTargetBounds
    void paint() -> paint
    javax.media.opengl.GLContext getGLContext() -> getGLContext
    java.lang.String toString() -> toString
    boolean isEventConsumer() -> isEventConsumer
    void setEventConsumer(boolean) -> setEventConsumer
    boolean isEventGenerator() -> isEventGenerator
    void setEventGenerator(boolean) -> setEventGenerator
    boolean isDestroyed() -> isDestroyed
    void destroy() -> destroy
    void addDisposeListener(javax.media.opengl.GLRunnable) -> addDisposeListener
    void dispose() -> dispose
    void disposeAttached() -> disposeAttached
    void disposePainter(com.metsci.glimpse.painter.base.GlimpsePainter) -> disposePainter
    java.util.logging.Logger access$000() -> access$000
    void <clinit>() -> <clinit>
com.metsci.glimpse.swt.canvas.NewtSwtGlimpseCanvas$1 -> com.metsci.glimpse.swt.canvas.NewtSwtGlimpseCanvas$1:
    javax.media.opengl.GLAutoDrawable val$sharedContextSource -> val$sharedContextSource
    com.metsci.glimpse.swt.canvas.NewtSwtGlimpseCanvas this$0 -> this$0
    void <init>(com.metsci.glimpse.swt.canvas.NewtSwtGlimpseCanvas,javax.media.opengl.GLAutoDrawable) -> <init>
    void widgetDisposed(org.eclipse.swt.events.DisposeEvent) -> widgetDisposed
com.metsci.glimpse.swt.canvas.NewtSwtGlimpseCanvas$2 -> com.metsci.glimpse.swt.canvas.NewtSwtGlimpseCanvas$2:
    com.metsci.glimpse.swt.canvas.NewtSwtGlimpseCanvas this$0 -> this$0
    void <init>(com.metsci.glimpse.swt.canvas.NewtSwtGlimpseCanvas) -> <init>
    void init(javax.media.opengl.GLAutoDrawable) -> init
    void display(javax.media.opengl.GLAutoDrawable) -> display
    void reshape(javax.media.opengl.GLAutoDrawable,int,int,int,int) -> reshape
    void dispose(javax.media.opengl.GLAutoDrawable) -> dispose
com.metsci.glimpse.swt.canvas.NewtSwtGlimpseCanvas$3 -> com.metsci.glimpse.swt.canvas.NewtSwtGlimpseCanvas$3:
    com.metsci.glimpse.swt.canvas.NewtSwtGlimpseCanvas this$0 -> this$0
    void <init>(com.metsci.glimpse.swt.canvas.NewtSwtGlimpseCanvas) -> <init>
    boolean run(javax.media.opengl.GLAutoDrawable) -> run
com.metsci.glimpse.swt.canvas.NewtSwtGlimpseCanvas$4 -> com.metsci.glimpse.swt.canvas.NewtSwtGlimpseCanvas$4:
    com.metsci.glimpse.painter.base.GlimpsePainter val$painter -> val$painter
    com.metsci.glimpse.swt.canvas.NewtSwtGlimpseCanvas this$0 -> this$0
    void <init>(com.metsci.glimpse.swt.canvas.NewtSwtGlimpseCanvas,com.metsci.glimpse.painter.base.GlimpsePainter) -> <init>
    boolean run(javax.media.opengl.GLAutoDrawable) -> run
com.metsci.glimpse.swt.misc.GlimpseColorSwt -> com.metsci.glimpse.swt.misc.GlimpseColorSwt:
    void <init>() -> <init>
    float[] fromColorSwt(org.eclipse.swt.graphics.RGB) -> fromColorSwt
    float[] fromColorSwt(org.eclipse.swt.graphics.Color) -> fromColorSwt
    float[] fromColorSwt(org.eclipse.swt.graphics.RGB,float) -> fromColorSwt
    float[] fromColorSwt(org.eclipse.swt.graphics.Color,float) -> fromColorSwt
    float[] fromColorSwtSystemColor(int) -> fromColorSwtSystemColor
    org.eclipse.swt.graphics.Color toColorSwt(float[]) -> toColorSwt
    org.eclipse.swt.graphics.Color toColorSwt(org.eclipse.swt.widgets.Display,float[]) -> toColorSwt
com.metsci.glimpse.swt.misc.SwtLookAndFeel -> com.metsci.glimpse.swt.misc.SwtLookAndFeel:
    void <init>() -> <init>
com.metsci.glimpse.util.GeneralUtils -> com.metsci.glimpse.util.GeneralUtils:
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    void <init>() -> <init>
    java.math.BigDecimal stripTrailingZeros(java.math.BigDecimal) -> stripTrailingZeros
    int hashCode(long) -> hashCode
    int hashCode(float) -> hashCode
    int hashCode(double) -> hashCode
    int hashCode(boolean) -> hashCode
    short compare(short,short) -> compare
    short compareShorts(short,short) -> compareShorts
    int compare(int,int) -> compare
    int compareInts(int,int) -> compareInts
    int compare(long,long) -> compare
    int compareLongs(long,long) -> compareLongs
    java.lang.Class classForName(java.lang.String) -> classForName
    java.lang.String getWorkingDir() -> getWorkingDir
    java.lang.Object cast(java.lang.Object) -> cast
    java.util.HashSet newHashSet() -> newHashSet
    java.util.HashSet newHashSet(java.util.Collection) -> newHashSet
    java.util.LinkedHashSet newLinkedHashSet() -> newLinkedHashSet
    java.util.LinkedHashSet newLinkedHashSet(java.util.Collection) -> newLinkedHashSet
    java.util.TreeSet newTreeSet() -> newTreeSet
    java.util.HashMap newHashMap() -> newHashMap
    java.util.HashMap newHashMap(java.util.Map) -> newHashMap
    java.util.LinkedHashMap newLinkedHashMap() -> newLinkedHashMap
    java.util.TreeMap newTreeMap() -> newTreeMap
    java.util.ArrayList newArrayList() -> newArrayList
    java.util.ArrayList newArrayList(java.util.Collection) -> newArrayList
    java.util.List newUnmodifiableList(java.util.Collection) -> newUnmodifiableList
    java.util.ArrayList asList(java.util.Collection) -> asList
    java.util.HashSet asSet(java.lang.Object[]) -> asSet
    int[] ints(int[]) -> ints
    long[] longs(long[]) -> longs
    float[] floats(float[]) -> floats
    double[] doubles(double[]) -> doubles
    boolean[] booleans(boolean[]) -> booleans
    java.lang.Object[] array(java.lang.Object[]) -> array
    java.util.EnumSet enumSet(java.lang.Enum[]) -> enumSet
    void stringBufferAppend(java.lang.StringBuffer,java.lang.String,java.lang.Object[]) -> stringBufferAppend
    void stringBuilderAppend(java.lang.StringBuilder,java.lang.String,java.lang.Object[]) -> stringBuilderAppend
    void <clinit>() -> <clinit>
com.metsci.glimpse.util.Pair -> com.metsci.glimpse.util.Pair:
    long serialVersionUID -> serialVersionUID
    java.lang.Object first -> first
    java.lang.Object second -> second
    com.metsci.glimpse.util.Pair newPair(java.lang.Object,java.lang.Object) -> newPair
    void <init>(java.lang.Object,java.lang.Object) -> <init>
    java.lang.Object first() -> first
    java.lang.Object second() -> second
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean areEqual(java.lang.Object,java.lang.Object) -> areEqual
    boolean equals(java.lang.Object) -> equals
com.metsci.glimpse.util.StringUtils -> com.metsci.glimpse.util.StringUtils:
    java.lang.String degreeSymbol -> degreeSymbol
    java.lang.String superscriptTwo -> superscriptTwo
    java.lang.String lowercaseSigma -> lowercaseSigma
    java.lang.String whiteBox -> whiteBox
    java.lang.String whiteCircle -> whiteCircle
    java.lang.String whiteDiamond -> whiteDiamond
    void <init>() -> <init>
    java.lang.String[] split(java.lang.String,char) -> split
    java.lang.String join(java.lang.String,java.lang.String[]) -> join
    java.lang.String removeFilenameExtension(java.lang.String) -> removeFilenameExtension
    java.lang.String repeat(java.lang.String,int) -> repeat
    java.lang.String toString(int[]) -> toString
    java.lang.String toString(long[]) -> toString
    java.lang.String toString(double[]) -> toString
    java.lang.String getFilenameExtension(java.lang.String) -> getFilenameExtension
    java.lang.String getStackTraceString(java.lang.Throwable) -> getStackTraceString
    java.lang.String decimalFormat(double,int) -> decimalFormat
com.metsci.glimpse.util.io.StreamOpener -> com.metsci.glimpse.util.io.StreamOpener:
    com.metsci.glimpse.util.io.StreamOpener fileOpener -> fileOpener
    com.metsci.glimpse.util.io.StreamOpener resourceOpener -> resourceOpener
    com.metsci.glimpse.util.io.StreamOpener fileThenResourceOpener -> fileThenResourceOpener
    com.metsci.glimpse.util.io.StreamOpener file -> file
    com.metsci.glimpse.util.io.StreamOpener resource -> resource
    com.metsci.glimpse.util.io.StreamOpener fileThenResource -> fileThenResource
    java.io.InputStream openForRead(java.lang.String) -> openForRead
    void <clinit>() -> <clinit>
com.metsci.glimpse.util.io.StreamOpener$1 -> com.metsci.glimpse.util.io.StreamOpener$1:
    void <init>() -> <init>
    java.io.InputStream openForRead(java.lang.String) -> openForRead
com.metsci.glimpse.util.io.StreamOpener$2 -> com.metsci.glimpse.util.io.StreamOpener$2:
    void <init>() -> <init>
    java.io.InputStream openForRead(java.lang.String) -> openForRead
com.metsci.glimpse.util.io.StreamOpener$3 -> com.metsci.glimpse.util.io.StreamOpener$3:
    void <init>() -> <init>
    java.io.InputStream openForRead(java.lang.String) -> openForRead
com.metsci.glimpse.util.logging.LoggerUtils -> com.metsci.glimpse.util.logging.LoggerUtils:
    void <init>() -> <init>
    java.util.logging.Logger getLogger(java.lang.Class) -> getLogger
    java.util.logging.Level getLevelRecursive(java.util.logging.Logger) -> getLevelRecursive
    void dumpAncestry(java.util.logging.Logger) -> dumpAncestry
    void initializeLogging() -> initializeLogging
    void initializeLogging(java.lang.String) -> initializeLogging
    void initializeLogging(java.lang.String,com.metsci.glimpse.util.io.StreamOpener) -> initializeLogging
    void setTerseConsoleLogger(java.util.logging.Level) -> setTerseConsoleLogger
    void addTerseFileLogger(java.util.logging.Level,java.lang.String) -> addTerseFileLogger
    void setLoggerLevel(java.util.logging.Level) -> setLoggerLevel
    void sendStdoutToLog() -> sendStdoutToLog
    void sendStderrToLog() -> sendStderrToLog
    void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Object[]) -> log
    void logFinest(java.util.logging.Logger,java.lang.String,java.lang.Object[]) -> logFinest
    void logFiner(java.util.logging.Logger,java.lang.String,java.lang.Object[]) -> logFiner
    void logFine(java.util.logging.Logger,java.lang.String,java.lang.Object[]) -> logFine
    void logConfig(java.util.logging.Logger,java.lang.String,java.lang.Object[]) -> logConfig
    void logInfo(java.util.logging.Logger,java.lang.String,java.lang.Object[]) -> logInfo
    void logWarning(java.util.logging.Logger,java.lang.String,java.lang.Object[]) -> logWarning
    void logSevere(java.util.logging.Logger,java.lang.String,java.lang.Object[]) -> logSevere
    void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Throwable,java.lang.Object[]) -> log
    void logFinest(java.util.logging.Logger,java.lang.String,java.lang.Throwable,java.lang.Object[]) -> logFinest
    void logFiner(java.util.logging.Logger,java.lang.String,java.lang.Throwable,java.lang.Object[]) -> logFiner
    void logFine(java.util.logging.Logger,java.lang.String,java.lang.Throwable,java.lang.Object[]) -> logFine
    void logConfig(java.util.logging.Logger,java.lang.String,java.lang.Throwable,java.lang.Object[]) -> logConfig
    void logInfo(java.util.logging.Logger,java.lang.String,java.lang.Throwable,java.lang.Object[]) -> logInfo
    void logWarning(java.util.logging.Logger,java.lang.String,java.lang.Throwable,java.lang.Object[]) -> logWarning
    void logSevere(java.util.logging.Logger,java.lang.String,java.lang.Throwable,java.lang.Object[]) -> logSevere
com.metsci.glimpse.util.logging.LoggerUtils$1 -> com.metsci.glimpse.util.logging.LoggerUtils$1:
    com.metsci.glimpse.util.logging.format.Formatter formatter -> formatter
    void <init>() -> <init>
    com.metsci.glimpse.util.logging.format.Formatter getFormatter() -> getFormatter
    java.util.logging.Formatter getFormatter() -> getFormatter
com.metsci.glimpse.util.logging.LoggerUtils$2 -> com.metsci.glimpse.util.logging.LoggerUtils$2:
    com.metsci.glimpse.util.logging.format.Formatter formatter -> formatter
    void <init>(java.lang.String) -> <init>
    com.metsci.glimpse.util.logging.format.Formatter getFormatter() -> getFormatter
    java.util.logging.Formatter getFormatter() -> getFormatter
com.metsci.glimpse.util.logging.LoggerUtils$LoggingOutputStream -> com.metsci.glimpse.util.logging.LoggerUtils$LoggingOutputStream:
    java.lang.String lineSeparator -> lineSeparator
    java.util.logging.Logger logger -> logger
    java.util.logging.Level level -> level
    void <init>(java.util.logging.Logger,java.util.logging.Level) -> <init>
    void flush() -> flush
com.metsci.glimpse.util.logging.LoggerUtils$StdOutErrLevel -> com.metsci.glimpse.util.logging.LoggerUtils$StdOutErrLevel:
    long serialVersionUID -> serialVersionUID
    java.util.logging.Level STDOUT -> STDOUT
    java.util.logging.Level STDERR -> STDERR
    void <init>(java.lang.String,int) -> <init>
    java.lang.Object readResolve() -> readResolve
    void <clinit>() -> <clinit>
com.metsci.glimpse.util.logging.format.Formatter -> com.metsci.glimpse.util.logging.format.Formatter:
    void <init>() -> <init>
    java.lang.String format(java.util.logging.LogRecord) -> format
    void inferAndInjectCaller(java.util.logging.LogRecord) -> inferAndInjectCaller
com.metsci.glimpse.util.logging.format.TerseLogFormatter -> com.metsci.glimpse.util.logging.format.TerseLogFormatter:
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    java.lang.String LONGEST_NAMED_LEVEL -> LONGEST_NAMED_LEVEL
    int MAX_LEVEL_LENGTH -> MAX_LEVEL_LENGTH
    java.lang.String BLANKS -> BLANKS
    void <init>() -> <init>
    java.lang.String format(java.util.logging.LogRecord) -> format
    void appendPrefix(java.util.logging.LogRecord,java.lang.StringBuilder) -> appendPrefix
    void <clinit>() -> <clinit>
com.metsci.glimpse.util.logging.format.TerseMethodNameLogFormatter -> com.metsci.glimpse.util.logging.format.TerseMethodNameLogFormatter:
    void <init>() -> <init>
    java.lang.String format(java.util.logging.LogRecord) -> format
    void appendPrefix(java.util.logging.LogRecord,java.lang.StringBuilder) -> appendPrefix
com.metsci.glimpse.util.logging.format.TimestampingMethodNameLogFormatter -> com.metsci.glimpse.util.logging.format.TimestampingMethodNameLogFormatter:
    java.text.DateFormat _fullDateTriggerFormatter -> _fullDateTriggerFormatter
    java.text.DateFormat _fullFormatter -> _fullFormatter
    java.text.DateFormat _shortFormatter -> _shortFormatter
    java.lang.String _previousDateString -> _previousDateString
    void <init>() -> <init>
    java.lang.String format(java.util.logging.LogRecord) -> format
    void appendPrefix(java.util.logging.LogRecord,java.lang.StringBuilder) -> appendPrefix
    java.text.DateFormat getFullDateTriggerFormatter() -> getFullDateTriggerFormatter
    java.text.DateFormat getFullFormatter() -> getFullFormatter
    java.text.DateFormat getShortFormatter() -> getShortFormatter
com.metsci.glimpse.util.units.Angle -> com.metsci.glimpse.util.units.Angle:
    double twoPi -> twoPi
    double degreesToRadians -> degreesToRadians
    double radiansToDegrees -> radiansToDegrees
    double rightAngle -> rightAngle
    void <init>() -> <init>
    double fromDeg(double) -> fromDeg
    double[] fromDeg(double[]) -> fromDeg
    double fromRad(double) -> fromRad
    double[] fromRad(double[]) -> fromRad
    double toDeg(double) -> toDeg
    double[] toDeg(double[]) -> toDeg
    double toRad(double) -> toRad
    double[] toRad(double[]) -> toRad
    double degreesToRadians(double) -> degreesToRadians
    double[] degreesToRadians(double[]) -> degreesToRadians
    double radiansToDegrees(double) -> radiansToDegrees
    double[] radiansToDegrees(double[]) -> radiansToDegrees
    double normalizeAngle360(double) -> normalizeAngle360
    double normalizeAngle180(double) -> normalizeAngle180
    double normalizeAngleTwoPi(double) -> normalizeAngleTwoPi
    double normalizeAnglePi(double) -> normalizeAnglePi
    double[] multiply(double[],double) -> multiply
    void <clinit>() -> <clinit>
com.metsci.glimpse.util.units.Length -> com.metsci.glimpse.util.units.Length:
    double nauticalMilesToMeters -> nauticalMilesToMeters
    double yardsToFeet -> yardsToFeet
    double feetToMeters -> feetToMeters
    double kiloyardsToYards -> kiloyardsToYards
    double feetToInches -> feetToInches
    double metersToKilometers -> metersToKilometers
    double metersToMillimeters -> metersToMillimeters
    double yardsToMeters -> yardsToMeters
    double kiloyardsToMeters -> kiloyardsToMeters
    double kiloyardsToFeet -> kiloyardsToFeet
    double nauticalMilesToFeet -> nauticalMilesToFeet
    double nauticalMilesToYards -> nauticalMilesToYards
    double nauticalMilesToKiloyards -> nauticalMilesToKiloyards
    double inchesToMillimeters -> inchesToMillimeters
    double metersToInches -> metersToInches
    double feetToMillimeters -> feetToMillimeters
    double yardsToMillimeters -> yardsToMillimeters
    double yardsToInches -> yardsToInches
    double metersToNauticalMiles -> metersToNauticalMiles
    double feetToYards -> feetToYards
    double metersToFeet -> metersToFeet
    double yardsToKiloyards -> yardsToKiloyards
    double inchesToFeet -> inchesToFeet
    double kilometersToMeters -> kilometersToMeters
    double millimetersToMeters -> millimetersToMeters
    double metersToYards -> metersToYards
    double metersToKiloyards -> metersToKiloyards
    double feetToKiloyards -> feetToKiloyards
    double feetToNauticalMiles -> feetToNauticalMiles
    double yardsToNauticalMiles -> yardsToNauticalMiles
    double kiloyardsToNauticalMiles -> kiloyardsToNauticalMiles
    double millimetersToInches -> millimetersToInches
    double inchesToMeters -> inchesToMeters
    double millimetersToFeet -> millimetersToFeet
    double millimetersToYards -> millimetersToYards
    double inchesToYards -> inchesToYards
    double metersToSu -> metersToSu
    double nauticalMilesToSu -> nauticalMilesToSu
    double feetToSu -> feetToSu
    double yardsToSu -> yardsToSu
    double kiloyardsToSu -> kiloyardsToSu
    double inchesToSu -> inchesToSu
    double millimetersToSu -> millimetersToSu
    double kilometersToSu -> kilometersToSu
    double suToMeters -> suToMeters
    double suToNauticalMiles -> suToNauticalMiles
    double suToFeet -> suToFeet
    double suToYards -> suToYards
    double suToKiloyards -> suToKiloyards
    double suToInches -> suToInches
    double suToMillimeters -> suToMillimeters
    double suToKilometers -> suToKilometers
    void <init>() -> <init>
    double metersToNauticalMiles(double) -> metersToNauticalMiles
    double[] metersToNauticalMiles(double[]) -> metersToNauticalMiles
    double nauticalMilesToMeters(double) -> nauticalMilesToMeters
    double[] nauticalMilesToMeters(double[]) -> nauticalMilesToMeters
    double metersToFeet(double) -> metersToFeet
    double[] metersToFeet(double[]) -> metersToFeet
    double feetToMeters(double) -> feetToMeters
    double[] feetToMeters(double[]) -> feetToMeters
    double metersToYards(double) -> metersToYards
    double[] metersToYards(double[]) -> metersToYards
    double yardsToMeters(double) -> yardsToMeters
    double[] yardsToMeters(double[]) -> yardsToMeters
    double metersToKiloyards(double) -> metersToKiloyards
    double[] metersToKiloyards(double[]) -> metersToKiloyards
    double kiloyardsToMeters(double) -> kiloyardsToMeters
    double[] kiloyardsToMeters(double[]) -> kiloyardsToMeters
    double nauticalMilesToFeet(double) -> nauticalMilesToFeet
    double[] nauticalMilesToFeet(double[]) -> nauticalMilesToFeet
    double feetToNauticalMiles(double) -> feetToNauticalMiles
    double[] feetToNauticalMiles(double[]) -> feetToNauticalMiles
    double nauticalMilesToYards(double) -> nauticalMilesToYards
    double[] nauticalMilesToYards(double[]) -> nauticalMilesToYards
    double yardsToNauticalMiles(double) -> yardsToNauticalMiles
    double[] yardsToNauticalMiles(double[]) -> yardsToNauticalMiles
    double nauticalMilesToKiloyards(double) -> nauticalMilesToKiloyards
    double[] nauticalMilesToKiloyards(double[]) -> nauticalMilesToKiloyards
    double kiloyardsToNauticalMiles(double) -> kiloyardsToNauticalMiles
    double[] kiloyardsToNauticalMiles(double[]) -> kiloyardsToNauticalMiles
    double feetToYards(double) -> feetToYards
    double[] feetToYards(double[]) -> feetToYards
    double yardsToFeet(double) -> yardsToFeet
    double[] yardsToFeet(double[]) -> yardsToFeet
    double feetToKiloyards(double) -> feetToKiloyards
    double[] feetToKiloyards(double[]) -> feetToKiloyards
    double kiloyardsToFeet(double) -> kiloyardsToFeet
    double[] kiloyardsToFeet(double[]) -> kiloyardsToFeet
    double yardsToKiloyards(double) -> yardsToKiloyards
    double[] yardsToKiloyards(double[]) -> yardsToKiloyards
    double kiloyardsToYards(double) -> kiloyardsToYards
    double[] kiloyardsToYards(double[]) -> kiloyardsToYards
    double feetToInches(double) -> feetToInches
    double[] feetToInches(double[]) -> feetToInches
    double metersToMillimeters(double) -> metersToMillimeters
    double[] metersToMillimeters(double[]) -> metersToMillimeters
    double millimetersToMeters(double) -> millimetersToMeters
    double[] millimetersToMeters(double[]) -> millimetersToMeters
    double inchesToMillimeters(double) -> inchesToMillimeters
    double[] inchesToMillimeters(double[]) -> inchesToMillimeters
    double millimetersToInches(double) -> millimetersToInches
    double[] millimetersToInches(double[]) -> millimetersToInches
    double inchesToMeters(double) -> inchesToMeters
    double[] inchesToMeters(double[]) -> inchesToMeters
    double metersToInches(double) -> metersToInches
    double[] metersToInches(double[]) -> metersToInches
    double feetToMillimeters(double) -> feetToMillimeters
    double[] feetToMillimeters(double[]) -> feetToMillimeters
    double millimetersToFeet(double) -> millimetersToFeet
    double[] millimetersToFeet(double[]) -> millimetersToFeet
    double yardsToMillimeters(double) -> yardsToMillimeters
    double[] yardsToMillimeters(double[]) -> yardsToMillimeters
    double millimetersToYards(double) -> millimetersToYards
    double[] millimetersToYards(double[]) -> millimetersToYards
    double yardsToInches(double) -> yardsToInches
    double[] yardsToInches(double[]) -> yardsToInches
    double inchesToYards(double) -> inchesToYards
    double[] inchesToYards(double[]) -> inchesToYards
    double fromMeters(double) -> fromMeters
    double[] fromMeters(double[]) -> fromMeters
    double toMeters(double) -> toMeters
    double[] toMeters(double[]) -> toMeters
    double fromNauticalMiles(double) -> fromNauticalMiles
    double[] fromNauticalMiles(double[]) -> fromNauticalMiles
    double toNauticalMiles(double) -> toNauticalMiles
    double[] toNauticalMiles(double[]) -> toNauticalMiles
    double fromFeet(double) -> fromFeet
    double[] fromFeet(double[]) -> fromFeet
    double toFeet(double) -> toFeet
    double[] toFeet(double[]) -> toFeet
    double fromYards(double) -> fromYards
    double[] fromYards(double[]) -> fromYards
    double toYards(double) -> toYards
    double[] toYards(double[]) -> toYards
    double fromKiloyards(double) -> fromKiloyards
    double[] fromKiloyards(double[]) -> fromKiloyards
    double toKiloyards(double) -> toKiloyards
    double[] toKiloyards(double[]) -> toKiloyards
    double fromInches(double) -> fromInches
    double[] fromInches(double[]) -> fromInches
    double toInches(double) -> toInches
    double[] toInches(double[]) -> toInches
    double fromMillimeters(double) -> fromMillimeters
    double[] fromMillimeters(double[]) -> fromMillimeters
    double toMillimeters(double) -> toMillimeters
    double[] toMillimeters(double[]) -> toMillimeters
    double fromKilometers(double) -> fromKilometers
    double[] fromKilometers(double[]) -> fromKilometers
    double toKilometers(double) -> toKilometers
    double[] toKiloeters(double[]) -> toKiloeters
    double[] multiply(double[],double) -> multiply
com.metsci.glimpse.util.units.Speed -> com.metsci.glimpse.util.units.Speed:
    double knotsToMetersPerSecond -> knotsToMetersPerSecond
    double metersPerSecondToKnots -> metersPerSecondToKnots
    double metersPerSecondToSu -> metersPerSecondToSu
    double knotsToSu -> knotsToSu
    double suToMetersPerSecond -> suToMetersPerSecond
    double suToKnots -> suToKnots
    void <init>() -> <init>
    double metersPerSecondToKnots(double) -> metersPerSecondToKnots
    double[] metersPerSecondToKnots(double[]) -> metersPerSecondToKnots
    double knotsToMetersPerSecond(double) -> knotsToMetersPerSecond
    double[] knotsToMetersPerSecond(double[]) -> knotsToMetersPerSecond
    double fromMetersPerSecond(double) -> fromMetersPerSecond
    double[] fromMetersPerSecond(double[]) -> fromMetersPerSecond
    double toMetersPerSecond(double) -> toMetersPerSecond
    double[] toMetersPerSecond(double[]) -> toMetersPerSecond
    double fromKnots(double) -> fromKnots
    double[] fromKnots(double[]) -> fromKnots
    double toKnots(double) -> toKnots
    double[] toKnots(double[]) -> toKnots
    double[] multiply(double[],double) -> multiply
com.metsci.glimpse.util.units.time.Time -> com.metsci.glimpse.util.units.time.Time:
    double weeksToDays -> weeksToDays
    double daysToHours -> daysToHours
    double hoursToMinutes -> hoursToMinutes
    double minutesToSeconds -> minutesToSeconds
    double secondsToMilliseconds -> secondsToMilliseconds
    double millisecondsToMicroseconds -> millisecondsToMicroseconds
    double weeksToHours -> weeksToHours
    double weeksToMinutes -> weeksToMinutes
    double weeksToSeconds -> weeksToSeconds
    double weeksToMilliseconds -> weeksToMilliseconds
    double daysToMinutes -> daysToMinutes
    double daysToSeconds -> daysToSeconds
    double daysToMilliseconds -> daysToMilliseconds
    double hoursToSeconds -> hoursToSeconds
    double hoursToMilliseconds -> hoursToMilliseconds
    double minutesToMilliseconds -> minutesToMilliseconds
    double secondsToMicroseconds -> secondsToMicroseconds
    double daysToWeeks -> daysToWeeks
    double hoursToWeeks -> hoursToWeeks
    double minutesToWeeks -> minutesToWeeks
    double secondsToWeeks -> secondsToWeeks
    double millisecondsToWeeks -> millisecondsToWeeks
    double hoursToDays -> hoursToDays
    double minutesToDays -> minutesToDays
    double secondsToDays -> secondsToDays
    double millisecondsToDays -> millisecondsToDays
    double minutesToHours -> minutesToHours
    double secondsToHours -> secondsToHours
    double millisecondsToHours -> millisecondsToHours
    double secondsToMinutes -> secondsToMinutes
    double millisecondsToMinutes -> millisecondsToMinutes
    double millisecondsToSeconds -> millisecondsToSeconds
    double microsecondsToSeconds -> microsecondsToSeconds
    double microsecondsToMilliseconds -> microsecondsToMilliseconds
    double weeksToSu -> weeksToSu
    double daysToSu -> daysToSu
    double hoursToSu -> hoursToSu
    double minutesToSu -> minutesToSu
    double secondsToSu -> secondsToSu
    double millisecondsToSu -> millisecondsToSu
    double microsecondsToSu -> microsecondsToSu
    double suToWeeks -> suToWeeks
    double suToDays -> suToDays
    double suToHours -> suToHours
    double suToMinutes -> suToMinutes
    double suToSeconds -> suToSeconds
    double suToMilliseconds -> suToMilliseconds
    double suToMicroseconds -> suToMicroseconds
    void <init>() -> <init>
    double daysToWeeks(double) -> daysToWeeks
    double[] daysToWeeks(double[]) -> daysToWeeks
    double weeksToDays(double) -> weeksToDays
    double[] weeksToDays(double[]) -> weeksToDays
    double hoursToWeeks(double) -> hoursToWeeks
    double[] hoursToWeeks(double[]) -> hoursToWeeks
    double weeksToHours(double) -> weeksToHours
    double[] weeksToHours(double[]) -> weeksToHours
    double minutesToWeeks(double) -> minutesToWeeks
    double[] minutesToWeeks(double[]) -> minutesToWeeks
    double weeksToMinutes(double) -> weeksToMinutes
    double[] weeksToMinutes(double[]) -> weeksToMinutes
    double secondsToWeeks(double) -> secondsToWeeks
    double[] secondsToWeeks(double[]) -> secondsToWeeks
    double weeksToSeconds(double) -> weeksToSeconds
    double[] weeksToSeconds(double[]) -> weeksToSeconds
    double millisecondsToWeeks(double) -> millisecondsToWeeks
    double[] millisecondsToWeeks(double[]) -> millisecondsToWeeks
    double weeksToMilliseconds(double) -> weeksToMilliseconds
    double[] weeksToMilliseconds(double[]) -> weeksToMilliseconds
    double hoursToDays(double) -> hoursToDays
    double[] hoursToDays(double[]) -> hoursToDays
    double daysToHours(double) -> daysToHours
    double[] daysToHours(double[]) -> daysToHours
    double minutesToDays(double) -> minutesToDays
    double[] minutesToDays(double[]) -> minutesToDays
    double daysToMinutes(double) -> daysToMinutes
    double[] daysToMinutes(double[]) -> daysToMinutes
    double secondsToDays(double) -> secondsToDays
    double[] secondsToDays(double[]) -> secondsToDays
    double daysToSeconds(double) -> daysToSeconds
    double[] daysToSeconds(double[]) -> daysToSeconds
    double millisecondsToDays(double) -> millisecondsToDays
    double[] millisecondsToDays(double[]) -> millisecondsToDays
    double daysToMilliseconds(double) -> daysToMilliseconds
    double[] daysToMilliseconds(double[]) -> daysToMilliseconds
    double secondsToHours(double) -> secondsToHours
    double[] secondsToHours(double[]) -> secondsToHours
    double hoursToSeconds(double) -> hoursToSeconds
    double[] hoursToSeconds(double[]) -> hoursToSeconds
    double secondsToMinutes(double) -> secondsToMinutes
    double[] secondsToMinutes(double[]) -> secondsToMinutes
    double minutesToSeconds(double) -> minutesToSeconds
    double[] minutesToSeconds(double[]) -> minutesToSeconds
    double secondsToMilliseconds(double) -> secondsToMilliseconds
    double[] secondsToMilliseconds(double[]) -> secondsToMilliseconds
    double millisecondsToSeconds(double) -> millisecondsToSeconds
    double[] millisecondsToSeconds(double[]) -> millisecondsToSeconds
    double secondsToMicroseconds(double) -> secondsToMicroseconds
    double[] secondsToMicroseconds(double[]) -> secondsToMicroseconds
    double microsecondsToSeconds(double) -> microsecondsToSeconds
    double[] microsecondsToSeconds(double[]) -> microsecondsToSeconds
    double minutesToHours(double) -> minutesToHours
    double[] minutesToHours(double[]) -> minutesToHours
    double hoursToMinutes(double) -> hoursToMinutes
    double[] hoursToMinutes(double[]) -> hoursToMinutes
    double minutesToMilliseconds(double) -> minutesToMilliseconds
    double[] minutesToMilliseconds(double[]) -> minutesToMilliseconds
    double millisecondsToMinutes(double) -> millisecondsToMinutes
    double[] millisecondsToMinutes(double[]) -> millisecondsToMinutes
    double hoursToMilliseconds(double) -> hoursToMilliseconds
    double[] hoursToMilliseconds(double[]) -> hoursToMilliseconds
    double millisecondsToHours(double) -> millisecondsToHours
    double[] millisecondsToHours(double[]) -> millisecondsToHours
    double fromWeeks(double) -> fromWeeks
    double[] fromWeeks(double[]) -> fromWeeks
    double toWeeks(double) -> toWeeks
    double[] toWeeks(double[]) -> toWeeks
    double fromDays(double) -> fromDays
    double[] fromDays(double[]) -> fromDays
    double toDays(double) -> toDays
    double[] toDays(double[]) -> toDays
    double fromHours(double) -> fromHours
    double[] fromHours(double[]) -> fromHours
    double toHours(double) -> toHours
    double[] toHours(double[]) -> toHours
    double fromMinutes(double) -> fromMinutes
    double[] fromMinutes(double[]) -> fromMinutes
    double toMinutes(double) -> toMinutes
    double[] toMinutes(double[]) -> toMinutes
    double fromSeconds(double) -> fromSeconds
    double[] fromSeconds(double[]) -> fromSeconds
    double toSeconds(double) -> toSeconds
    double[] toSeconds(double[]) -> toSeconds
    double fromMilliseconds(double) -> fromMilliseconds
    double[] fromMilliseconds(double[]) -> fromMilliseconds
    double toMilliseconds(double) -> toMilliseconds
    double[] toMilliseconds(double[]) -> toMilliseconds
    double toMicroseconds(double) -> toMicroseconds
    double[] toMicroseconds(double[]) -> toMicroseconds
    double fromMicroseconds(double) -> fromMicroseconds
    double[] fromMicroseconds(double[]) -> fromMicroseconds
    double[] multiply(double[],double) -> multiply
it.unimi.dsi.fastutil.Arrays -> it.unimi.dsi.fastutil.Arrays:
    int MAX_ARRAY_SIZE -> MAX_ARRAY_SIZE
    int SMALL -> SMALL
    int MEDIUM -> MEDIUM
    void <init>() -> <init>
    void ensureFromTo(int,int,int) -> ensureFromTo
    void ensureOffsetLength(int,int,int) -> ensureOffsetLength
    void inPlaceMerge(int,int,int,it.unimi.dsi.fastutil.ints.IntComparator,it.unimi.dsi.fastutil.Swapper) -> inPlaceMerge
    int lowerBound(int,int,int,it.unimi.dsi.fastutil.ints.IntComparator) -> lowerBound
    int upperBound(int,int,int,it.unimi.dsi.fastutil.ints.IntComparator) -> upperBound
    int med3(int,int,int,it.unimi.dsi.fastutil.ints.IntComparator) -> med3
    void mergeSort(int,int,it.unimi.dsi.fastutil.ints.IntComparator,it.unimi.dsi.fastutil.Swapper) -> mergeSort
    void quickSort(int,int,it.unimi.dsi.fastutil.ints.IntComparator,it.unimi.dsi.fastutil.Swapper) -> quickSort
    void vecSwap(it.unimi.dsi.fastutil.Swapper,int,int,int) -> vecSwap
it.unimi.dsi.fastutil.BidirectionalIterator -> it.unimi.dsi.fastutil.BidirectionalIterator:
    java.lang.Object previous() -> previous
    boolean hasPrevious() -> hasPrevious
it.unimi.dsi.fastutil.Function -> it.unimi.dsi.fastutil.Function:
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object remove(java.lang.Object) -> remove
    int size() -> size
    void clear() -> clear
it.unimi.dsi.fastutil.Hash -> it.unimi.dsi.fastutil.Hash:
    int DEFAULT_INITIAL_SIZE -> DEFAULT_INITIAL_SIZE
    float DEFAULT_LOAD_FACTOR -> DEFAULT_LOAD_FACTOR
    float FAST_LOAD_FACTOR -> FAST_LOAD_FACTOR
    float VERY_FAST_LOAD_FACTOR -> VERY_FAST_LOAD_FACTOR
    int DEFAULT_GROWTH_FACTOR -> DEFAULT_GROWTH_FACTOR
    byte FREE -> FREE
    byte OCCUPIED -> OCCUPIED
    byte REMOVED -> REMOVED
    int[] PRIMES -> PRIMES
    void <clinit>() -> <clinit>
it.unimi.dsi.fastutil.Hash$Strategy -> it.unimi.dsi.fastutil.Hash$Strategy:
    int hashCode(java.lang.Object) -> hashCode
    boolean equals(java.lang.Object,java.lang.Object) -> equals
it.unimi.dsi.fastutil.HashCommon -> it.unimi.dsi.fastutil.HashCommon:
    java.lang.Object REMOVED -> REMOVED
    void <init>() -> <init>
    int murmurHash3(int) -> murmurHash3
    long murmurHash3(long) -> murmurHash3
    int float2int(float) -> float2int
    int double2int(double) -> double2int
    int long2int(long) -> long2int
    int nextPowerOfTwo(int) -> nextPowerOfTwo
    long nextPowerOfTwo(long) -> nextPowerOfTwo
    int maxFill(int,float) -> maxFill
    long maxFill(long,float) -> maxFill
    int arraySize(int,float) -> arraySize
    long bigArraySize(long,float) -> bigArraySize
    void <clinit>() -> <clinit>
it.unimi.dsi.fastutil.Swapper -> it.unimi.dsi.fastutil.Swapper:
    void swap(int,int) -> swap
it.unimi.dsi.fastutil.booleans.BooleanArrays -> it.unimi.dsi.fastutil.booleans.BooleanArrays:
    boolean[] EMPTY_ARRAY -> EMPTY_ARRAY
    int SMALL -> SMALL
    int MEDIUM -> MEDIUM
    it.unimi.dsi.fastutil.Hash$Strategy HASH_STRATEGY -> HASH_STRATEGY
    void <init>() -> <init>
    boolean[] ensureCapacity(boolean[],int) -> ensureCapacity
    boolean[] ensureCapacity(boolean[],int,int) -> ensureCapacity
    boolean[] grow(boolean[],int) -> grow
    boolean[] grow(boolean[],int,int) -> grow
    boolean[] trim(boolean[],int) -> trim
    boolean[] setLength(boolean[],int) -> setLength
    boolean[] copy(boolean[],int,int) -> copy
    boolean[] copy(boolean[]) -> copy
    void fill(boolean[],boolean) -> fill
    void fill(boolean[],int,int,boolean) -> fill
    boolean equals(boolean[],boolean[]) -> equals
    void ensureFromTo(boolean[],int,int) -> ensureFromTo
    void ensureOffsetLength(boolean[],int,int) -> ensureOffsetLength
    void swap(boolean[],int,int) -> swap
    void vecSwap(boolean[],int,int,int) -> vecSwap
    int med3(boolean[],int,int,int,it.unimi.dsi.fastutil.booleans.BooleanComparator) -> med3
    void selectionSort(boolean[],int,int,it.unimi.dsi.fastutil.booleans.BooleanComparator) -> selectionSort
    void insertionSort(boolean[],int,int,it.unimi.dsi.fastutil.booleans.BooleanComparator) -> insertionSort
    void selectionSort(boolean[],int,int) -> selectionSort
    void insertionSort(boolean[],int,int) -> insertionSort
    void quickSort(boolean[],int,int,it.unimi.dsi.fastutil.booleans.BooleanComparator) -> quickSort
    void quickSort(boolean[],it.unimi.dsi.fastutil.booleans.BooleanComparator) -> quickSort
    int med3(boolean[],int,int,int) -> med3
    void quickSort(boolean[],int,int) -> quickSort
    void quickSort(boolean[]) -> quickSort
    void mergeSort(boolean[],int,int,boolean[]) -> mergeSort
    void mergeSort(boolean[],int,int) -> mergeSort
    void mergeSort(boolean[]) -> mergeSort
    void mergeSort(boolean[],int,int,it.unimi.dsi.fastutil.booleans.BooleanComparator,boolean[]) -> mergeSort
    void mergeSort(boolean[],int,int,it.unimi.dsi.fastutil.booleans.BooleanComparator) -> mergeSort
    void mergeSort(boolean[],it.unimi.dsi.fastutil.booleans.BooleanComparator) -> mergeSort
    boolean[] shuffle(boolean[],int,int,java.util.Random) -> shuffle
    boolean[] shuffle(boolean[],java.util.Random) -> shuffle
    boolean[] reverse(boolean[]) -> reverse
    void <clinit>() -> <clinit>
it.unimi.dsi.fastutil.booleans.BooleanArrays$1 -> it.unimi.dsi.fastutil.booleans.BooleanArrays$1:
it.unimi.dsi.fastutil.booleans.BooleanArrays$ArrayHashStrategy -> it.unimi.dsi.fastutil.booleans.BooleanArrays$ArrayHashStrategy:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    int hashCode(boolean[]) -> hashCode
    boolean equals(boolean[],boolean[]) -> equals
    boolean equals(java.lang.Object,java.lang.Object) -> equals
    int hashCode(java.lang.Object) -> hashCode
    void <init>(it.unimi.dsi.fastutil.booleans.BooleanArrays$1) -> <init>
it.unimi.dsi.fastutil.booleans.BooleanComparator -> it.unimi.dsi.fastutil.booleans.BooleanComparator:
    int compare(boolean,boolean) -> compare
it.unimi.dsi.fastutil.bytes.ByteIterator -> it.unimi.dsi.fastutil.bytes.ByteIterator:
    byte nextByte() -> nextByte
    int skip(int) -> skip
it.unimi.dsi.fastutil.floats.AbstractFloat2IntFunction -> it.unimi.dsi.fastutil.floats.AbstractFloat2IntFunction:
    long serialVersionUID -> serialVersionUID
    int defRetValue -> defRetValue
    void <init>() -> <init>
    void defaultReturnValue(int) -> defaultReturnValue
    int defaultReturnValue() -> defaultReturnValue
    int put(float,int) -> put
    int remove(float) -> remove
    void clear() -> clear
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Integer get(java.lang.Object) -> get
    java.lang.Integer put(java.lang.Float,java.lang.Integer) -> put
    java.lang.Integer remove(java.lang.Object) -> remove
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
it.unimi.dsi.fastutil.floats.AbstractFloat2IntMap -> it.unimi.dsi.fastutil.floats.AbstractFloat2IntMap:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsValue(int) -> containsValue
    boolean containsKey(float) -> containsKey
    void putAll(java.util.Map) -> putAll
    boolean isEmpty() -> isEmpty
    it.unimi.dsi.fastutil.floats.FloatSet keySet() -> keySet
    it.unimi.dsi.fastutil.ints.IntCollection values() -> values
    it.unimi.dsi.fastutil.objects.ObjectSet entrySet() -> entrySet
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.util.Set entrySet() -> entrySet
    java.util.Collection values() -> values
    java.util.Set keySet() -> keySet
it.unimi.dsi.fastutil.floats.AbstractFloat2IntMap$1 -> it.unimi.dsi.fastutil.floats.AbstractFloat2IntMap$1:
    it.unimi.dsi.fastutil.floats.AbstractFloat2IntMap this$0 -> this$0
    void <init>(it.unimi.dsi.fastutil.floats.AbstractFloat2IntMap) -> <init>
    boolean contains(float) -> contains
    int size() -> size
    void clear() -> clear
    it.unimi.dsi.fastutil.floats.FloatIterator iterator() -> iterator
    java.util.Iterator iterator() -> iterator
it.unimi.dsi.fastutil.floats.AbstractFloat2IntMap$1$1 -> it.unimi.dsi.fastutil.floats.AbstractFloat2IntMap$1$1:
    it.unimi.dsi.fastutil.objects.ObjectIterator i -> i
    it.unimi.dsi.fastutil.floats.AbstractFloat2IntMap$1 this$1 -> this$1
    void <init>(it.unimi.dsi.fastutil.floats.AbstractFloat2IntMap$1) -> <init>
    float nextFloat() -> nextFloat
    boolean hasNext() -> hasNext
it.unimi.dsi.fastutil.floats.AbstractFloat2IntMap$2 -> it.unimi.dsi.fastutil.floats.AbstractFloat2IntMap$2:
    it.unimi.dsi.fastutil.floats.AbstractFloat2IntMap this$0 -> this$0
    void <init>(it.unimi.dsi.fastutil.floats.AbstractFloat2IntMap) -> <init>
    boolean contains(int) -> contains
    int size() -> size
    void clear() -> clear
    it.unimi.dsi.fastutil.ints.IntIterator iterator() -> iterator
    java.util.Iterator iterator() -> iterator
it.unimi.dsi.fastutil.floats.AbstractFloat2IntMap$2$1 -> it.unimi.dsi.fastutil.floats.AbstractFloat2IntMap$2$1:
    it.unimi.dsi.fastutil.objects.ObjectIterator i -> i
    it.unimi.dsi.fastutil.floats.AbstractFloat2IntMap$2 this$1 -> this$1
    void <init>(it.unimi.dsi.fastutil.floats.AbstractFloat2IntMap$2) -> <init>
    int nextInt() -> nextInt
    boolean hasNext() -> hasNext
it.unimi.dsi.fastutil.floats.AbstractFloat2IntMap$BasicEntry -> it.unimi.dsi.fastutil.floats.AbstractFloat2IntMap$BasicEntry:
    float key -> key
    int value -> value
    void <init>(java.lang.Float,java.lang.Integer) -> <init>
    void <init>(float,int) -> <init>
    java.lang.Float getKey() -> getKey
    float getFloatKey() -> getFloatKey
    java.lang.Integer getValue() -> getValue
    int getIntValue() -> getIntValue
    int setValue(int) -> setValue
    java.lang.Integer setValue(java.lang.Integer) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
it.unimi.dsi.fastutil.floats.AbstractFloatBidirectionalIterator -> it.unimi.dsi.fastutil.floats.AbstractFloatBidirectionalIterator:
    void <init>() -> <init>
    float previousFloat() -> previousFloat
    java.lang.Float previous() -> previous
    int back(int) -> back
    java.lang.Object previous() -> previous
it.unimi.dsi.fastutil.floats.AbstractFloatCollection -> it.unimi.dsi.fastutil.floats.AbstractFloatCollection:
    void <init>() -> <init>
    float[] toArray(float[]) -> toArray
    float[] toFloatArray() -> toFloatArray
    float[] toFloatArray(float[]) -> toFloatArray
    boolean addAll(it.unimi.dsi.fastutil.floats.FloatCollection) -> addAll
    boolean containsAll(it.unimi.dsi.fastutil.floats.FloatCollection) -> containsAll
    boolean retainAll(it.unimi.dsi.fastutil.floats.FloatCollection) -> retainAll
    boolean removeAll(it.unimi.dsi.fastutil.floats.FloatCollection) -> removeAll
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean addAll(java.util.Collection) -> addAll
    boolean add(float) -> add
    it.unimi.dsi.fastutil.floats.FloatIterator floatIterator() -> floatIterator
    it.unimi.dsi.fastutil.floats.FloatIterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean add(java.lang.Float) -> add
    boolean rem(java.lang.Object) -> rem
    boolean contains(java.lang.Object) -> contains
    boolean contains(float) -> contains
    boolean rem(float) -> rem
    boolean containsAll(java.util.Collection) -> containsAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean isEmpty() -> isEmpty
    java.lang.String toString() -> toString
    boolean add(java.lang.Object) -> add
    java.util.Iterator iterator() -> iterator
it.unimi.dsi.fastutil.floats.AbstractFloatIterator -> it.unimi.dsi.fastutil.floats.AbstractFloatIterator:
    void <init>() -> <init>
    float nextFloat() -> nextFloat
    java.lang.Float next() -> next
    void remove() -> remove
    int skip(int) -> skip
    java.lang.Object next() -> next
it.unimi.dsi.fastutil.floats.AbstractFloatList -> it.unimi.dsi.fastutil.floats.AbstractFloatList:
    void <init>() -> <init>
    void ensureIndex(int) -> ensureIndex
    void ensureRestrictedIndex(int) -> ensureRestrictedIndex
    void add(int,float) -> add
    boolean add(float) -> add
    float removeFloat(int) -> removeFloat
    float set(int,float) -> set
    boolean addAll(int,java.util.Collection) -> addAll
    boolean addAll(java.util.Collection) -> addAll
    it.unimi.dsi.fastutil.floats.FloatListIterator floatListIterator() -> floatListIterator
    it.unimi.dsi.fastutil.floats.FloatListIterator floatListIterator(int) -> floatListIterator
    it.unimi.dsi.fastutil.floats.FloatListIterator iterator() -> iterator
    it.unimi.dsi.fastutil.floats.FloatListIterator listIterator() -> listIterator
    it.unimi.dsi.fastutil.floats.FloatListIterator listIterator(int) -> listIterator
    boolean contains(float) -> contains
    int indexOf(float) -> indexOf
    int lastIndexOf(float) -> lastIndexOf
    void size(int) -> size
    it.unimi.dsi.fastutil.floats.FloatList subList(int,int) -> subList
    it.unimi.dsi.fastutil.floats.FloatList floatSubList(int,int) -> floatSubList
    void removeElements(int,int) -> removeElements
    void addElements(int,float[],int,int) -> addElements
    void addElements(int,float[]) -> addElements
    void getElements(int,float[],int,int) -> getElements
    boolean valEquals(java.lang.Object,java.lang.Object) -> valEquals
    boolean equals(java.lang.Object) -> equals
    int compareTo(java.util.List) -> compareTo
    int hashCode() -> hashCode
    void push(float) -> push
    float popFloat() -> popFloat
    float topFloat() -> topFloat
    float peekFloat(int) -> peekFloat
    boolean rem(float) -> rem
    boolean remove(java.lang.Object) -> remove
    boolean addAll(int,it.unimi.dsi.fastutil.floats.FloatCollection) -> addAll
    boolean addAll(int,it.unimi.dsi.fastutil.floats.FloatList) -> addAll
    boolean addAll(it.unimi.dsi.fastutil.floats.FloatCollection) -> addAll
    boolean addAll(it.unimi.dsi.fastutil.floats.FloatList) -> addAll
    void add(int,java.lang.Float) -> add
    java.lang.Float set(int,java.lang.Float) -> set
    java.lang.Float get(int) -> get
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.lang.Float remove(int) -> remove
    void push(java.lang.Float) -> push
    java.lang.Float pop() -> pop
    java.lang.Float top() -> top
    java.lang.Float peek(int) -> peek
    java.lang.String toString() -> toString
    it.unimi.dsi.fastutil.floats.FloatIterator iterator() -> iterator
    java.util.Iterator iterator() -> iterator
    java.util.List subList(int,int) -> subList
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.ListIterator listIterator() -> listIterator
    java.lang.Object remove(int) -> remove
    void add(int,java.lang.Object) -> add
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
    int compareTo(java.lang.Object) -> compareTo
    java.lang.Object peek(int) -> peek
    java.lang.Object top() -> top
    java.lang.Object pop() -> pop
    void push(java.lang.Object) -> push
it.unimi.dsi.fastutil.floats.AbstractFloatList$1 -> it.unimi.dsi.fastutil.floats.AbstractFloatList$1:
    int pos -> pos
    int last -> last
    int val$index -> val$index
    it.unimi.dsi.fastutil.floats.AbstractFloatList this$0 -> this$0
    void <init>(it.unimi.dsi.fastutil.floats.AbstractFloatList,int) -> <init>
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    float nextFloat() -> nextFloat
    float previousFloat() -> previousFloat
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    void add(float) -> add
    void set(float) -> set
    void remove() -> remove
it.unimi.dsi.fastutil.floats.AbstractFloatList$FloatSubList -> it.unimi.dsi.fastutil.floats.AbstractFloatList$FloatSubList:
    long serialVersionUID -> serialVersionUID
    it.unimi.dsi.fastutil.floats.FloatList l -> l
    int from -> from
    int to -> to
    boolean ASSERTS -> ASSERTS
    void <init>(it.unimi.dsi.fastutil.floats.FloatList,int,int) -> <init>
    void assertRange() -> assertRange
    boolean add(float) -> add
    void add(int,float) -> add
    boolean addAll(int,java.util.Collection) -> addAll
    float getFloat(int) -> getFloat
    float removeFloat(int) -> removeFloat
    float set(int,float) -> set
    void clear() -> clear
    int size() -> size
    void getElements(int,float[],int,int) -> getElements
    void removeElements(int,int) -> removeElements
    void addElements(int,float[],int,int) -> addElements
    it.unimi.dsi.fastutil.floats.FloatListIterator listIterator(int) -> listIterator
    it.unimi.dsi.fastutil.floats.FloatList subList(int,int) -> subList
    boolean rem(float) -> rem
    boolean remove(java.lang.Object) -> remove
    boolean addAll(int,it.unimi.dsi.fastutil.floats.FloatCollection) -> addAll
    boolean addAll(int,it.unimi.dsi.fastutil.floats.FloatList) -> addAll
    java.util.List subList(int,int) -> subList
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.ListIterator listIterator() -> listIterator
    java.lang.Object remove(int) -> remove
    void add(int,java.lang.Object) -> add
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
    java.util.Iterator iterator() -> iterator
    int compareTo(java.lang.Object) -> compareTo
    it.unimi.dsi.fastutil.floats.FloatIterator iterator() -> iterator
    java.lang.Object peek(int) -> peek
    java.lang.Object top() -> top
    java.lang.Object pop() -> pop
    void push(java.lang.Object) -> push
it.unimi.dsi.fastutil.floats.AbstractFloatList$FloatSubList$1 -> it.unimi.dsi.fastutil.floats.AbstractFloatList$FloatSubList$1:
    int pos -> pos
    int last -> last
    int val$index -> val$index
    it.unimi.dsi.fastutil.floats.AbstractFloatList$FloatSubList this$0 -> this$0
    void <init>(it.unimi.dsi.fastutil.floats.AbstractFloatList$FloatSubList,int) -> <init>
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    float nextFloat() -> nextFloat
    float previousFloat() -> previousFloat
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    void add(float) -> add
    void set(float) -> set
    void remove() -> remove
it.unimi.dsi.fastutil.floats.AbstractFloatListIterator -> it.unimi.dsi.fastutil.floats.AbstractFloatListIterator:
    void <init>() -> <init>
    void set(java.lang.Float) -> set
    void add(java.lang.Float) -> add
    void set(float) -> set
    void add(float) -> add
    void add(java.lang.Object) -> add
    void set(java.lang.Object) -> set
it.unimi.dsi.fastutil.floats.AbstractFloatSet -> it.unimi.dsi.fastutil.floats.AbstractFloatSet:
    void <init>() -> <init>
    it.unimi.dsi.fastutil.floats.FloatIterator iterator() -> iterator
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean remove(float) -> remove
    boolean rem(float) -> rem
    boolean remove(java.lang.Object) -> remove
    java.util.Iterator iterator() -> iterator
it.unimi.dsi.fastutil.floats.Float2IntFunction -> it.unimi.dsi.fastutil.floats.Float2IntFunction:
    int put(float,int) -> put
    int get(float) -> get
    int remove(float) -> remove
    boolean containsKey(float) -> containsKey
    void defaultReturnValue(int) -> defaultReturnValue
    int defaultReturnValue() -> defaultReturnValue
it.unimi.dsi.fastutil.floats.Float2IntMap -> it.unimi.dsi.fastutil.floats.Float2IntMap:
    it.unimi.dsi.fastutil.objects.ObjectSet entrySet() -> entrySet
    it.unimi.dsi.fastutil.objects.ObjectSet float2IntEntrySet() -> float2IntEntrySet
    it.unimi.dsi.fastutil.floats.FloatSet keySet() -> keySet
    it.unimi.dsi.fastutil.ints.IntCollection values() -> values
    boolean containsValue(int) -> containsValue
it.unimi.dsi.fastutil.floats.Float2IntMap$Entry -> it.unimi.dsi.fastutil.floats.Float2IntMap$Entry:
    float getFloatKey() -> getFloatKey
    int setValue(int) -> setValue
    int getIntValue() -> getIntValue
it.unimi.dsi.fastutil.floats.Float2IntMap$FastEntrySet -> it.unimi.dsi.fastutil.floats.Float2IntMap$FastEntrySet:
    it.unimi.dsi.fastutil.objects.ObjectIterator fastIterator() -> fastIterator
it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap -> it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap:
    long serialVersionUID -> serialVersionUID
    boolean ASSERTS -> ASSERTS
    float[] key -> key
    int[] value -> value
    boolean[] used -> used
    float f -> f
    int n -> n
    int maxFill -> maxFill
    int mask -> mask
    int size -> size
    it.unimi.dsi.fastutil.floats.Float2IntMap$FastEntrySet entries -> entries
    it.unimi.dsi.fastutil.floats.FloatSet keys -> keys
    it.unimi.dsi.fastutil.ints.IntCollection values -> values
    void <init>(int,float) -> <init>
    void <init>(int) -> <init>
    void <init>() -> <init>
    void <init>(java.util.Map,float) -> <init>
    void <init>(java.util.Map) -> <init>
    void <init>(it.unimi.dsi.fastutil.floats.Float2IntMap,float) -> <init>
    void <init>(it.unimi.dsi.fastutil.floats.Float2IntMap) -> <init>
    void <init>(float[],int[],float) -> <init>
    void <init>(float[],int[]) -> <init>
    int put(float,int) -> put
    java.lang.Integer put(java.lang.Float,java.lang.Integer) -> put
    int add(float,int) -> add
    int addTo(float,int) -> addTo
    int shiftKeys(int) -> shiftKeys
    int remove(float) -> remove
    java.lang.Integer remove(java.lang.Object) -> remove
    java.lang.Integer get(java.lang.Float) -> get
    int get(float) -> get
    boolean containsKey(float) -> containsKey
    boolean containsValue(int) -> containsValue
    void clear() -> clear
    int size() -> size
    boolean isEmpty() -> isEmpty
    void growthFactor(int) -> growthFactor
    int growthFactor() -> growthFactor
    it.unimi.dsi.fastutil.floats.Float2IntMap$FastEntrySet float2IntEntrySet() -> float2IntEntrySet
    it.unimi.dsi.fastutil.floats.FloatSet keySet() -> keySet
    it.unimi.dsi.fastutil.ints.IntCollection values() -> values
    boolean rehash() -> rehash
    boolean trim() -> trim
    boolean trim(int) -> trim
    void rehash(int) -> rehash
    it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap clone() -> clone
    int hashCode() -> hashCode
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    void checkTable() -> checkTable
    it.unimi.dsi.fastutil.objects.ObjectSet float2IntEntrySet() -> float2IntEntrySet
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.util.Collection values() -> values
    java.util.Set keySet() -> keySet
    java.lang.Object clone() -> clone
it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap$1 -> it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap$1:
    it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap this$0 -> this$0
    void <init>(it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap) -> <init>
    it.unimi.dsi.fastutil.ints.IntIterator iterator() -> iterator
    int size() -> size
    boolean contains(int) -> contains
    void clear() -> clear
    java.util.Iterator iterator() -> iterator
it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap$EntryIterator -> it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap$EntryIterator:
    it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap$MapEntry entry -> entry
    it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap this$0 -> this$0
    void <init>(it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap) -> <init>
    it.unimi.dsi.fastutil.floats.Float2IntMap$Entry next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
    void <init>(it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap,it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap$1) -> <init>
it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap$FastEntryIterator -> it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap$FastEntryIterator:
    it.unimi.dsi.fastutil.floats.AbstractFloat2IntMap$BasicEntry entry -> entry
    it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap this$0 -> this$0
    void <init>(it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap) -> <init>
    it.unimi.dsi.fastutil.floats.AbstractFloat2IntMap$BasicEntry next() -> next
    java.lang.Object next() -> next
    void <init>(it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap,it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap$1) -> <init>
it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap$KeyIterator -> it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap$KeyIterator:
    it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap this$0 -> this$0
    void <init>(it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap) -> <init>
    float nextFloat() -> nextFloat
    java.lang.Float next() -> next
    java.lang.Object next() -> next
it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap$KeySet -> it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap$KeySet:
    it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap this$0 -> this$0
    void <init>(it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap) -> <init>
    it.unimi.dsi.fastutil.floats.FloatIterator iterator() -> iterator
    int size() -> size
    boolean contains(float) -> contains
    boolean remove(float) -> remove
    void clear() -> clear
    java.util.Iterator iterator() -> iterator
    void <init>(it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap,it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap$1) -> <init>
it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap$MapEntry -> it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap$MapEntry:
    int index -> index
    it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap this$0 -> this$0
    void <init>(it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap,int) -> <init>
    java.lang.Float getKey() -> getKey
    float getFloatKey() -> getFloatKey
    java.lang.Integer getValue() -> getValue
    int getIntValue() -> getIntValue
    int setValue(int) -> setValue
    java.lang.Integer setValue(java.lang.Integer) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
    int access$102(it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap$MapEntry,int) -> access$102
it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap$MapEntrySet -> it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap$MapEntrySet:
    it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap this$0 -> this$0
    void <init>(it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap) -> <init>
    it.unimi.dsi.fastutil.objects.ObjectIterator iterator() -> iterator
    it.unimi.dsi.fastutil.objects.ObjectIterator fastIterator() -> fastIterator
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    int size() -> size
    void clear() -> clear
    java.util.Iterator iterator() -> iterator
    void <init>(it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap,it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap$1) -> <init>
it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap$MapIterator -> it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap$MapIterator:
    int pos -> pos
    int last -> last
    int c -> c
    it.unimi.dsi.fastutil.floats.FloatArrayList wrapped -> wrapped
    it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap this$0 -> this$0
    void <init>(it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap) -> <init>
    boolean hasNext() -> hasNext
    int nextEntry() -> nextEntry
    int shiftKeys(int) -> shiftKeys
    void remove() -> remove
    int skip(int) -> skip
    void <init>(it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap,it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap$1) -> <init>
it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap$ValueIterator -> it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap$ValueIterator:
    it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap this$0 -> this$0
    void <init>(it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap) -> <init>
    int nextInt() -> nextInt
    java.lang.Integer next() -> next
    java.lang.Object next() -> next
it.unimi.dsi.fastutil.floats.FloatArrayList -> it.unimi.dsi.fastutil.floats.FloatArrayList:
    long serialVersionUID -> serialVersionUID
    int DEFAULT_INITIAL_CAPACITY -> DEFAULT_INITIAL_CAPACITY
    float[] a -> a
    int size -> size
    boolean ASSERTS -> ASSERTS
    void <init>(float[],boolean) -> <init>
    void <init>(int) -> <init>
    void <init>() -> <init>
    void <init>(java.util.Collection) -> <init>
    void <init>(it.unimi.dsi.fastutil.floats.FloatCollection) -> <init>
    void <init>(it.unimi.dsi.fastutil.floats.FloatList) -> <init>
    void <init>(float[]) -> <init>
    void <init>(float[],int,int) -> <init>
    void <init>(java.util.Iterator) -> <init>
    void <init>(it.unimi.dsi.fastutil.floats.FloatIterator) -> <init>
    float[] elements() -> elements
    it.unimi.dsi.fastutil.floats.FloatArrayList wrap(float[],int) -> wrap
    it.unimi.dsi.fastutil.floats.FloatArrayList wrap(float[]) -> wrap
    void ensureCapacity(int) -> ensureCapacity
    void grow(int) -> grow
    void add(int,float) -> add
    boolean add(float) -> add
    float getFloat(int) -> getFloat
    int indexOf(float) -> indexOf
    int lastIndexOf(float) -> lastIndexOf
    float removeFloat(int) -> removeFloat
    boolean rem(float) -> rem
    float set(int,float) -> set
    void clear() -> clear
    int size() -> size
    void size(int) -> size
    boolean isEmpty() -> isEmpty
    void trim() -> trim
    void trim(int) -> trim
    void getElements(int,float[],int,int) -> getElements
    void removeElements(int,int) -> removeElements
    void addElements(int,float[],int,int) -> addElements
    float[] toFloatArray(float[]) -> toFloatArray
    boolean addAll(int,it.unimi.dsi.fastutil.floats.FloatCollection) -> addAll
    boolean addAll(int,it.unimi.dsi.fastutil.floats.FloatList) -> addAll
    it.unimi.dsi.fastutil.floats.FloatListIterator listIterator(int) -> listIterator
    it.unimi.dsi.fastutil.floats.FloatArrayList clone() -> clone
    boolean equals(it.unimi.dsi.fastutil.floats.FloatArrayList) -> equals
    int compareTo(it.unimi.dsi.fastutil.floats.FloatArrayList) -> compareTo
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.util.ListIterator listIterator(int) -> listIterator
    java.lang.Object clone() -> clone
it.unimi.dsi.fastutil.floats.FloatArrayList$1 -> it.unimi.dsi.fastutil.floats.FloatArrayList$1:
    int pos -> pos
    int last -> last
    int val$index -> val$index
    it.unimi.dsi.fastutil.floats.FloatArrayList this$0 -> this$0
    void <init>(it.unimi.dsi.fastutil.floats.FloatArrayList,int) -> <init>
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    float nextFloat() -> nextFloat
    float previousFloat() -> previousFloat
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    void add(float) -> add
    void set(float) -> set
    void remove() -> remove
it.unimi.dsi.fastutil.floats.FloatArrays -> it.unimi.dsi.fastutil.floats.FloatArrays:
    float[] EMPTY_ARRAY -> EMPTY_ARRAY
    int SMALL -> SMALL
    int MEDIUM -> MEDIUM
    int DIGIT_BITS -> DIGIT_BITS
    int DIGIT_MASK -> DIGIT_MASK
    int DIGITS_PER_ELEMENT -> DIGITS_PER_ELEMENT
    it.unimi.dsi.fastutil.Hash$Strategy HASH_STRATEGY -> HASH_STRATEGY
    void <init>() -> <init>
    float[] ensureCapacity(float[],int) -> ensureCapacity
    float[] ensureCapacity(float[],int,int) -> ensureCapacity
    float[] grow(float[],int) -> grow
    float[] grow(float[],int,int) -> grow
    float[] trim(float[],int) -> trim
    float[] setLength(float[],int) -> setLength
    float[] copy(float[],int,int) -> copy
    float[] copy(float[]) -> copy
    void fill(float[],float) -> fill
    void fill(float[],int,int,float) -> fill
    boolean equals(float[],float[]) -> equals
    void ensureFromTo(float[],int,int) -> ensureFromTo
    void ensureOffsetLength(float[],int,int) -> ensureOffsetLength
    void swap(float[],int,int) -> swap
    void vecSwap(float[],int,int,int) -> vecSwap
    int med3(float[],int,int,int,it.unimi.dsi.fastutil.floats.FloatComparator) -> med3
    void selectionSort(float[],int,int,it.unimi.dsi.fastutil.floats.FloatComparator) -> selectionSort
    void insertionSort(float[],int,int,it.unimi.dsi.fastutil.floats.FloatComparator) -> insertionSort
    void selectionSort(float[],int,int) -> selectionSort
    void insertionSort(float[],int,int) -> insertionSort
    void quickSort(float[],int,int,it.unimi.dsi.fastutil.floats.FloatComparator) -> quickSort
    void quickSort(float[],it.unimi.dsi.fastutil.floats.FloatComparator) -> quickSort
    int med3(float[],int,int,int) -> med3
    void quickSort(float[],int,int) -> quickSort
    void quickSort(float[]) -> quickSort
    void mergeSort(float[],int,int,float[]) -> mergeSort
    void mergeSort(float[],int,int) -> mergeSort
    void mergeSort(float[]) -> mergeSort
    void mergeSort(float[],int,int,it.unimi.dsi.fastutil.floats.FloatComparator,float[]) -> mergeSort
    void mergeSort(float[],int,int,it.unimi.dsi.fastutil.floats.FloatComparator) -> mergeSort
    void mergeSort(float[],it.unimi.dsi.fastutil.floats.FloatComparator) -> mergeSort
    int binarySearch(float[],int,int,float) -> binarySearch
    int binarySearch(float[],float) -> binarySearch
    int binarySearch(float[],int,int,float,it.unimi.dsi.fastutil.floats.FloatComparator) -> binarySearch
    int binarySearch(float[],float,it.unimi.dsi.fastutil.floats.FloatComparator) -> binarySearch
    long fixFloat(float) -> fixFloat
    void radixSort(float[]) -> radixSort
    void radixSort(float[],int,int) -> radixSort
    void insertionSortIndirect(int[],float[],int,int) -> insertionSortIndirect
    void radixSortIndirect(int[],float[],boolean) -> radixSortIndirect
    void radixSortIndirect(int[],float[],int,int,boolean) -> radixSortIndirect
    void selectionSort(float[],float[],int,int) -> selectionSort
    void radixSort(float[],float[]) -> radixSort
    void radixSort(float[],float[],int,int) -> radixSort
    void insertionSortIndirect(int[],float[],float[],int,int) -> insertionSortIndirect
    void radixSortIndirect(int[],float[],float[],boolean) -> radixSortIndirect
    void radixSortIndirect(int[],float[],float[],int,int,boolean) -> radixSortIndirect
    void selectionSort(float[][],int,int,int) -> selectionSort
    void radixSort(float[][]) -> radixSort
    void radixSort(float[][],int,int) -> radixSort
    float[] shuffle(float[],int,int,java.util.Random) -> shuffle
    float[] shuffle(float[],java.util.Random) -> shuffle
    float[] reverse(float[]) -> reverse
    void <clinit>() -> <clinit>
it.unimi.dsi.fastutil.floats.FloatArrays$1 -> it.unimi.dsi.fastutil.floats.FloatArrays$1:
it.unimi.dsi.fastutil.floats.FloatArrays$ArrayHashStrategy -> it.unimi.dsi.fastutil.floats.FloatArrays$ArrayHashStrategy:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    int hashCode(float[]) -> hashCode
    boolean equals(float[],float[]) -> equals
    boolean equals(java.lang.Object,java.lang.Object) -> equals
    int hashCode(java.lang.Object) -> hashCode
    void <init>(it.unimi.dsi.fastutil.floats.FloatArrays$1) -> <init>
it.unimi.dsi.fastutil.floats.FloatBidirectionalIterator -> it.unimi.dsi.fastutil.floats.FloatBidirectionalIterator:
    float previousFloat() -> previousFloat
    int back(int) -> back
it.unimi.dsi.fastutil.floats.FloatCollection -> it.unimi.dsi.fastutil.floats.FloatCollection:
    it.unimi.dsi.fastutil.floats.FloatIterator iterator() -> iterator
    it.unimi.dsi.fastutil.floats.FloatIterator floatIterator() -> floatIterator
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean contains(float) -> contains
    float[] toFloatArray() -> toFloatArray
    float[] toFloatArray(float[]) -> toFloatArray
    float[] toArray(float[]) -> toArray
    boolean add(float) -> add
    boolean rem(float) -> rem
    boolean addAll(it.unimi.dsi.fastutil.floats.FloatCollection) -> addAll
    boolean containsAll(it.unimi.dsi.fastutil.floats.FloatCollection) -> containsAll
    boolean removeAll(it.unimi.dsi.fastutil.floats.FloatCollection) -> removeAll
    boolean retainAll(it.unimi.dsi.fastutil.floats.FloatCollection) -> retainAll
it.unimi.dsi.fastutil.floats.FloatComparator -> it.unimi.dsi.fastutil.floats.FloatComparator:
    int compare(float,float) -> compare
it.unimi.dsi.fastutil.floats.FloatIterable -> it.unimi.dsi.fastutil.floats.FloatIterable:
it.unimi.dsi.fastutil.floats.FloatIterator -> it.unimi.dsi.fastutil.floats.FloatIterator:
    float nextFloat() -> nextFloat
    int skip(int) -> skip
it.unimi.dsi.fastutil.floats.FloatIterators -> it.unimi.dsi.fastutil.floats.FloatIterators:
    it.unimi.dsi.fastutil.floats.FloatIterators$EmptyIterator EMPTY_ITERATOR -> EMPTY_ITERATOR
    void <init>() -> <init>
    it.unimi.dsi.fastutil.floats.FloatListIterator singleton(float) -> singleton
    it.unimi.dsi.fastutil.floats.FloatListIterator wrap(float[],int,int) -> wrap
    it.unimi.dsi.fastutil.floats.FloatListIterator wrap(float[]) -> wrap
    int unwrap(it.unimi.dsi.fastutil.floats.FloatIterator,float[],int,int) -> unwrap
    int unwrap(it.unimi.dsi.fastutil.floats.FloatIterator,float[]) -> unwrap
    float[] unwrap(it.unimi.dsi.fastutil.floats.FloatIterator,int) -> unwrap
    float[] unwrap(it.unimi.dsi.fastutil.floats.FloatIterator) -> unwrap
    int unwrap(it.unimi.dsi.fastutil.floats.FloatIterator,it.unimi.dsi.fastutil.floats.FloatCollection,int) -> unwrap
    long unwrap(it.unimi.dsi.fastutil.floats.FloatIterator,it.unimi.dsi.fastutil.floats.FloatCollection) -> unwrap
    int pour(it.unimi.dsi.fastutil.floats.FloatIterator,it.unimi.dsi.fastutil.floats.FloatCollection,int) -> pour
    int pour(it.unimi.dsi.fastutil.floats.FloatIterator,it.unimi.dsi.fastutil.floats.FloatCollection) -> pour
    it.unimi.dsi.fastutil.floats.FloatList pour(it.unimi.dsi.fastutil.floats.FloatIterator,int) -> pour
    it.unimi.dsi.fastutil.floats.FloatList pour(it.unimi.dsi.fastutil.floats.FloatIterator) -> pour
    it.unimi.dsi.fastutil.floats.FloatIterator asFloatIterator(java.util.Iterator) -> asFloatIterator
    it.unimi.dsi.fastutil.floats.FloatListIterator asFloatIterator(java.util.ListIterator) -> asFloatIterator
    it.unimi.dsi.fastutil.floats.FloatIterator concat(it.unimi.dsi.fastutil.floats.FloatIterator[]) -> concat
    it.unimi.dsi.fastutil.floats.FloatIterator concat(it.unimi.dsi.fastutil.floats.FloatIterator[],int,int) -> concat
    it.unimi.dsi.fastutil.floats.FloatIterator unmodifiable(it.unimi.dsi.fastutil.floats.FloatIterator) -> unmodifiable
    it.unimi.dsi.fastutil.floats.FloatBidirectionalIterator unmodifiable(it.unimi.dsi.fastutil.floats.FloatBidirectionalIterator) -> unmodifiable
    it.unimi.dsi.fastutil.floats.FloatListIterator unmodifiable(it.unimi.dsi.fastutil.floats.FloatListIterator) -> unmodifiable
    it.unimi.dsi.fastutil.floats.FloatIterator wrap(it.unimi.dsi.fastutil.bytes.ByteIterator) -> wrap
    it.unimi.dsi.fastutil.floats.FloatIterator wrap(it.unimi.dsi.fastutil.shorts.ShortIterator) -> wrap
    void <clinit>() -> <clinit>
it.unimi.dsi.fastutil.floats.FloatIterators$ArrayIterator -> it.unimi.dsi.fastutil.floats.FloatIterators$ArrayIterator:
    float[] array -> array
    int offset -> offset
    int length -> length
    int curr -> curr
    void <init>(float[],int,int) -> <init>
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    float nextFloat() -> nextFloat
    float previousFloat() -> previousFloat
    int skip(int) -> skip
    int back(int) -> back
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
it.unimi.dsi.fastutil.floats.FloatIterators$ByteIteratorWrapper -> it.unimi.dsi.fastutil.floats.FloatIterators$ByteIteratorWrapper:
    it.unimi.dsi.fastutil.bytes.ByteIterator iterator -> iterator
    void <init>(it.unimi.dsi.fastutil.bytes.ByteIterator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Float next() -> next
    float nextFloat() -> nextFloat
    void remove() -> remove
    int skip(int) -> skip
    java.lang.Object next() -> next
it.unimi.dsi.fastutil.floats.FloatIterators$EmptyIterator -> it.unimi.dsi.fastutil.floats.FloatIterators$EmptyIterator:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    float nextFloat() -> nextFloat
    float previousFloat() -> previousFloat
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    int skip(int) -> skip
    int back(int) -> back
    java.lang.Object clone() -> clone
    java.lang.Object readResolve() -> readResolve
it.unimi.dsi.fastutil.floats.FloatIterators$IteratorConcatenator -> it.unimi.dsi.fastutil.floats.FloatIterators$IteratorConcatenator:
    it.unimi.dsi.fastutil.floats.FloatIterator[] a -> a
    int offset -> offset
    int length -> length
    int lastOffset -> lastOffset
    void <init>(it.unimi.dsi.fastutil.floats.FloatIterator[],int,int) -> <init>
    void advance() -> advance
    boolean hasNext() -> hasNext
    float nextFloat() -> nextFloat
    void remove() -> remove
    int skip(int) -> skip
it.unimi.dsi.fastutil.floats.FloatIterators$IteratorWrapper -> it.unimi.dsi.fastutil.floats.FloatIterators$IteratorWrapper:
    java.util.Iterator i -> i
    void <init>(java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    void remove() -> remove
    float nextFloat() -> nextFloat
it.unimi.dsi.fastutil.floats.FloatIterators$ListIteratorWrapper -> it.unimi.dsi.fastutil.floats.FloatIterators$ListIteratorWrapper:
    java.util.ListIterator i -> i
    void <init>(java.util.ListIterator) -> <init>
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    void set(float) -> set
    void add(float) -> add
    void remove() -> remove
    float nextFloat() -> nextFloat
    float previousFloat() -> previousFloat
it.unimi.dsi.fastutil.floats.FloatIterators$ShortIteratorWrapper -> it.unimi.dsi.fastutil.floats.FloatIterators$ShortIteratorWrapper:
    it.unimi.dsi.fastutil.shorts.ShortIterator iterator -> iterator
    void <init>(it.unimi.dsi.fastutil.shorts.ShortIterator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Float next() -> next
    float nextFloat() -> nextFloat
    void remove() -> remove
    int skip(int) -> skip
    java.lang.Object next() -> next
it.unimi.dsi.fastutil.floats.FloatIterators$SingletonIterator -> it.unimi.dsi.fastutil.floats.FloatIterators$SingletonIterator:
    float element -> element
    int curr -> curr
    void <init>(float) -> <init>
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    float nextFloat() -> nextFloat
    float previousFloat() -> previousFloat
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
it.unimi.dsi.fastutil.floats.FloatIterators$UnmodifiableBidirectionalIterator -> it.unimi.dsi.fastutil.floats.FloatIterators$UnmodifiableBidirectionalIterator:
    it.unimi.dsi.fastutil.floats.FloatBidirectionalIterator i -> i
    void <init>(it.unimi.dsi.fastutil.floats.FloatBidirectionalIterator) -> <init>
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    float nextFloat() -> nextFloat
    float previousFloat() -> previousFloat
    java.lang.Float next() -> next
    java.lang.Float previous() -> previous
    java.lang.Object next() -> next
    java.lang.Object previous() -> previous
it.unimi.dsi.fastutil.floats.FloatIterators$UnmodifiableIterator -> it.unimi.dsi.fastutil.floats.FloatIterators$UnmodifiableIterator:
    it.unimi.dsi.fastutil.floats.FloatIterator i -> i
    void <init>(it.unimi.dsi.fastutil.floats.FloatIterator) -> <init>
    boolean hasNext() -> hasNext
    float nextFloat() -> nextFloat
    java.lang.Float next() -> next
    java.lang.Object next() -> next
it.unimi.dsi.fastutil.floats.FloatIterators$UnmodifiableListIterator -> it.unimi.dsi.fastutil.floats.FloatIterators$UnmodifiableListIterator:
    it.unimi.dsi.fastutil.floats.FloatListIterator i -> i
    void <init>(it.unimi.dsi.fastutil.floats.FloatListIterator) -> <init>
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    float nextFloat() -> nextFloat
    float previousFloat() -> previousFloat
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    java.lang.Float next() -> next
    java.lang.Float previous() -> previous
    java.lang.Object previous() -> previous
    java.lang.Object next() -> next
it.unimi.dsi.fastutil.floats.FloatList -> it.unimi.dsi.fastutil.floats.FloatList:
    it.unimi.dsi.fastutil.floats.FloatListIterator iterator() -> iterator
    it.unimi.dsi.fastutil.floats.FloatListIterator floatListIterator() -> floatListIterator
    it.unimi.dsi.fastutil.floats.FloatListIterator floatListIterator(int) -> floatListIterator
    it.unimi.dsi.fastutil.floats.FloatListIterator listIterator() -> listIterator
    it.unimi.dsi.fastutil.floats.FloatListIterator listIterator(int) -> listIterator
    it.unimi.dsi.fastutil.floats.FloatList floatSubList(int,int) -> floatSubList
    it.unimi.dsi.fastutil.floats.FloatList subList(int,int) -> subList
    void size(int) -> size
    void getElements(int,float[],int,int) -> getElements
    void removeElements(int,int) -> removeElements
    void addElements(int,float[]) -> addElements
    void addElements(int,float[],int,int) -> addElements
    boolean add(float) -> add
    void add(int,float) -> add
    boolean addAll(int,it.unimi.dsi.fastutil.floats.FloatCollection) -> addAll
    boolean addAll(int,it.unimi.dsi.fastutil.floats.FloatList) -> addAll
    boolean addAll(it.unimi.dsi.fastutil.floats.FloatList) -> addAll
    float getFloat(int) -> getFloat
    int indexOf(float) -> indexOf
    int lastIndexOf(float) -> lastIndexOf
    float removeFloat(int) -> removeFloat
    float set(int,float) -> set
it.unimi.dsi.fastutil.floats.FloatListIterator -> it.unimi.dsi.fastutil.floats.FloatListIterator:
    void set(float) -> set
    void add(float) -> add
it.unimi.dsi.fastutil.floats.FloatSet -> it.unimi.dsi.fastutil.floats.FloatSet:
    it.unimi.dsi.fastutil.floats.FloatIterator iterator() -> iterator
    boolean remove(float) -> remove
it.unimi.dsi.fastutil.ints.AbstractIntBidirectionalIterator -> it.unimi.dsi.fastutil.ints.AbstractIntBidirectionalIterator:
    void <init>() -> <init>
    int previousInt() -> previousInt
    java.lang.Integer previous() -> previous
    int back(int) -> back
    java.lang.Object previous() -> previous
it.unimi.dsi.fastutil.ints.AbstractIntCollection -> it.unimi.dsi.fastutil.ints.AbstractIntCollection:
    void <init>() -> <init>
    int[] toArray(int[]) -> toArray
    int[] toIntArray() -> toIntArray
    int[] toIntArray(int[]) -> toIntArray
    boolean addAll(it.unimi.dsi.fastutil.ints.IntCollection) -> addAll
    boolean containsAll(it.unimi.dsi.fastutil.ints.IntCollection) -> containsAll
    boolean retainAll(it.unimi.dsi.fastutil.ints.IntCollection) -> retainAll
    boolean removeAll(it.unimi.dsi.fastutil.ints.IntCollection) -> removeAll
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean addAll(java.util.Collection) -> addAll
    boolean add(int) -> add
    it.unimi.dsi.fastutil.ints.IntIterator intIterator() -> intIterator
    it.unimi.dsi.fastutil.ints.IntIterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean add(java.lang.Integer) -> add
    boolean rem(java.lang.Object) -> rem
    boolean contains(java.lang.Object) -> contains
    boolean contains(int) -> contains
    boolean rem(int) -> rem
    boolean containsAll(java.util.Collection) -> containsAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean isEmpty() -> isEmpty
    java.lang.String toString() -> toString
    boolean add(java.lang.Object) -> add
    java.util.Iterator iterator() -> iterator
it.unimi.dsi.fastutil.ints.AbstractIntIterator -> it.unimi.dsi.fastutil.ints.AbstractIntIterator:
    void <init>() -> <init>
    int nextInt() -> nextInt
    java.lang.Integer next() -> next
    void remove() -> remove
    int skip(int) -> skip
    java.lang.Object next() -> next
it.unimi.dsi.fastutil.ints.AbstractIntList -> it.unimi.dsi.fastutil.ints.AbstractIntList:
    void <init>() -> <init>
    void ensureIndex(int) -> ensureIndex
    void ensureRestrictedIndex(int) -> ensureRestrictedIndex
    void add(int,int) -> add
    boolean add(int) -> add
    int removeInt(int) -> removeInt
    int set(int,int) -> set
    boolean addAll(int,java.util.Collection) -> addAll
    boolean addAll(java.util.Collection) -> addAll
    it.unimi.dsi.fastutil.ints.IntListIterator intListIterator() -> intListIterator
    it.unimi.dsi.fastutil.ints.IntListIterator intListIterator(int) -> intListIterator
    it.unimi.dsi.fastutil.ints.IntListIterator iterator() -> iterator
    it.unimi.dsi.fastutil.ints.IntListIterator listIterator() -> listIterator
    it.unimi.dsi.fastutil.ints.IntListIterator listIterator(int) -> listIterator
    boolean contains(int) -> contains
    int indexOf(int) -> indexOf
    int lastIndexOf(int) -> lastIndexOf
    void size(int) -> size
    it.unimi.dsi.fastutil.ints.IntList subList(int,int) -> subList
    it.unimi.dsi.fastutil.ints.IntList intSubList(int,int) -> intSubList
    void removeElements(int,int) -> removeElements
    void addElements(int,int[],int,int) -> addElements
    void addElements(int,int[]) -> addElements
    void getElements(int,int[],int,int) -> getElements
    boolean valEquals(java.lang.Object,java.lang.Object) -> valEquals
    boolean equals(java.lang.Object) -> equals
    int compareTo(java.util.List) -> compareTo
    int hashCode() -> hashCode
    void push(int) -> push
    int popInt() -> popInt
    int topInt() -> topInt
    int peekInt(int) -> peekInt
    boolean rem(int) -> rem
    boolean remove(java.lang.Object) -> remove
    boolean addAll(int,it.unimi.dsi.fastutil.ints.IntCollection) -> addAll
    boolean addAll(int,it.unimi.dsi.fastutil.ints.IntList) -> addAll
    boolean addAll(it.unimi.dsi.fastutil.ints.IntCollection) -> addAll
    boolean addAll(it.unimi.dsi.fastutil.ints.IntList) -> addAll
    void add(int,java.lang.Integer) -> add
    java.lang.Integer set(int,java.lang.Integer) -> set
    java.lang.Integer get(int) -> get
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.lang.Integer remove(int) -> remove
    void push(java.lang.Integer) -> push
    java.lang.Integer pop() -> pop
    java.lang.Integer top() -> top
    java.lang.Integer peek(int) -> peek
    java.lang.String toString() -> toString
    it.unimi.dsi.fastutil.ints.IntIterator iterator() -> iterator
    java.util.Iterator iterator() -> iterator
    java.util.List subList(int,int) -> subList
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.ListIterator listIterator() -> listIterator
    java.lang.Object remove(int) -> remove
    void add(int,java.lang.Object) -> add
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
    int compareTo(java.lang.Object) -> compareTo
    java.lang.Object peek(int) -> peek
    java.lang.Object top() -> top
    java.lang.Object pop() -> pop
    void push(java.lang.Object) -> push
it.unimi.dsi.fastutil.ints.AbstractIntList$1 -> it.unimi.dsi.fastutil.ints.AbstractIntList$1:
    int pos -> pos
    int last -> last
    int val$index -> val$index
    it.unimi.dsi.fastutil.ints.AbstractIntList this$0 -> this$0
    void <init>(it.unimi.dsi.fastutil.ints.AbstractIntList,int) -> <init>
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    int nextInt() -> nextInt
    int previousInt() -> previousInt
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    void add(int) -> add
    void set(int) -> set
    void remove() -> remove
it.unimi.dsi.fastutil.ints.AbstractIntList$IntSubList -> it.unimi.dsi.fastutil.ints.AbstractIntList$IntSubList:
    long serialVersionUID -> serialVersionUID
    it.unimi.dsi.fastutil.ints.IntList l -> l
    int from -> from
    int to -> to
    boolean ASSERTS -> ASSERTS
    void <init>(it.unimi.dsi.fastutil.ints.IntList,int,int) -> <init>
    void assertRange() -> assertRange
    boolean add(int) -> add
    void add(int,int) -> add
    boolean addAll(int,java.util.Collection) -> addAll
    int getInt(int) -> getInt
    int removeInt(int) -> removeInt
    int set(int,int) -> set
    void clear() -> clear
    int size() -> size
    void getElements(int,int[],int,int) -> getElements
    void removeElements(int,int) -> removeElements
    void addElements(int,int[],int,int) -> addElements
    it.unimi.dsi.fastutil.ints.IntListIterator listIterator(int) -> listIterator
    it.unimi.dsi.fastutil.ints.IntList subList(int,int) -> subList
    boolean rem(int) -> rem
    boolean remove(java.lang.Object) -> remove
    boolean addAll(int,it.unimi.dsi.fastutil.ints.IntCollection) -> addAll
    boolean addAll(int,it.unimi.dsi.fastutil.ints.IntList) -> addAll
    java.util.List subList(int,int) -> subList
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.ListIterator listIterator() -> listIterator
    java.lang.Object remove(int) -> remove
    void add(int,java.lang.Object) -> add
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
    java.util.Iterator iterator() -> iterator
    int compareTo(java.lang.Object) -> compareTo
    it.unimi.dsi.fastutil.ints.IntIterator iterator() -> iterator
    java.lang.Object peek(int) -> peek
    java.lang.Object top() -> top
    java.lang.Object pop() -> pop
    void push(java.lang.Object) -> push
it.unimi.dsi.fastutil.ints.AbstractIntList$IntSubList$1 -> it.unimi.dsi.fastutil.ints.AbstractIntList$IntSubList$1:
    int pos -> pos
    int last -> last
    int val$index -> val$index
    it.unimi.dsi.fastutil.ints.AbstractIntList$IntSubList this$0 -> this$0
    void <init>(it.unimi.dsi.fastutil.ints.AbstractIntList$IntSubList,int) -> <init>
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    int nextInt() -> nextInt
    int previousInt() -> previousInt
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    void add(int) -> add
    void set(int) -> set
    void remove() -> remove
it.unimi.dsi.fastutil.ints.AbstractIntListIterator -> it.unimi.dsi.fastutil.ints.AbstractIntListIterator:
    void <init>() -> <init>
    void set(java.lang.Integer) -> set
    void add(java.lang.Integer) -> add
    void set(int) -> set
    void add(int) -> add
    void add(java.lang.Object) -> add
    void set(java.lang.Object) -> set
it.unimi.dsi.fastutil.ints.IntArrayList -> it.unimi.dsi.fastutil.ints.IntArrayList:
    long serialVersionUID -> serialVersionUID
    int DEFAULT_INITIAL_CAPACITY -> DEFAULT_INITIAL_CAPACITY
    int[] a -> a
    int size -> size
    boolean ASSERTS -> ASSERTS
    void <init>(int[],boolean) -> <init>
    void <init>(int) -> <init>
    void <init>() -> <init>
    void <init>(java.util.Collection) -> <init>
    void <init>(it.unimi.dsi.fastutil.ints.IntCollection) -> <init>
    void <init>(it.unimi.dsi.fastutil.ints.IntList) -> <init>
    void <init>(int[]) -> <init>
    void <init>(int[],int,int) -> <init>
    void <init>(java.util.Iterator) -> <init>
    void <init>(it.unimi.dsi.fastutil.ints.IntIterator) -> <init>
    int[] elements() -> elements
    it.unimi.dsi.fastutil.ints.IntArrayList wrap(int[],int) -> wrap
    it.unimi.dsi.fastutil.ints.IntArrayList wrap(int[]) -> wrap
    void ensureCapacity(int) -> ensureCapacity
    void grow(int) -> grow
    void add(int,int) -> add
    boolean add(int) -> add
    int getInt(int) -> getInt
    int indexOf(int) -> indexOf
    int lastIndexOf(int) -> lastIndexOf
    int removeInt(int) -> removeInt
    boolean rem(int) -> rem
    int set(int,int) -> set
    void clear() -> clear
    int size() -> size
    void size(int) -> size
    boolean isEmpty() -> isEmpty
    void trim() -> trim
    void trim(int) -> trim
    void getElements(int,int[],int,int) -> getElements
    void removeElements(int,int) -> removeElements
    void addElements(int,int[],int,int) -> addElements
    int[] toIntArray(int[]) -> toIntArray
    boolean addAll(int,it.unimi.dsi.fastutil.ints.IntCollection) -> addAll
    boolean addAll(int,it.unimi.dsi.fastutil.ints.IntList) -> addAll
    it.unimi.dsi.fastutil.ints.IntListIterator listIterator(int) -> listIterator
    it.unimi.dsi.fastutil.ints.IntArrayList clone() -> clone
    boolean equals(it.unimi.dsi.fastutil.ints.IntArrayList) -> equals
    int compareTo(it.unimi.dsi.fastutil.ints.IntArrayList) -> compareTo
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.util.ListIterator listIterator(int) -> listIterator
    java.lang.Object clone() -> clone
it.unimi.dsi.fastutil.ints.IntArrayList$1 -> it.unimi.dsi.fastutil.ints.IntArrayList$1:
    int pos -> pos
    int last -> last
    int val$index -> val$index
    it.unimi.dsi.fastutil.ints.IntArrayList this$0 -> this$0
    void <init>(it.unimi.dsi.fastutil.ints.IntArrayList,int) -> <init>
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    int nextInt() -> nextInt
    int previousInt() -> previousInt
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    void add(int) -> add
    void set(int) -> set
    void remove() -> remove
it.unimi.dsi.fastutil.ints.IntArrays -> it.unimi.dsi.fastutil.ints.IntArrays:
    int[] EMPTY_ARRAY -> EMPTY_ARRAY
    int SMALL -> SMALL
    int MEDIUM -> MEDIUM
    int DIGIT_BITS -> DIGIT_BITS
    int DIGIT_MASK -> DIGIT_MASK
    int DIGITS_PER_ELEMENT -> DIGITS_PER_ELEMENT
    it.unimi.dsi.fastutil.Hash$Strategy HASH_STRATEGY -> HASH_STRATEGY
    void <init>() -> <init>
    int[] ensureCapacity(int[],int) -> ensureCapacity
    int[] ensureCapacity(int[],int,int) -> ensureCapacity
    int[] grow(int[],int) -> grow
    int[] grow(int[],int,int) -> grow
    int[] trim(int[],int) -> trim
    int[] setLength(int[],int) -> setLength
    int[] copy(int[],int,int) -> copy
    int[] copy(int[]) -> copy
    void fill(int[],int) -> fill
    void fill(int[],int,int,int) -> fill
    boolean equals(int[],int[]) -> equals
    void ensureFromTo(int[],int,int) -> ensureFromTo
    void ensureOffsetLength(int[],int,int) -> ensureOffsetLength
    void swap(int[],int,int) -> swap
    void vecSwap(int[],int,int,int) -> vecSwap
    int med3(int[],int,int,int,it.unimi.dsi.fastutil.ints.IntComparator) -> med3
    void selectionSort(int[],int,int,it.unimi.dsi.fastutil.ints.IntComparator) -> selectionSort
    void insertionSort(int[],int,int,it.unimi.dsi.fastutil.ints.IntComparator) -> insertionSort
    void selectionSort(int[],int,int) -> selectionSort
    void insertionSort(int[],int,int) -> insertionSort
    void quickSort(int[],int,int,it.unimi.dsi.fastutil.ints.IntComparator) -> quickSort
    void quickSort(int[],it.unimi.dsi.fastutil.ints.IntComparator) -> quickSort
    int med3(int[],int,int,int) -> med3
    void quickSort(int[],int,int) -> quickSort
    void quickSort(int[]) -> quickSort
    void mergeSort(int[],int,int,int[]) -> mergeSort
    void mergeSort(int[],int,int) -> mergeSort
    void mergeSort(int[]) -> mergeSort
    void mergeSort(int[],int,int,it.unimi.dsi.fastutil.ints.IntComparator,int[]) -> mergeSort
    void mergeSort(int[],int,int,it.unimi.dsi.fastutil.ints.IntComparator) -> mergeSort
    void mergeSort(int[],it.unimi.dsi.fastutil.ints.IntComparator) -> mergeSort
    int binarySearch(int[],int,int,int) -> binarySearch
    int binarySearch(int[],int) -> binarySearch
    int binarySearch(int[],int,int,int,it.unimi.dsi.fastutil.ints.IntComparator) -> binarySearch
    int binarySearch(int[],int,it.unimi.dsi.fastutil.ints.IntComparator) -> binarySearch
    void radixSort(int[]) -> radixSort
    void radixSort(int[],int,int) -> radixSort
    void insertionSortIndirect(int[],int[],int,int) -> insertionSortIndirect
    void radixSortIndirect(int[],int[],boolean) -> radixSortIndirect
    void radixSortIndirect(int[],int[],int,int,boolean) -> radixSortIndirect
    void selectionSort(int[],int[],int,int) -> selectionSort
    void radixSort(int[],int[]) -> radixSort
    void radixSort(int[],int[],int,int) -> radixSort
    void insertionSortIndirect(int[],int[],int[],int,int) -> insertionSortIndirect
    void radixSortIndirect(int[],int[],int[],boolean) -> radixSortIndirect
    void radixSortIndirect(int[],int[],int[],int,int,boolean) -> radixSortIndirect
    void selectionSort(int[][],int,int,int) -> selectionSort
    void radixSort(int[][]) -> radixSort
    void radixSort(int[][],int,int) -> radixSort
    int[] shuffle(int[],int,int,java.util.Random) -> shuffle
    int[] shuffle(int[],java.util.Random) -> shuffle
    int[] reverse(int[]) -> reverse
    void <clinit>() -> <clinit>
it.unimi.dsi.fastutil.ints.IntArrays$1 -> it.unimi.dsi.fastutil.ints.IntArrays$1:
it.unimi.dsi.fastutil.ints.IntArrays$ArrayHashStrategy -> it.unimi.dsi.fastutil.ints.IntArrays$ArrayHashStrategy:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    int hashCode(int[]) -> hashCode
    boolean equals(int[],int[]) -> equals
    boolean equals(java.lang.Object,java.lang.Object) -> equals
    int hashCode(java.lang.Object) -> hashCode
    void <init>(it.unimi.dsi.fastutil.ints.IntArrays$1) -> <init>
it.unimi.dsi.fastutil.ints.IntBidirectionalIterator -> it.unimi.dsi.fastutil.ints.IntBidirectionalIterator:
    int previousInt() -> previousInt
    int back(int) -> back
it.unimi.dsi.fastutil.ints.IntCollection -> it.unimi.dsi.fastutil.ints.IntCollection:
    it.unimi.dsi.fastutil.ints.IntIterator iterator() -> iterator
    it.unimi.dsi.fastutil.ints.IntIterator intIterator() -> intIterator
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean contains(int) -> contains
    int[] toIntArray() -> toIntArray
    int[] toIntArray(int[]) -> toIntArray
    int[] toArray(int[]) -> toArray
    boolean add(int) -> add
    boolean rem(int) -> rem
    boolean addAll(it.unimi.dsi.fastutil.ints.IntCollection) -> addAll
    boolean containsAll(it.unimi.dsi.fastutil.ints.IntCollection) -> containsAll
    boolean removeAll(it.unimi.dsi.fastutil.ints.IntCollection) -> removeAll
    boolean retainAll(it.unimi.dsi.fastutil.ints.IntCollection) -> retainAll
it.unimi.dsi.fastutil.ints.IntComparator -> it.unimi.dsi.fastutil.ints.IntComparator:
    int compare(int,int) -> compare
it.unimi.dsi.fastutil.ints.IntIterable -> it.unimi.dsi.fastutil.ints.IntIterable:
it.unimi.dsi.fastutil.ints.IntIterator -> it.unimi.dsi.fastutil.ints.IntIterator:
    int nextInt() -> nextInt
    int skip(int) -> skip
it.unimi.dsi.fastutil.ints.IntIterators -> it.unimi.dsi.fastutil.ints.IntIterators:
    it.unimi.dsi.fastutil.ints.IntIterators$EmptyIterator EMPTY_ITERATOR -> EMPTY_ITERATOR
    void <init>() -> <init>
    it.unimi.dsi.fastutil.ints.IntListIterator singleton(int) -> singleton
    it.unimi.dsi.fastutil.ints.IntListIterator wrap(int[],int,int) -> wrap
    it.unimi.dsi.fastutil.ints.IntListIterator wrap(int[]) -> wrap
    int unwrap(it.unimi.dsi.fastutil.ints.IntIterator,int[],int,int) -> unwrap
    int unwrap(it.unimi.dsi.fastutil.ints.IntIterator,int[]) -> unwrap
    int[] unwrap(it.unimi.dsi.fastutil.ints.IntIterator,int) -> unwrap
    int[] unwrap(it.unimi.dsi.fastutil.ints.IntIterator) -> unwrap
    int unwrap(it.unimi.dsi.fastutil.ints.IntIterator,it.unimi.dsi.fastutil.ints.IntCollection,int) -> unwrap
    long unwrap(it.unimi.dsi.fastutil.ints.IntIterator,it.unimi.dsi.fastutil.ints.IntCollection) -> unwrap
    int pour(it.unimi.dsi.fastutil.ints.IntIterator,it.unimi.dsi.fastutil.ints.IntCollection,int) -> pour
    int pour(it.unimi.dsi.fastutil.ints.IntIterator,it.unimi.dsi.fastutil.ints.IntCollection) -> pour
    it.unimi.dsi.fastutil.ints.IntList pour(it.unimi.dsi.fastutil.ints.IntIterator,int) -> pour
    it.unimi.dsi.fastutil.ints.IntList pour(it.unimi.dsi.fastutil.ints.IntIterator) -> pour
    it.unimi.dsi.fastutil.ints.IntIterator asIntIterator(java.util.Iterator) -> asIntIterator
    it.unimi.dsi.fastutil.ints.IntListIterator asIntIterator(java.util.ListIterator) -> asIntIterator
    it.unimi.dsi.fastutil.ints.IntListIterator fromTo(int,int) -> fromTo
    it.unimi.dsi.fastutil.ints.IntIterator concat(it.unimi.dsi.fastutil.ints.IntIterator[]) -> concat
    it.unimi.dsi.fastutil.ints.IntIterator concat(it.unimi.dsi.fastutil.ints.IntIterator[],int,int) -> concat
    it.unimi.dsi.fastutil.ints.IntIterator unmodifiable(it.unimi.dsi.fastutil.ints.IntIterator) -> unmodifiable
    it.unimi.dsi.fastutil.ints.IntBidirectionalIterator unmodifiable(it.unimi.dsi.fastutil.ints.IntBidirectionalIterator) -> unmodifiable
    it.unimi.dsi.fastutil.ints.IntListIterator unmodifiable(it.unimi.dsi.fastutil.ints.IntListIterator) -> unmodifiable
    it.unimi.dsi.fastutil.ints.IntIterator wrap(it.unimi.dsi.fastutil.bytes.ByteIterator) -> wrap
    it.unimi.dsi.fastutil.ints.IntIterator wrap(it.unimi.dsi.fastutil.shorts.ShortIterator) -> wrap
    void <clinit>() -> <clinit>
it.unimi.dsi.fastutil.ints.IntIterators$ArrayIterator -> it.unimi.dsi.fastutil.ints.IntIterators$ArrayIterator:
    int[] array -> array
    int offset -> offset
    int length -> length
    int curr -> curr
    void <init>(int[],int,int) -> <init>
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    int nextInt() -> nextInt
    int previousInt() -> previousInt
    int skip(int) -> skip
    int back(int) -> back
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
it.unimi.dsi.fastutil.ints.IntIterators$ByteIteratorWrapper -> it.unimi.dsi.fastutil.ints.IntIterators$ByteIteratorWrapper:
    it.unimi.dsi.fastutil.bytes.ByteIterator iterator -> iterator
    void <init>(it.unimi.dsi.fastutil.bytes.ByteIterator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Integer next() -> next
    int nextInt() -> nextInt
    void remove() -> remove
    int skip(int) -> skip
    java.lang.Object next() -> next
it.unimi.dsi.fastutil.ints.IntIterators$EmptyIterator -> it.unimi.dsi.fastutil.ints.IntIterators$EmptyIterator:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    int nextInt() -> nextInt
    int previousInt() -> previousInt
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    int skip(int) -> skip
    int back(int) -> back
    java.lang.Object clone() -> clone
    java.lang.Object readResolve() -> readResolve
it.unimi.dsi.fastutil.ints.IntIterators$IntervalIterator -> it.unimi.dsi.fastutil.ints.IntIterators$IntervalIterator:
    int from -> from
    int to -> to
    int curr -> curr
    void <init>(int,int) -> <init>
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    int nextInt() -> nextInt
    int previousInt() -> previousInt
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    int skip(int) -> skip
    int back(int) -> back
it.unimi.dsi.fastutil.ints.IntIterators$IteratorConcatenator -> it.unimi.dsi.fastutil.ints.IntIterators$IteratorConcatenator:
    it.unimi.dsi.fastutil.ints.IntIterator[] a -> a
    int offset -> offset
    int length -> length
    int lastOffset -> lastOffset
    void <init>(it.unimi.dsi.fastutil.ints.IntIterator[],int,int) -> <init>
    void advance() -> advance
    boolean hasNext() -> hasNext
    int nextInt() -> nextInt
    void remove() -> remove
    int skip(int) -> skip
it.unimi.dsi.fastutil.ints.IntIterators$IteratorWrapper -> it.unimi.dsi.fastutil.ints.IntIterators$IteratorWrapper:
    java.util.Iterator i -> i
    void <init>(java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    void remove() -> remove
    int nextInt() -> nextInt
it.unimi.dsi.fastutil.ints.IntIterators$ListIteratorWrapper -> it.unimi.dsi.fastutil.ints.IntIterators$ListIteratorWrapper:
    java.util.ListIterator i -> i
    void <init>(java.util.ListIterator) -> <init>
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    void set(int) -> set
    void add(int) -> add
    void remove() -> remove
    int nextInt() -> nextInt
    int previousInt() -> previousInt
it.unimi.dsi.fastutil.ints.IntIterators$ShortIteratorWrapper -> it.unimi.dsi.fastutil.ints.IntIterators$ShortIteratorWrapper:
    it.unimi.dsi.fastutil.shorts.ShortIterator iterator -> iterator
    void <init>(it.unimi.dsi.fastutil.shorts.ShortIterator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Integer next() -> next
    int nextInt() -> nextInt
    void remove() -> remove
    int skip(int) -> skip
    java.lang.Object next() -> next
it.unimi.dsi.fastutil.ints.IntIterators$SingletonIterator -> it.unimi.dsi.fastutil.ints.IntIterators$SingletonIterator:
    int element -> element
    int curr -> curr
    void <init>(int) -> <init>
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    int nextInt() -> nextInt
    int previousInt() -> previousInt
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
it.unimi.dsi.fastutil.ints.IntIterators$UnmodifiableBidirectionalIterator -> it.unimi.dsi.fastutil.ints.IntIterators$UnmodifiableBidirectionalIterator:
    it.unimi.dsi.fastutil.ints.IntBidirectionalIterator i -> i
    void <init>(it.unimi.dsi.fastutil.ints.IntBidirectionalIterator) -> <init>
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    int nextInt() -> nextInt
    int previousInt() -> previousInt
    java.lang.Integer next() -> next
    java.lang.Integer previous() -> previous
    java.lang.Object next() -> next
    java.lang.Object previous() -> previous
it.unimi.dsi.fastutil.ints.IntIterators$UnmodifiableIterator -> it.unimi.dsi.fastutil.ints.IntIterators$UnmodifiableIterator:
    it.unimi.dsi.fastutil.ints.IntIterator i -> i
    void <init>(it.unimi.dsi.fastutil.ints.IntIterator) -> <init>
    boolean hasNext() -> hasNext
    int nextInt() -> nextInt
    java.lang.Integer next() -> next
    java.lang.Object next() -> next
it.unimi.dsi.fastutil.ints.IntIterators$UnmodifiableListIterator -> it.unimi.dsi.fastutil.ints.IntIterators$UnmodifiableListIterator:
    it.unimi.dsi.fastutil.ints.IntListIterator i -> i
    void <init>(it.unimi.dsi.fastutil.ints.IntListIterator) -> <init>
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    int nextInt() -> nextInt
    int previousInt() -> previousInt
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    java.lang.Integer next() -> next
    java.lang.Integer previous() -> previous
    java.lang.Object previous() -> previous
    java.lang.Object next() -> next
it.unimi.dsi.fastutil.ints.IntList -> it.unimi.dsi.fastutil.ints.IntList:
    it.unimi.dsi.fastutil.ints.IntListIterator iterator() -> iterator
    it.unimi.dsi.fastutil.ints.IntListIterator intListIterator() -> intListIterator
    it.unimi.dsi.fastutil.ints.IntListIterator intListIterator(int) -> intListIterator
    it.unimi.dsi.fastutil.ints.IntListIterator listIterator() -> listIterator
    it.unimi.dsi.fastutil.ints.IntListIterator listIterator(int) -> listIterator
    it.unimi.dsi.fastutil.ints.IntList intSubList(int,int) -> intSubList
    it.unimi.dsi.fastutil.ints.IntList subList(int,int) -> subList
    void size(int) -> size
    void getElements(int,int[],int,int) -> getElements
    void removeElements(int,int) -> removeElements
    void addElements(int,int[]) -> addElements
    void addElements(int,int[],int,int) -> addElements
    boolean add(int) -> add
    void add(int,int) -> add
    boolean addAll(int,it.unimi.dsi.fastutil.ints.IntCollection) -> addAll
    boolean addAll(int,it.unimi.dsi.fastutil.ints.IntList) -> addAll
    boolean addAll(it.unimi.dsi.fastutil.ints.IntList) -> addAll
    int getInt(int) -> getInt
    int indexOf(int) -> indexOf
    int lastIndexOf(int) -> lastIndexOf
    int removeInt(int) -> removeInt
    int set(int,int) -> set
it.unimi.dsi.fastutil.ints.IntListIterator -> it.unimi.dsi.fastutil.ints.IntListIterator:
    void set(int) -> set
    void add(int) -> add
it.unimi.dsi.fastutil.objects.AbstractObjectBidirectionalIterator -> it.unimi.dsi.fastutil.objects.AbstractObjectBidirectionalIterator:
    void <init>() -> <init>
    int back(int) -> back
it.unimi.dsi.fastutil.objects.AbstractObjectCollection -> it.unimi.dsi.fastutil.objects.AbstractObjectCollection:
    void <init>() -> <init>
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean addAll(java.util.Collection) -> addAll
    boolean add(java.lang.Object) -> add
    it.unimi.dsi.fastutil.objects.ObjectIterator objectIterator() -> objectIterator
    it.unimi.dsi.fastutil.objects.ObjectIterator iterator() -> iterator
    boolean containsAll(java.util.Collection) -> containsAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean isEmpty() -> isEmpty
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
it.unimi.dsi.fastutil.objects.AbstractObjectIterator -> it.unimi.dsi.fastutil.objects.AbstractObjectIterator:
    void <init>() -> <init>
    void remove() -> remove
    int skip(int) -> skip
it.unimi.dsi.fastutil.objects.AbstractObjectList -> it.unimi.dsi.fastutil.objects.AbstractObjectList:
    void <init>() -> <init>
    void ensureIndex(int) -> ensureIndex
    void ensureRestrictedIndex(int) -> ensureRestrictedIndex
    void add(int,java.lang.Object) -> add
    boolean add(java.lang.Object) -> add
    java.lang.Object remove(int) -> remove
    java.lang.Object set(int,java.lang.Object) -> set
    boolean addAll(int,java.util.Collection) -> addAll
    boolean addAll(java.util.Collection) -> addAll
    it.unimi.dsi.fastutil.objects.ObjectListIterator objectListIterator() -> objectListIterator
    it.unimi.dsi.fastutil.objects.ObjectListIterator objectListIterator(int) -> objectListIterator
    it.unimi.dsi.fastutil.objects.ObjectListIterator iterator() -> iterator
    it.unimi.dsi.fastutil.objects.ObjectListIterator listIterator() -> listIterator
    it.unimi.dsi.fastutil.objects.ObjectListIterator listIterator(int) -> listIterator
    boolean contains(java.lang.Object) -> contains
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    void size(int) -> size
    it.unimi.dsi.fastutil.objects.ObjectList subList(int,int) -> subList
    it.unimi.dsi.fastutil.objects.ObjectList objectSubList(int,int) -> objectSubList
    void removeElements(int,int) -> removeElements
    void addElements(int,java.lang.Object[],int,int) -> addElements
    void addElements(int,java.lang.Object[]) -> addElements
    void getElements(int,java.lang.Object[],int,int) -> getElements
    boolean valEquals(java.lang.Object,java.lang.Object) -> valEquals
    boolean equals(java.lang.Object) -> equals
    int compareTo(java.util.List) -> compareTo
    int hashCode() -> hashCode
    void push(java.lang.Object) -> push
    java.lang.Object pop() -> pop
    java.lang.Object top() -> top
    java.lang.Object peek(int) -> peek
    java.lang.String toString() -> toString
    it.unimi.dsi.fastutil.objects.ObjectIterator iterator() -> iterator
    java.util.Iterator iterator() -> iterator
    java.util.List subList(int,int) -> subList
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.ListIterator listIterator() -> listIterator
    int compareTo(java.lang.Object) -> compareTo
it.unimi.dsi.fastutil.objects.AbstractObjectList$1 -> it.unimi.dsi.fastutil.objects.AbstractObjectList$1:
    int pos -> pos
    int last -> last
    int val$index -> val$index
    it.unimi.dsi.fastutil.objects.AbstractObjectList this$0 -> this$0
    void <init>(it.unimi.dsi.fastutil.objects.AbstractObjectList,int) -> <init>
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    java.lang.Object next() -> next
    java.lang.Object previous() -> previous
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    void add(java.lang.Object) -> add
    void set(java.lang.Object) -> set
    void remove() -> remove
it.unimi.dsi.fastutil.objects.AbstractObjectList$ObjectSubList -> it.unimi.dsi.fastutil.objects.AbstractObjectList$ObjectSubList:
    long serialVersionUID -> serialVersionUID
    it.unimi.dsi.fastutil.objects.ObjectList l -> l
    int from -> from
    int to -> to
    boolean ASSERTS -> ASSERTS
    void <init>(it.unimi.dsi.fastutil.objects.ObjectList,int,int) -> <init>
    void assertRange() -> assertRange
    boolean add(java.lang.Object) -> add
    void add(int,java.lang.Object) -> add
    boolean addAll(int,java.util.Collection) -> addAll
    java.lang.Object get(int) -> get
    java.lang.Object remove(int) -> remove
    java.lang.Object set(int,java.lang.Object) -> set
    void clear() -> clear
    int size() -> size
    void getElements(int,java.lang.Object[],int,int) -> getElements
    void removeElements(int,int) -> removeElements
    void addElements(int,java.lang.Object[],int,int) -> addElements
    it.unimi.dsi.fastutil.objects.ObjectListIterator listIterator(int) -> listIterator
    it.unimi.dsi.fastutil.objects.ObjectList subList(int,int) -> subList
    boolean remove(java.lang.Object) -> remove
    java.util.List subList(int,int) -> subList
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.ListIterator listIterator() -> listIterator
    java.util.Iterator iterator() -> iterator
    int compareTo(java.lang.Object) -> compareTo
    it.unimi.dsi.fastutil.objects.ObjectIterator iterator() -> iterator
it.unimi.dsi.fastutil.objects.AbstractObjectList$ObjectSubList$1 -> it.unimi.dsi.fastutil.objects.AbstractObjectList$ObjectSubList$1:
    int pos -> pos
    int last -> last
    int val$index -> val$index
    it.unimi.dsi.fastutil.objects.AbstractObjectList$ObjectSubList this$0 -> this$0
    void <init>(it.unimi.dsi.fastutil.objects.AbstractObjectList$ObjectSubList,int) -> <init>
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    java.lang.Object next() -> next
    java.lang.Object previous() -> previous
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    void add(java.lang.Object) -> add
    void set(java.lang.Object) -> set
    void remove() -> remove
it.unimi.dsi.fastutil.objects.AbstractObjectListIterator -> it.unimi.dsi.fastutil.objects.AbstractObjectListIterator:
    void <init>() -> <init>
    void set(java.lang.Object) -> set
    void add(java.lang.Object) -> add
it.unimi.dsi.fastutil.objects.AbstractObjectSet -> it.unimi.dsi.fastutil.objects.AbstractObjectSet:
    void <init>() -> <init>
    it.unimi.dsi.fastutil.objects.ObjectIterator iterator() -> iterator
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean remove(java.lang.Object) -> remove
    java.util.Iterator iterator() -> iterator
it.unimi.dsi.fastutil.objects.ObjectArrayList -> it.unimi.dsi.fastutil.objects.ObjectArrayList:
    long serialVersionUID -> serialVersionUID
    int DEFAULT_INITIAL_CAPACITY -> DEFAULT_INITIAL_CAPACITY
    boolean wrapped -> wrapped
    java.lang.Object[] a -> a
    int size -> size
    boolean ASSERTS -> ASSERTS
    void <init>(java.lang.Object[],boolean) -> <init>
    void <init>(int) -> <init>
    void <init>() -> <init>
    void <init>(java.util.Collection) -> <init>
    void <init>(it.unimi.dsi.fastutil.objects.ObjectCollection) -> <init>
    void <init>(it.unimi.dsi.fastutil.objects.ObjectList) -> <init>
    void <init>(java.lang.Object[]) -> <init>
    void <init>(java.lang.Object[],int,int) -> <init>
    void <init>(java.util.Iterator) -> <init>
    void <init>(it.unimi.dsi.fastutil.objects.ObjectIterator) -> <init>
    java.lang.Object[] elements() -> elements
    it.unimi.dsi.fastutil.objects.ObjectArrayList wrap(java.lang.Object[],int) -> wrap
    it.unimi.dsi.fastutil.objects.ObjectArrayList wrap(java.lang.Object[]) -> wrap
    void ensureCapacity(int) -> ensureCapacity
    void grow(int) -> grow
    void add(int,java.lang.Object) -> add
    boolean add(java.lang.Object) -> add
    java.lang.Object get(int) -> get
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.lang.Object remove(int) -> remove
    boolean rem(java.lang.Object) -> rem
    boolean remove(java.lang.Object) -> remove
    java.lang.Object set(int,java.lang.Object) -> set
    void clear() -> clear
    int size() -> size
    void size(int) -> size
    boolean isEmpty() -> isEmpty
    void trim() -> trim
    void trim(int) -> trim
    void getElements(int,java.lang.Object[],int,int) -> getElements
    void removeElements(int,int) -> removeElements
    void addElements(int,java.lang.Object[],int,int) -> addElements
    it.unimi.dsi.fastutil.objects.ObjectListIterator listIterator(int) -> listIterator
    it.unimi.dsi.fastutil.objects.ObjectArrayList clone() -> clone
    boolean valEquals(java.lang.Object,java.lang.Object) -> valEquals
    boolean equals(it.unimi.dsi.fastutil.objects.ObjectArrayList) -> equals
    int compareTo(it.unimi.dsi.fastutil.objects.ObjectArrayList) -> compareTo
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.util.ListIterator listIterator(int) -> listIterator
    java.lang.Object clone() -> clone
it.unimi.dsi.fastutil.objects.ObjectArrayList$1 -> it.unimi.dsi.fastutil.objects.ObjectArrayList$1:
    int pos -> pos
    int last -> last
    int val$index -> val$index
    it.unimi.dsi.fastutil.objects.ObjectArrayList this$0 -> this$0
    void <init>(it.unimi.dsi.fastutil.objects.ObjectArrayList,int) -> <init>
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    java.lang.Object next() -> next
    java.lang.Object previous() -> previous
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    void add(java.lang.Object) -> add
    void set(java.lang.Object) -> set
    void remove() -> remove
it.unimi.dsi.fastutil.objects.ObjectArrays -> it.unimi.dsi.fastutil.objects.ObjectArrays:
    java.lang.Object[] EMPTY_ARRAY -> EMPTY_ARRAY
    int SMALL -> SMALL
    int MEDIUM -> MEDIUM
    it.unimi.dsi.fastutil.Hash$Strategy HASH_STRATEGY -> HASH_STRATEGY
    void <init>() -> <init>
    java.lang.Object[] newArray(java.lang.Object[],int) -> newArray
    java.lang.Object[] ensureCapacity(java.lang.Object[],int) -> ensureCapacity
    java.lang.Object[] ensureCapacity(java.lang.Object[],int,int) -> ensureCapacity
    java.lang.Object[] grow(java.lang.Object[],int) -> grow
    java.lang.Object[] grow(java.lang.Object[],int,int) -> grow
    java.lang.Object[] trim(java.lang.Object[],int) -> trim
    java.lang.Object[] setLength(java.lang.Object[],int) -> setLength
    java.lang.Object[] copy(java.lang.Object[],int,int) -> copy
    java.lang.Object[] copy(java.lang.Object[]) -> copy
    void fill(java.lang.Object[],java.lang.Object) -> fill
    void fill(java.lang.Object[],int,int,java.lang.Object) -> fill
    boolean equals(java.lang.Object[],java.lang.Object[]) -> equals
    void ensureFromTo(java.lang.Object[],int,int) -> ensureFromTo
    void ensureOffsetLength(java.lang.Object[],int,int) -> ensureOffsetLength
    void swap(java.lang.Object[],int,int) -> swap
    void vecSwap(java.lang.Object[],int,int,int) -> vecSwap
    int med3(java.lang.Object[],int,int,int,java.util.Comparator) -> med3
    void selectionSort(java.lang.Object[],int,int,java.util.Comparator) -> selectionSort
    void insertionSort(java.lang.Object[],int,int,java.util.Comparator) -> insertionSort
    void selectionSort(java.lang.Object[],int,int) -> selectionSort
    void insertionSort(java.lang.Object[],int,int) -> insertionSort
    void quickSort(java.lang.Object[],int,int,java.util.Comparator) -> quickSort
    void quickSort(java.lang.Object[],java.util.Comparator) -> quickSort
    int med3(java.lang.Object[],int,int,int) -> med3
    void quickSort(java.lang.Object[],int,int) -> quickSort
    void quickSort(java.lang.Object[]) -> quickSort
    void mergeSort(java.lang.Object[],int,int,java.lang.Object[]) -> mergeSort
    void mergeSort(java.lang.Object[],int,int) -> mergeSort
    void mergeSort(java.lang.Object[]) -> mergeSort
    void mergeSort(java.lang.Object[],int,int,java.util.Comparator,java.lang.Object[]) -> mergeSort
    void mergeSort(java.lang.Object[],int,int,java.util.Comparator) -> mergeSort
    void mergeSort(java.lang.Object[],java.util.Comparator) -> mergeSort
    int binarySearch(java.lang.Object[],int,int,java.lang.Object) -> binarySearch
    int binarySearch(java.lang.Object[],java.lang.Object) -> binarySearch
    int binarySearch(java.lang.Object[],int,int,java.lang.Object,java.util.Comparator) -> binarySearch
    int binarySearch(java.lang.Object[],java.lang.Object,java.util.Comparator) -> binarySearch
    java.lang.Object[] shuffle(java.lang.Object[],int,int,java.util.Random) -> shuffle
    java.lang.Object[] shuffle(java.lang.Object[],java.util.Random) -> shuffle
    java.lang.Object[] reverse(java.lang.Object[]) -> reverse
    void <clinit>() -> <clinit>
it.unimi.dsi.fastutil.objects.ObjectArrays$1 -> it.unimi.dsi.fastutil.objects.ObjectArrays$1:
it.unimi.dsi.fastutil.objects.ObjectArrays$ArrayHashStrategy -> it.unimi.dsi.fastutil.objects.ObjectArrays$ArrayHashStrategy:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    int hashCode(java.lang.Object[]) -> hashCode
    boolean equals(java.lang.Object[],java.lang.Object[]) -> equals
    boolean equals(java.lang.Object,java.lang.Object) -> equals
    int hashCode(java.lang.Object) -> hashCode
    void <init>(it.unimi.dsi.fastutil.objects.ObjectArrays$1) -> <init>
it.unimi.dsi.fastutil.objects.ObjectBidirectionalIterator -> it.unimi.dsi.fastutil.objects.ObjectBidirectionalIterator:
    int back(int) -> back
it.unimi.dsi.fastutil.objects.ObjectCollection -> it.unimi.dsi.fastutil.objects.ObjectCollection:
    it.unimi.dsi.fastutil.objects.ObjectIterator iterator() -> iterator
    it.unimi.dsi.fastutil.objects.ObjectIterator objectIterator() -> objectIterator
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
it.unimi.dsi.fastutil.objects.ObjectIterable -> it.unimi.dsi.fastutil.objects.ObjectIterable:
it.unimi.dsi.fastutil.objects.ObjectIterator -> it.unimi.dsi.fastutil.objects.ObjectIterator:
    int skip(int) -> skip
it.unimi.dsi.fastutil.objects.ObjectIterators -> it.unimi.dsi.fastutil.objects.ObjectIterators:
    it.unimi.dsi.fastutil.objects.ObjectIterators$EmptyIterator EMPTY_ITERATOR -> EMPTY_ITERATOR
    void <init>() -> <init>
    it.unimi.dsi.fastutil.objects.ObjectListIterator singleton(java.lang.Object) -> singleton
    it.unimi.dsi.fastutil.objects.ObjectListIterator wrap(java.lang.Object[],int,int) -> wrap
    it.unimi.dsi.fastutil.objects.ObjectListIterator wrap(java.lang.Object[]) -> wrap
    int unwrap(java.util.Iterator,java.lang.Object[],int,int) -> unwrap
    int unwrap(java.util.Iterator,java.lang.Object[]) -> unwrap
    java.lang.Object[] unwrap(java.util.Iterator,int) -> unwrap
    java.lang.Object[] unwrap(java.util.Iterator) -> unwrap
    int unwrap(java.util.Iterator,it.unimi.dsi.fastutil.objects.ObjectCollection,int) -> unwrap
    long unwrap(java.util.Iterator,it.unimi.dsi.fastutil.objects.ObjectCollection) -> unwrap
    int pour(java.util.Iterator,it.unimi.dsi.fastutil.objects.ObjectCollection,int) -> pour
    int pour(java.util.Iterator,it.unimi.dsi.fastutil.objects.ObjectCollection) -> pour
    it.unimi.dsi.fastutil.objects.ObjectList pour(java.util.Iterator,int) -> pour
    it.unimi.dsi.fastutil.objects.ObjectList pour(java.util.Iterator) -> pour
    it.unimi.dsi.fastutil.objects.ObjectIterator asObjectIterator(java.util.Iterator) -> asObjectIterator
    it.unimi.dsi.fastutil.objects.ObjectListIterator asObjectIterator(java.util.ListIterator) -> asObjectIterator
    it.unimi.dsi.fastutil.objects.ObjectIterator concat(it.unimi.dsi.fastutil.objects.ObjectIterator[]) -> concat
    it.unimi.dsi.fastutil.objects.ObjectIterator concat(it.unimi.dsi.fastutil.objects.ObjectIterator[],int,int) -> concat
    it.unimi.dsi.fastutil.objects.ObjectIterator unmodifiable(it.unimi.dsi.fastutil.objects.ObjectIterator) -> unmodifiable
    it.unimi.dsi.fastutil.objects.ObjectBidirectionalIterator unmodifiable(it.unimi.dsi.fastutil.objects.ObjectBidirectionalIterator) -> unmodifiable
    it.unimi.dsi.fastutil.objects.ObjectListIterator unmodifiable(it.unimi.dsi.fastutil.objects.ObjectListIterator) -> unmodifiable
    void <clinit>() -> <clinit>
it.unimi.dsi.fastutil.objects.ObjectIterators$ArrayIterator -> it.unimi.dsi.fastutil.objects.ObjectIterators$ArrayIterator:
    java.lang.Object[] array -> array
    int offset -> offset
    int length -> length
    int curr -> curr
    void <init>(java.lang.Object[],int,int) -> <init>
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    java.lang.Object next() -> next
    java.lang.Object previous() -> previous
    int skip(int) -> skip
    int back(int) -> back
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
it.unimi.dsi.fastutil.objects.ObjectIterators$EmptyIterator -> it.unimi.dsi.fastutil.objects.ObjectIterators$EmptyIterator:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    java.lang.Object next() -> next
    java.lang.Object previous() -> previous
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    int skip(int) -> skip
    int back(int) -> back
    java.lang.Object clone() -> clone
    java.lang.Object readResolve() -> readResolve
it.unimi.dsi.fastutil.objects.ObjectIterators$IteratorConcatenator -> it.unimi.dsi.fastutil.objects.ObjectIterators$IteratorConcatenator:
    it.unimi.dsi.fastutil.objects.ObjectIterator[] a -> a
    int offset -> offset
    int length -> length
    int lastOffset -> lastOffset
    void <init>(it.unimi.dsi.fastutil.objects.ObjectIterator[],int,int) -> <init>
    void advance() -> advance
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
    int skip(int) -> skip
it.unimi.dsi.fastutil.objects.ObjectIterators$IteratorWrapper -> it.unimi.dsi.fastutil.objects.ObjectIterators$IteratorWrapper:
    java.util.Iterator i -> i
    void <init>(java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
it.unimi.dsi.fastutil.objects.ObjectIterators$ListIteratorWrapper -> it.unimi.dsi.fastutil.objects.ObjectIterators$ListIteratorWrapper:
    java.util.ListIterator i -> i
    void <init>(java.util.ListIterator) -> <init>
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    void set(java.lang.Object) -> set
    void add(java.lang.Object) -> add
    void remove() -> remove
    java.lang.Object next() -> next
    java.lang.Object previous() -> previous
it.unimi.dsi.fastutil.objects.ObjectIterators$SingletonIterator -> it.unimi.dsi.fastutil.objects.ObjectIterators$SingletonIterator:
    java.lang.Object element -> element
    int curr -> curr
    void <init>(java.lang.Object) -> <init>
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    java.lang.Object next() -> next
    java.lang.Object previous() -> previous
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
it.unimi.dsi.fastutil.objects.ObjectIterators$UnmodifiableBidirectionalIterator -> it.unimi.dsi.fastutil.objects.ObjectIterators$UnmodifiableBidirectionalIterator:
    it.unimi.dsi.fastutil.objects.ObjectBidirectionalIterator i -> i
    void <init>(it.unimi.dsi.fastutil.objects.ObjectBidirectionalIterator) -> <init>
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    java.lang.Object next() -> next
    java.lang.Object previous() -> previous
it.unimi.dsi.fastutil.objects.ObjectIterators$UnmodifiableIterator -> it.unimi.dsi.fastutil.objects.ObjectIterators$UnmodifiableIterator:
    it.unimi.dsi.fastutil.objects.ObjectIterator i -> i
    void <init>(it.unimi.dsi.fastutil.objects.ObjectIterator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
it.unimi.dsi.fastutil.objects.ObjectIterators$UnmodifiableListIterator -> it.unimi.dsi.fastutil.objects.ObjectIterators$UnmodifiableListIterator:
    it.unimi.dsi.fastutil.objects.ObjectListIterator i -> i
    void <init>(it.unimi.dsi.fastutil.objects.ObjectListIterator) -> <init>
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    java.lang.Object next() -> next
    java.lang.Object previous() -> previous
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
it.unimi.dsi.fastutil.objects.ObjectList -> it.unimi.dsi.fastutil.objects.ObjectList:
    it.unimi.dsi.fastutil.objects.ObjectListIterator iterator() -> iterator
    it.unimi.dsi.fastutil.objects.ObjectListIterator objectListIterator() -> objectListIterator
    it.unimi.dsi.fastutil.objects.ObjectListIterator objectListIterator(int) -> objectListIterator
    it.unimi.dsi.fastutil.objects.ObjectListIterator listIterator() -> listIterator
    it.unimi.dsi.fastutil.objects.ObjectListIterator listIterator(int) -> listIterator
    it.unimi.dsi.fastutil.objects.ObjectList objectSubList(int,int) -> objectSubList
    it.unimi.dsi.fastutil.objects.ObjectList subList(int,int) -> subList
    void size(int) -> size
    void getElements(int,java.lang.Object[],int,int) -> getElements
    void removeElements(int,int) -> removeElements
    void addElements(int,java.lang.Object[]) -> addElements
    void addElements(int,java.lang.Object[],int,int) -> addElements
it.unimi.dsi.fastutil.objects.ObjectListIterator -> it.unimi.dsi.fastutil.objects.ObjectListIterator:
it.unimi.dsi.fastutil.objects.ObjectSet -> it.unimi.dsi.fastutil.objects.ObjectSet:
    it.unimi.dsi.fastutil.objects.ObjectIterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
it.unimi.dsi.fastutil.shorts.ShortIterator -> it.unimi.dsi.fastutil.shorts.ShortIterator:
    short nextShort() -> nextShort
    int skip(int) -> skip
javax.media.nativewindow.AbstractGraphicsConfiguration -> javax.media.nativewindow.AbstractGraphicsConfiguration:
    java.lang.Object clone() -> clone
    javax.media.nativewindow.AbstractGraphicsScreen getScreen() -> getScreen
    javax.media.nativewindow.CapabilitiesImmutable getChosenCapabilities() -> getChosenCapabilities
    javax.media.nativewindow.CapabilitiesImmutable getRequestedCapabilities() -> getRequestedCapabilities
    javax.media.nativewindow.AbstractGraphicsConfiguration getNativeGraphicsConfiguration() -> getNativeGraphicsConfiguration
javax.media.nativewindow.AbstractGraphicsDevice -> javax.media.nativewindow.AbstractGraphicsDevice:
    boolean DEBUG -> DEBUG
    java.lang.String DEFAULT_CONNECTION -> DEFAULT_CONNECTION
    java.lang.String EXTERNAL_CONNECTION -> EXTERNAL_CONNECTION
    int DEFAULT_UNIT -> DEFAULT_UNIT
    java.lang.Object clone() -> clone
    java.lang.String getType() -> getType
    java.lang.String getConnection() -> getConnection
    int getUnitID() -> getUnitID
    java.lang.String getUniqueID() -> getUniqueID
    long getHandle() -> getHandle
    void lock() -> lock
    void unlock() -> unlock
    void validateLocked() -> validateLocked
    boolean open() -> open
    boolean close() -> close
    boolean isHandleOwner() -> isHandleOwner
    void clearHandleOwner() -> clearHandleOwner
    void <clinit>() -> <clinit>
javax.media.nativewindow.AbstractGraphicsScreen -> javax.media.nativewindow.AbstractGraphicsScreen:
    java.lang.Object clone() -> clone
    javax.media.nativewindow.AbstractGraphicsDevice getDevice() -> getDevice
    int getIndex() -> getIndex
javax.media.nativewindow.Capabilities -> javax.media.nativewindow.Capabilities:
    java.lang.String na_str -> na_str
    int redBits -> redBits
    int greenBits -> greenBits
    int blueBits -> blueBits
    int alphaBits -> alphaBits
    boolean backgroundOpaque -> backgroundOpaque
    int transparentValueRed -> transparentValueRed
    int transparentValueGreen -> transparentValueGreen
    int transparentValueBlue -> transparentValueBlue
    int transparentValueAlpha -> transparentValueAlpha
    boolean onscreen -> onscreen
    boolean isBitmap -> isBitmap
    java.lang.String ESEP -> ESEP
    java.lang.String CSEP -> CSEP
    void <init>() -> <init>
    java.lang.Object cloneMutable() -> cloneMutable
    java.lang.Object clone() -> clone
    javax.media.nativewindow.Capabilities copyFrom(javax.media.nativewindow.CapabilitiesImmutable) -> copyFrom
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(javax.media.nativewindow.CapabilitiesImmutable) -> compareTo
    int getVisualID(javax.media.nativewindow.VisualIDHolder$VIDType) -> getVisualID
    int getRedBits() -> getRedBits
    void setRedBits(int) -> setRedBits
    int getGreenBits() -> getGreenBits
    void setGreenBits(int) -> setGreenBits
    int getBlueBits() -> getBlueBits
    void setBlueBits(int) -> setBlueBits
    int getAlphaBits() -> getAlphaBits
    void setAlphaBits(int) -> setAlphaBits
    void setBackgroundOpaque(boolean) -> setBackgroundOpaque
    boolean isBackgroundOpaque() -> isBackgroundOpaque
    void setOnscreen(boolean) -> setOnscreen
    boolean isOnscreen() -> isOnscreen
    void setBitmap(boolean) -> setBitmap
    boolean isBitmap() -> isBitmap
    int getTransparentRedValue() -> getTransparentRedValue
    int getTransparentGreenValue() -> getTransparentGreenValue
    int getTransparentBlueValue() -> getTransparentBlueValue
    int getTransparentAlphaValue() -> getTransparentAlphaValue
    void setTransparentRedValue(int) -> setTransparentRedValue
    void setTransparentGreenValue(int) -> setTransparentGreenValue
    void setTransparentBlueValue(int) -> setTransparentBlueValue
    void setTransparentAlphaValue(int) -> setTransparentAlphaValue
    java.lang.StringBuilder toString(java.lang.StringBuilder) -> toString
    java.lang.String toString() -> toString
    java.lang.StringBuilder onoffScreenToString(java.lang.StringBuilder) -> onoffScreenToString
    java.lang.StringBuilder toString(java.lang.StringBuilder,boolean) -> toString
    java.lang.String toHexString(int) -> toHexString
    int compareTo(java.lang.Object) -> compareTo
javax.media.nativewindow.Capabilities$1 -> javax.media.nativewindow.Capabilities$1:
    int[] $SwitchMap$javax$media$nativewindow$VisualIDHolder$VIDType -> $SwitchMap$javax$media$nativewindow$VisualIDHolder$VIDType
    void <clinit>() -> <clinit>
javax.media.nativewindow.CapabilitiesChooser -> javax.media.nativewindow.CapabilitiesChooser:
    int chooseCapabilities(javax.media.nativewindow.CapabilitiesImmutable,java.util.List,int) -> chooseCapabilities
javax.media.nativewindow.CapabilitiesImmutable -> javax.media.nativewindow.CapabilitiesImmutable:
    int getRedBits() -> getRedBits
    int getGreenBits() -> getGreenBits
    int getBlueBits() -> getBlueBits
    int getAlphaBits() -> getAlphaBits
    boolean isBackgroundOpaque() -> isBackgroundOpaque
    boolean isOnscreen() -> isOnscreen
    boolean isBitmap() -> isBitmap
    int getTransparentRedValue() -> getTransparentRedValue
    int getTransparentGreenValue() -> getTransparentGreenValue
    int getTransparentBlueValue() -> getTransparentBlueValue
    int getTransparentAlphaValue() -> getTransparentAlphaValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.StringBuilder toString(java.lang.StringBuilder) -> toString
    java.lang.String toString() -> toString
javax.media.nativewindow.DefaultGraphicsConfiguration -> javax.media.nativewindow.DefaultGraphicsConfiguration:
    boolean DEBUG -> DEBUG
    javax.media.nativewindow.AbstractGraphicsScreen screen -> screen
    javax.media.nativewindow.CapabilitiesImmutable capabilitiesChosen -> capabilitiesChosen
    javax.media.nativewindow.CapabilitiesImmutable capabilitiesRequested -> capabilitiesRequested
    void <init>(javax.media.nativewindow.AbstractGraphicsScreen,javax.media.nativewindow.CapabilitiesImmutable,javax.media.nativewindow.CapabilitiesImmutable) -> <init>
    java.lang.Object clone() -> clone
    javax.media.nativewindow.AbstractGraphicsScreen getScreen() -> getScreen
    javax.media.nativewindow.CapabilitiesImmutable getChosenCapabilities() -> getChosenCapabilities
    javax.media.nativewindow.CapabilitiesImmutable getRequestedCapabilities() -> getRequestedCapabilities
    javax.media.nativewindow.AbstractGraphicsConfiguration getNativeGraphicsConfiguration() -> getNativeGraphicsConfiguration
    int getVisualID(javax.media.nativewindow.VisualIDHolder$VIDType) -> getVisualID
    void setChosenCapabilities(javax.media.nativewindow.CapabilitiesImmutable) -> setChosenCapabilities
    void setScreen(javax.media.nativewindow.AbstractGraphicsScreen) -> setScreen
    java.lang.String toString() -> toString
    java.lang.String toHexString(int) -> toHexString
    java.lang.String toHexString(long) -> toHexString
    void <clinit>() -> <clinit>
javax.media.nativewindow.DefaultGraphicsDevice -> javax.media.nativewindow.DefaultGraphicsDevice:
    java.lang.String separator -> separator
    java.lang.String type -> type
    java.lang.String connection -> connection
    int unitID -> unitID
    java.lang.String uniqueID -> uniqueID
    long handle -> handle
    javax.media.nativewindow.ToolkitLock toolkitLock -> toolkitLock
    void <init>(java.lang.String,java.lang.String,int) -> <init>
    void <init>(java.lang.String,java.lang.String,int,long) -> <init>
    void <init>(java.lang.String,java.lang.String,int,long,javax.media.nativewindow.ToolkitLock) -> <init>
    java.lang.Object clone() -> clone
    java.lang.String getType() -> getType
    java.lang.String getConnection() -> getConnection
    int getUnitID() -> getUnitID
    java.lang.String getUniqueID() -> getUniqueID
    long getHandle() -> getHandle
    void lock() -> lock
    void validateLocked() -> validateLocked
    void unlock() -> unlock
    boolean open() -> open
    boolean close() -> close
    boolean isHandleOwner() -> isHandleOwner
    void clearHandleOwner() -> clearHandleOwner
    java.lang.String toString() -> toString
    long setHandle(long) -> setHandle
    java.lang.Object getHandleOwnership() -> getHandleOwnership
    java.lang.Object setHandleOwnership(java.lang.Object) -> setHandleOwnership
    void swapDeviceHandleAndOwnership(javax.media.nativewindow.DefaultGraphicsDevice,javax.media.nativewindow.DefaultGraphicsDevice) -> swapDeviceHandleAndOwnership
    javax.media.nativewindow.ToolkitLock setToolkitLock(javax.media.nativewindow.ToolkitLock) -> setToolkitLock
    javax.media.nativewindow.ToolkitLock getToolkitLock() -> getToolkitLock
    java.lang.String getUniqueID(java.lang.String,java.lang.String,int) -> getUniqueID
javax.media.nativewindow.DefaultGraphicsScreen -> javax.media.nativewindow.DefaultGraphicsScreen:
    javax.media.nativewindow.AbstractGraphicsDevice device -> device
    int idx -> idx
    void <init>(javax.media.nativewindow.AbstractGraphicsDevice,int) -> <init>
    javax.media.nativewindow.AbstractGraphicsScreen createDefault(java.lang.String) -> createDefault
    java.lang.Object clone() -> clone
    javax.media.nativewindow.AbstractGraphicsDevice getDevice() -> getDevice
    int getIndex() -> getIndex
    java.lang.String toString() -> toString
javax.media.nativewindow.GraphicsConfigurationFactory -> javax.media.nativewindow.GraphicsConfigurationFactory:
    boolean DEBUG -> DEBUG
    java.util.Map registeredFactories -> registeredFactories
    javax.media.nativewindow.GraphicsConfigurationFactory$DeviceCapsType defaultDeviceCapsType -> defaultDeviceCapsType
    boolean initialized -> initialized
    void initSingleton() -> initSingleton
    void shutdown() -> shutdown
    java.lang.String getThreadName() -> getThreadName
    java.lang.String toHexString(int) -> toHexString
    java.lang.String toHexString(long) -> toHexString
    void <init>() -> <init>
    javax.media.nativewindow.GraphicsConfigurationFactory getFactory(javax.media.nativewindow.AbstractGraphicsDevice,javax.media.nativewindow.CapabilitiesImmutable) -> getFactory
    javax.media.nativewindow.GraphicsConfigurationFactory getFactory(java.lang.Class,java.lang.Class) -> getFactory
    java.util.ArrayList getAllAssignableClassesFrom(java.lang.Class,java.lang.Class,boolean) -> getAllAssignableClassesFrom
    void getAllAssignableClassesFrom(java.lang.Class,java.lang.Class,boolean,java.util.List,java.util.List) -> getAllAssignableClassesFrom
    void dumpFactories() -> dumpFactories
    javax.media.nativewindow.GraphicsConfigurationFactory registerFactory(java.lang.Class,java.lang.Class,javax.media.nativewindow.GraphicsConfigurationFactory) -> registerFactory
    javax.media.nativewindow.AbstractGraphicsConfiguration chooseGraphicsConfiguration(javax.media.nativewindow.CapabilitiesImmutable,javax.media.nativewindow.CapabilitiesImmutable,javax.media.nativewindow.CapabilitiesChooser,javax.media.nativewindow.AbstractGraphicsScreen,int) -> chooseGraphicsConfiguration
    javax.media.nativewindow.AbstractGraphicsConfiguration chooseGraphicsConfigurationImpl(javax.media.nativewindow.CapabilitiesImmutable,javax.media.nativewindow.CapabilitiesImmutable,javax.media.nativewindow.CapabilitiesChooser,javax.media.nativewindow.AbstractGraphicsScreen,int) -> chooseGraphicsConfigurationImpl
    void <clinit>() -> <clinit>
javax.media.nativewindow.GraphicsConfigurationFactory$DeviceCapsType -> javax.media.nativewindow.GraphicsConfigurationFactory$DeviceCapsType:
    java.lang.Class deviceType -> deviceType
    java.lang.Class capsType -> capsType
    int hash32 -> hash32
    void <init>(java.lang.Class,java.lang.Class) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
javax.media.nativewindow.MutableSurface -> javax.media.nativewindow.MutableSurface:
    void setSurfaceHandle(long) -> setSurfaceHandle
javax.media.nativewindow.NativeSurface -> javax.media.nativewindow.NativeSurface:
    int LOCK_SURFACE_UNLOCKED -> LOCK_SURFACE_UNLOCKED
    int LOCK_SURFACE_NOT_READY -> LOCK_SURFACE_NOT_READY
    int LOCK_SURFACE_CHANGED -> LOCK_SURFACE_CHANGED
    int LOCK_SUCCESS -> LOCK_SUCCESS
    int lockSurface() -> lockSurface
    void unlockSurface() -> unlockSurface
    boolean isSurfaceLockedByOtherThread() -> isSurfaceLockedByOtherThread
    java.lang.Thread getSurfaceLockOwner() -> getSurfaceLockOwner
    boolean surfaceSwap() -> surfaceSwap
    void addSurfaceUpdatedListener(javax.media.nativewindow.SurfaceUpdatedListener) -> addSurfaceUpdatedListener
    void addSurfaceUpdatedListener(int,javax.media.nativewindow.SurfaceUpdatedListener) -> addSurfaceUpdatedListener
    void removeSurfaceUpdatedListener(javax.media.nativewindow.SurfaceUpdatedListener) -> removeSurfaceUpdatedListener
    long getSurfaceHandle() -> getSurfaceHandle
    int getSurfaceWidth() -> getSurfaceWidth
    int getSurfaceHeight() -> getSurfaceHeight
    int[] convertToWindowUnits(int[]) -> convertToWindowUnits
    int[] convertToPixelUnits(int[]) -> convertToPixelUnits
    javax.media.nativewindow.AbstractGraphicsConfiguration getGraphicsConfiguration() -> getGraphicsConfiguration
    long getDisplayHandle() -> getDisplayHandle
    int getScreenIndex() -> getScreenIndex
javax.media.nativewindow.NativeSurfaceHolder -> javax.media.nativewindow.NativeSurfaceHolder:
    javax.media.nativewindow.NativeSurface getNativeSurface() -> getNativeSurface
javax.media.nativewindow.NativeWindow -> javax.media.nativewindow.NativeWindow:
    javax.media.nativewindow.NativeSurface getNativeSurface() -> getNativeSurface
    void destroy() -> destroy
    javax.media.nativewindow.NativeWindow getParent() -> getParent
    long getWindowHandle() -> getWindowHandle
    javax.media.nativewindow.util.InsetsImmutable getInsets() -> getInsets
    int getX() -> getX
    int getY() -> getY
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    javax.media.nativewindow.util.Point getLocationOnScreen(javax.media.nativewindow.util.Point) -> getLocationOnScreen
    boolean hasFocus() -> hasFocus
javax.media.nativewindow.NativeWindowException -> javax.media.nativewindow.NativeWindowException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
    void <init>(java.lang.Throwable) -> <init>
javax.media.nativewindow.NativeWindowFactory -> javax.media.nativewindow.NativeWindowFactory:
    boolean DEBUG -> DEBUG
    java.lang.String TYPE_EGL -> TYPE_EGL
    java.lang.String TYPE_WINDOWS -> TYPE_WINDOWS
    java.lang.String TYPE_X11 -> TYPE_X11
    java.lang.String TYPE_BCM_VC_IV -> TYPE_BCM_VC_IV
    java.lang.String TYPE_ANDROID -> TYPE_ANDROID
    java.lang.String TYPE_MACOSX -> TYPE_MACOSX
    java.lang.String TYPE_AWT -> TYPE_AWT
    java.lang.String TYPE_DEFAULT -> TYPE_DEFAULT
    java.lang.String nativeWindowingTypePure -> nativeWindowingTypePure
    java.lang.String nativeWindowingTypeCustom -> nativeWindowingTypeCustom
    javax.media.nativewindow.NativeWindowFactory defaultFactory -> defaultFactory
    java.util.Map registeredFactories -> registeredFactories
    java.lang.Class nativeWindowClass -> nativeWindowClass
    boolean isAWTAvailable -> isAWTAvailable
    java.lang.String JAWTUtilClassName -> JAWTUtilClassName
    java.lang.String X11UtilClassName -> X11UtilClassName
    java.lang.String OSXUtilClassName -> OSXUtilClassName
    java.lang.String GDIClassName -> GDIClassName
    javax.media.nativewindow.ToolkitLock jawtUtilJAWTToolkitLock -> jawtUtilJAWTToolkitLock
    boolean requiresToolkitLock -> requiresToolkitLock
    boolean desktopHasThreadingIssues -> desktopHasThreadingIssues
    boolean isJVMShuttingDown -> isJVMShuttingDown
    java.util.List customShutdownHooks -> customShutdownHooks
    boolean initialized -> initialized
    void <init>() -> <init>
    boolean guessBroadcomVCIV() -> guessBroadcomVCIV
    java.lang.String _getNativeWindowingType() -> _getNativeWindowingType
    void initSingletonNativeImpl(java.lang.ClassLoader) -> initSingletonNativeImpl
    boolean isJVMShuttingDown() -> isJVMShuttingDown
    void addCustomShutdownHook(boolean,java.lang.Runnable) -> addCustomShutdownHook
    void shutdown(boolean) -> shutdown
    void shutdownNativeImpl(java.lang.ClassLoader) -> shutdownNativeImpl
    boolean isInitialized() -> isInitialized
    void initSingleton() -> initSingleton
    boolean requiresToolkitLock() -> requiresToolkitLock
    boolean isAWTAvailable() -> isAWTAvailable
    java.lang.String getNativeWindowType(boolean) -> getNativeWindowType
    void setDefaultFactory(javax.media.nativewindow.NativeWindowFactory) -> setDefaultFactory
    javax.media.nativewindow.NativeWindowFactory getDefaultFactory() -> getDefaultFactory
    javax.media.nativewindow.ToolkitLock getAWTToolkitLock() -> getAWTToolkitLock
    javax.media.nativewindow.ToolkitLock getNullToolkitLock() -> getNullToolkitLock
    javax.media.nativewindow.ToolkitLock getDefaultToolkitLock() -> getDefaultToolkitLock
    javax.media.nativewindow.ToolkitLock getDefaultToolkitLock(java.lang.String) -> getDefaultToolkitLock
    javax.media.nativewindow.ToolkitLock getDefaultToolkitLock(java.lang.String,long) -> getDefaultToolkitLock
    javax.media.nativewindow.AbstractGraphicsScreen createScreen(javax.media.nativewindow.AbstractGraphicsDevice,int) -> createScreen
    javax.media.nativewindow.NativeWindowFactory getFactory(java.lang.Class) -> getFactory
    void registerFactory(java.lang.Class,javax.media.nativewindow.NativeWindowFactory) -> registerFactory
    javax.media.nativewindow.NativeWindow getNativeWindow(java.lang.Object,javax.media.nativewindow.AbstractGraphicsConfiguration) -> getNativeWindow
    javax.media.nativewindow.NativeWindow getNativeWindowImpl(java.lang.Object,javax.media.nativewindow.AbstractGraphicsConfiguration) -> getNativeWindowImpl
    javax.media.nativewindow.OffscreenLayerSurface getOffscreenLayerSurface(javax.media.nativewindow.NativeSurface,boolean) -> getOffscreenLayerSurface
    boolean isNativeVisualIDValidForProcessing(int) -> isNativeVisualIDValidForProcessing
    javax.media.nativewindow.AbstractGraphicsDevice createDevice(java.lang.String,boolean) -> createDevice
    javax.media.nativewindow.NativeWindow createWrappedWindow(javax.media.nativewindow.AbstractGraphicsScreen,long,long,com.jogamp.nativewindow.UpstreamWindowHookMutableSizePos) -> createWrappedWindow
    javax.media.nativewindow.util.PointImmutable getLocationOnScreen(javax.media.nativewindow.NativeWindow) -> getLocationOnScreen
    void <clinit>() -> <clinit>
javax.media.nativewindow.NativeWindowFactory$1 -> javax.media.nativewindow.NativeWindowFactory$1:
    java.io.File vcliblocation -> vcliblocation
    void <init>() -> <init>
    java.lang.Boolean run() -> run
    java.lang.Object run() -> run
javax.media.nativewindow.NativeWindowFactory$2 -> javax.media.nativewindow.NativeWindowFactory$2:
    boolean[] val$_DEBUG -> val$_DEBUG
    java.lang.String[] val$_tmp -> val$_tmp
    void <init>(boolean[],java.lang.String[]) -> <init>
    java.lang.Object run() -> run
javax.media.nativewindow.NativeWindowFactory$2$1 -> javax.media.nativewindow.NativeWindowFactory$2$1:
    javax.media.nativewindow.NativeWindowFactory$2 this$0 -> this$0
    void <init>(javax.media.nativewindow.NativeWindowFactory$2) -> <init>
    void run() -> run
javax.media.nativewindow.NativeWindowFactory$3 -> javax.media.nativewindow.NativeWindowFactory$3:
    void <init>() -> <init>
    java.lang.reflect.Method[] run() -> run
    java.lang.Object run() -> run
javax.media.nativewindow.NativeWindowFactory$4 -> javax.media.nativewindow.NativeWindowFactory$4:
    int[] $SwitchMap$com$jogamp$common$os$Platform$OSType -> $SwitchMap$com$jogamp$common$os$Platform$OSType
    void <clinit>() -> <clinit>
javax.media.nativewindow.OffscreenLayerOption -> javax.media.nativewindow.OffscreenLayerOption:
    void setShallUseOffscreenLayer(boolean) -> setShallUseOffscreenLayer
    boolean getShallUseOffscreenLayer() -> getShallUseOffscreenLayer
    boolean isOffscreenLayerSurfaceEnabled() -> isOffscreenLayerSurfaceEnabled
javax.media.nativewindow.OffscreenLayerSurface -> javax.media.nativewindow.OffscreenLayerSurface:
    void attachSurfaceLayer(long) -> attachSurfaceLayer
    void detachSurfaceLayer() -> detachSurfaceLayer
    long getAttachedSurfaceLayer() -> getAttachedSurfaceLayer
    boolean isSurfaceLayerAttached() -> isSurfaceLayerAttached
    void setChosenCapabilities(javax.media.nativewindow.CapabilitiesImmutable) -> setChosenCapabilities
    com.jogamp.common.util.locks.RecursiveLock getLock() -> getLock
    boolean setCursor(javax.media.nativewindow.util.PixelRectangle,javax.media.nativewindow.util.PointImmutable) -> setCursor
    boolean hideCursor() -> hideCursor
javax.media.nativewindow.ProxySurface -> javax.media.nativewindow.ProxySurface:
    boolean DEBUG -> DEBUG
    int OPT_PROXY_OWNS_UPSTREAM_SURFACE -> OPT_PROXY_OWNS_UPSTREAM_SURFACE
    int OPT_PROXY_OWNS_UPSTREAM_DEVICE -> OPT_PROXY_OWNS_UPSTREAM_DEVICE
    int OPT_UPSTREAM_WINDOW_INVISIBLE -> OPT_UPSTREAM_WINDOW_INVISIBLE
    void setGraphicsConfiguration(javax.media.nativewindow.AbstractGraphicsConfiguration) -> setGraphicsConfiguration
    javax.media.nativewindow.NativeSurface getUpstreamSurface() -> getUpstreamSurface
    javax.media.nativewindow.UpstreamSurfaceHook getUpstreamSurfaceHook() -> getUpstreamSurfaceHook
    void setUpstreamSurfaceHook(javax.media.nativewindow.UpstreamSurfaceHook) -> setUpstreamSurfaceHook
    void enableUpstreamSurfaceHookLifecycle(boolean) -> enableUpstreamSurfaceHookLifecycle
    void createNotify() -> createNotify
    void destroyNotify() -> destroyNotify
    java.lang.StringBuilder getUpstreamOptionBits(java.lang.StringBuilder) -> getUpstreamOptionBits
    int getUpstreamOptionBits() -> getUpstreamOptionBits
    boolean containsUpstreamOptionBits(int) -> containsUpstreamOptionBits
    void addUpstreamOptionBits(int) -> addUpstreamOptionBits
    void clearUpstreamOptionBits(int) -> clearUpstreamOptionBits
    java.lang.StringBuilder toString(java.lang.StringBuilder) -> toString
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
javax.media.nativewindow.ScalableSurface -> javax.media.nativewindow.ScalableSurface:
    int IDENTITY_PIXELSCALE -> IDENTITY_PIXELSCALE
    int AUTOMAX_PIXELSCALE -> AUTOMAX_PIXELSCALE
    void setSurfaceScale(int[]) -> setSurfaceScale
    int[] getRequestedSurfaceScale(int[]) -> getRequestedSurfaceScale
    int[] getCurrentSurfaceScale(int[]) -> getCurrentSurfaceScale
    int[] getNativeSurfaceScale(int[]) -> getNativeSurfaceScale
javax.media.nativewindow.SurfaceUpdatedListener -> javax.media.nativewindow.SurfaceUpdatedListener:
    void surfaceUpdated(java.lang.Object,javax.media.nativewindow.NativeSurface,long) -> surfaceUpdated
javax.media.nativewindow.ToolkitLock -> javax.media.nativewindow.ToolkitLock:
    boolean DEBUG -> DEBUG
    boolean TRACE_LOCK -> TRACE_LOCK
    void lock() -> lock
    void unlock() -> unlock
    void validateLocked() -> validateLocked
    void dispose() -> dispose
    void <clinit>() -> <clinit>
javax.media.nativewindow.UpstreamSurfaceHook -> javax.media.nativewindow.UpstreamSurfaceHook:
    void create(javax.media.nativewindow.ProxySurface) -> create
    void destroy(javax.media.nativewindow.ProxySurface) -> destroy
    javax.media.nativewindow.NativeSurface getUpstreamSurface() -> getUpstreamSurface
    int getSurfaceWidth(javax.media.nativewindow.ProxySurface) -> getSurfaceWidth
    int getSurfaceHeight(javax.media.nativewindow.ProxySurface) -> getSurfaceHeight
javax.media.nativewindow.UpstreamSurfaceHook$MutableSize -> javax.media.nativewindow.UpstreamSurfaceHook$MutableSize:
    void setSurfaceSize(int,int) -> setSurfaceSize
javax.media.nativewindow.VisualIDHolder -> javax.media.nativewindow.VisualIDHolder:
    int VID_UNDEFINED -> VID_UNDEFINED
    int getVisualID(javax.media.nativewindow.VisualIDHolder$VIDType) -> getVisualID
javax.media.nativewindow.VisualIDHolder$VIDType -> javax.media.nativewindow.VisualIDHolder$VIDType:
    javax.media.nativewindow.VisualIDHolder$VIDType INTRINSIC -> INTRINSIC
    javax.media.nativewindow.VisualIDHolder$VIDType NATIVE -> NATIVE
    javax.media.nativewindow.VisualIDHolder$VIDType EGL_CONFIG -> EGL_CONFIG
    javax.media.nativewindow.VisualIDHolder$VIDType X11_XVISUAL -> X11_XVISUAL
    javax.media.nativewindow.VisualIDHolder$VIDType X11_FBCONFIG -> X11_FBCONFIG
    javax.media.nativewindow.VisualIDHolder$VIDType WIN32_PFD -> WIN32_PFD
    int id -> id
    javax.media.nativewindow.VisualIDHolder$VIDType[] $VALUES -> $VALUES
    javax.media.nativewindow.VisualIDHolder$VIDType[] values() -> values
    javax.media.nativewindow.VisualIDHolder$VIDType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
javax.media.nativewindow.WindowClosingProtocol -> javax.media.nativewindow.WindowClosingProtocol:
    javax.media.nativewindow.WindowClosingProtocol$WindowClosingMode getDefaultCloseOperation() -> getDefaultCloseOperation
    javax.media.nativewindow.WindowClosingProtocol$WindowClosingMode setDefaultCloseOperation(javax.media.nativewindow.WindowClosingProtocol$WindowClosingMode) -> setDefaultCloseOperation
javax.media.nativewindow.WindowClosingProtocol$WindowClosingMode -> javax.media.nativewindow.WindowClosingProtocol$WindowClosingMode:
    javax.media.nativewindow.WindowClosingProtocol$WindowClosingMode DO_NOTHING_ON_CLOSE -> DO_NOTHING_ON_CLOSE
    javax.media.nativewindow.WindowClosingProtocol$WindowClosingMode DISPOSE_ON_CLOSE -> DISPOSE_ON_CLOSE
    javax.media.nativewindow.WindowClosingProtocol$WindowClosingMode[] $VALUES -> $VALUES
    javax.media.nativewindow.WindowClosingProtocol$WindowClosingMode[] values() -> values
    javax.media.nativewindow.WindowClosingProtocol$WindowClosingMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
javax.media.nativewindow.util.Dimension -> javax.media.nativewindow.util.Dimension:
    int width -> width
    int height -> height
    void <init>() -> <init>
    void <init>(int[]) -> <init>
    void <init>(int,int) -> <init>
    java.lang.Object cloneMutable() -> cloneMutable
    java.lang.Object clone() -> clone
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    void set(int,int) -> set
    void setWidth(int) -> setWidth
    void setHeight(int) -> setHeight
    javax.media.nativewindow.util.Dimension scale(int) -> scale
    javax.media.nativewindow.util.Dimension add(javax.media.nativewindow.util.Dimension) -> add
    java.lang.String toString() -> toString
    int compareTo(javax.media.nativewindow.util.DimensionImmutable) -> compareTo
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int compareTo(java.lang.Object) -> compareTo
javax.media.nativewindow.util.DimensionImmutable -> javax.media.nativewindow.util.DimensionImmutable:
    int getHeight() -> getHeight
    int getWidth() -> getWidth
    int compareTo(javax.media.nativewindow.util.DimensionImmutable) -> compareTo
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
javax.media.nativewindow.util.Insets -> javax.media.nativewindow.util.Insets:
    javax.media.nativewindow.util.InsetsImmutable zeroInsets -> zeroInsets
    int l -> l
    int r -> r
    int t -> t
    int b -> b
    javax.media.nativewindow.util.InsetsImmutable getZero() -> getZero
    void <init>() -> <init>
    void <init>(int,int,int,int) -> <init>
    java.lang.Object cloneMutable() -> cloneMutable
    java.lang.Object clone() -> clone
    int getLeftWidth() -> getLeftWidth
    int getRightWidth() -> getRightWidth
    int getTotalWidth() -> getTotalWidth
    int getTopHeight() -> getTopHeight
    int getBottomHeight() -> getBottomHeight
    int getTotalHeight() -> getTotalHeight
    void set(int,int,int,int) -> set
    void setLeftWidth(int) -> setLeftWidth
    void setRightWidth(int) -> setRightWidth
    void setTopHeight(int) -> setTopHeight
    void setBottomHeight(int) -> setBottomHeight
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
javax.media.nativewindow.util.InsetsImmutable -> javax.media.nativewindow.util.InsetsImmutable:
    int getLeftWidth() -> getLeftWidth
    int getRightWidth() -> getRightWidth
    int getTotalWidth() -> getTotalWidth
    int getTopHeight() -> getTopHeight
    int getBottomHeight() -> getBottomHeight
    int getTotalHeight() -> getTotalHeight
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
javax.media.nativewindow.util.PixelFormat -> javax.media.nativewindow.util.PixelFormat:
    javax.media.nativewindow.util.PixelFormat LUMINANCE -> LUMINANCE
    javax.media.nativewindow.util.PixelFormat RGB888 -> RGB888
    javax.media.nativewindow.util.PixelFormat BGR888 -> BGR888
    javax.media.nativewindow.util.PixelFormat RGBA8888 -> RGBA8888
    javax.media.nativewindow.util.PixelFormat ABGR8888 -> ABGR8888
    javax.media.nativewindow.util.PixelFormat ARGB8888 -> ARGB8888
    javax.media.nativewindow.util.PixelFormat BGRA8888 -> BGRA8888
    int componentCount -> componentCount
    int bitsPerPixel -> bitsPerPixel
    javax.media.nativewindow.util.PixelFormat[] $VALUES -> $VALUES
    javax.media.nativewindow.util.PixelFormat[] values() -> values
    javax.media.nativewindow.util.PixelFormat valueOf(java.lang.String) -> valueOf
    int bytesPerPixel() -> bytesPerPixel
    void <init>(java.lang.String,int,int,int) -> <init>
    void <clinit>() -> <clinit>
javax.media.nativewindow.util.PixelFormatUtil -> javax.media.nativewindow.util.PixelFormatUtil:
    void <init>() -> <init>
    javax.media.nativewindow.util.PixelFormat getReversed(javax.media.nativewindow.util.PixelFormat) -> getReversed
    int getValue32(javax.media.nativewindow.util.PixelFormat,java.nio.ByteBuffer,int) -> getValue32
    int convertToInt32(javax.media.nativewindow.util.PixelFormat,byte,byte,byte,byte) -> convertToInt32
    int convertToInt32(javax.media.nativewindow.util.PixelFormat,javax.media.nativewindow.util.PixelFormat,java.nio.ByteBuffer,int) -> convertToInt32
    int convertToInt32(javax.media.nativewindow.util.PixelFormat,javax.media.nativewindow.util.PixelFormat,int) -> convertToInt32
    javax.media.nativewindow.util.PixelRectangle convert32(javax.media.nativewindow.util.PixelRectangle,javax.media.nativewindow.util.PixelFormat,int,boolean,boolean) -> convert32
    void convert32(javax.media.nativewindow.util.PixelFormatUtil$PixelSink32,javax.media.nativewindow.util.PixelRectangle) -> convert32
    void convert32(javax.media.nativewindow.util.PixelFormatUtil$PixelSink32,java.nio.ByteBuffer,javax.media.nativewindow.util.PixelFormat,boolean,int,int,int) -> convert32
javax.media.nativewindow.util.PixelFormatUtil$1 -> javax.media.nativewindow.util.PixelFormatUtil$1:
    int val$destStride -> val$destStride
    int val$bpp -> val$bpp
    java.nio.ByteBuffer val$bb -> val$bb
    javax.media.nativewindow.util.PixelFormat val$destFmt -> val$destFmt
    boolean val$isGLOriented -> val$isGLOriented
    void <init>(int,int,java.nio.ByteBuffer,javax.media.nativewindow.util.PixelFormat,boolean) -> <init>
    void store(int,int,int) -> store
    javax.media.nativewindow.util.PixelFormat getPixelformat() -> getPixelformat
    int getStride() -> getStride
    boolean isGLOriented() -> isGLOriented
javax.media.nativewindow.util.PixelFormatUtil$2 -> javax.media.nativewindow.util.PixelFormatUtil$2:
    int[] $SwitchMap$javax$media$nativewindow$util$PixelFormat -> $SwitchMap$javax$media$nativewindow$util$PixelFormat
    void <clinit>() -> <clinit>
javax.media.nativewindow.util.PixelFormatUtil$PixelSink -> javax.media.nativewindow.util.PixelFormatUtil$PixelSink:
    javax.media.nativewindow.util.PixelFormat getPixelformat() -> getPixelformat
    int getStride() -> getStride
    boolean isGLOriented() -> isGLOriented
javax.media.nativewindow.util.PixelFormatUtil$PixelSink32 -> javax.media.nativewindow.util.PixelFormatUtil$PixelSink32:
    void store(int,int,int) -> store
javax.media.nativewindow.util.PixelRectangle -> javax.media.nativewindow.util.PixelRectangle:
    int hashCode() -> hashCode
    javax.media.nativewindow.util.PixelFormat getPixelformat() -> getPixelformat
    javax.media.nativewindow.util.DimensionImmutable getSize() -> getSize
    int getStride() -> getStride
    boolean isGLOriented() -> isGLOriented
    java.nio.ByteBuffer getPixels() -> getPixels
    java.lang.String toString() -> toString
javax.media.nativewindow.util.PixelRectangle$GenericPixelRect -> javax.media.nativewindow.util.PixelRectangle$GenericPixelRect:
    javax.media.nativewindow.util.PixelFormat pixelformat -> pixelformat
    javax.media.nativewindow.util.DimensionImmutable size -> size
    int strideInBytes -> strideInBytes
    boolean isGLOriented -> isGLOriented
    java.nio.ByteBuffer pixels -> pixels
    int hashCode -> hashCode
    boolean hashCodeComputed -> hashCodeComputed
    void <init>(javax.media.nativewindow.util.PixelFormat,javax.media.nativewindow.util.DimensionImmutable,int,boolean,java.nio.ByteBuffer) -> <init>
    void <init>(javax.media.nativewindow.util.PixelRectangle) -> <init>
    int hashCode() -> hashCode
    javax.media.nativewindow.util.PixelFormat getPixelformat() -> getPixelformat
    javax.media.nativewindow.util.DimensionImmutable getSize() -> getSize
    int getStride() -> getStride
    boolean isGLOriented() -> isGLOriented
    java.nio.ByteBuffer getPixels() -> getPixels
    java.lang.String toString() -> toString
javax.media.nativewindow.util.Point -> javax.media.nativewindow.util.Point:
    int x -> x
    int y -> y
    void <init>(int,int) -> <init>
    void <init>() -> <init>
    java.lang.Object cloneMutable() -> cloneMutable
    java.lang.Object clone() -> clone
    int compareTo(javax.media.nativewindow.util.PointImmutable) -> compareTo
    boolean equals(java.lang.Object) -> equals
    int getX() -> getX
    int getY() -> getY
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void set(int,int) -> set
    void setX(int) -> setX
    void setY(int) -> setY
    javax.media.nativewindow.util.Point translate(javax.media.nativewindow.util.Point) -> translate
    javax.media.nativewindow.util.Point translate(int,int) -> translate
    javax.media.nativewindow.util.Point scale(int,int) -> scale
    javax.media.nativewindow.util.Point scaleInv(int,int) -> scaleInv
    int compareTo(java.lang.Object) -> compareTo
javax.media.nativewindow.util.PointImmutable -> javax.media.nativewindow.util.PointImmutable:
    int getX() -> getX
    int getY() -> getY
    int compareTo(javax.media.nativewindow.util.PointImmutable) -> compareTo
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
javax.media.nativewindow.util.Rectangle -> javax.media.nativewindow.util.Rectangle:
    int x -> x
    int y -> y
    int width -> width
    int height -> height
    void <init>() -> <init>
    void <init>(int,int,int,int) -> <init>
    java.lang.Object cloneMutable() -> cloneMutable
    java.lang.Object clone() -> clone
    int getX() -> getX
    int getY() -> getY
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    void set(int,int,int,int) -> set
    void setX(int) -> setX
    void setY(int) -> setY
    void setWidth(int) -> setWidth
    void setHeight(int) -> setHeight
    javax.media.nativewindow.util.RectangleImmutable union(javax.media.nativewindow.util.RectangleImmutable) -> union
    javax.media.nativewindow.util.RectangleImmutable union(int,int,int,int) -> union
    javax.media.nativewindow.util.Rectangle union(java.util.List) -> union
    javax.media.nativewindow.util.RectangleImmutable intersection(javax.media.nativewindow.util.RectangleImmutable) -> intersection
    javax.media.nativewindow.util.RectangleImmutable intersection(int,int,int,int) -> intersection
    float coverage(javax.media.nativewindow.util.RectangleImmutable) -> coverage
    javax.media.nativewindow.util.Rectangle scale(int,int) -> scale
    javax.media.nativewindow.util.Rectangle scaleInv(int,int) -> scaleInv
    int compareTo(javax.media.nativewindow.util.RectangleImmutable) -> compareTo
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
javax.media.nativewindow.util.RectangleImmutable -> javax.media.nativewindow.util.RectangleImmutable:
    int getHeight() -> getHeight
    int getWidth() -> getWidth
    int getX() -> getX
    int getY() -> getY
    javax.media.nativewindow.util.RectangleImmutable union(javax.media.nativewindow.util.RectangleImmutable) -> union
    javax.media.nativewindow.util.RectangleImmutable union(int,int,int,int) -> union
    javax.media.nativewindow.util.RectangleImmutable intersection(javax.media.nativewindow.util.RectangleImmutable) -> intersection
    javax.media.nativewindow.util.RectangleImmutable intersection(int,int,int,int) -> intersection
    float coverage(javax.media.nativewindow.util.RectangleImmutable) -> coverage
    int compareTo(javax.media.nativewindow.util.RectangleImmutable) -> compareTo
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
javax.media.nativewindow.util.SurfaceSize -> javax.media.nativewindow.util.SurfaceSize:
    javax.media.nativewindow.util.DimensionImmutable resolution -> resolution
    int bitsPerPixel -> bitsPerPixel
    void <init>(javax.media.nativewindow.util.DimensionImmutable,int) -> <init>
    javax.media.nativewindow.util.DimensionImmutable getResolution() -> getResolution
    int getBitsPerPixel() -> getBitsPerPixel
    java.lang.String toString() -> toString
    int compareTo(javax.media.nativewindow.util.SurfaceSize) -> compareTo
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int compareTo(java.lang.Object) -> compareTo
javax.media.opengl.FPSCounter -> javax.media.opengl.FPSCounter:
    int DEFAULT_FRAMES_PER_INTERVAL -> DEFAULT_FRAMES_PER_INTERVAL
    void setUpdateFPSFrames(int,java.io.PrintStream) -> setUpdateFPSFrames
    void resetFPSCounter() -> resetFPSCounter
    int getUpdateFPSFrames() -> getUpdateFPSFrames
    long getFPSStartTime() -> getFPSStartTime
    long getLastFPSUpdateTime() -> getLastFPSUpdateTime
    long getLastFPSPeriod() -> getLastFPSPeriod
    float getLastFPS() -> getLastFPS
    int getTotalFPSFrames() -> getTotalFPSFrames
    long getTotalFPSDuration() -> getTotalFPSDuration
    float getTotalFPS() -> getTotalFPS
javax.media.opengl.GL -> javax.media.opengl.GL:
    int GL_DEPTH_BUFFER_BIT -> GL_DEPTH_BUFFER_BIT
    int GL_STENCIL_BUFFER_BIT -> GL_STENCIL_BUFFER_BIT
    int GL_COLOR_BUFFER_BIT -> GL_COLOR_BUFFER_BIT
    int GL_FALSE -> GL_FALSE
    int GL_TRUE -> GL_TRUE
    int GL_POINTS -> GL_POINTS
    int GL_LINES -> GL_LINES
    int GL_LINE_LOOP -> GL_LINE_LOOP
    int GL_LINE_STRIP -> GL_LINE_STRIP
    int GL_TRIANGLES -> GL_TRIANGLES
    int GL_TRIANGLE_STRIP -> GL_TRIANGLE_STRIP
    int GL_TRIANGLE_FAN -> GL_TRIANGLE_FAN
    int GL_ZERO -> GL_ZERO
    int GL_ONE -> GL_ONE
    int GL_SRC_COLOR -> GL_SRC_COLOR
    int GL_ONE_MINUS_SRC_COLOR -> GL_ONE_MINUS_SRC_COLOR
    int GL_SRC_ALPHA -> GL_SRC_ALPHA
    int GL_ONE_MINUS_SRC_ALPHA -> GL_ONE_MINUS_SRC_ALPHA
    int GL_DST_ALPHA -> GL_DST_ALPHA
    int GL_ONE_MINUS_DST_ALPHA -> GL_ONE_MINUS_DST_ALPHA
    int GL_DST_COLOR -> GL_DST_COLOR
    int GL_ONE_MINUS_DST_COLOR -> GL_ONE_MINUS_DST_COLOR
    int GL_SRC_ALPHA_SATURATE -> GL_SRC_ALPHA_SATURATE
    int GL_FUNC_ADD -> GL_FUNC_ADD
    int GL_BLEND_EQUATION -> GL_BLEND_EQUATION
    int GL_BLEND_EQUATION_RGB -> GL_BLEND_EQUATION_RGB
    int GL_BLEND_EQUATION_ALPHA -> GL_BLEND_EQUATION_ALPHA
    int GL_FUNC_SUBTRACT -> GL_FUNC_SUBTRACT
    int GL_FUNC_REVERSE_SUBTRACT -> GL_FUNC_REVERSE_SUBTRACT
    int GL_BLEND_DST_RGB -> GL_BLEND_DST_RGB
    int GL_BLEND_SRC_RGB -> GL_BLEND_SRC_RGB
    int GL_BLEND_DST_ALPHA -> GL_BLEND_DST_ALPHA
    int GL_BLEND_SRC_ALPHA -> GL_BLEND_SRC_ALPHA
    int GL_ARRAY_BUFFER -> GL_ARRAY_BUFFER
    int GL_ELEMENT_ARRAY_BUFFER -> GL_ELEMENT_ARRAY_BUFFER
    int GL_ARRAY_BUFFER_BINDING -> GL_ARRAY_BUFFER_BINDING
    int GL_ELEMENT_ARRAY_BUFFER_BINDING -> GL_ELEMENT_ARRAY_BUFFER_BINDING
    int GL_STATIC_DRAW -> GL_STATIC_DRAW
    int GL_DYNAMIC_DRAW -> GL_DYNAMIC_DRAW
    int GL_BUFFER_SIZE -> GL_BUFFER_SIZE
    int GL_BUFFER_USAGE -> GL_BUFFER_USAGE
    int GL_FRONT -> GL_FRONT
    int GL_BACK -> GL_BACK
    int GL_FRONT_AND_BACK -> GL_FRONT_AND_BACK
    int GL_TEXTURE_2D -> GL_TEXTURE_2D
    int GL_CULL_FACE -> GL_CULL_FACE
    int GL_BLEND -> GL_BLEND
    int GL_DITHER -> GL_DITHER
    int GL_STENCIL_TEST -> GL_STENCIL_TEST
    int GL_DEPTH_TEST -> GL_DEPTH_TEST
    int GL_SCISSOR_TEST -> GL_SCISSOR_TEST
    int GL_POLYGON_OFFSET_FILL -> GL_POLYGON_OFFSET_FILL
    int GL_SAMPLE_ALPHA_TO_COVERAGE -> GL_SAMPLE_ALPHA_TO_COVERAGE
    int GL_SAMPLE_COVERAGE -> GL_SAMPLE_COVERAGE
    int GL_NO_ERROR -> GL_NO_ERROR
    int GL_INVALID_ENUM -> GL_INVALID_ENUM
    int GL_INVALID_VALUE -> GL_INVALID_VALUE
    int GL_INVALID_OPERATION -> GL_INVALID_OPERATION
    int GL_OUT_OF_MEMORY -> GL_OUT_OF_MEMORY
    int GL_CW -> GL_CW
    int GL_CCW -> GL_CCW
    int GL_LINE_WIDTH -> GL_LINE_WIDTH
    int GL_ALIASED_POINT_SIZE_RANGE -> GL_ALIASED_POINT_SIZE_RANGE
    int GL_ALIASED_LINE_WIDTH_RANGE -> GL_ALIASED_LINE_WIDTH_RANGE
    int GL_CULL_FACE_MODE -> GL_CULL_FACE_MODE
    int GL_FRONT_FACE -> GL_FRONT_FACE
    int GL_DEPTH_RANGE -> GL_DEPTH_RANGE
    int GL_DEPTH_WRITEMASK -> GL_DEPTH_WRITEMASK
    int GL_DEPTH_CLEAR_VALUE -> GL_DEPTH_CLEAR_VALUE
    int GL_DEPTH_FUNC -> GL_DEPTH_FUNC
    int GL_STENCIL_CLEAR_VALUE -> GL_STENCIL_CLEAR_VALUE
    int GL_STENCIL_FUNC -> GL_STENCIL_FUNC
    int GL_STENCIL_FAIL -> GL_STENCIL_FAIL
    int GL_STENCIL_PASS_DEPTH_FAIL -> GL_STENCIL_PASS_DEPTH_FAIL
    int GL_STENCIL_PASS_DEPTH_PASS -> GL_STENCIL_PASS_DEPTH_PASS
    int GL_STENCIL_REF -> GL_STENCIL_REF
    int GL_STENCIL_VALUE_MASK -> GL_STENCIL_VALUE_MASK
    int GL_STENCIL_WRITEMASK -> GL_STENCIL_WRITEMASK
    int GL_VIEWPORT -> GL_VIEWPORT
    int GL_SCISSOR_BOX -> GL_SCISSOR_BOX
    int GL_COLOR_CLEAR_VALUE -> GL_COLOR_CLEAR_VALUE
    int GL_COLOR_WRITEMASK -> GL_COLOR_WRITEMASK
    int GL_UNPACK_ALIGNMENT -> GL_UNPACK_ALIGNMENT
    int GL_PACK_ALIGNMENT -> GL_PACK_ALIGNMENT
    int GL_MAX_TEXTURE_SIZE -> GL_MAX_TEXTURE_SIZE
    int GL_MAX_VIEWPORT_DIMS -> GL_MAX_VIEWPORT_DIMS
    int GL_SUBPIXEL_BITS -> GL_SUBPIXEL_BITS
    int GL_RED_BITS -> GL_RED_BITS
    int GL_GREEN_BITS -> GL_GREEN_BITS
    int GL_BLUE_BITS -> GL_BLUE_BITS
    int GL_ALPHA_BITS -> GL_ALPHA_BITS
    int GL_DEPTH_BITS -> GL_DEPTH_BITS
    int GL_STENCIL_BITS -> GL_STENCIL_BITS
    int GL_POLYGON_OFFSET_UNITS -> GL_POLYGON_OFFSET_UNITS
    int GL_POLYGON_OFFSET_FACTOR -> GL_POLYGON_OFFSET_FACTOR
    int GL_TEXTURE_BINDING_2D -> GL_TEXTURE_BINDING_2D
    int GL_SAMPLE_BUFFERS -> GL_SAMPLE_BUFFERS
    int GL_SAMPLES -> GL_SAMPLES
    int GL_SAMPLE_COVERAGE_VALUE -> GL_SAMPLE_COVERAGE_VALUE
    int GL_SAMPLE_COVERAGE_INVERT -> GL_SAMPLE_COVERAGE_INVERT
    int GL_NUM_COMPRESSED_TEXTURE_FORMATS -> GL_NUM_COMPRESSED_TEXTURE_FORMATS
    int GL_COMPRESSED_TEXTURE_FORMATS -> GL_COMPRESSED_TEXTURE_FORMATS
    int GL_DONT_CARE -> GL_DONT_CARE
    int GL_FASTEST -> GL_FASTEST
    int GL_NICEST -> GL_NICEST
    int GL_GENERATE_MIPMAP_HINT -> GL_GENERATE_MIPMAP_HINT
    int GL_BYTE -> GL_BYTE
    int GL_UNSIGNED_BYTE -> GL_UNSIGNED_BYTE
    int GL_SHORT -> GL_SHORT
    int GL_FLOAT -> GL_FLOAT
    int GL_FIXED -> GL_FIXED
    int GL_ALPHA -> GL_ALPHA
    int GL_RGB -> GL_RGB
    int GL_RGBA -> GL_RGBA
    int GL_LUMINANCE -> GL_LUMINANCE
    int GL_LUMINANCE_ALPHA -> GL_LUMINANCE_ALPHA
    int GL_UNSIGNED_SHORT_4_4_4_4 -> GL_UNSIGNED_SHORT_4_4_4_4
    int GL_UNSIGNED_SHORT_5_5_5_1 -> GL_UNSIGNED_SHORT_5_5_5_1
    int GL_UNSIGNED_SHORT_5_6_5 -> GL_UNSIGNED_SHORT_5_6_5
    int GL_NEVER -> GL_NEVER
    int GL_LESS -> GL_LESS
    int GL_EQUAL -> GL_EQUAL
    int GL_LEQUAL -> GL_LEQUAL
    int GL_GREATER -> GL_GREATER
    int GL_NOTEQUAL -> GL_NOTEQUAL
    int GL_GEQUAL -> GL_GEQUAL
    int GL_ALWAYS -> GL_ALWAYS
    int GL_KEEP -> GL_KEEP
    int GL_REPLACE -> GL_REPLACE
    int GL_INCR -> GL_INCR
    int GL_DECR -> GL_DECR
    int GL_INVERT -> GL_INVERT
    int GL_INCR_WRAP -> GL_INCR_WRAP
    int GL_DECR_WRAP -> GL_DECR_WRAP
    int GL_VENDOR -> GL_VENDOR
    int GL_RENDERER -> GL_RENDERER
    int GL_VERSION -> GL_VERSION
    int GL_EXTENSIONS -> GL_EXTENSIONS
    int GL_NEAREST -> GL_NEAREST
    int GL_LINEAR -> GL_LINEAR
    int GL_NEAREST_MIPMAP_NEAREST -> GL_NEAREST_MIPMAP_NEAREST
    int GL_LINEAR_MIPMAP_NEAREST -> GL_LINEAR_MIPMAP_NEAREST
    int GL_NEAREST_MIPMAP_LINEAR -> GL_NEAREST_MIPMAP_LINEAR
    int GL_LINEAR_MIPMAP_LINEAR -> GL_LINEAR_MIPMAP_LINEAR
    int GL_TEXTURE_MAG_FILTER -> GL_TEXTURE_MAG_FILTER
    int GL_TEXTURE_MIN_FILTER -> GL_TEXTURE_MIN_FILTER
    int GL_TEXTURE_WRAP_S -> GL_TEXTURE_WRAP_S
    int GL_TEXTURE_WRAP_T -> GL_TEXTURE_WRAP_T
    int GL_TEXTURE -> GL_TEXTURE
    int GL_TEXTURE_CUBE_MAP -> GL_TEXTURE_CUBE_MAP
    int GL_TEXTURE_BINDING_CUBE_MAP -> GL_TEXTURE_BINDING_CUBE_MAP
    int GL_TEXTURE_CUBE_MAP_POSITIVE_X -> GL_TEXTURE_CUBE_MAP_POSITIVE_X
    int GL_TEXTURE_CUBE_MAP_NEGATIVE_X -> GL_TEXTURE_CUBE_MAP_NEGATIVE_X
    int GL_TEXTURE_CUBE_MAP_POSITIVE_Y -> GL_TEXTURE_CUBE_MAP_POSITIVE_Y
    int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y -> GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
    int GL_TEXTURE_CUBE_MAP_POSITIVE_Z -> GL_TEXTURE_CUBE_MAP_POSITIVE_Z
    int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z -> GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
    int GL_MAX_CUBE_MAP_TEXTURE_SIZE -> GL_MAX_CUBE_MAP_TEXTURE_SIZE
    int GL_TEXTURE0 -> GL_TEXTURE0
    int GL_TEXTURE1 -> GL_TEXTURE1
    int GL_TEXTURE2 -> GL_TEXTURE2
    int GL_TEXTURE3 -> GL_TEXTURE3
    int GL_TEXTURE4 -> GL_TEXTURE4
    int GL_TEXTURE5 -> GL_TEXTURE5
    int GL_TEXTURE6 -> GL_TEXTURE6
    int GL_TEXTURE7 -> GL_TEXTURE7
    int GL_TEXTURE8 -> GL_TEXTURE8
    int GL_TEXTURE9 -> GL_TEXTURE9
    int GL_TEXTURE10 -> GL_TEXTURE10
    int GL_TEXTURE11 -> GL_TEXTURE11
    int GL_TEXTURE12 -> GL_TEXTURE12
    int GL_TEXTURE13 -> GL_TEXTURE13
    int GL_TEXTURE14 -> GL_TEXTURE14
    int GL_TEXTURE15 -> GL_TEXTURE15
    int GL_TEXTURE16 -> GL_TEXTURE16
    int GL_TEXTURE17 -> GL_TEXTURE17
    int GL_TEXTURE18 -> GL_TEXTURE18
    int GL_TEXTURE19 -> GL_TEXTURE19
    int GL_TEXTURE20 -> GL_TEXTURE20
    int GL_TEXTURE21 -> GL_TEXTURE21
    int GL_TEXTURE22 -> GL_TEXTURE22
    int GL_TEXTURE23 -> GL_TEXTURE23
    int GL_TEXTURE24 -> GL_TEXTURE24
    int GL_TEXTURE25 -> GL_TEXTURE25
    int GL_TEXTURE26 -> GL_TEXTURE26
    int GL_TEXTURE27 -> GL_TEXTURE27
    int GL_TEXTURE28 -> GL_TEXTURE28
    int GL_TEXTURE29 -> GL_TEXTURE29
    int GL_TEXTURE30 -> GL_TEXTURE30
    int GL_TEXTURE31 -> GL_TEXTURE31
    int GL_ACTIVE_TEXTURE -> GL_ACTIVE_TEXTURE
    int GL_REPEAT -> GL_REPEAT
    int GL_CLAMP_TO_EDGE -> GL_CLAMP_TO_EDGE
    int GL_MIRRORED_REPEAT -> GL_MIRRORED_REPEAT
    int GL_IMPLEMENTATION_COLOR_READ_TYPE -> GL_IMPLEMENTATION_COLOR_READ_TYPE
    int GL_IMPLEMENTATION_COLOR_READ_FORMAT -> GL_IMPLEMENTATION_COLOR_READ_FORMAT
    int GL_FRAMEBUFFER -> GL_FRAMEBUFFER
    int GL_RENDERBUFFER -> GL_RENDERBUFFER
    int GL_RGBA4 -> GL_RGBA4
    int GL_RGB5_A1 -> GL_RGB5_A1
    int GL_RGB565 -> GL_RGB565
    int GL_STENCIL_INDEX8 -> GL_STENCIL_INDEX8
    int GL_RENDERBUFFER_WIDTH -> GL_RENDERBUFFER_WIDTH
    int GL_RENDERBUFFER_HEIGHT -> GL_RENDERBUFFER_HEIGHT
    int GL_RENDERBUFFER_INTERNAL_FORMAT -> GL_RENDERBUFFER_INTERNAL_FORMAT
    int GL_RENDERBUFFER_RED_SIZE -> GL_RENDERBUFFER_RED_SIZE
    int GL_RENDERBUFFER_GREEN_SIZE -> GL_RENDERBUFFER_GREEN_SIZE
    int GL_RENDERBUFFER_BLUE_SIZE -> GL_RENDERBUFFER_BLUE_SIZE
    int GL_RENDERBUFFER_ALPHA_SIZE -> GL_RENDERBUFFER_ALPHA_SIZE
    int GL_RENDERBUFFER_DEPTH_SIZE -> GL_RENDERBUFFER_DEPTH_SIZE
    int GL_RENDERBUFFER_STENCIL_SIZE -> GL_RENDERBUFFER_STENCIL_SIZE
    int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE -> GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
    int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME -> GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
    int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL -> GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
    int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE -> GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
    int GL_COLOR_ATTACHMENT0 -> GL_COLOR_ATTACHMENT0
    int GL_DEPTH_ATTACHMENT -> GL_DEPTH_ATTACHMENT
    int GL_STENCIL_ATTACHMENT -> GL_STENCIL_ATTACHMENT
    int GL_NONE -> GL_NONE
    int GL_FRAMEBUFFER_COMPLETE -> GL_FRAMEBUFFER_COMPLETE
    int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT -> GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
    int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT -> GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
    int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS -> GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS
    int GL_FRAMEBUFFER_INCOMPLETE_FORMATS -> GL_FRAMEBUFFER_INCOMPLETE_FORMATS
    int GL_FRAMEBUFFER_UNSUPPORTED -> GL_FRAMEBUFFER_UNSUPPORTED
    int GL_FRAMEBUFFER_BINDING -> GL_FRAMEBUFFER_BINDING
    int GL_RENDERBUFFER_BINDING -> GL_RENDERBUFFER_BINDING
    int GL_MAX_RENDERBUFFER_SIZE -> GL_MAX_RENDERBUFFER_SIZE
    int GL_INVALID_FRAMEBUFFER_OPERATION -> GL_INVALID_FRAMEBUFFER_OPERATION
    int GL_DEPTH_COMPONENT24 -> GL_DEPTH_COMPONENT24
    int GL_DEPTH_COMPONENT32 -> GL_DEPTH_COMPONENT32
    int GL_WRITE_ONLY -> GL_WRITE_ONLY
    int GL_BUFFER_ACCESS -> GL_BUFFER_ACCESS
    int GL_BUFFER_MAPPED -> GL_BUFFER_MAPPED
    int GL_BUFFER_MAP_POINTER -> GL_BUFFER_MAP_POINTER
    int GL_DEPTH_STENCIL -> GL_DEPTH_STENCIL
    int GL_UNSIGNED_INT_24_8 -> GL_UNSIGNED_INT_24_8
    int GL_DEPTH24_STENCIL8 -> GL_DEPTH24_STENCIL8
    int GL_RGB8 -> GL_RGB8
    int GL_RGBA8 -> GL_RGBA8
    int GL_STENCIL_INDEX1 -> GL_STENCIL_INDEX1
    int GL_STENCIL_INDEX4 -> GL_STENCIL_INDEX4
    int GL_BGRA -> GL_BGRA
    int GL_RGBA16F -> GL_RGBA16F
    int GL_RGB16F -> GL_RGB16F
    int GL_MAP_READ_BIT -> GL_MAP_READ_BIT
    int GL_MAP_WRITE_BIT -> GL_MAP_WRITE_BIT
    int GL_MAP_INVALIDATE_RANGE_BIT -> GL_MAP_INVALIDATE_RANGE_BIT
    int GL_MAP_INVALIDATE_BUFFER_BIT -> GL_MAP_INVALIDATE_BUFFER_BIT
    int GL_MAP_FLUSH_EXPLICIT_BIT -> GL_MAP_FLUSH_EXPLICIT_BIT
    int GL_MAP_UNSYNCHRONIZED_BIT -> GL_MAP_UNSYNCHRONIZED_BIT
    int GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT -> GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT
    int GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT -> GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT
    int GL_GUILTY_CONTEXT_RESET -> GL_GUILTY_CONTEXT_RESET
    int GL_INNOCENT_CONTEXT_RESET -> GL_INNOCENT_CONTEXT_RESET
    int GL_UNKNOWN_CONTEXT_RESET -> GL_UNKNOWN_CONTEXT_RESET
    int GL_RESET_NOTIFICATION_STRATEGY -> GL_RESET_NOTIFICATION_STRATEGY
    int GL_LOSE_CONTEXT_ON_RESET -> GL_LOSE_CONTEXT_ON_RESET
    int GL_NO_RESET_NOTIFICATION -> GL_NO_RESET_NOTIFICATION
    int GL_SRGB -> GL_SRGB
    int GL_SRGB_ALPHA -> GL_SRGB_ALPHA
    int GL_SRGB8_ALPHA8 -> GL_SRGB8_ALPHA8
    int GL_COMPRESSED_RGB_S3TC_DXT1_EXT -> GL_COMPRESSED_RGB_S3TC_DXT1_EXT
    int GL_COMPRESSED_RGBA_S3TC_DXT1_EXT -> GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
    int GL_TEXTURE_MAX_ANISOTROPY_EXT -> GL_TEXTURE_MAX_ANISOTROPY_EXT
    int GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT -> GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
    int GL_TEXTURE_IMMUTABLE_FORMAT -> GL_TEXTURE_IMMUTABLE_FORMAT
    int GL_ALPHA8 -> GL_ALPHA8
    int GL_RGBA32F -> GL_RGBA32F
    int GL_RGB32F -> GL_RGB32F
    int GL_ALPHA32F -> GL_ALPHA32F
    int GL_ALPHA16F -> GL_ALPHA16F
    int GL_RGB10_A2 -> GL_RGB10_A2
    int GL_RGB10 -> GL_RGB10
    int GL_BGRA8 -> GL_BGRA8
    int GL_COMPRESSED_RGBA_S3TC_DXT3_EXT -> GL_COMPRESSED_RGBA_S3TC_DXT3_EXT
    int GL_COMPRESSED_RGBA_S3TC_DXT5_EXT -> GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
    int GL_TEXTURE_2D_ARRAY -> GL_TEXTURE_2D_ARRAY
    int GL_SAMPLER_2D_ARRAY -> GL_SAMPLER_2D_ARRAY
    int GL_TEXTURE_BINDING_2D_ARRAY -> GL_TEXTURE_BINDING_2D_ARRAY
    int GL_MAX_ARRAY_TEXTURE_LAYERS -> GL_MAX_ARRAY_TEXTURE_LAYERS
    int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER -> GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
    int GL_R11F_G11F_B10F -> GL_R11F_G11F_B10F
    int GL_UNSIGNED_INT_10F_11F_11F_REV -> GL_UNSIGNED_INT_10F_11F_11F_REV
    int GL_RGBA_SIGNED_COMPONENTS -> GL_RGBA_SIGNED_COMPONENTS
    int GL_AND -> GL_AND
    int GL_AND_INVERTED -> GL_AND_INVERTED
    int GL_AND_REVERSE -> GL_AND_REVERSE
    int GL_BLEND_DST -> GL_BLEND_DST
    int GL_BLEND_SRC -> GL_BLEND_SRC
    int GL_CLEAR -> GL_CLEAR
    int GL_COLOR_LOGIC_OP -> GL_COLOR_LOGIC_OP
    int GL_COPY -> GL_COPY
    int GL_COPY_INVERTED -> GL_COPY_INVERTED
    int GL_EQUIV -> GL_EQUIV
    int GL_LINE_SMOOTH -> GL_LINE_SMOOTH
    int GL_LINE_SMOOTH_HINT -> GL_LINE_SMOOTH_HINT
    int GL_LOGIC_OP_MODE -> GL_LOGIC_OP_MODE
    int GL_MULTISAMPLE -> GL_MULTISAMPLE
    int GL_NAND -> GL_NAND
    int GL_NOOP -> GL_NOOP
    int GL_NOR -> GL_NOR
    int GL_OR -> GL_OR
    int GL_OR_INVERTED -> GL_OR_INVERTED
    int GL_OR_REVERSE -> GL_OR_REVERSE
    int GL_POINT_FADE_THRESHOLD_SIZE -> GL_POINT_FADE_THRESHOLD_SIZE
    int GL_POINT_SIZE -> GL_POINT_SIZE
    int GL_SAMPLE_ALPHA_TO_ONE -> GL_SAMPLE_ALPHA_TO_ONE
    int GL_SET -> GL_SET
    int GL_SMOOTH_LINE_WIDTH_RANGE -> GL_SMOOTH_LINE_WIDTH_RANGE
    int GL_SMOOTH_POINT_SIZE_RANGE -> GL_SMOOTH_POINT_SIZE_RANGE
    int GL_XOR -> GL_XOR
    int GL_HALF_FLOAT -> GL_HALF_FLOAT
    int GL_DEPTH_COMPONENT16 -> GL_DEPTH_COMPONENT16
    int GL_UNSIGNED_INT -> GL_UNSIGNED_INT
    int GL_UNSIGNED_SHORT -> GL_UNSIGNED_SHORT
    void glActiveTexture(int) -> glActiveTexture
    void glBindBuffer(int,int) -> glBindBuffer
    void glBindFramebuffer(int,int) -> glBindFramebuffer
    void glBindRenderbuffer(int,int) -> glBindRenderbuffer
    void glBindTexture(int,int) -> glBindTexture
    void glBlendEquation(int) -> glBlendEquation
    void glBlendEquationSeparate(int,int) -> glBlendEquationSeparate
    void glBlendFunc(int,int) -> glBlendFunc
    void glBlendFuncSeparate(int,int,int,int) -> glBlendFuncSeparate
    void glBufferData(int,long,java.nio.Buffer,int) -> glBufferData
    void glBufferSubData(int,long,long,java.nio.Buffer) -> glBufferSubData
    int glCheckFramebufferStatus(int) -> glCheckFramebufferStatus
    void glClear(int) -> glClear
    void glClearColor(float,float,float,float) -> glClearColor
    void glClearDepthf(float) -> glClearDepthf
    void glClearStencil(int) -> glClearStencil
    void glColorMask(boolean,boolean,boolean,boolean) -> glColorMask
    void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexImage2D
    void glCompressedTexImage2D(int,int,int,int,int,int,int,long) -> glCompressedTexImage2D
    void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexSubImage2D
    void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,long) -> glCompressedTexSubImage2D
    void glCopyTexImage2D(int,int,int,int,int,int,int,int) -> glCopyTexImage2D
    void glCopyTexSubImage2D(int,int,int,int,int,int,int,int) -> glCopyTexSubImage2D
    void glCullFace(int) -> glCullFace
    void glDeleteBuffers(int,java.nio.IntBuffer) -> glDeleteBuffers
    void glDeleteBuffers(int,int[],int) -> glDeleteBuffers
    void glDeleteFramebuffers(int,java.nio.IntBuffer) -> glDeleteFramebuffers
    void glDeleteFramebuffers(int,int[],int) -> glDeleteFramebuffers
    void glDeleteRenderbuffers(int,java.nio.IntBuffer) -> glDeleteRenderbuffers
    void glDeleteRenderbuffers(int,int[],int) -> glDeleteRenderbuffers
    void glDeleteTextures(int,java.nio.IntBuffer) -> glDeleteTextures
    void glDeleteTextures(int,int[],int) -> glDeleteTextures
    void glDepthFunc(int) -> glDepthFunc
    void glDepthMask(boolean) -> glDepthMask
    void glDepthRangef(float,float) -> glDepthRangef
    void glDisable(int) -> glDisable
    void glDrawArrays(int,int,int) -> glDrawArrays
    void glDrawElements(int,int,int,long) -> glDrawElements
    void glEnable(int) -> glEnable
    void glFinish() -> glFinish
    void glFlush() -> glFlush
    void glFlushMappedBufferRange(int,long,long) -> glFlushMappedBufferRange
    void glFramebufferRenderbuffer(int,int,int,int) -> glFramebufferRenderbuffer
    void glFramebufferTexture2D(int,int,int,int,int) -> glFramebufferTexture2D
    void glFrontFace(int) -> glFrontFace
    void glGenBuffers(int,java.nio.IntBuffer) -> glGenBuffers
    void glGenBuffers(int,int[],int) -> glGenBuffers
    void glGenFramebuffers(int,java.nio.IntBuffer) -> glGenFramebuffers
    void glGenFramebuffers(int,int[],int) -> glGenFramebuffers
    void glGenRenderbuffers(int,java.nio.IntBuffer) -> glGenRenderbuffers
    void glGenRenderbuffers(int,int[],int) -> glGenRenderbuffers
    void glGenTextures(int,java.nio.IntBuffer) -> glGenTextures
    void glGenTextures(int,int[],int) -> glGenTextures
    void glGenerateMipmap(int) -> glGenerateMipmap
    void glGetBooleanv(int,java.nio.ByteBuffer) -> glGetBooleanv
    void glGetBooleanv(int,byte[],int) -> glGetBooleanv
    void glGetBufferParameteriv(int,int,java.nio.IntBuffer) -> glGetBufferParameteriv
    void glGetBufferParameteriv(int,int,int[],int) -> glGetBufferParameteriv
    int glGetError() -> glGetError
    void glGetFloatv(int,java.nio.FloatBuffer) -> glGetFloatv
    void glGetFloatv(int,float[],int) -> glGetFloatv
    void glGetFramebufferAttachmentParameteriv(int,int,int,java.nio.IntBuffer) -> glGetFramebufferAttachmentParameteriv
    void glGetFramebufferAttachmentParameteriv(int,int,int,int[],int) -> glGetFramebufferAttachmentParameteriv
    int glGetGraphicsResetStatus() -> glGetGraphicsResetStatus
    void glGetIntegerv(int,java.nio.IntBuffer) -> glGetIntegerv
    void glGetIntegerv(int,int[],int) -> glGetIntegerv
    void glGetRenderbufferParameteriv(int,int,java.nio.IntBuffer) -> glGetRenderbufferParameteriv
    void glGetRenderbufferParameteriv(int,int,int[],int) -> glGetRenderbufferParameteriv
    java.lang.String glGetString(int) -> glGetString
    void glGetTexParameterfv(int,int,java.nio.FloatBuffer) -> glGetTexParameterfv
    void glGetTexParameterfv(int,int,float[],int) -> glGetTexParameterfv
    void glGetTexParameteriv(int,int,java.nio.IntBuffer) -> glGetTexParameteriv
    void glGetTexParameteriv(int,int,int[],int) -> glGetTexParameteriv
    void glGetnUniformfv(int,int,int,java.nio.FloatBuffer) -> glGetnUniformfv
    void glGetnUniformfv(int,int,int,float[],int) -> glGetnUniformfv
    void glGetnUniformiv(int,int,int,java.nio.IntBuffer) -> glGetnUniformiv
    void glGetnUniformiv(int,int,int,int[],int) -> glGetnUniformiv
    void glHint(int,int) -> glHint
    boolean glIsBuffer(int) -> glIsBuffer
    boolean glIsEnabled(int) -> glIsEnabled
    boolean glIsFramebuffer(int) -> glIsFramebuffer
    boolean glIsRenderbuffer(int) -> glIsRenderbuffer
    boolean glIsTexture(int) -> glIsTexture
    void glLineWidth(float) -> glLineWidth
    java.nio.ByteBuffer glMapBuffer(int,int) -> glMapBuffer
    java.nio.ByteBuffer glMapBufferRange(int,long,long,int) -> glMapBufferRange
    void glPixelStorei(int,int) -> glPixelStorei
    void glPolygonOffset(float,float) -> glPolygonOffset
    void glReadPixels(int,int,int,int,int,int,java.nio.Buffer) -> glReadPixels
    void glReadPixels(int,int,int,int,int,int,long) -> glReadPixels
    void glReadnPixels(int,int,int,int,int,int,int,java.nio.Buffer) -> glReadnPixels
    void glRenderbufferStorage(int,int,int,int) -> glRenderbufferStorage
    void glSampleCoverage(float,boolean) -> glSampleCoverage
    void glScissor(int,int,int,int) -> glScissor
    void glStencilFunc(int,int,int) -> glStencilFunc
    void glStencilMask(int) -> glStencilMask
    void glStencilOp(int,int,int) -> glStencilOp
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexImage2D
    void glTexImage2D(int,int,int,int,int,int,int,int,long) -> glTexImage2D
    void glTexParameterf(int,int,float) -> glTexParameterf
    void glTexParameterfv(int,int,java.nio.FloatBuffer) -> glTexParameterfv
    void glTexParameterfv(int,int,float[],int) -> glTexParameterfv
    void glTexParameteri(int,int,int) -> glTexParameteri
    void glTexParameteriv(int,int,java.nio.IntBuffer) -> glTexParameteriv
    void glTexParameteriv(int,int,int[],int) -> glTexParameteriv
    void glTexStorage1D(int,int,int,int) -> glTexStorage1D
    void glTexStorage2D(int,int,int,int,int) -> glTexStorage2D
    void glTexStorage3D(int,int,int,int,int,int) -> glTexStorage3D
    void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexSubImage2D
    void glTexSubImage2D(int,int,int,int,int,int,int,int,long) -> glTexSubImage2D
    void glTextureStorage1D(int,int,int,int,int) -> glTextureStorage1D
    void glTextureStorage2D(int,int,int,int,int,int) -> glTextureStorage2D
    void glTextureStorage3D(int,int,int,int,int,int,int) -> glTextureStorage3D
    boolean glUnmapBuffer(int) -> glUnmapBuffer
    void glViewport(int,int,int,int) -> glViewport
javax.media.opengl.GL2 -> javax.media.opengl.GL2:
    int GL_2_BYTES -> GL_2_BYTES
    int GL_3_BYTES -> GL_3_BYTES
    int GL_4_BYTES -> GL_4_BYTES
    int GL_QUAD_STRIP -> GL_QUAD_STRIP
    int GL_POLYGON -> GL_POLYGON
    int GL_LINE_STIPPLE -> GL_LINE_STIPPLE
    int GL_LINE_STIPPLE_PATTERN -> GL_LINE_STIPPLE_PATTERN
    int GL_LINE_STIPPLE_REPEAT -> GL_LINE_STIPPLE_REPEAT
    int GL_POLYGON_STIPPLE -> GL_POLYGON_STIPPLE
    int GL_EDGE_FLAG -> GL_EDGE_FLAG
    int GL_COMPILE -> GL_COMPILE
    int GL_COMPILE_AND_EXECUTE -> GL_COMPILE_AND_EXECUTE
    int GL_LIST_BASE -> GL_LIST_BASE
    int GL_LIST_INDEX -> GL_LIST_INDEX
    int GL_LIST_MODE -> GL_LIST_MODE
    int GL_COLOR_INDEXES -> GL_COLOR_INDEXES
    int GL_LIGHT_MODEL_LOCAL_VIEWER -> GL_LIGHT_MODEL_LOCAL_VIEWER
    int GL_COLOR_MATERIAL_FACE -> GL_COLOR_MATERIAL_FACE
    int GL_COLOR_MATERIAL_PARAMETER -> GL_COLOR_MATERIAL_PARAMETER
    int GL_ACCUM_RED_BITS -> GL_ACCUM_RED_BITS
    int GL_ACCUM_GREEN_BITS -> GL_ACCUM_GREEN_BITS
    int GL_ACCUM_BLUE_BITS -> GL_ACCUM_BLUE_BITS
    int GL_ACCUM_ALPHA_BITS -> GL_ACCUM_ALPHA_BITS
    int GL_ACCUM_CLEAR_VALUE -> GL_ACCUM_CLEAR_VALUE
    int GL_ACCUM -> GL_ACCUM
    int GL_LOAD -> GL_LOAD
    int GL_MULT -> GL_MULT
    int GL_RETURN -> GL_RETURN
    int GL_FEEDBACK -> GL_FEEDBACK
    int GL_RENDER -> GL_RENDER
    int GL_SELECT -> GL_SELECT
    int GL_2D -> GL_2D
    int GL_3D -> GL_3D
    int GL_3D_COLOR -> GL_3D_COLOR
    int GL_3D_COLOR_TEXTURE -> GL_3D_COLOR_TEXTURE
    int GL_4D_COLOR_TEXTURE -> GL_4D_COLOR_TEXTURE
    int GL_POINT_TOKEN -> GL_POINT_TOKEN
    int GL_LINE_TOKEN -> GL_LINE_TOKEN
    int GL_LINE_RESET_TOKEN -> GL_LINE_RESET_TOKEN
    int GL_POLYGON_TOKEN -> GL_POLYGON_TOKEN
    int GL_BITMAP_TOKEN -> GL_BITMAP_TOKEN
    int GL_DRAW_PIXEL_TOKEN -> GL_DRAW_PIXEL_TOKEN
    int GL_COPY_PIXEL_TOKEN -> GL_COPY_PIXEL_TOKEN
    int GL_PASS_THROUGH_TOKEN -> GL_PASS_THROUGH_TOKEN
    int GL_FEEDBACK_BUFFER_POINTER -> GL_FEEDBACK_BUFFER_POINTER
    int GL_FEEDBACK_BUFFER_SIZE -> GL_FEEDBACK_BUFFER_SIZE
    int GL_FEEDBACK_BUFFER_TYPE -> GL_FEEDBACK_BUFFER_TYPE
    int GL_SELECTION_BUFFER_POINTER -> GL_SELECTION_BUFFER_POINTER
    int GL_SELECTION_BUFFER_SIZE -> GL_SELECTION_BUFFER_SIZE
    int GL_FOG_INDEX -> GL_FOG_INDEX
    int GL_LOGIC_OP -> GL_LOGIC_OP
    int GL_INDEX_LOGIC_OP -> GL_INDEX_LOGIC_OP
    int GL_AUX0 -> GL_AUX0
    int GL_AUX1 -> GL_AUX1
    int GL_AUX2 -> GL_AUX2
    int GL_AUX3 -> GL_AUX3
    int GL_COLOR_INDEX -> GL_COLOR_INDEX
    int GL_INDEX_BITS -> GL_INDEX_BITS
    int GL_AUX_BUFFERS -> GL_AUX_BUFFERS
    int GL_BITMAP -> GL_BITMAP
    int GL_MAX_LIST_NESTING -> GL_MAX_LIST_NESTING
    int GL_MAX_ATTRIB_STACK_DEPTH -> GL_MAX_ATTRIB_STACK_DEPTH
    int GL_MAX_NAME_STACK_DEPTH -> GL_MAX_NAME_STACK_DEPTH
    int GL_MAX_EVAL_ORDER -> GL_MAX_EVAL_ORDER
    int GL_MAX_PIXEL_MAP_TABLE -> GL_MAX_PIXEL_MAP_TABLE
    int GL_MAX_CLIENT_ATTRIB_STACK_DEPTH -> GL_MAX_CLIENT_ATTRIB_STACK_DEPTH
    int GL_ATTRIB_STACK_DEPTH -> GL_ATTRIB_STACK_DEPTH
    int GL_CLIENT_ATTRIB_STACK_DEPTH -> GL_CLIENT_ATTRIB_STACK_DEPTH
    int GL_CURRENT_INDEX -> GL_CURRENT_INDEX
    int GL_CURRENT_RASTER_COLOR -> GL_CURRENT_RASTER_COLOR
    int GL_CURRENT_RASTER_DISTANCE -> GL_CURRENT_RASTER_DISTANCE
    int GL_CURRENT_RASTER_INDEX -> GL_CURRENT_RASTER_INDEX
    int GL_CURRENT_RASTER_POSITION -> GL_CURRENT_RASTER_POSITION
    int GL_CURRENT_RASTER_TEXTURE_COORDS -> GL_CURRENT_RASTER_TEXTURE_COORDS
    int GL_CURRENT_RASTER_POSITION_VALID -> GL_CURRENT_RASTER_POSITION_VALID
    int GL_INDEX_CLEAR_VALUE -> GL_INDEX_CLEAR_VALUE
    int GL_INDEX_MODE -> GL_INDEX_MODE
    int GL_INDEX_WRITEMASK -> GL_INDEX_WRITEMASK
    int GL_NAME_STACK_DEPTH -> GL_NAME_STACK_DEPTH
    int GL_RENDER_MODE -> GL_RENDER_MODE
    int GL_RGBA_MODE -> GL_RGBA_MODE
    int GL_AUTO_NORMAL -> GL_AUTO_NORMAL
    int GL_MAP1_COLOR_4 -> GL_MAP1_COLOR_4
    int GL_MAP1_INDEX -> GL_MAP1_INDEX
    int GL_MAP1_NORMAL -> GL_MAP1_NORMAL
    int GL_MAP1_TEXTURE_COORD_1 -> GL_MAP1_TEXTURE_COORD_1
    int GL_MAP1_TEXTURE_COORD_2 -> GL_MAP1_TEXTURE_COORD_2
    int GL_MAP1_TEXTURE_COORD_3 -> GL_MAP1_TEXTURE_COORD_3
    int GL_MAP1_TEXTURE_COORD_4 -> GL_MAP1_TEXTURE_COORD_4
    int GL_MAP1_VERTEX_3 -> GL_MAP1_VERTEX_3
    int GL_MAP1_VERTEX_4 -> GL_MAP1_VERTEX_4
    int GL_MAP2_COLOR_4 -> GL_MAP2_COLOR_4
    int GL_MAP2_INDEX -> GL_MAP2_INDEX
    int GL_MAP2_NORMAL -> GL_MAP2_NORMAL
    int GL_MAP2_TEXTURE_COORD_1 -> GL_MAP2_TEXTURE_COORD_1
    int GL_MAP2_TEXTURE_COORD_2 -> GL_MAP2_TEXTURE_COORD_2
    int GL_MAP2_TEXTURE_COORD_3 -> GL_MAP2_TEXTURE_COORD_3
    int GL_MAP2_TEXTURE_COORD_4 -> GL_MAP2_TEXTURE_COORD_4
    int GL_MAP2_VERTEX_3 -> GL_MAP2_VERTEX_3
    int GL_MAP2_VERTEX_4 -> GL_MAP2_VERTEX_4
    int GL_MAP1_GRID_DOMAIN -> GL_MAP1_GRID_DOMAIN
    int GL_MAP1_GRID_SEGMENTS -> GL_MAP1_GRID_SEGMENTS
    int GL_MAP2_GRID_DOMAIN -> GL_MAP2_GRID_DOMAIN
    int GL_MAP2_GRID_SEGMENTS -> GL_MAP2_GRID_SEGMENTS
    int GL_COEFF -> GL_COEFF
    int GL_DOMAIN -> GL_DOMAIN
    int GL_ORDER -> GL_ORDER
    int GL_MAP_COLOR -> GL_MAP_COLOR
    int GL_MAP_STENCIL -> GL_MAP_STENCIL
    int GL_INDEX_SHIFT -> GL_INDEX_SHIFT
    int GL_INDEX_OFFSET -> GL_INDEX_OFFSET
    int GL_RED_SCALE -> GL_RED_SCALE
    int GL_RED_BIAS -> GL_RED_BIAS
    int GL_GREEN_SCALE -> GL_GREEN_SCALE
    int GL_GREEN_BIAS -> GL_GREEN_BIAS
    int GL_BLUE_SCALE -> GL_BLUE_SCALE
    int GL_BLUE_BIAS -> GL_BLUE_BIAS
    int GL_ALPHA_BIAS -> GL_ALPHA_BIAS
    int GL_DEPTH_SCALE -> GL_DEPTH_SCALE
    int GL_DEPTH_BIAS -> GL_DEPTH_BIAS
    int GL_PIXEL_MAP_S_TO_S_SIZE -> GL_PIXEL_MAP_S_TO_S_SIZE
    int GL_PIXEL_MAP_I_TO_I_SIZE -> GL_PIXEL_MAP_I_TO_I_SIZE
    int GL_PIXEL_MAP_I_TO_R_SIZE -> GL_PIXEL_MAP_I_TO_R_SIZE
    int GL_PIXEL_MAP_I_TO_G_SIZE -> GL_PIXEL_MAP_I_TO_G_SIZE
    int GL_PIXEL_MAP_I_TO_B_SIZE -> GL_PIXEL_MAP_I_TO_B_SIZE
    int GL_PIXEL_MAP_I_TO_A_SIZE -> GL_PIXEL_MAP_I_TO_A_SIZE
    int GL_PIXEL_MAP_R_TO_R_SIZE -> GL_PIXEL_MAP_R_TO_R_SIZE
    int GL_PIXEL_MAP_G_TO_G_SIZE -> GL_PIXEL_MAP_G_TO_G_SIZE
    int GL_PIXEL_MAP_B_TO_B_SIZE -> GL_PIXEL_MAP_B_TO_B_SIZE
    int GL_PIXEL_MAP_A_TO_A_SIZE -> GL_PIXEL_MAP_A_TO_A_SIZE
    int GL_PIXEL_MAP_S_TO_S -> GL_PIXEL_MAP_S_TO_S
    int GL_PIXEL_MAP_I_TO_I -> GL_PIXEL_MAP_I_TO_I
    int GL_PIXEL_MAP_I_TO_R -> GL_PIXEL_MAP_I_TO_R
    int GL_PIXEL_MAP_I_TO_G -> GL_PIXEL_MAP_I_TO_G
    int GL_PIXEL_MAP_I_TO_B -> GL_PIXEL_MAP_I_TO_B
    int GL_PIXEL_MAP_I_TO_A -> GL_PIXEL_MAP_I_TO_A
    int GL_PIXEL_MAP_R_TO_R -> GL_PIXEL_MAP_R_TO_R
    int GL_PIXEL_MAP_G_TO_G -> GL_PIXEL_MAP_G_TO_G
    int GL_PIXEL_MAP_B_TO_B -> GL_PIXEL_MAP_B_TO_B
    int GL_PIXEL_MAP_A_TO_A -> GL_PIXEL_MAP_A_TO_A
    int GL_ZOOM_X -> GL_ZOOM_X
    int GL_ZOOM_Y -> GL_ZOOM_Y
    int GL_TEXTURE_GEN_S -> GL_TEXTURE_GEN_S
    int GL_TEXTURE_GEN_T -> GL_TEXTURE_GEN_T
    int GL_TEXTURE_BORDER -> GL_TEXTURE_BORDER
    int GL_TEXTURE_COMPONENTS -> GL_TEXTURE_COMPONENTS
    int GL_TEXTURE_LUMINANCE_SIZE -> GL_TEXTURE_LUMINANCE_SIZE
    int GL_TEXTURE_INTENSITY_SIZE -> GL_TEXTURE_INTENSITY_SIZE
    int GL_OBJECT_LINEAR -> GL_OBJECT_LINEAR
    int GL_OBJECT_PLANE -> GL_OBJECT_PLANE
    int GL_EYE_LINEAR -> GL_EYE_LINEAR
    int GL_EYE_PLANE -> GL_EYE_PLANE
    int GL_SPHERE_MAP -> GL_SPHERE_MAP
    int GL_CLAMP -> GL_CLAMP
    int GL_S -> GL_S
    int GL_T -> GL_T
    int GL_R -> GL_R
    int GL_Q -> GL_Q
    int GL_TEXTURE_GEN_R -> GL_TEXTURE_GEN_R
    int GL_TEXTURE_GEN_Q -> GL_TEXTURE_GEN_Q
    int GL_CURRENT_BIT -> GL_CURRENT_BIT
    int GL_POINT_BIT -> GL_POINT_BIT
    int GL_LINE_BIT -> GL_LINE_BIT
    int GL_POLYGON_BIT -> GL_POLYGON_BIT
    int GL_POLYGON_STIPPLE_BIT -> GL_POLYGON_STIPPLE_BIT
    int GL_PIXEL_MODE_BIT -> GL_PIXEL_MODE_BIT
    int GL_LIGHTING_BIT -> GL_LIGHTING_BIT
    int GL_FOG_BIT -> GL_FOG_BIT
    int GL_ACCUM_BUFFER_BIT -> GL_ACCUM_BUFFER_BIT
    int GL_VIEWPORT_BIT -> GL_VIEWPORT_BIT
    int GL_TRANSFORM_BIT -> GL_TRANSFORM_BIT
    int GL_ENABLE_BIT -> GL_ENABLE_BIT
    int GL_HINT_BIT -> GL_HINT_BIT
    int GL_EVAL_BIT -> GL_EVAL_BIT
    int GL_LIST_BIT -> GL_LIST_BIT
    int GL_TEXTURE_BIT -> GL_TEXTURE_BIT
    int GL_SCISSOR_BIT -> GL_SCISSOR_BIT
    int GL_ALL_ATTRIB_BITS -> GL_ALL_ATTRIB_BITS
    int GL_TEXTURE_PRIORITY -> GL_TEXTURE_PRIORITY
    int GL_TEXTURE_RESIDENT -> GL_TEXTURE_RESIDENT
    int GL_ALPHA4 -> GL_ALPHA4
    int GL_ALPHA12 -> GL_ALPHA12
    int GL_ALPHA16 -> GL_ALPHA16
    int GL_LUMINANCE4 -> GL_LUMINANCE4
    int GL_LUMINANCE8 -> GL_LUMINANCE8
    int GL_LUMINANCE12 -> GL_LUMINANCE12
    int GL_LUMINANCE16 -> GL_LUMINANCE16
    int GL_LUMINANCE4_ALPHA4 -> GL_LUMINANCE4_ALPHA4
    int GL_LUMINANCE6_ALPHA2 -> GL_LUMINANCE6_ALPHA2
    int GL_LUMINANCE8_ALPHA8 -> GL_LUMINANCE8_ALPHA8
    int GL_LUMINANCE12_ALPHA4 -> GL_LUMINANCE12_ALPHA4
    int GL_LUMINANCE12_ALPHA12 -> GL_LUMINANCE12_ALPHA12
    int GL_LUMINANCE16_ALPHA16 -> GL_LUMINANCE16_ALPHA16
    int GL_INTENSITY -> GL_INTENSITY
    int GL_INTENSITY4 -> GL_INTENSITY4
    int GL_INTENSITY8 -> GL_INTENSITY8
    int GL_INTENSITY12 -> GL_INTENSITY12
    int GL_INTENSITY16 -> GL_INTENSITY16
    int GL_CLIENT_PIXEL_STORE_BIT -> GL_CLIENT_PIXEL_STORE_BIT
    int GL_CLIENT_VERTEX_ARRAY_BIT -> GL_CLIENT_VERTEX_ARRAY_BIT
    long GL_ALL_CLIENT_ATTRIB_BITS -> GL_ALL_CLIENT_ATTRIB_BITS
    long GL_CLIENT_ALL_ATTRIB_BITS -> GL_CLIENT_ALL_ATTRIB_BITS
    int GL_INDEX_ARRAY -> GL_INDEX_ARRAY
    int GL_EDGE_FLAG_ARRAY -> GL_EDGE_FLAG_ARRAY
    int GL_INDEX_ARRAY_TYPE -> GL_INDEX_ARRAY_TYPE
    int GL_INDEX_ARRAY_STRIDE -> GL_INDEX_ARRAY_STRIDE
    int GL_EDGE_FLAG_ARRAY_STRIDE -> GL_EDGE_FLAG_ARRAY_STRIDE
    int GL_INDEX_ARRAY_POINTER -> GL_INDEX_ARRAY_POINTER
    int GL_EDGE_FLAG_ARRAY_POINTER -> GL_EDGE_FLAG_ARRAY_POINTER
    int GL_V2F -> GL_V2F
    int GL_V3F -> GL_V3F
    int GL_C4UB_V2F -> GL_C4UB_V2F
    int GL_C4UB_V3F -> GL_C4UB_V3F
    int GL_C3F_V3F -> GL_C3F_V3F
    int GL_N3F_V3F -> GL_N3F_V3F
    int GL_C4F_N3F_V3F -> GL_C4F_N3F_V3F
    int GL_T2F_V3F -> GL_T2F_V3F
    int GL_T4F_V4F -> GL_T4F_V4F
    int GL_T2F_C4UB_V3F -> GL_T2F_C4UB_V3F
    int GL_T2F_C3F_V3F -> GL_T2F_C3F_V3F
    int GL_T2F_N3F_V3F -> GL_T2F_N3F_V3F
    int GL_T2F_C4F_N3F_V3F -> GL_T2F_C4F_N3F_V3F
    int GL_T4F_C4F_N3F_V4F -> GL_T4F_C4F_N3F_V4F
    int GL_CONVOLUTION_1D -> GL_CONVOLUTION_1D
    int GL_CONVOLUTION_2D -> GL_CONVOLUTION_2D
    int GL_SEPARABLE_2D -> GL_SEPARABLE_2D
    int GL_CONVOLUTION_BORDER_MODE -> GL_CONVOLUTION_BORDER_MODE
    int GL_CONVOLUTION_FILTER_SCALE -> GL_CONVOLUTION_FILTER_SCALE
    int GL_CONVOLUTION_FILTER_BIAS -> GL_CONVOLUTION_FILTER_BIAS
    int GL_REDUCE -> GL_REDUCE
    int GL_CONVOLUTION_FORMAT -> GL_CONVOLUTION_FORMAT
    int GL_CONVOLUTION_WIDTH -> GL_CONVOLUTION_WIDTH
    int GL_CONVOLUTION_HEIGHT -> GL_CONVOLUTION_HEIGHT
    int GL_MAX_CONVOLUTION_WIDTH -> GL_MAX_CONVOLUTION_WIDTH
    int GL_MAX_CONVOLUTION_HEIGHT -> GL_MAX_CONVOLUTION_HEIGHT
    int GL_POST_CONVOLUTION_RED_SCALE -> GL_POST_CONVOLUTION_RED_SCALE
    int GL_POST_CONVOLUTION_GREEN_SCALE -> GL_POST_CONVOLUTION_GREEN_SCALE
    int GL_POST_CONVOLUTION_BLUE_SCALE -> GL_POST_CONVOLUTION_BLUE_SCALE
    int GL_POST_CONVOLUTION_ALPHA_SCALE -> GL_POST_CONVOLUTION_ALPHA_SCALE
    int GL_POST_CONVOLUTION_RED_BIAS -> GL_POST_CONVOLUTION_RED_BIAS
    int GL_POST_CONVOLUTION_GREEN_BIAS -> GL_POST_CONVOLUTION_GREEN_BIAS
    int GL_POST_CONVOLUTION_BLUE_BIAS -> GL_POST_CONVOLUTION_BLUE_BIAS
    int GL_POST_CONVOLUTION_ALPHA_BIAS -> GL_POST_CONVOLUTION_ALPHA_BIAS
    int GL_HISTOGRAM -> GL_HISTOGRAM
    int GL_PROXY_HISTOGRAM -> GL_PROXY_HISTOGRAM
    int GL_HISTOGRAM_WIDTH -> GL_HISTOGRAM_WIDTH
    int GL_HISTOGRAM_FORMAT -> GL_HISTOGRAM_FORMAT
    int GL_HISTOGRAM_RED_SIZE -> GL_HISTOGRAM_RED_SIZE
    int GL_HISTOGRAM_GREEN_SIZE -> GL_HISTOGRAM_GREEN_SIZE
    int GL_HISTOGRAM_BLUE_SIZE -> GL_HISTOGRAM_BLUE_SIZE
    int GL_HISTOGRAM_ALPHA_SIZE -> GL_HISTOGRAM_ALPHA_SIZE
    int GL_HISTOGRAM_LUMINANCE_SIZE -> GL_HISTOGRAM_LUMINANCE_SIZE
    int GL_HISTOGRAM_SINK -> GL_HISTOGRAM_SINK
    int GL_MINMAX -> GL_MINMAX
    int GL_MINMAX_FORMAT -> GL_MINMAX_FORMAT
    int GL_MINMAX_SINK -> GL_MINMAX_SINK
    int GL_TABLE_TOO_LARGE -> GL_TABLE_TOO_LARGE
    int GL_COLOR_MATRIX -> GL_COLOR_MATRIX
    int GL_COLOR_MATRIX_STACK_DEPTH -> GL_COLOR_MATRIX_STACK_DEPTH
    int GL_MAX_COLOR_MATRIX_STACK_DEPTH -> GL_MAX_COLOR_MATRIX_STACK_DEPTH
    int GL_POST_COLOR_MATRIX_RED_SCALE -> GL_POST_COLOR_MATRIX_RED_SCALE
    int GL_POST_COLOR_MATRIX_GREEN_SCALE -> GL_POST_COLOR_MATRIX_GREEN_SCALE
    int GL_POST_COLOR_MATRIX_BLUE_SCALE -> GL_POST_COLOR_MATRIX_BLUE_SCALE
    int GL_POST_COLOR_MATRIX_ALPHA_SCALE -> GL_POST_COLOR_MATRIX_ALPHA_SCALE
    int GL_POST_COLOR_MATRIX_RED_BIAS -> GL_POST_COLOR_MATRIX_RED_BIAS
    int GL_POST_COLOR_MATRIX_GREEN_BIAS -> GL_POST_COLOR_MATRIX_GREEN_BIAS
    int GL_POST_COLOR_MATRIX_BLUE_BIAS -> GL_POST_COLOR_MATRIX_BLUE_BIAS
    int GL_POST_COLOR_MATRIX_ALPHA_BIAS -> GL_POST_COLOR_MATRIX_ALPHA_BIAS
    int GL_COLOR_TABLE -> GL_COLOR_TABLE
    int GL_POST_CONVOLUTION_COLOR_TABLE -> GL_POST_CONVOLUTION_COLOR_TABLE
    int GL_POST_COLOR_MATRIX_COLOR_TABLE -> GL_POST_COLOR_MATRIX_COLOR_TABLE
    int GL_PROXY_COLOR_TABLE -> GL_PROXY_COLOR_TABLE
    int GL_PROXY_POST_CONVOLUTION_COLOR_TABLE -> GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
    int GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE -> GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
    int GL_COLOR_TABLE_SCALE -> GL_COLOR_TABLE_SCALE
    int GL_COLOR_TABLE_BIAS -> GL_COLOR_TABLE_BIAS
    int GL_COLOR_TABLE_FORMAT -> GL_COLOR_TABLE_FORMAT
    int GL_COLOR_TABLE_WIDTH -> GL_COLOR_TABLE_WIDTH
    int GL_COLOR_TABLE_RED_SIZE -> GL_COLOR_TABLE_RED_SIZE
    int GL_COLOR_TABLE_GREEN_SIZE -> GL_COLOR_TABLE_GREEN_SIZE
    int GL_COLOR_TABLE_BLUE_SIZE -> GL_COLOR_TABLE_BLUE_SIZE
    int GL_COLOR_TABLE_ALPHA_SIZE -> GL_COLOR_TABLE_ALPHA_SIZE
    int GL_COLOR_TABLE_LUMINANCE_SIZE -> GL_COLOR_TABLE_LUMINANCE_SIZE
    int GL_COLOR_TABLE_INTENSITY_SIZE -> GL_COLOR_TABLE_INTENSITY_SIZE
    int GL_CONSTANT_BORDER -> GL_CONSTANT_BORDER
    int GL_REPLICATE_BORDER -> GL_REPLICATE_BORDER
    int GL_CONVOLUTION_BORDER_COLOR -> GL_CONVOLUTION_BORDER_COLOR
    int GL_LIGHT_MODEL_COLOR_CONTROL -> GL_LIGHT_MODEL_COLOR_CONTROL
    int GL_SINGLE_COLOR -> GL_SINGLE_COLOR
    int GL_SEPARATE_SPECULAR_COLOR -> GL_SEPARATE_SPECULAR_COLOR
    int GL_TRANSPOSE_MODELVIEW_MATRIX -> GL_TRANSPOSE_MODELVIEW_MATRIX
    int GL_TRANSPOSE_PROJECTION_MATRIX -> GL_TRANSPOSE_PROJECTION_MATRIX
    int GL_TRANSPOSE_TEXTURE_MATRIX -> GL_TRANSPOSE_TEXTURE_MATRIX
    int GL_TRANSPOSE_COLOR_MATRIX -> GL_TRANSPOSE_COLOR_MATRIX
    int GL_MULTISAMPLE_BIT -> GL_MULTISAMPLE_BIT
    int GL_COMPRESSED_ALPHA -> GL_COMPRESSED_ALPHA
    int GL_COMPRESSED_LUMINANCE -> GL_COMPRESSED_LUMINANCE
    int GL_COMPRESSED_LUMINANCE_ALPHA -> GL_COMPRESSED_LUMINANCE_ALPHA
    int GL_COMPRESSED_INTENSITY -> GL_COMPRESSED_INTENSITY
    int GL_SOURCE0_RGB -> GL_SOURCE0_RGB
    int GL_SOURCE1_RGB -> GL_SOURCE1_RGB
    int GL_SOURCE2_RGB -> GL_SOURCE2_RGB
    int GL_SOURCE0_ALPHA -> GL_SOURCE0_ALPHA
    int GL_SOURCE1_ALPHA -> GL_SOURCE1_ALPHA
    int GL_SOURCE2_ALPHA -> GL_SOURCE2_ALPHA
    int GL_FOG_COORDINATE_SOURCE -> GL_FOG_COORDINATE_SOURCE
    int GL_FOG_COORDINATE -> GL_FOG_COORDINATE
    int GL_FRAGMENT_DEPTH -> GL_FRAGMENT_DEPTH
    int GL_CURRENT_FOG_COORDINATE -> GL_CURRENT_FOG_COORDINATE
    int GL_FOG_COORDINATE_ARRAY_TYPE -> GL_FOG_COORDINATE_ARRAY_TYPE
    int GL_FOG_COORDINATE_ARRAY_STRIDE -> GL_FOG_COORDINATE_ARRAY_STRIDE
    int GL_FOG_COORDINATE_ARRAY_POINTER -> GL_FOG_COORDINATE_ARRAY_POINTER
    int GL_FOG_COORDINATE_ARRAY -> GL_FOG_COORDINATE_ARRAY
    int GL_COLOR_SUM -> GL_COLOR_SUM
    int GL_CURRENT_SECONDARY_COLOR -> GL_CURRENT_SECONDARY_COLOR
    int GL_SECONDARY_COLOR_ARRAY_SIZE -> GL_SECONDARY_COLOR_ARRAY_SIZE
    int GL_SECONDARY_COLOR_ARRAY_TYPE -> GL_SECONDARY_COLOR_ARRAY_TYPE
    int GL_SECONDARY_COLOR_ARRAY_STRIDE -> GL_SECONDARY_COLOR_ARRAY_STRIDE
    int GL_SECONDARY_COLOR_ARRAY_POINTER -> GL_SECONDARY_COLOR_ARRAY_POINTER
    int GL_SECONDARY_COLOR_ARRAY -> GL_SECONDARY_COLOR_ARRAY
    int GL_TEXTURE_FILTER_CONTROL -> GL_TEXTURE_FILTER_CONTROL
    int GL_DEPTH_TEXTURE_MODE -> GL_DEPTH_TEXTURE_MODE
    int GL_COMPARE_R_TO_TEXTURE -> GL_COMPARE_R_TO_TEXTURE
    int GL_INDEX_ARRAY_BUFFER_BINDING -> GL_INDEX_ARRAY_BUFFER_BINDING
    int GL_EDGE_FLAG_ARRAY_BUFFER_BINDING -> GL_EDGE_FLAG_ARRAY_BUFFER_BINDING
    int GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING -> GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING
    int GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING -> GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING
    int GL_FOG_COORD_SRC -> GL_FOG_COORD_SRC
    int GL_FOG_COORD -> GL_FOG_COORD
    int GL_CURRENT_FOG_COORD -> GL_CURRENT_FOG_COORD
    int GL_FOG_COORD_ARRAY_TYPE -> GL_FOG_COORD_ARRAY_TYPE
    int GL_FOG_COORD_ARRAY_STRIDE -> GL_FOG_COORD_ARRAY_STRIDE
    int GL_FOG_COORD_ARRAY_POINTER -> GL_FOG_COORD_ARRAY_POINTER
    int GL_FOG_COORD_ARRAY -> GL_FOG_COORD_ARRAY
    int GL_FOG_COORD_ARRAY_BUFFER_BINDING -> GL_FOG_COORD_ARRAY_BUFFER_BINDING
    int GL_VERTEX_PROGRAM_TWO_SIDE -> GL_VERTEX_PROGRAM_TWO_SIDE
    int GL_MAX_TEXTURE_COORDS -> GL_MAX_TEXTURE_COORDS
    int GL_CURRENT_RASTER_SECONDARY_COLOR -> GL_CURRENT_RASTER_SECONDARY_COLOR
    int GL_SLUMINANCE_ALPHA -> GL_SLUMINANCE_ALPHA
    int GL_SLUMINANCE8_ALPHA8 -> GL_SLUMINANCE8_ALPHA8
    int GL_SLUMINANCE -> GL_SLUMINANCE
    int GL_SLUMINANCE8 -> GL_SLUMINANCE8
    int GL_COMPRESSED_SLUMINANCE -> GL_COMPRESSED_SLUMINANCE
    int GL_COMPRESSED_SLUMINANCE_ALPHA -> GL_COMPRESSED_SLUMINANCE_ALPHA
    int GL_CLAMP_VERTEX_COLOR -> GL_CLAMP_VERTEX_COLOR
    int GL_CLAMP_FRAGMENT_COLOR -> GL_CLAMP_FRAGMENT_COLOR
    int GL_ALPHA_INTEGER -> GL_ALPHA_INTEGER
    int GL_INDEX -> GL_INDEX
    int GL_TEXTURE_LUMINANCE_TYPE -> GL_TEXTURE_LUMINANCE_TYPE
    int GL_TEXTURE_INTENSITY_TYPE -> GL_TEXTURE_INTENSITY_TYPE
    int GL_RGBA_FLOAT_MODE -> GL_RGBA_FLOAT_MODE
    int GL_FRAGMENT_PROGRAM_ARB -> GL_FRAGMENT_PROGRAM_ARB
    int GL_PROGRAM_ALU_INSTRUCTIONS_ARB -> GL_PROGRAM_ALU_INSTRUCTIONS_ARB
    int GL_PROGRAM_TEX_INSTRUCTIONS_ARB -> GL_PROGRAM_TEX_INSTRUCTIONS_ARB
    int GL_PROGRAM_TEX_INDIRECTIONS_ARB -> GL_PROGRAM_TEX_INDIRECTIONS_ARB
    int GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB -> GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
    int GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB -> GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
    int GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB -> GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
    int GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB -> GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB
    int GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB -> GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB
    int GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB -> GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB
    int GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB -> GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
    int GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB -> GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
    int GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB -> GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
    int GL_MAX_TEXTURE_COORDS_ARB -> GL_MAX_TEXTURE_COORDS_ARB
    int GL_MAX_TEXTURE_IMAGE_UNITS_ARB -> GL_MAX_TEXTURE_IMAGE_UNITS_ARB
    int GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB -> GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB
    int GL_CURRENT_MATRIX_INDEX_ARB -> GL_CURRENT_MATRIX_INDEX_ARB
    int GL_PROGRAM_OBJECT_ARB -> GL_PROGRAM_OBJECT_ARB
    int GL_SHADER_OBJECT_ARB -> GL_SHADER_OBJECT_ARB
    int GL_OBJECT_TYPE_ARB -> GL_OBJECT_TYPE_ARB
    int GL_OBJECT_SUBTYPE_ARB -> GL_OBJECT_SUBTYPE_ARB
    int GL_FLOAT_VEC2_ARB -> GL_FLOAT_VEC2_ARB
    int GL_FLOAT_VEC3_ARB -> GL_FLOAT_VEC3_ARB
    int GL_FLOAT_VEC4_ARB -> GL_FLOAT_VEC4_ARB
    int GL_INT_VEC2_ARB -> GL_INT_VEC2_ARB
    int GL_INT_VEC3_ARB -> GL_INT_VEC3_ARB
    int GL_INT_VEC4_ARB -> GL_INT_VEC4_ARB
    int GL_BOOL_ARB -> GL_BOOL_ARB
    int GL_BOOL_VEC2_ARB -> GL_BOOL_VEC2_ARB
    int GL_BOOL_VEC3_ARB -> GL_BOOL_VEC3_ARB
    int GL_BOOL_VEC4_ARB -> GL_BOOL_VEC4_ARB
    int GL_FLOAT_MAT2_ARB -> GL_FLOAT_MAT2_ARB
    int GL_FLOAT_MAT3_ARB -> GL_FLOAT_MAT3_ARB
    int GL_FLOAT_MAT4_ARB -> GL_FLOAT_MAT4_ARB
    int GL_SAMPLER_1D_ARB -> GL_SAMPLER_1D_ARB
    int GL_SAMPLER_2D_ARB -> GL_SAMPLER_2D_ARB
    int GL_SAMPLER_3D_ARB -> GL_SAMPLER_3D_ARB
    int GL_SAMPLER_CUBE_ARB -> GL_SAMPLER_CUBE_ARB
    int GL_SAMPLER_1D_SHADOW_ARB -> GL_SAMPLER_1D_SHADOW_ARB
    int GL_SAMPLER_2D_SHADOW_ARB -> GL_SAMPLER_2D_SHADOW_ARB
    int GL_SAMPLER_2D_RECT_ARB -> GL_SAMPLER_2D_RECT_ARB
    int GL_SAMPLER_2D_RECT_SHADOW_ARB -> GL_SAMPLER_2D_RECT_SHADOW_ARB
    int GL_OBJECT_DELETE_STATUS_ARB -> GL_OBJECT_DELETE_STATUS_ARB
    int GL_OBJECT_COMPILE_STATUS_ARB -> GL_OBJECT_COMPILE_STATUS_ARB
    int GL_OBJECT_LINK_STATUS_ARB -> GL_OBJECT_LINK_STATUS_ARB
    int GL_OBJECT_VALIDATE_STATUS_ARB -> GL_OBJECT_VALIDATE_STATUS_ARB
    int GL_OBJECT_INFO_LOG_LENGTH_ARB -> GL_OBJECT_INFO_LOG_LENGTH_ARB
    int GL_OBJECT_ATTACHED_OBJECTS_ARB -> GL_OBJECT_ATTACHED_OBJECTS_ARB
    int GL_OBJECT_ACTIVE_UNIFORMS_ARB -> GL_OBJECT_ACTIVE_UNIFORMS_ARB
    int GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB -> GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB
    int GL_OBJECT_SHADER_SOURCE_LENGTH_ARB -> GL_OBJECT_SHADER_SOURCE_LENGTH_ARB
    int GL_SHADING_LANGUAGE_VERSION_ARB -> GL_SHADING_LANGUAGE_VERSION_ARB
    int GL_TEXTURE_COMPARE_FAIL_VALUE_ARB -> GL_TEXTURE_COMPARE_FAIL_VALUE_ARB
    int GL_TEXTURE_BUFFER_FORMAT -> GL_TEXTURE_BUFFER_FORMAT
    int GL_INTENSITY32F -> GL_INTENSITY32F
    int GL_LUMINANCE32F -> GL_LUMINANCE32F
    int GL_LUMINANCE_ALPHA32F -> GL_LUMINANCE_ALPHA32F
    int GL_INTENSITY16F -> GL_INTENSITY16F
    int GL_LUMINANCE16F -> GL_LUMINANCE16F
    int GL_LUMINANCE_ALPHA16F -> GL_LUMINANCE_ALPHA16F
    int GL_TEXTURE_RECTANGLE_ARB -> GL_TEXTURE_RECTANGLE_ARB
    int GL_TEXTURE_BINDING_RECTANGLE_ARB -> GL_TEXTURE_BINDING_RECTANGLE_ARB
    int GL_PROXY_TEXTURE_RECTANGLE_ARB -> GL_PROXY_TEXTURE_RECTANGLE_ARB
    int GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB -> GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB
    int GL_ACTIVE_VERTEX_UNITS_ARB -> GL_ACTIVE_VERTEX_UNITS_ARB
    int GL_WEIGHT_SUM_UNITY_ARB -> GL_WEIGHT_SUM_UNITY_ARB
    int GL_VERTEX_BLEND_ARB -> GL_VERTEX_BLEND_ARB
    int GL_CURRENT_WEIGHT_ARB -> GL_CURRENT_WEIGHT_ARB
    int GL_MODELVIEW0_ARB -> GL_MODELVIEW0_ARB
    int GL_MODELVIEW1_ARB -> GL_MODELVIEW1_ARB
    int GL_MODELVIEW2_ARB -> GL_MODELVIEW2_ARB
    int GL_MODELVIEW3_ARB -> GL_MODELVIEW3_ARB
    int GL_MODELVIEW4_ARB -> GL_MODELVIEW4_ARB
    int GL_MODELVIEW5_ARB -> GL_MODELVIEW5_ARB
    int GL_MODELVIEW6_ARB -> GL_MODELVIEW6_ARB
    int GL_MODELVIEW7_ARB -> GL_MODELVIEW7_ARB
    int GL_MODELVIEW8_ARB -> GL_MODELVIEW8_ARB
    int GL_MODELVIEW9_ARB -> GL_MODELVIEW9_ARB
    int GL_MODELVIEW10_ARB -> GL_MODELVIEW10_ARB
    int GL_MODELVIEW11_ARB -> GL_MODELVIEW11_ARB
    int GL_MODELVIEW12_ARB -> GL_MODELVIEW12_ARB
    int GL_MODELVIEW13_ARB -> GL_MODELVIEW13_ARB
    int GL_MODELVIEW14_ARB -> GL_MODELVIEW14_ARB
    int GL_MODELVIEW15_ARB -> GL_MODELVIEW15_ARB
    int GL_MODELVIEW16_ARB -> GL_MODELVIEW16_ARB
    int GL_MODELVIEW17_ARB -> GL_MODELVIEW17_ARB
    int GL_MODELVIEW18_ARB -> GL_MODELVIEW18_ARB
    int GL_MODELVIEW19_ARB -> GL_MODELVIEW19_ARB
    int GL_MODELVIEW20_ARB -> GL_MODELVIEW20_ARB
    int GL_MODELVIEW21_ARB -> GL_MODELVIEW21_ARB
    int GL_MODELVIEW22_ARB -> GL_MODELVIEW22_ARB
    int GL_MODELVIEW23_ARB -> GL_MODELVIEW23_ARB
    int GL_MODELVIEW24_ARB -> GL_MODELVIEW24_ARB
    int GL_MODELVIEW25_ARB -> GL_MODELVIEW25_ARB
    int GL_MODELVIEW26_ARB -> GL_MODELVIEW26_ARB
    int GL_MODELVIEW27_ARB -> GL_MODELVIEW27_ARB
    int GL_MODELVIEW28_ARB -> GL_MODELVIEW28_ARB
    int GL_MODELVIEW29_ARB -> GL_MODELVIEW29_ARB
    int GL_MODELVIEW30_ARB -> GL_MODELVIEW30_ARB
    int GL_MODELVIEW31_ARB -> GL_MODELVIEW31_ARB
    int GL_COLOR_SUM_ARB -> GL_COLOR_SUM_ARB
    int GL_VERTEX_PROGRAM_ARB -> GL_VERTEX_PROGRAM_ARB
    int GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB -> GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB
    int GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB -> GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB
    int GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB -> GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB
    int GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB -> GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB
    int GL_CURRENT_VERTEX_ATTRIB_ARB -> GL_CURRENT_VERTEX_ATTRIB_ARB
    int GL_PROGRAM_LENGTH_ARB -> GL_PROGRAM_LENGTH_ARB
    int GL_PROGRAM_STRING_ARB -> GL_PROGRAM_STRING_ARB
    int GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB -> GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
    int GL_MAX_PROGRAM_MATRICES_ARB -> GL_MAX_PROGRAM_MATRICES_ARB
    int GL_CURRENT_MATRIX_STACK_DEPTH_ARB -> GL_CURRENT_MATRIX_STACK_DEPTH_ARB
    int GL_CURRENT_MATRIX_ARB -> GL_CURRENT_MATRIX_ARB
    int GL_VERTEX_PROGRAM_POINT_SIZE_ARB -> GL_VERTEX_PROGRAM_POINT_SIZE_ARB
    int GL_VERTEX_PROGRAM_TWO_SIDE_ARB -> GL_VERTEX_PROGRAM_TWO_SIDE_ARB
    int GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB -> GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB
    int GL_PROGRAM_ERROR_POSITION_ARB -> GL_PROGRAM_ERROR_POSITION_ARB
    int GL_PROGRAM_BINDING_ARB -> GL_PROGRAM_BINDING_ARB
    int GL_MAX_VERTEX_ATTRIBS_ARB -> GL_MAX_VERTEX_ATTRIBS_ARB
    int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB -> GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
    int GL_PROGRAM_ERROR_STRING_ARB -> GL_PROGRAM_ERROR_STRING_ARB
    int GL_PROGRAM_FORMAT_ASCII_ARB -> GL_PROGRAM_FORMAT_ASCII_ARB
    int GL_PROGRAM_FORMAT_ARB -> GL_PROGRAM_FORMAT_ARB
    int GL_PROGRAM_INSTRUCTIONS_ARB -> GL_PROGRAM_INSTRUCTIONS_ARB
    int GL_MAX_PROGRAM_INSTRUCTIONS_ARB -> GL_MAX_PROGRAM_INSTRUCTIONS_ARB
    int GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB -> GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB
    int GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB -> GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
    int GL_PROGRAM_TEMPORARIES_ARB -> GL_PROGRAM_TEMPORARIES_ARB
    int GL_MAX_PROGRAM_TEMPORARIES_ARB -> GL_MAX_PROGRAM_TEMPORARIES_ARB
    int GL_PROGRAM_NATIVE_TEMPORARIES_ARB -> GL_PROGRAM_NATIVE_TEMPORARIES_ARB
    int GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB -> GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
    int GL_PROGRAM_PARAMETERS_ARB -> GL_PROGRAM_PARAMETERS_ARB
    int GL_MAX_PROGRAM_PARAMETERS_ARB -> GL_MAX_PROGRAM_PARAMETERS_ARB
    int GL_PROGRAM_NATIVE_PARAMETERS_ARB -> GL_PROGRAM_NATIVE_PARAMETERS_ARB
    int GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB -> GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB
    int GL_PROGRAM_ATTRIBS_ARB -> GL_PROGRAM_ATTRIBS_ARB
    int GL_MAX_PROGRAM_ATTRIBS_ARB -> GL_MAX_PROGRAM_ATTRIBS_ARB
    int GL_PROGRAM_NATIVE_ATTRIBS_ARB -> GL_PROGRAM_NATIVE_ATTRIBS_ARB
    int GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB -> GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB
    int GL_PROGRAM_ADDRESS_REGISTERS_ARB -> GL_PROGRAM_ADDRESS_REGISTERS_ARB
    int GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB -> GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB
    int GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB -> GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
    int GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB -> GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
    int GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB -> GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB
    int GL_MAX_PROGRAM_ENV_PARAMETERS_ARB -> GL_MAX_PROGRAM_ENV_PARAMETERS_ARB
    int GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB -> GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB
    int GL_TRANSPOSE_CURRENT_MATRIX_ARB -> GL_TRANSPOSE_CURRENT_MATRIX_ARB
    int GL_MATRIX0_ARB -> GL_MATRIX0_ARB
    int GL_MATRIX1_ARB -> GL_MATRIX1_ARB
    int GL_MATRIX2_ARB -> GL_MATRIX2_ARB
    int GL_MATRIX3_ARB -> GL_MATRIX3_ARB
    int GL_MATRIX4_ARB -> GL_MATRIX4_ARB
    int GL_MATRIX5_ARB -> GL_MATRIX5_ARB
    int GL_MATRIX6_ARB -> GL_MATRIX6_ARB
    int GL_MATRIX7_ARB -> GL_MATRIX7_ARB
    int GL_MATRIX8_ARB -> GL_MATRIX8_ARB
    int GL_MATRIX9_ARB -> GL_MATRIX9_ARB
    int GL_MATRIX10_ARB -> GL_MATRIX10_ARB
    int GL_MATRIX11_ARB -> GL_MATRIX11_ARB
    int GL_MATRIX12_ARB -> GL_MATRIX12_ARB
    int GL_MATRIX13_ARB -> GL_MATRIX13_ARB
    int GL_MATRIX14_ARB -> GL_MATRIX14_ARB
    int GL_MATRIX15_ARB -> GL_MATRIX15_ARB
    int GL_MATRIX16_ARB -> GL_MATRIX16_ARB
    int GL_MATRIX17_ARB -> GL_MATRIX17_ARB
    int GL_MATRIX18_ARB -> GL_MATRIX18_ARB
    int GL_MATRIX19_ARB -> GL_MATRIX19_ARB
    int GL_MATRIX20_ARB -> GL_MATRIX20_ARB
    int GL_MATRIX21_ARB -> GL_MATRIX21_ARB
    int GL_MATRIX22_ARB -> GL_MATRIX22_ARB
    int GL_MATRIX23_ARB -> GL_MATRIX23_ARB
    int GL_MATRIX24_ARB -> GL_MATRIX24_ARB
    int GL_MATRIX25_ARB -> GL_MATRIX25_ARB
    int GL_MATRIX26_ARB -> GL_MATRIX26_ARB
    int GL_MATRIX27_ARB -> GL_MATRIX27_ARB
    int GL_MATRIX28_ARB -> GL_MATRIX28_ARB
    int GL_MATRIX29_ARB -> GL_MATRIX29_ARB
    int GL_MATRIX30_ARB -> GL_MATRIX30_ARB
    int GL_MATRIX31_ARB -> GL_MATRIX31_ARB
    int GL_PALETTE4_RGB8_OES -> GL_PALETTE4_RGB8_OES
    int GL_PALETTE4_RGBA8_OES -> GL_PALETTE4_RGBA8_OES
    int GL_PALETTE4_R5_G6_B5_OES -> GL_PALETTE4_R5_G6_B5_OES
    int GL_PALETTE4_RGBA4_OES -> GL_PALETTE4_RGBA4_OES
    int GL_PALETTE4_RGB5_A1_OES -> GL_PALETTE4_RGB5_A1_OES
    int GL_PALETTE8_RGB8_OES -> GL_PALETTE8_RGB8_OES
    int GL_PALETTE8_RGBA8_OES -> GL_PALETTE8_RGBA8_OES
    int GL_PALETTE8_R5_G6_B5_OES -> GL_PALETTE8_R5_G6_B5_OES
    int GL_PALETTE8_RGBA4_OES -> GL_PALETTE8_RGBA4_OES
    int GL_PALETTE8_RGB5_A1_OES -> GL_PALETTE8_RGB5_A1_OES
    int GL_MAX_DEBUG_MESSAGE_LENGTH_AMD -> GL_MAX_DEBUG_MESSAGE_LENGTH_AMD
    int GL_VERTEX_ELEMENT_SWIZZLE_AMD -> GL_VERTEX_ELEMENT_SWIZZLE_AMD
    int GL_VERTEX_ID_SWIZZLE_AMD -> GL_VERTEX_ID_SWIZZLE_AMD
    int GL_DATA_BUFFER_AMD -> GL_DATA_BUFFER_AMD
    int GL_PERFORMANCE_MONITOR_AMD -> GL_PERFORMANCE_MONITOR_AMD
    int GL_QUERY_OBJECT_AMD -> GL_QUERY_OBJECT_AMD
    int GL_VERTEX_ARRAY_OBJECT_AMD -> GL_VERTEX_ARRAY_OBJECT_AMD
    int GL_SAMPLER_OBJECT_AMD -> GL_SAMPLER_OBJECT_AMD
    int GL_COUNTER_TYPE_AMD -> GL_COUNTER_TYPE_AMD
    int GL_COUNTER_RANGE_AMD -> GL_COUNTER_RANGE_AMD
    int GL_UNSIGNED_INT64_AMD -> GL_UNSIGNED_INT64_AMD
    int GL_PERCENTAGE_AMD -> GL_PERCENTAGE_AMD
    int GL_PERFMON_RESULT_AVAILABLE_AMD -> GL_PERFMON_RESULT_AVAILABLE_AMD
    int GL_PERFMON_RESULT_SIZE_AMD -> GL_PERFMON_RESULT_SIZE_AMD
    int GL_PERFMON_RESULT_AMD -> GL_PERFMON_RESULT_AMD
    int GL_QUERY_BUFFER_AMD -> GL_QUERY_BUFFER_AMD
    int GL_QUERY_BUFFER_BINDING_AMD -> GL_QUERY_BUFFER_BINDING_AMD
    int GL_QUERY_RESULT_NO_WAIT_AMD -> GL_QUERY_RESULT_NO_WAIT_AMD
    int GL_VIRTUAL_PAGE_SIZE_X_AMD -> GL_VIRTUAL_PAGE_SIZE_X_AMD
    int GL_VIRTUAL_PAGE_SIZE_Y_AMD -> GL_VIRTUAL_PAGE_SIZE_Y_AMD
    int GL_VIRTUAL_PAGE_SIZE_Z_AMD -> GL_VIRTUAL_PAGE_SIZE_Z_AMD
    int GL_MAX_SPARSE_TEXTURE_SIZE_AMD -> GL_MAX_SPARSE_TEXTURE_SIZE_AMD
    int GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD -> GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD
    int GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS -> GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS
    int GL_MIN_SPARSE_LEVEL_AMD -> GL_MIN_SPARSE_LEVEL_AMD
    int GL_MIN_LOD_WARNING_AMD -> GL_MIN_LOD_WARNING_AMD
    int GL_TEXTURE_STORAGE_SPARSE_BIT_AMD -> GL_TEXTURE_STORAGE_SPARSE_BIT_AMD
    int GL_AUX_DEPTH_STENCIL_APPLE -> GL_AUX_DEPTH_STENCIL_APPLE
    int GL_UNPACK_CLIENT_STORAGE_APPLE -> GL_UNPACK_CLIENT_STORAGE_APPLE
    int GL_DRAW_PIXELS_APPLE -> GL_DRAW_PIXELS_APPLE
    int GL_FENCE_APPLE -> GL_FENCE_APPLE
    int GL_HALF_APPLE -> GL_HALF_APPLE
    int GL_RGBA_FLOAT32_APPLE -> GL_RGBA_FLOAT32_APPLE
    int GL_RGB_FLOAT32_APPLE -> GL_RGB_FLOAT32_APPLE
    int GL_ALPHA_FLOAT32_APPLE -> GL_ALPHA_FLOAT32_APPLE
    int GL_INTENSITY_FLOAT32_APPLE -> GL_INTENSITY_FLOAT32_APPLE
    int GL_LUMINANCE_FLOAT32_APPLE -> GL_LUMINANCE_FLOAT32_APPLE
    int GL_LUMINANCE_ALPHA_FLOAT32_APPLE -> GL_LUMINANCE_ALPHA_FLOAT32_APPLE
    int GL_RGBA_FLOAT16_APPLE -> GL_RGBA_FLOAT16_APPLE
    int GL_RGB_FLOAT16_APPLE -> GL_RGB_FLOAT16_APPLE
    int GL_ALPHA_FLOAT16_APPLE -> GL_ALPHA_FLOAT16_APPLE
    int GL_INTENSITY_FLOAT16_APPLE -> GL_INTENSITY_FLOAT16_APPLE
    int GL_LUMINANCE_FLOAT16_APPLE -> GL_LUMINANCE_FLOAT16_APPLE
    int GL_LUMINANCE_ALPHA_FLOAT16_APPLE -> GL_LUMINANCE_ALPHA_FLOAT16_APPLE
    int GL_COLOR_FLOAT_APPLE -> GL_COLOR_FLOAT_APPLE
    int GL_BUFFER_SERIALIZED_MODIFY -> GL_BUFFER_SERIALIZED_MODIFY
    int GL_BUFFER_FLUSHING_UNMAP -> GL_BUFFER_FLUSHING_UNMAP
    int GL_BUFFER_OBJECT_APPLE -> GL_BUFFER_OBJECT_APPLE
    int GL_RELEASED_APPLE -> GL_RELEASED_APPLE
    int GL_VOLATILE_APPLE -> GL_VOLATILE_APPLE
    int GL_RETAINED_APPLE -> GL_RETAINED_APPLE
    int GL_UNDEFINED_APPLE -> GL_UNDEFINED_APPLE
    int GL_PURGEABLE_APPLE -> GL_PURGEABLE_APPLE
    int GL_RGB_422_APPLE -> GL_RGB_422_APPLE
    int GL_UNSIGNED_SHORT_8_8_APPLE -> GL_UNSIGNED_SHORT_8_8_APPLE
    int GL_UNSIGNED_SHORT_8_8_REV_APPLE -> GL_UNSIGNED_SHORT_8_8_REV_APPLE
    int GL_PACK_ROW_BYTES_APPLE -> GL_PACK_ROW_BYTES_APPLE
    int GL_UNPACK_ROW_BYTES_APPLE -> GL_UNPACK_ROW_BYTES_APPLE
    int GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE -> GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE
    int GL_TEXTURE_RANGE_LENGTH_APPLE -> GL_TEXTURE_RANGE_LENGTH_APPLE
    int GL_TEXTURE_RANGE_POINTER_APPLE -> GL_TEXTURE_RANGE_POINTER_APPLE
    int GL_TEXTURE_STORAGE_HINT_APPLE -> GL_TEXTURE_STORAGE_HINT_APPLE
    int GL_STORAGE_PRIVATE_APPLE -> GL_STORAGE_PRIVATE_APPLE
    int GL_STORAGE_CACHED_APPLE -> GL_STORAGE_CACHED_APPLE
    int GL_STORAGE_SHARED_APPLE -> GL_STORAGE_SHARED_APPLE
    int GL_TRANSFORM_HINT_APPLE -> GL_TRANSFORM_HINT_APPLE
    int GL_VERTEX_ARRAY_RANGE_APPLE -> GL_VERTEX_ARRAY_RANGE_APPLE
    int GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE -> GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE
    int GL_VERTEX_ARRAY_STORAGE_HINT_APPLE -> GL_VERTEX_ARRAY_STORAGE_HINT_APPLE
    int GL_VERTEX_ARRAY_RANGE_POINTER_APPLE -> GL_VERTEX_ARRAY_RANGE_POINTER_APPLE
    int GL_STORAGE_CLIENT_APPLE -> GL_STORAGE_CLIENT_APPLE
    int GL_VERTEX_ATTRIB_MAP1_APPLE -> GL_VERTEX_ATTRIB_MAP1_APPLE
    int GL_VERTEX_ATTRIB_MAP2_APPLE -> GL_VERTEX_ATTRIB_MAP2_APPLE
    int GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE -> GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE
    int GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE -> GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE
    int GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE -> GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE
    int GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE -> GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE
    int GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE -> GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE
    int GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE -> GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE
    int GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE -> GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE
    int GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE -> GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE
    int GL_YCBCR_422_APPLE -> GL_YCBCR_422_APPLE
    int GL_MAX_DRAW_BUFFERS_ATI -> GL_MAX_DRAW_BUFFERS_ATI
    int GL_DRAW_BUFFER0_ATI -> GL_DRAW_BUFFER0_ATI
    int GL_DRAW_BUFFER1_ATI -> GL_DRAW_BUFFER1_ATI
    int GL_DRAW_BUFFER2_ATI -> GL_DRAW_BUFFER2_ATI
    int GL_DRAW_BUFFER3_ATI -> GL_DRAW_BUFFER3_ATI
    int GL_DRAW_BUFFER4_ATI -> GL_DRAW_BUFFER4_ATI
    int GL_DRAW_BUFFER5_ATI -> GL_DRAW_BUFFER5_ATI
    int GL_DRAW_BUFFER6_ATI -> GL_DRAW_BUFFER6_ATI
    int GL_DRAW_BUFFER7_ATI -> GL_DRAW_BUFFER7_ATI
    int GL_DRAW_BUFFER8_ATI -> GL_DRAW_BUFFER8_ATI
    int GL_DRAW_BUFFER9_ATI -> GL_DRAW_BUFFER9_ATI
    int GL_DRAW_BUFFER10_ATI -> GL_DRAW_BUFFER10_ATI
    int GL_DRAW_BUFFER11_ATI -> GL_DRAW_BUFFER11_ATI
    int GL_DRAW_BUFFER12_ATI -> GL_DRAW_BUFFER12_ATI
    int GL_DRAW_BUFFER13_ATI -> GL_DRAW_BUFFER13_ATI
    int GL_DRAW_BUFFER14_ATI -> GL_DRAW_BUFFER14_ATI
    int GL_DRAW_BUFFER15_ATI -> GL_DRAW_BUFFER15_ATI
    int GL_VBO_FREE_MEMORY_ATI -> GL_VBO_FREE_MEMORY_ATI
    int GL_TEXTURE_FREE_MEMORY_ATI -> GL_TEXTURE_FREE_MEMORY_ATI
    int GL_RENDERBUFFER_FREE_MEMORY_ATI -> GL_RENDERBUFFER_FREE_MEMORY_ATI
    int GL_RGBA_FLOAT_MODE_ATI -> GL_RGBA_FLOAT_MODE_ATI
    int GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI -> GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI
    int GL_PN_TRIANGLES_ATI -> GL_PN_TRIANGLES_ATI
    int GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI -> GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI
    int GL_PN_TRIANGLES_POINT_MODE_ATI -> GL_PN_TRIANGLES_POINT_MODE_ATI
    int GL_PN_TRIANGLES_NORMAL_MODE_ATI -> GL_PN_TRIANGLES_NORMAL_MODE_ATI
    int GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI -> GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI
    int GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI -> GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI
    int GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI -> GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI
    int GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI -> GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI
    int GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI -> GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI
    int GL_RGBA_FLOAT32_ATI -> GL_RGBA_FLOAT32_ATI
    int GL_RGB_FLOAT32_ATI -> GL_RGB_FLOAT32_ATI
    int GL_ALPHA_FLOAT32_ATI -> GL_ALPHA_FLOAT32_ATI
    int GL_INTENSITY_FLOAT32_ATI -> GL_INTENSITY_FLOAT32_ATI
    int GL_LUMINANCE_FLOAT32_ATI -> GL_LUMINANCE_FLOAT32_ATI
    int GL_LUMINANCE_ALPHA_FLOAT32_ATI -> GL_LUMINANCE_ALPHA_FLOAT32_ATI
    int GL_RGBA_FLOAT16_ATI -> GL_RGBA_FLOAT16_ATI
    int GL_RGB_FLOAT16_ATI -> GL_RGB_FLOAT16_ATI
    int GL_ALPHA_FLOAT16_ATI -> GL_ALPHA_FLOAT16_ATI
    int GL_INTENSITY_FLOAT16_ATI -> GL_INTENSITY_FLOAT16_ATI
    int GL_LUMINANCE_FLOAT16_ATI -> GL_LUMINANCE_FLOAT16_ATI
    int GL_LUMINANCE_ALPHA_FLOAT16_ATI -> GL_LUMINANCE_ALPHA_FLOAT16_ATI
    int GL_422_EXT -> GL_422_EXT
    int GL_422_REV_EXT -> GL_422_REV_EXT
    int GL_422_AVERAGE_EXT -> GL_422_AVERAGE_EXT
    int GL_422_REV_AVERAGE_EXT -> GL_422_REV_AVERAGE_EXT
    int GL_ABGR_EXT -> GL_ABGR_EXT
    int GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT -> GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT
    int GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT -> GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT
    int GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT -> GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT
    int GL_MAX_BINDABLE_UNIFORM_SIZE_EXT -> GL_MAX_BINDABLE_UNIFORM_SIZE_EXT
    int GL_UNIFORM_BUFFER_EXT -> GL_UNIFORM_BUFFER_EXT
    int GL_UNIFORM_BUFFER_BINDING_EXT -> GL_UNIFORM_BUFFER_BINDING_EXT
    int GL_CLIP_VOLUME_CLIPPING_HINT_EXT -> GL_CLIP_VOLUME_CLIPPING_HINT_EXT
    int GL_CMYK_EXT -> GL_CMYK_EXT
    int GL_CMYKA_EXT -> GL_CMYKA_EXT
    int GL_PACK_CMYK_HINT_EXT -> GL_PACK_CMYK_HINT_EXT
    int GL_UNPACK_CMYK_HINT_EXT -> GL_UNPACK_CMYK_HINT_EXT
    int GL_ARRAY_ELEMENT_LOCK_FIRST_EXT -> GL_ARRAY_ELEMENT_LOCK_FIRST_EXT
    int GL_ARRAY_ELEMENT_LOCK_COUNT_EXT -> GL_ARRAY_ELEMENT_LOCK_COUNT_EXT
    int GL_CULL_VERTEX_EXT -> GL_CULL_VERTEX_EXT
    int GL_CULL_VERTEX_EYE_POSITION_EXT -> GL_CULL_VERTEX_EYE_POSITION_EXT
    int GL_CULL_VERTEX_OBJECT_POSITION_EXT -> GL_CULL_VERTEX_OBJECT_POSITION_EXT
    int GL_DEPTH_BOUNDS_TEST_EXT -> GL_DEPTH_BOUNDS_TEST_EXT
    int GL_DEPTH_BOUNDS_EXT -> GL_DEPTH_BOUNDS_EXT
    int GL_PROGRAM_MATRIX_EXT -> GL_PROGRAM_MATRIX_EXT
    int GL_TRANSPOSE_PROGRAM_MATRIX_EXT -> GL_TRANSPOSE_PROGRAM_MATRIX_EXT
    int GL_PROGRAM_MATRIX_STACK_DEPTH_EXT -> GL_PROGRAM_MATRIX_STACK_DEPTH_EXT
    int GL_IUI_V2F_EXT -> GL_IUI_V2F_EXT
    int GL_IUI_V3F_EXT -> GL_IUI_V3F_EXT
    int GL_IUI_N3F_V2F_EXT -> GL_IUI_N3F_V2F_EXT
    int GL_IUI_N3F_V3F_EXT -> GL_IUI_N3F_V3F_EXT
    int GL_T2F_IUI_V2F_EXT -> GL_T2F_IUI_V2F_EXT
    int GL_T2F_IUI_V3F_EXT -> GL_T2F_IUI_V3F_EXT
    int GL_T2F_IUI_N3F_V2F_EXT -> GL_T2F_IUI_N3F_V2F_EXT
    int GL_T2F_IUI_N3F_V3F_EXT -> GL_T2F_IUI_N3F_V3F_EXT
    int GL_INDEX_TEST_EXT -> GL_INDEX_TEST_EXT
    int GL_INDEX_TEST_FUNC_EXT -> GL_INDEX_TEST_FUNC_EXT
    int GL_INDEX_TEST_REF_EXT -> GL_INDEX_TEST_REF_EXT
    int GL_INDEX_MATERIAL_EXT -> GL_INDEX_MATERIAL_EXT
    int GL_INDEX_MATERIAL_PARAMETER_EXT -> GL_INDEX_MATERIAL_PARAMETER_EXT
    int GL_INDEX_MATERIAL_FACE_EXT -> GL_INDEX_MATERIAL_FACE_EXT
    int GL_FRAGMENT_MATERIAL_EXT -> GL_FRAGMENT_MATERIAL_EXT
    int GL_FRAGMENT_NORMAL_EXT -> GL_FRAGMENT_NORMAL_EXT
    int GL_FRAGMENT_COLOR_EXT -> GL_FRAGMENT_COLOR_EXT
    int GL_ATTENUATION_EXT -> GL_ATTENUATION_EXT
    int GL_SHADOW_ATTENUATION_EXT -> GL_SHADOW_ATTENUATION_EXT
    int GL_TEXTURE_APPLICATION_MODE_EXT -> GL_TEXTURE_APPLICATION_MODE_EXT
    int GL_TEXTURE_LIGHT_EXT -> GL_TEXTURE_LIGHT_EXT
    int GL_TEXTURE_MATERIAL_FACE_EXT -> GL_TEXTURE_MATERIAL_FACE_EXT
    int GL_TEXTURE_MATERIAL_PARAMETER_EXT -> GL_TEXTURE_MATERIAL_PARAMETER_EXT
    int GL_PIXEL_PACK_BUFFER_EXT -> GL_PIXEL_PACK_BUFFER_EXT
    int GL_PIXEL_UNPACK_BUFFER_EXT -> GL_PIXEL_UNPACK_BUFFER_EXT
    int GL_PIXEL_PACK_BUFFER_BINDING_EXT -> GL_PIXEL_PACK_BUFFER_BINDING_EXT
    int GL_PIXEL_UNPACK_BUFFER_BINDING_EXT -> GL_PIXEL_UNPACK_BUFFER_BINDING_EXT
    int GL_PIXEL_TRANSFORM_2D_EXT -> GL_PIXEL_TRANSFORM_2D_EXT
    int GL_PIXEL_MAG_FILTER_EXT -> GL_PIXEL_MAG_FILTER_EXT
    int GL_PIXEL_MIN_FILTER_EXT -> GL_PIXEL_MIN_FILTER_EXT
    int GL_PIXEL_CUBIC_WEIGHT_EXT -> GL_PIXEL_CUBIC_WEIGHT_EXT
    int GL_CUBIC_EXT -> GL_CUBIC_EXT
    int GL_AVERAGE_EXT -> GL_AVERAGE_EXT
    int GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT -> GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
    int GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT -> GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
    int GL_PIXEL_TRANSFORM_2D_MATRIX_EXT -> GL_PIXEL_TRANSFORM_2D_MATRIX_EXT
    int GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT -> GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT
    int GL_FIRST_VERTEX_CONVENTION_EXT -> GL_FIRST_VERTEX_CONVENTION_EXT
    int GL_LAST_VERTEX_CONVENTION_EXT -> GL_LAST_VERTEX_CONVENTION_EXT
    int GL_PROVOKING_VERTEX_EXT -> GL_PROVOKING_VERTEX_EXT
    int GL_SHARED_TEXTURE_PALETTE_EXT -> GL_SHARED_TEXTURE_PALETTE_EXT
    int GL_STENCIL_TAG_BITS_EXT -> GL_STENCIL_TAG_BITS_EXT
    int GL_STENCIL_CLEAR_TAG_VALUE_EXT -> GL_STENCIL_CLEAR_TAG_VALUE_EXT
    int GL_STENCIL_TEST_TWO_SIDE_EXT -> GL_STENCIL_TEST_TWO_SIDE_EXT
    int GL_ACTIVE_STENCIL_FACE_EXT -> GL_ACTIVE_STENCIL_FACE_EXT
    int GL_COMPARE_REF_DEPTH_TO_TEXTURE -> GL_COMPARE_REF_DEPTH_TO_TEXTURE
    int GL_COMPRESSED_LUMINANCE_LATC1_EXT -> GL_COMPRESSED_LUMINANCE_LATC1_EXT
    int GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT -> GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT
    int GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT -> GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT
    int GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT -> GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT
    int GL_ALPHA32UI -> GL_ALPHA32UI
    int GL_INTENSITY32UI -> GL_INTENSITY32UI
    int GL_LUMINANCE32UI -> GL_LUMINANCE32UI
    int GL_LUMINANCE_ALPHA32UI -> GL_LUMINANCE_ALPHA32UI
    int GL_ALPHA16UI -> GL_ALPHA16UI
    int GL_INTENSITY16UI -> GL_INTENSITY16UI
    int GL_LUMINANCE16UI -> GL_LUMINANCE16UI
    int GL_LUMINANCE_ALPHA16UI -> GL_LUMINANCE_ALPHA16UI
    int GL_ALPHA8UI -> GL_ALPHA8UI
    int GL_INTENSITY8UI -> GL_INTENSITY8UI
    int GL_LUMINANCE8UI -> GL_LUMINANCE8UI
    int GL_LUMINANCE_ALPHA8UI -> GL_LUMINANCE_ALPHA8UI
    int GL_ALPHA32I -> GL_ALPHA32I
    int GL_INTENSITY32I -> GL_INTENSITY32I
    int GL_LUMINANCE32I -> GL_LUMINANCE32I
    int GL_LUMINANCE_ALPHA32I -> GL_LUMINANCE_ALPHA32I
    int GL_ALPHA16I -> GL_ALPHA16I
    int GL_INTENSITY16I -> GL_INTENSITY16I
    int GL_LUMINANCE16I -> GL_LUMINANCE16I
    int GL_LUMINANCE_ALPHA16I -> GL_LUMINANCE_ALPHA16I
    int GL_ALPHA8I -> GL_ALPHA8I
    int GL_INTENSITY8I -> GL_INTENSITY8I
    int GL_LUMINANCE8I -> GL_LUMINANCE8I
    int GL_LUMINANCE_ALPHA8I -> GL_LUMINANCE_ALPHA8I
    int GL_LUMINANCE_INTEGER -> GL_LUMINANCE_INTEGER
    int GL_LUMINANCE_ALPHA_INTEGER -> GL_LUMINANCE_ALPHA_INTEGER
    int GL_RGBA_INTEGER_MODE -> GL_RGBA_INTEGER_MODE
    int GL_MIRROR_CLAMP_EXT -> GL_MIRROR_CLAMP_EXT
    int GL_MIRROR_CLAMP_TO_EDGE_EXT -> GL_MIRROR_CLAMP_TO_EDGE_EXT
    int GL_MIRROR_CLAMP_TO_BORDER_EXT -> GL_MIRROR_CLAMP_TO_BORDER_EXT
    int GL_PERTURB_EXT -> GL_PERTURB_EXT
    int GL_TEXTURE_NORMAL_EXT -> GL_TEXTURE_NORMAL_EXT
    int GL_ALPHA_SNORM -> GL_ALPHA_SNORM
    int GL_LUMINANCE_SNORM -> GL_LUMINANCE_SNORM
    int GL_LUMINANCE_ALPHA_SNORM -> GL_LUMINANCE_ALPHA_SNORM
    int GL_INTENSITY_SNORM -> GL_INTENSITY_SNORM
    int GL_ALPHA8_SNORM -> GL_ALPHA8_SNORM
    int GL_LUMINANCE8_SNORM -> GL_LUMINANCE8_SNORM
    int GL_LUMINANCE8_ALPHA8_SNORM -> GL_LUMINANCE8_ALPHA8_SNORM
    int GL_INTENSITY8_SNORM -> GL_INTENSITY8_SNORM
    int GL_ALPHA16_SNORM -> GL_ALPHA16_SNORM
    int GL_LUMINANCE16_SNORM -> GL_LUMINANCE16_SNORM
    int GL_LUMINANCE16_ALPHA16_SNORM -> GL_LUMINANCE16_ALPHA16_SNORM
    int GL_INTENSITY16_SNORM -> GL_INTENSITY16_SNORM
    int GL_TEXTURE_SWIZZLE_R_EXT -> GL_TEXTURE_SWIZZLE_R_EXT
    int GL_TEXTURE_SWIZZLE_G_EXT -> GL_TEXTURE_SWIZZLE_G_EXT
    int GL_TEXTURE_SWIZZLE_B_EXT -> GL_TEXTURE_SWIZZLE_B_EXT
    int GL_TEXTURE_SWIZZLE_A_EXT -> GL_TEXTURE_SWIZZLE_A_EXT
    int GL_TEXTURE_SWIZZLE_RGBA_EXT -> GL_TEXTURE_SWIZZLE_RGBA_EXT
    int GL_TIME_ELAPSED_EXT -> GL_TIME_ELAPSED_EXT
    int GL_VERTEX_SHADER_EXT -> GL_VERTEX_SHADER_EXT
    int GL_VERTEX_SHADER_BINDING_EXT -> GL_VERTEX_SHADER_BINDING_EXT
    int GL_OP_INDEX_EXT -> GL_OP_INDEX_EXT
    int GL_OP_NEGATE_EXT -> GL_OP_NEGATE_EXT
    int GL_OP_DOT3_EXT -> GL_OP_DOT3_EXT
    int GL_OP_DOT4_EXT -> GL_OP_DOT4_EXT
    int GL_OP_MUL_EXT -> GL_OP_MUL_EXT
    int GL_OP_ADD_EXT -> GL_OP_ADD_EXT
    int GL_OP_MADD_EXT -> GL_OP_MADD_EXT
    int GL_OP_FRAC_EXT -> GL_OP_FRAC_EXT
    int GL_OP_MAX_EXT -> GL_OP_MAX_EXT
    int GL_OP_MIN_EXT -> GL_OP_MIN_EXT
    int GL_OP_SET_GE_EXT -> GL_OP_SET_GE_EXT
    int GL_OP_SET_LT_EXT -> GL_OP_SET_LT_EXT
    int GL_OP_CLAMP_EXT -> GL_OP_CLAMP_EXT
    int GL_OP_FLOOR_EXT -> GL_OP_FLOOR_EXT
    int GL_OP_ROUND_EXT -> GL_OP_ROUND_EXT
    int GL_OP_EXP_BASE_2_EXT -> GL_OP_EXP_BASE_2_EXT
    int GL_OP_LOG_BASE_2_EXT -> GL_OP_LOG_BASE_2_EXT
    int GL_OP_POWER_EXT -> GL_OP_POWER_EXT
    int GL_OP_RECIP_EXT -> GL_OP_RECIP_EXT
    int GL_OP_RECIP_SQRT_EXT -> GL_OP_RECIP_SQRT_EXT
    int GL_OP_SUB_EXT -> GL_OP_SUB_EXT
    int GL_OP_CROSS_PRODUCT_EXT -> GL_OP_CROSS_PRODUCT_EXT
    int GL_OP_MULTIPLY_MATRIX_EXT -> GL_OP_MULTIPLY_MATRIX_EXT
    int GL_OP_MOV_EXT -> GL_OP_MOV_EXT
    int GL_OUTPUT_VERTEX_EXT -> GL_OUTPUT_VERTEX_EXT
    int GL_OUTPUT_COLOR0_EXT -> GL_OUTPUT_COLOR0_EXT
    int GL_OUTPUT_COLOR1_EXT -> GL_OUTPUT_COLOR1_EXT
    int GL_OUTPUT_TEXTURE_COORD0_EXT -> GL_OUTPUT_TEXTURE_COORD0_EXT
    int GL_OUTPUT_TEXTURE_COORD1_EXT -> GL_OUTPUT_TEXTURE_COORD1_EXT
    int GL_OUTPUT_TEXTURE_COORD2_EXT -> GL_OUTPUT_TEXTURE_COORD2_EXT
    int GL_OUTPUT_TEXTURE_COORD3_EXT -> GL_OUTPUT_TEXTURE_COORD3_EXT
    int GL_OUTPUT_TEXTURE_COORD4_EXT -> GL_OUTPUT_TEXTURE_COORD4_EXT
    int GL_OUTPUT_TEXTURE_COORD5_EXT -> GL_OUTPUT_TEXTURE_COORD5_EXT
    int GL_OUTPUT_TEXTURE_COORD6_EXT -> GL_OUTPUT_TEXTURE_COORD6_EXT
    int GL_OUTPUT_TEXTURE_COORD7_EXT -> GL_OUTPUT_TEXTURE_COORD7_EXT
    int GL_OUTPUT_TEXTURE_COORD8_EXT -> GL_OUTPUT_TEXTURE_COORD8_EXT
    int GL_OUTPUT_TEXTURE_COORD9_EXT -> GL_OUTPUT_TEXTURE_COORD9_EXT
    int GL_OUTPUT_TEXTURE_COORD10_EXT -> GL_OUTPUT_TEXTURE_COORD10_EXT
    int GL_OUTPUT_TEXTURE_COORD11_EXT -> GL_OUTPUT_TEXTURE_COORD11_EXT
    int GL_OUTPUT_TEXTURE_COORD12_EXT -> GL_OUTPUT_TEXTURE_COORD12_EXT
    int GL_OUTPUT_TEXTURE_COORD13_EXT -> GL_OUTPUT_TEXTURE_COORD13_EXT
    int GL_OUTPUT_TEXTURE_COORD14_EXT -> GL_OUTPUT_TEXTURE_COORD14_EXT
    int GL_OUTPUT_TEXTURE_COORD15_EXT -> GL_OUTPUT_TEXTURE_COORD15_EXT
    int GL_OUTPUT_TEXTURE_COORD16_EXT -> GL_OUTPUT_TEXTURE_COORD16_EXT
    int GL_OUTPUT_TEXTURE_COORD17_EXT -> GL_OUTPUT_TEXTURE_COORD17_EXT
    int GL_OUTPUT_TEXTURE_COORD18_EXT -> GL_OUTPUT_TEXTURE_COORD18_EXT
    int GL_OUTPUT_TEXTURE_COORD19_EXT -> GL_OUTPUT_TEXTURE_COORD19_EXT
    int GL_OUTPUT_TEXTURE_COORD20_EXT -> GL_OUTPUT_TEXTURE_COORD20_EXT
    int GL_OUTPUT_TEXTURE_COORD21_EXT -> GL_OUTPUT_TEXTURE_COORD21_EXT
    int GL_OUTPUT_TEXTURE_COORD22_EXT -> GL_OUTPUT_TEXTURE_COORD22_EXT
    int GL_OUTPUT_TEXTURE_COORD23_EXT -> GL_OUTPUT_TEXTURE_COORD23_EXT
    int GL_OUTPUT_TEXTURE_COORD24_EXT -> GL_OUTPUT_TEXTURE_COORD24_EXT
    int GL_OUTPUT_TEXTURE_COORD25_EXT -> GL_OUTPUT_TEXTURE_COORD25_EXT
    int GL_OUTPUT_TEXTURE_COORD26_EXT -> GL_OUTPUT_TEXTURE_COORD26_EXT
    int GL_OUTPUT_TEXTURE_COORD27_EXT -> GL_OUTPUT_TEXTURE_COORD27_EXT
    int GL_OUTPUT_TEXTURE_COORD28_EXT -> GL_OUTPUT_TEXTURE_COORD28_EXT
    int GL_OUTPUT_TEXTURE_COORD29_EXT -> GL_OUTPUT_TEXTURE_COORD29_EXT
    int GL_OUTPUT_TEXTURE_COORD30_EXT -> GL_OUTPUT_TEXTURE_COORD30_EXT
    int GL_OUTPUT_TEXTURE_COORD31_EXT -> GL_OUTPUT_TEXTURE_COORD31_EXT
    int GL_OUTPUT_FOG_EXT -> GL_OUTPUT_FOG_EXT
    int GL_SCALAR_EXT -> GL_SCALAR_EXT
    int GL_VECTOR_EXT -> GL_VECTOR_EXT
    int GL_MATRIX_EXT -> GL_MATRIX_EXT
    int GL_VARIANT_EXT -> GL_VARIANT_EXT
    int GL_INVARIANT_EXT -> GL_INVARIANT_EXT
    int GL_LOCAL_CONSTANT_EXT -> GL_LOCAL_CONSTANT_EXT
    int GL_LOCAL_EXT -> GL_LOCAL_EXT
    int GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT -> GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT
    int GL_MAX_VERTEX_SHADER_VARIANTS_EXT -> GL_MAX_VERTEX_SHADER_VARIANTS_EXT
    int GL_MAX_VERTEX_SHADER_INVARIANTS_EXT -> GL_MAX_VERTEX_SHADER_INVARIANTS_EXT
    int GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT -> GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
    int GL_MAX_VERTEX_SHADER_LOCALS_EXT -> GL_MAX_VERTEX_SHADER_LOCALS_EXT
    int GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT -> GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT
    int GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT -> GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT
    int GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT -> GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
    int GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT -> GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT
    int GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT -> GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT
    int GL_VERTEX_SHADER_INSTRUCTIONS_EXT -> GL_VERTEX_SHADER_INSTRUCTIONS_EXT
    int GL_VERTEX_SHADER_VARIANTS_EXT -> GL_VERTEX_SHADER_VARIANTS_EXT
    int GL_VERTEX_SHADER_INVARIANTS_EXT -> GL_VERTEX_SHADER_INVARIANTS_EXT
    int GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT -> GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
    int GL_VERTEX_SHADER_LOCALS_EXT -> GL_VERTEX_SHADER_LOCALS_EXT
    int GL_VERTEX_SHADER_OPTIMIZED_EXT -> GL_VERTEX_SHADER_OPTIMIZED_EXT
    int GL_X_EXT -> GL_X_EXT
    int GL_Y_EXT -> GL_Y_EXT
    int GL_Z_EXT -> GL_Z_EXT
    int GL_W_EXT -> GL_W_EXT
    int GL_NEGATIVE_X_EXT -> GL_NEGATIVE_X_EXT
    int GL_NEGATIVE_Y_EXT -> GL_NEGATIVE_Y_EXT
    int GL_NEGATIVE_Z_EXT -> GL_NEGATIVE_Z_EXT
    int GL_NEGATIVE_W_EXT -> GL_NEGATIVE_W_EXT
    int GL_ZERO_EXT -> GL_ZERO_EXT
    int GL_ONE_EXT -> GL_ONE_EXT
    int GL_NEGATIVE_ONE_EXT -> GL_NEGATIVE_ONE_EXT
    int GL_NORMALIZED_RANGE_EXT -> GL_NORMALIZED_RANGE_EXT
    int GL_FULL_RANGE_EXT -> GL_FULL_RANGE_EXT
    int GL_CURRENT_VERTEX_EXT -> GL_CURRENT_VERTEX_EXT
    int GL_MVP_MATRIX_EXT -> GL_MVP_MATRIX_EXT
    int GL_VARIANT_VALUE_EXT -> GL_VARIANT_VALUE_EXT
    int GL_VARIANT_DATATYPE_EXT -> GL_VARIANT_DATATYPE_EXT
    int GL_VARIANT_ARRAY_STRIDE_EXT -> GL_VARIANT_ARRAY_STRIDE_EXT
    int GL_VARIANT_ARRAY_TYPE_EXT -> GL_VARIANT_ARRAY_TYPE_EXT
    int GL_VARIANT_ARRAY_EXT -> GL_VARIANT_ARRAY_EXT
    int GL_VARIANT_ARRAY_POINTER_EXT -> GL_VARIANT_ARRAY_POINTER_EXT
    int GL_INVARIANT_VALUE_EXT -> GL_INVARIANT_VALUE_EXT
    int GL_INVARIANT_DATATYPE_EXT -> GL_INVARIANT_DATATYPE_EXT
    int GL_LOCAL_CONSTANT_VALUE_EXT -> GL_LOCAL_CONSTANT_VALUE_EXT
    int GL_LOCAL_CONSTANT_DATATYPE_EXT -> GL_LOCAL_CONSTANT_DATATYPE_EXT
    int GL_MODELVIEW0_STACK_DEPTH_EXT -> GL_MODELVIEW0_STACK_DEPTH_EXT
    int GL_MODELVIEW1_STACK_DEPTH_EXT -> GL_MODELVIEW1_STACK_DEPTH_EXT
    int GL_MODELVIEW0_MATRIX_EXT -> GL_MODELVIEW0_MATRIX_EXT
    int GL_MODELVIEW1_MATRIX_EXT -> GL_MODELVIEW1_MATRIX_EXT
    int GL_VERTEX_WEIGHTING_EXT -> GL_VERTEX_WEIGHTING_EXT
    int GL_MODELVIEW0_EXT -> GL_MODELVIEW0_EXT
    int GL_MODELVIEW1_EXT -> GL_MODELVIEW1_EXT
    int GL_CURRENT_VERTEX_WEIGHT_EXT -> GL_CURRENT_VERTEX_WEIGHT_EXT
    int GL_VERTEX_WEIGHT_ARRAY_EXT -> GL_VERTEX_WEIGHT_ARRAY_EXT
    int GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT -> GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT
    int GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT -> GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT
    int GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT -> GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT
    int GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT -> GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT
    int GL_RED_MIN_CLAMP_INGR -> GL_RED_MIN_CLAMP_INGR
    int GL_GREEN_MIN_CLAMP_INGR -> GL_GREEN_MIN_CLAMP_INGR
    int GL_BLUE_MIN_CLAMP_INGR -> GL_BLUE_MIN_CLAMP_INGR
    int GL_ALPHA_MIN_CLAMP_INGR -> GL_ALPHA_MIN_CLAMP_INGR
    int GL_RED_MAX_CLAMP_INGR -> GL_RED_MAX_CLAMP_INGR
    int GL_GREEN_MAX_CLAMP_INGR -> GL_GREEN_MAX_CLAMP_INGR
    int GL_BLUE_MAX_CLAMP_INGR -> GL_BLUE_MAX_CLAMP_INGR
    int GL_ALPHA_MAX_CLAMP_INGR -> GL_ALPHA_MAX_CLAMP_INGR
    int GL_INTERLACE_READ_INGR -> GL_INTERLACE_READ_INGR
    int GL_TEXTURE_MEMORY_LAYOUT_INTEL -> GL_TEXTURE_MEMORY_LAYOUT_INTEL
    int GL_LAYOUT_DEFAULT_INTEL -> GL_LAYOUT_DEFAULT_INTEL
    int GL_LAYOUT_LINEAR_INTEL -> GL_LAYOUT_LINEAR_INTEL
    int GL_LAYOUT_LINEAR_CPU_CACHED_INTEL -> GL_LAYOUT_LINEAR_CPU_CACHED_INTEL
    int GL_COMPUTE_PROGRAM_NV -> GL_COMPUTE_PROGRAM_NV
    int GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV -> GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV
    int GL_DEPTH_STENCIL_TO_RGBA_NV -> GL_DEPTH_STENCIL_TO_RGBA_NV
    int GL_DEPTH_STENCIL_TO_BGRA_NV -> GL_DEPTH_STENCIL_TO_BGRA_NV
    int GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV -> GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV
    int GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV -> GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV
    int GL_DEPTH_CLAMP_NV -> GL_DEPTH_CLAMP_NV
    int GL_EVAL_2D_NV -> GL_EVAL_2D_NV
    int GL_EVAL_TRIANGULAR_2D_NV -> GL_EVAL_TRIANGULAR_2D_NV
    int GL_MAP_TESSELLATION_NV -> GL_MAP_TESSELLATION_NV
    int GL_MAP_ATTRIB_U_ORDER_NV -> GL_MAP_ATTRIB_U_ORDER_NV
    int GL_MAP_ATTRIB_V_ORDER_NV -> GL_MAP_ATTRIB_V_ORDER_NV
    int GL_EVAL_FRACTIONAL_TESSELLATION_NV -> GL_EVAL_FRACTIONAL_TESSELLATION_NV
    int GL_EVAL_VERTEX_ATTRIB0_NV -> GL_EVAL_VERTEX_ATTRIB0_NV
    int GL_EVAL_VERTEX_ATTRIB1_NV -> GL_EVAL_VERTEX_ATTRIB1_NV
    int GL_EVAL_VERTEX_ATTRIB2_NV -> GL_EVAL_VERTEX_ATTRIB2_NV
    int GL_EVAL_VERTEX_ATTRIB3_NV -> GL_EVAL_VERTEX_ATTRIB3_NV
    int GL_EVAL_VERTEX_ATTRIB4_NV -> GL_EVAL_VERTEX_ATTRIB4_NV
    int GL_EVAL_VERTEX_ATTRIB5_NV -> GL_EVAL_VERTEX_ATTRIB5_NV
    int GL_EVAL_VERTEX_ATTRIB6_NV -> GL_EVAL_VERTEX_ATTRIB6_NV
    int GL_EVAL_VERTEX_ATTRIB7_NV -> GL_EVAL_VERTEX_ATTRIB7_NV
    int GL_EVAL_VERTEX_ATTRIB8_NV -> GL_EVAL_VERTEX_ATTRIB8_NV
    int GL_EVAL_VERTEX_ATTRIB9_NV -> GL_EVAL_VERTEX_ATTRIB9_NV
    int GL_EVAL_VERTEX_ATTRIB10_NV -> GL_EVAL_VERTEX_ATTRIB10_NV
    int GL_EVAL_VERTEX_ATTRIB11_NV -> GL_EVAL_VERTEX_ATTRIB11_NV
    int GL_EVAL_VERTEX_ATTRIB12_NV -> GL_EVAL_VERTEX_ATTRIB12_NV
    int GL_EVAL_VERTEX_ATTRIB13_NV -> GL_EVAL_VERTEX_ATTRIB13_NV
    int GL_EVAL_VERTEX_ATTRIB14_NV -> GL_EVAL_VERTEX_ATTRIB14_NV
    int GL_EVAL_VERTEX_ATTRIB15_NV -> GL_EVAL_VERTEX_ATTRIB15_NV
    int GL_MAX_MAP_TESSELLATION_NV -> GL_MAX_MAP_TESSELLATION_NV
    int GL_MAX_RATIONAL_EVAL_ORDER_NV -> GL_MAX_RATIONAL_EVAL_ORDER_NV
    int GL_SAMPLE_POSITION_NV -> GL_SAMPLE_POSITION_NV
    int GL_SAMPLE_MASK_NV -> GL_SAMPLE_MASK_NV
    int GL_SAMPLE_MASK_VALUE_NV -> GL_SAMPLE_MASK_VALUE_NV
    int GL_TEXTURE_BINDING_RENDERBUFFER_NV -> GL_TEXTURE_BINDING_RENDERBUFFER_NV
    int GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV -> GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV
    int GL_TEXTURE_RENDERBUFFER_NV -> GL_TEXTURE_RENDERBUFFER_NV
    int GL_SAMPLER_RENDERBUFFER_NV -> GL_SAMPLER_RENDERBUFFER_NV
    int GL_INT_SAMPLER_RENDERBUFFER_NV -> GL_INT_SAMPLER_RENDERBUFFER_NV
    int GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV -> GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV
    int GL_MAX_SAMPLE_MASK_WORDS_NV -> GL_MAX_SAMPLE_MASK_WORDS_NV
    int GL_ALL_COMPLETED_NV -> GL_ALL_COMPLETED_NV
    int GL_FENCE_STATUS_NV -> GL_FENCE_STATUS_NV
    int GL_FENCE_CONDITION_NV -> GL_FENCE_CONDITION_NV
    int GL_FLOAT_R_NV -> GL_FLOAT_R_NV
    int GL_FLOAT_RG_NV -> GL_FLOAT_RG_NV
    int GL_FLOAT_RGB_NV -> GL_FLOAT_RGB_NV
    int GL_FLOAT_RGBA_NV -> GL_FLOAT_RGBA_NV
    int GL_FLOAT_R16_NV -> GL_FLOAT_R16_NV
    int GL_FLOAT_R32_NV -> GL_FLOAT_R32_NV
    int GL_FLOAT_RG16_NV -> GL_FLOAT_RG16_NV
    int GL_FLOAT_RG32_NV -> GL_FLOAT_RG32_NV
    int GL_FLOAT_RGB16_NV -> GL_FLOAT_RGB16_NV
    int GL_FLOAT_RGB32_NV -> GL_FLOAT_RGB32_NV
    int GL_FLOAT_RGBA16_NV -> GL_FLOAT_RGBA16_NV
    int GL_FLOAT_RGBA32_NV -> GL_FLOAT_RGBA32_NV
    int GL_TEXTURE_FLOAT_COMPONENTS_NV -> GL_TEXTURE_FLOAT_COMPONENTS_NV
    int GL_FLOAT_CLEAR_COLOR_VALUE_NV -> GL_FLOAT_CLEAR_COLOR_VALUE_NV
    int GL_FLOAT_RGBA_MODE_NV -> GL_FLOAT_RGBA_MODE_NV
    int GL_FOG_DISTANCE_MODE_NV -> GL_FOG_DISTANCE_MODE_NV
    int GL_EYE_RADIAL_NV -> GL_EYE_RADIAL_NV
    int GL_EYE_PLANE_ABSOLUTE_NV -> GL_EYE_PLANE_ABSOLUTE_NV
    int GL_RENDERBUFFER_COVERAGE_SAMPLES_NV -> GL_RENDERBUFFER_COVERAGE_SAMPLES_NV
    int GL_RENDERBUFFER_COLOR_SAMPLES_NV -> GL_RENDERBUFFER_COLOR_SAMPLES_NV
    int GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV -> GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV
    int GL_MULTISAMPLE_COVERAGE_MODES_NV -> GL_MULTISAMPLE_COVERAGE_MODES_NV
    int GL_GEOMETRY_PROGRAM_NV -> GL_GEOMETRY_PROGRAM_NV
    int GL_MAX_PROGRAM_OUTPUT_VERTICES_NV -> GL_MAX_PROGRAM_OUTPUT_VERTICES_NV
    int GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV -> GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV
    int GL_MIN_PROGRAM_TEXEL_OFFSET_NV -> GL_MIN_PROGRAM_TEXEL_OFFSET_NV
    int GL_MAX_PROGRAM_TEXEL_OFFSET_NV -> GL_MAX_PROGRAM_TEXEL_OFFSET_NV
    int GL_PROGRAM_ATTRIB_COMPONENTS_NV -> GL_PROGRAM_ATTRIB_COMPONENTS_NV
    int GL_PROGRAM_RESULT_COMPONENTS_NV -> GL_PROGRAM_RESULT_COMPONENTS_NV
    int GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV -> GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV
    int GL_MAX_PROGRAM_RESULT_COMPONENTS_NV -> GL_MAX_PROGRAM_RESULT_COMPONENTS_NV
    int GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV -> GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV
    int GL_MAX_PROGRAM_GENERIC_RESULTS_NV -> GL_MAX_PROGRAM_GENERIC_RESULTS_NV
    int GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV -> GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV
    int GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV -> GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV
    int GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV -> GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV
    int GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV -> GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV
    int GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV -> GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV
    int GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV -> GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV
    int GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV -> GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV
    int GL_MAX_PROGRAM_SUBROUTINE_NUM_NV -> GL_MAX_PROGRAM_SUBROUTINE_NUM_NV
    int GL_MAX_SHININESS_NV -> GL_MAX_SHININESS_NV
    int GL_MAX_SPOT_EXPONENT_NV -> GL_MAX_SPOT_EXPONENT_NV
    int GL_COLOR_SAMPLES_NV -> GL_COLOR_SAMPLES_NV
    int GL_MULTISAMPLE_FILTER_HINT_NV -> GL_MULTISAMPLE_FILTER_HINT_NV
    int GL_PIXEL_COUNTER_BITS_NV -> GL_PIXEL_COUNTER_BITS_NV
    int GL_CURRENT_OCCLUSION_QUERY_ID_NV -> GL_CURRENT_OCCLUSION_QUERY_ID_NV
    int GL_PIXEL_COUNT_NV -> GL_PIXEL_COUNT_NV
    int GL_PIXEL_COUNT_AVAILABLE_NV -> GL_PIXEL_COUNT_AVAILABLE_NV
    int GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV -> GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV
    int GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV -> GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV
    int GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV -> GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV
    int GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV -> GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV
    int GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV -> GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV
    int GL_PATH_FORMAT_SVG_NV -> GL_PATH_FORMAT_SVG_NV
    int GL_PATH_FORMAT_PS_NV -> GL_PATH_FORMAT_PS_NV
    int GL_STANDARD_FONT_NAME_NV -> GL_STANDARD_FONT_NAME_NV
    int GL_SYSTEM_FONT_NAME_NV -> GL_SYSTEM_FONT_NAME_NV
    int GL_FILE_NAME_NV -> GL_FILE_NAME_NV
    int GL_PATH_STROKE_WIDTH_NV -> GL_PATH_STROKE_WIDTH_NV
    int GL_PATH_END_CAPS_NV -> GL_PATH_END_CAPS_NV
    int GL_PATH_INITIAL_END_CAP_NV -> GL_PATH_INITIAL_END_CAP_NV
    int GL_PATH_TERMINAL_END_CAP_NV -> GL_PATH_TERMINAL_END_CAP_NV
    int GL_PATH_JOIN_STYLE_NV -> GL_PATH_JOIN_STYLE_NV
    int GL_PATH_MITER_LIMIT_NV -> GL_PATH_MITER_LIMIT_NV
    int GL_PATH_DASH_CAPS_NV -> GL_PATH_DASH_CAPS_NV
    int GL_PATH_INITIAL_DASH_CAP_NV -> GL_PATH_INITIAL_DASH_CAP_NV
    int GL_PATH_TERMINAL_DASH_CAP_NV -> GL_PATH_TERMINAL_DASH_CAP_NV
    int GL_PATH_DASH_OFFSET_NV -> GL_PATH_DASH_OFFSET_NV
    int GL_PATH_CLIENT_LENGTH_NV -> GL_PATH_CLIENT_LENGTH_NV
    int GL_PATH_FILL_MODE_NV -> GL_PATH_FILL_MODE_NV
    int GL_PATH_FILL_MASK_NV -> GL_PATH_FILL_MASK_NV
    int GL_PATH_FILL_COVER_MODE_NV -> GL_PATH_FILL_COVER_MODE_NV
    int GL_PATH_STROKE_COVER_MODE_NV -> GL_PATH_STROKE_COVER_MODE_NV
    int GL_PATH_STROKE_MASK_NV -> GL_PATH_STROKE_MASK_NV
    int GL_COUNT_UP_NV -> GL_COUNT_UP_NV
    int GL_COUNT_DOWN_NV -> GL_COUNT_DOWN_NV
    int GL_PATH_OBJECT_BOUNDING_BOX_NV -> GL_PATH_OBJECT_BOUNDING_BOX_NV
    int GL_CONVEX_HULL_NV -> GL_CONVEX_HULL_NV
    int GL_BOUNDING_BOX_NV -> GL_BOUNDING_BOX_NV
    int GL_TRANSLATE_X_NV -> GL_TRANSLATE_X_NV
    int GL_TRANSLATE_Y_NV -> GL_TRANSLATE_Y_NV
    int GL_TRANSLATE_2D_NV -> GL_TRANSLATE_2D_NV
    int GL_TRANSLATE_3D_NV -> GL_TRANSLATE_3D_NV
    int GL_AFFINE_2D_NV -> GL_AFFINE_2D_NV
    int GL_AFFINE_3D_NV -> GL_AFFINE_3D_NV
    int GL_TRANSPOSE_AFFINE_2D_NV -> GL_TRANSPOSE_AFFINE_2D_NV
    int GL_TRANSPOSE_AFFINE_3D_NV -> GL_TRANSPOSE_AFFINE_3D_NV
    int GL_UTF8_NV -> GL_UTF8_NV
    int GL_UTF16_NV -> GL_UTF16_NV
    int GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV -> GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
    int GL_PATH_COMMAND_COUNT_NV -> GL_PATH_COMMAND_COUNT_NV
    int GL_PATH_COORD_COUNT_NV -> GL_PATH_COORD_COUNT_NV
    int GL_PATH_DASH_ARRAY_COUNT_NV -> GL_PATH_DASH_ARRAY_COUNT_NV
    int GL_PATH_COMPUTED_LENGTH_NV -> GL_PATH_COMPUTED_LENGTH_NV
    int GL_PATH_FILL_BOUNDING_BOX_NV -> GL_PATH_FILL_BOUNDING_BOX_NV
    int GL_PATH_STROKE_BOUNDING_BOX_NV -> GL_PATH_STROKE_BOUNDING_BOX_NV
    int GL_SQUARE_NV -> GL_SQUARE_NV
    int GL_ROUND_NV -> GL_ROUND_NV
    int GL_TRIANGULAR_NV -> GL_TRIANGULAR_NV
    int GL_BEVEL_NV -> GL_BEVEL_NV
    int GL_MITER_REVERT_NV -> GL_MITER_REVERT_NV
    int GL_MITER_TRUNCATE_NV -> GL_MITER_TRUNCATE_NV
    int GL_SKIP_MISSING_GLYPH_NV -> GL_SKIP_MISSING_GLYPH_NV
    int GL_USE_MISSING_GLYPH_NV -> GL_USE_MISSING_GLYPH_NV
    int GL_PATH_ERROR_POSITION_NV -> GL_PATH_ERROR_POSITION_NV
    int GL_PATH_FOG_GEN_MODE_NV -> GL_PATH_FOG_GEN_MODE_NV
    int GL_ACCUM_ADJACENT_PAIRS_NV -> GL_ACCUM_ADJACENT_PAIRS_NV
    int GL_ADJACENT_PAIRS_NV -> GL_ADJACENT_PAIRS_NV
    int GL_FIRST_TO_REST_NV -> GL_FIRST_TO_REST_NV
    int GL_PATH_GEN_MODE_NV -> GL_PATH_GEN_MODE_NV
    int GL_PATH_GEN_COEFF_NV -> GL_PATH_GEN_COEFF_NV
    int GL_PATH_GEN_COLOR_FORMAT_NV -> GL_PATH_GEN_COLOR_FORMAT_NV
    int GL_PATH_GEN_COMPONENTS_NV -> GL_PATH_GEN_COMPONENTS_NV
    int GL_PATH_STENCIL_FUNC_NV -> GL_PATH_STENCIL_FUNC_NV
    int GL_PATH_STENCIL_REF_NV -> GL_PATH_STENCIL_REF_NV
    int GL_PATH_STENCIL_VALUE_MASK_NV -> GL_PATH_STENCIL_VALUE_MASK_NV
    int GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV -> GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
    int GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV -> GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
    int GL_PATH_COVER_DEPTH_FUNC_NV -> GL_PATH_COVER_DEPTH_FUNC_NV
    int GL_PATH_DASH_OFFSET_RESET_NV -> GL_PATH_DASH_OFFSET_RESET_NV
    int GL_MOVE_TO_RESETS_NV -> GL_MOVE_TO_RESETS_NV
    int GL_MOVE_TO_CONTINUES_NV -> GL_MOVE_TO_CONTINUES_NV
    int GL_CLOSE_PATH_NV -> GL_CLOSE_PATH_NV
    int GL_MOVE_TO_NV -> GL_MOVE_TO_NV
    int GL_RELATIVE_MOVE_TO_NV -> GL_RELATIVE_MOVE_TO_NV
    int GL_LINE_TO_NV -> GL_LINE_TO_NV
    int GL_RELATIVE_LINE_TO_NV -> GL_RELATIVE_LINE_TO_NV
    int GL_HORIZONTAL_LINE_TO_NV -> GL_HORIZONTAL_LINE_TO_NV
    int GL_RELATIVE_HORIZONTAL_LINE_TO_NV -> GL_RELATIVE_HORIZONTAL_LINE_TO_NV
    int GL_VERTICAL_LINE_TO_NV -> GL_VERTICAL_LINE_TO_NV
    int GL_RELATIVE_VERTICAL_LINE_TO_NV -> GL_RELATIVE_VERTICAL_LINE_TO_NV
    int GL_QUADRATIC_CURVE_TO_NV -> GL_QUADRATIC_CURVE_TO_NV
    int GL_RELATIVE_QUADRATIC_CURVE_TO_NV -> GL_RELATIVE_QUADRATIC_CURVE_TO_NV
    int GL_CUBIC_CURVE_TO_NV -> GL_CUBIC_CURVE_TO_NV
    int GL_RELATIVE_CUBIC_CURVE_TO_NV -> GL_RELATIVE_CUBIC_CURVE_TO_NV
    int GL_SMOOTH_QUADRATIC_CURVE_TO_NV -> GL_SMOOTH_QUADRATIC_CURVE_TO_NV
    int GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV -> GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
    int GL_SMOOTH_CUBIC_CURVE_TO_NV -> GL_SMOOTH_CUBIC_CURVE_TO_NV
    int GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV -> GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
    int GL_SMALL_CCW_ARC_TO_NV -> GL_SMALL_CCW_ARC_TO_NV
    int GL_RELATIVE_SMALL_CCW_ARC_TO_NV -> GL_RELATIVE_SMALL_CCW_ARC_TO_NV
    int GL_SMALL_CW_ARC_TO_NV -> GL_SMALL_CW_ARC_TO_NV
    int GL_RELATIVE_SMALL_CW_ARC_TO_NV -> GL_RELATIVE_SMALL_CW_ARC_TO_NV
    int GL_LARGE_CCW_ARC_TO_NV -> GL_LARGE_CCW_ARC_TO_NV
    int GL_RELATIVE_LARGE_CCW_ARC_TO_NV -> GL_RELATIVE_LARGE_CCW_ARC_TO_NV
    int GL_LARGE_CW_ARC_TO_NV -> GL_LARGE_CW_ARC_TO_NV
    int GL_RELATIVE_LARGE_CW_ARC_TO_NV -> GL_RELATIVE_LARGE_CW_ARC_TO_NV
    int GL_RESTART_PATH_NV -> GL_RESTART_PATH_NV
    int GL_DUP_FIRST_CUBIC_CURVE_TO_NV -> GL_DUP_FIRST_CUBIC_CURVE_TO_NV
    int GL_DUP_LAST_CUBIC_CURVE_TO_NV -> GL_DUP_LAST_CUBIC_CURVE_TO_NV
    int GL_RECT_NV -> GL_RECT_NV
    int GL_CIRCULAR_CCW_ARC_TO_NV -> GL_CIRCULAR_CCW_ARC_TO_NV
    int GL_CIRCULAR_CW_ARC_TO_NV -> GL_CIRCULAR_CW_ARC_TO_NV
    int GL_CIRCULAR_TANGENT_ARC_TO_NV -> GL_CIRCULAR_TANGENT_ARC_TO_NV
    int GL_ARC_TO_NV -> GL_ARC_TO_NV
    int GL_RELATIVE_ARC_TO_NV -> GL_RELATIVE_ARC_TO_NV
    int GL_BOLD_BIT_NV -> GL_BOLD_BIT_NV
    int GL_ITALIC_BIT_NV -> GL_ITALIC_BIT_NV
    int GL_GLYPH_WIDTH_BIT_NV -> GL_GLYPH_WIDTH_BIT_NV
    int GL_GLYPH_HEIGHT_BIT_NV -> GL_GLYPH_HEIGHT_BIT_NV
    int GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV -> GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
    int GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV -> GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
    int GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV -> GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
    int GL_GLYPH_VERTICAL_BEARING_X_BIT_NV -> GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
    int GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV -> GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
    int GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV -> GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
    int GL_GLYPH_HAS_KERNING_BIT_NV -> GL_GLYPH_HAS_KERNING_BIT_NV
    int GL_FONT_X_MIN_BOUNDS_BIT_NV -> GL_FONT_X_MIN_BOUNDS_BIT_NV
    int GL_FONT_Y_MIN_BOUNDS_BIT_NV -> GL_FONT_Y_MIN_BOUNDS_BIT_NV
    int GL_FONT_X_MAX_BOUNDS_BIT_NV -> GL_FONT_X_MAX_BOUNDS_BIT_NV
    int GL_FONT_Y_MAX_BOUNDS_BIT_NV -> GL_FONT_Y_MAX_BOUNDS_BIT_NV
    int GL_FONT_UNITS_PER_EM_BIT_NV -> GL_FONT_UNITS_PER_EM_BIT_NV
    int GL_FONT_ASCENDER_BIT_NV -> GL_FONT_ASCENDER_BIT_NV
    int GL_FONT_DESCENDER_BIT_NV -> GL_FONT_DESCENDER_BIT_NV
    int GL_FONT_HEIGHT_BIT_NV -> GL_FONT_HEIGHT_BIT_NV
    int GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV -> GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV
    int GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV -> GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV
    int GL_FONT_UNDERLINE_POSITION_BIT_NV -> GL_FONT_UNDERLINE_POSITION_BIT_NV
    int GL_FONT_UNDERLINE_THICKNESS_BIT_NV -> GL_FONT_UNDERLINE_THICKNESS_BIT_NV
    int GL_FONT_HAS_KERNING_BIT_NV -> GL_FONT_HAS_KERNING_BIT_NV
    int GL_WRITE_PIXEL_DATA_RANGE_NV -> GL_WRITE_PIXEL_DATA_RANGE_NV
    int GL_READ_PIXEL_DATA_RANGE_NV -> GL_READ_PIXEL_DATA_RANGE_NV
    int GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV -> GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV
    int GL_READ_PIXEL_DATA_RANGE_LENGTH_NV -> GL_READ_PIXEL_DATA_RANGE_LENGTH_NV
    int GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV -> GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV
    int GL_READ_PIXEL_DATA_RANGE_POINTER_NV -> GL_READ_PIXEL_DATA_RANGE_POINTER_NV
    int GL_PRIMITIVE_RESTART_NV -> GL_PRIMITIVE_RESTART_NV
    int GL_PRIMITIVE_RESTART_INDEX_NV -> GL_PRIMITIVE_RESTART_INDEX_NV
    int GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV -> GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV
    int GL_MAX_PROGRAM_PATCH_ATTRIBS_NV -> GL_MAX_PROGRAM_PATCH_ATTRIBS_NV
    int GL_TESS_CONTROL_PROGRAM_NV -> GL_TESS_CONTROL_PROGRAM_NV
    int GL_TESS_EVALUATION_PROGRAM_NV -> GL_TESS_EVALUATION_PROGRAM_NV
    int GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV -> GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV
    int GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV -> GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV
    int GL_EMBOSS_LIGHT_NV -> GL_EMBOSS_LIGHT_NV
    int GL_EMBOSS_CONSTANT_NV -> GL_EMBOSS_CONSTANT_NV
    int GL_EMBOSS_MAP_NV -> GL_EMBOSS_MAP_NV
    int GL_TEXTURE_UNSIGNED_REMAP_MODE_NV -> GL_TEXTURE_UNSIGNED_REMAP_MODE_NV
    int GL_OFFSET_TEXTURE_RECTANGLE_NV -> GL_OFFSET_TEXTURE_RECTANGLE_NV
    int GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV -> GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV
    int GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV -> GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV
    int GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV -> GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV
    int GL_UNSIGNED_INT_S8_S8_8_8_NV -> GL_UNSIGNED_INT_S8_S8_8_8_NV
    int GL_UNSIGNED_INT_8_8_S8_S8_REV_NV -> GL_UNSIGNED_INT_8_8_S8_S8_REV_NV
    int GL_DSDT_MAG_INTENSITY_NV -> GL_DSDT_MAG_INTENSITY_NV
    int GL_SHADER_CONSISTENT_NV -> GL_SHADER_CONSISTENT_NV
    int GL_TEXTURE_SHADER_NV -> GL_TEXTURE_SHADER_NV
    int GL_SHADER_OPERATION_NV -> GL_SHADER_OPERATION_NV
    int GL_CULL_MODES_NV -> GL_CULL_MODES_NV
    int GL_OFFSET_TEXTURE_MATRIX_NV -> GL_OFFSET_TEXTURE_MATRIX_NV
    int GL_OFFSET_TEXTURE_SCALE_NV -> GL_OFFSET_TEXTURE_SCALE_NV
    int GL_OFFSET_TEXTURE_BIAS_NV -> GL_OFFSET_TEXTURE_BIAS_NV
    int GL_OFFSET_TEXTURE_2D_MATRIX_NV -> GL_OFFSET_TEXTURE_2D_MATRIX_NV
    int GL_OFFSET_TEXTURE_2D_SCALE_NV -> GL_OFFSET_TEXTURE_2D_SCALE_NV
    int GL_OFFSET_TEXTURE_2D_BIAS_NV -> GL_OFFSET_TEXTURE_2D_BIAS_NV
    int GL_PREVIOUS_TEXTURE_INPUT_NV -> GL_PREVIOUS_TEXTURE_INPUT_NV
    int GL_CONST_EYE_NV -> GL_CONST_EYE_NV
    int GL_PASS_THROUGH_NV -> GL_PASS_THROUGH_NV
    int GL_CULL_FRAGMENT_NV -> GL_CULL_FRAGMENT_NV
    int GL_OFFSET_TEXTURE_2D_NV -> GL_OFFSET_TEXTURE_2D_NV
    int GL_DEPENDENT_AR_TEXTURE_2D_NV -> GL_DEPENDENT_AR_TEXTURE_2D_NV
    int GL_DEPENDENT_GB_TEXTURE_2D_NV -> GL_DEPENDENT_GB_TEXTURE_2D_NV
    int GL_DOT_PRODUCT_NV -> GL_DOT_PRODUCT_NV
    int GL_DOT_PRODUCT_DEPTH_REPLACE_NV -> GL_DOT_PRODUCT_DEPTH_REPLACE_NV
    int GL_DOT_PRODUCT_TEXTURE_2D_NV -> GL_DOT_PRODUCT_TEXTURE_2D_NV
    int GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV -> GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV
    int GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV -> GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV
    int GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV -> GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV
    int GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV -> GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
    int GL_HILO_NV -> GL_HILO_NV
    int GL_DSDT_NV -> GL_DSDT_NV
    int GL_DSDT_MAG_NV -> GL_DSDT_MAG_NV
    int GL_DSDT_MAG_VIB_NV -> GL_DSDT_MAG_VIB_NV
    int GL_HILO16_NV -> GL_HILO16_NV
    int GL_SIGNED_HILO_NV -> GL_SIGNED_HILO_NV
    int GL_SIGNED_HILO16_NV -> GL_SIGNED_HILO16_NV
    int GL_SIGNED_RGBA_NV -> GL_SIGNED_RGBA_NV
    int GL_SIGNED_RGBA8_NV -> GL_SIGNED_RGBA8_NV
    int GL_SIGNED_RGB_NV -> GL_SIGNED_RGB_NV
    int GL_SIGNED_RGB8_NV -> GL_SIGNED_RGB8_NV
    int GL_SIGNED_LUMINANCE_NV -> GL_SIGNED_LUMINANCE_NV
    int GL_SIGNED_LUMINANCE8_NV -> GL_SIGNED_LUMINANCE8_NV
    int GL_SIGNED_LUMINANCE_ALPHA_NV -> GL_SIGNED_LUMINANCE_ALPHA_NV
    int GL_SIGNED_LUMINANCE8_ALPHA8_NV -> GL_SIGNED_LUMINANCE8_ALPHA8_NV
    int GL_SIGNED_ALPHA_NV -> GL_SIGNED_ALPHA_NV
    int GL_SIGNED_ALPHA8_NV -> GL_SIGNED_ALPHA8_NV
    int GL_SIGNED_INTENSITY_NV -> GL_SIGNED_INTENSITY_NV
    int GL_SIGNED_INTENSITY8_NV -> GL_SIGNED_INTENSITY8_NV
    int GL_DSDT8_NV -> GL_DSDT8_NV
    int GL_DSDT8_MAG8_NV -> GL_DSDT8_MAG8_NV
    int GL_DSDT8_MAG8_INTENSITY8_NV -> GL_DSDT8_MAG8_INTENSITY8_NV
    int GL_SIGNED_RGB_UNSIGNED_ALPHA_NV -> GL_SIGNED_RGB_UNSIGNED_ALPHA_NV
    int GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV -> GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV
    int GL_HI_SCALE_NV -> GL_HI_SCALE_NV
    int GL_LO_SCALE_NV -> GL_LO_SCALE_NV
    int GL_DS_SCALE_NV -> GL_DS_SCALE_NV
    int GL_DT_SCALE_NV -> GL_DT_SCALE_NV
    int GL_MAGNITUDE_SCALE_NV -> GL_MAGNITUDE_SCALE_NV
    int GL_VIBRANCE_SCALE_NV -> GL_VIBRANCE_SCALE_NV
    int GL_HI_BIAS_NV -> GL_HI_BIAS_NV
    int GL_LO_BIAS_NV -> GL_LO_BIAS_NV
    int GL_DS_BIAS_NV -> GL_DS_BIAS_NV
    int GL_DT_BIAS_NV -> GL_DT_BIAS_NV
    int GL_MAGNITUDE_BIAS_NV -> GL_MAGNITUDE_BIAS_NV
    int GL_VIBRANCE_BIAS_NV -> GL_VIBRANCE_BIAS_NV
    int GL_TEXTURE_BORDER_VALUES_NV -> GL_TEXTURE_BORDER_VALUES_NV
    int GL_TEXTURE_HI_SIZE_NV -> GL_TEXTURE_HI_SIZE_NV
    int GL_TEXTURE_LO_SIZE_NV -> GL_TEXTURE_LO_SIZE_NV
    int GL_TEXTURE_DS_SIZE_NV -> GL_TEXTURE_DS_SIZE_NV
    int GL_TEXTURE_DT_SIZE_NV -> GL_TEXTURE_DT_SIZE_NV
    int GL_TEXTURE_MAG_SIZE_NV -> GL_TEXTURE_MAG_SIZE_NV
    int GL_DOT_PRODUCT_TEXTURE_3D_NV -> GL_DOT_PRODUCT_TEXTURE_3D_NV
    int GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV -> GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV
    int GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV -> GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV
    int GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV -> GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV
    int GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV -> GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV
    int GL_OFFSET_HILO_TEXTURE_2D_NV -> GL_OFFSET_HILO_TEXTURE_2D_NV
    int GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV -> GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV
    int GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV -> GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV
    int GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV -> GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV
    int GL_DEPENDENT_HILO_TEXTURE_2D_NV -> GL_DEPENDENT_HILO_TEXTURE_2D_NV
    int GL_DEPENDENT_RGB_TEXTURE_3D_NV -> GL_DEPENDENT_RGB_TEXTURE_3D_NV
    int GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV -> GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV
    int GL_DOT_PRODUCT_PASS_THROUGH_NV -> GL_DOT_PRODUCT_PASS_THROUGH_NV
    int GL_DOT_PRODUCT_TEXTURE_1D_NV -> GL_DOT_PRODUCT_TEXTURE_1D_NV
    int GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV -> GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV
    int GL_HILO8_NV -> GL_HILO8_NV
    int GL_SIGNED_HILO8_NV -> GL_SIGNED_HILO8_NV
    int GL_FORCE_BLUE_TO_ONE_NV -> GL_FORCE_BLUE_TO_ONE_NV
    int GL_TRANSFORM_FEEDBACK_NV -> GL_TRANSFORM_FEEDBACK_NV
    int GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV -> GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV
    int GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV -> GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV
    int GL_TRANSFORM_FEEDBACK_BINDING_NV -> GL_TRANSFORM_FEEDBACK_BINDING_NV
    int GL_SURFACE_STATE_NV -> GL_SURFACE_STATE_NV
    int GL_SURFACE_REGISTERED_NV -> GL_SURFACE_REGISTERED_NV
    int GL_SURFACE_MAPPED_NV -> GL_SURFACE_MAPPED_NV
    int GL_WRITE_DISCARD_NV -> GL_WRITE_DISCARD_NV
    int GL_VERTEX_ARRAY_RANGE_NV -> GL_VERTEX_ARRAY_RANGE_NV
    int GL_VERTEX_ARRAY_RANGE_LENGTH_NV -> GL_VERTEX_ARRAY_RANGE_LENGTH_NV
    int GL_VERTEX_ARRAY_RANGE_VALID_NV -> GL_VERTEX_ARRAY_RANGE_VALID_NV
    int GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV -> GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV
    int GL_VERTEX_ARRAY_RANGE_POINTER_NV -> GL_VERTEX_ARRAY_RANGE_POINTER_NV
    int GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV -> GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV
    int GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV -> GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV
    int GL_VIDEO_BUFFER_NV -> GL_VIDEO_BUFFER_NV
    int GL_VIDEO_BUFFER_BINDING_NV -> GL_VIDEO_BUFFER_BINDING_NV
    int GL_FIELD_UPPER_NV -> GL_FIELD_UPPER_NV
    int GL_FIELD_LOWER_NV -> GL_FIELD_LOWER_NV
    int GL_NUM_VIDEO_CAPTURE_STREAMS_NV -> GL_NUM_VIDEO_CAPTURE_STREAMS_NV
    int GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV -> GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV
    int GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV -> GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV
    int GL_LAST_VIDEO_CAPTURE_STATUS_NV -> GL_LAST_VIDEO_CAPTURE_STATUS_NV
    int GL_VIDEO_BUFFER_PITCH_NV -> GL_VIDEO_BUFFER_PITCH_NV
    int GL_VIDEO_COLOR_CONVERSION_MATRIX_NV -> GL_VIDEO_COLOR_CONVERSION_MATRIX_NV
    int GL_VIDEO_COLOR_CONVERSION_MAX_NV -> GL_VIDEO_COLOR_CONVERSION_MAX_NV
    int GL_VIDEO_COLOR_CONVERSION_MIN_NV -> GL_VIDEO_COLOR_CONVERSION_MIN_NV
    int GL_VIDEO_COLOR_CONVERSION_OFFSET_NV -> GL_VIDEO_COLOR_CONVERSION_OFFSET_NV
    int GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV -> GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV
    int GL_PARTIAL_SUCCESS_NV -> GL_PARTIAL_SUCCESS_NV
    int GL_SUCCESS_NV -> GL_SUCCESS_NV
    int GL_FAILURE_NV -> GL_FAILURE_NV
    int GL_YCBYCR8_422_NV -> GL_YCBYCR8_422_NV
    int GL_YCBAYCR8A_4224_NV -> GL_YCBAYCR8A_4224_NV
    int GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV -> GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV
    int GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV -> GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV
    int GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV -> GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV
    int GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV -> GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV
    int GL_Z4Y12Z4CB12Z4CR12_444_NV -> GL_Z4Y12Z4CB12Z4CR12_444_NV
    int GL_VIDEO_CAPTURE_FRAME_WIDTH_NV -> GL_VIDEO_CAPTURE_FRAME_WIDTH_NV
    int GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV -> GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV
    int GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV -> GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV
    int GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV -> GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV
    int GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV -> GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV
    int GL_INTERLACE_OML -> GL_INTERLACE_OML
    int GL_INTERLACE_READ_OML -> GL_INTERLACE_READ_OML
    int GL_PACK_RESAMPLE_OML -> GL_PACK_RESAMPLE_OML
    int GL_UNPACK_RESAMPLE_OML -> GL_UNPACK_RESAMPLE_OML
    int GL_RESAMPLE_REPLICATE_OML -> GL_RESAMPLE_REPLICATE_OML
    int GL_RESAMPLE_ZERO_FILL_OML -> GL_RESAMPLE_ZERO_FILL_OML
    int GL_RESAMPLE_AVERAGE_OML -> GL_RESAMPLE_AVERAGE_OML
    int GL_RESAMPLE_DECIMATE_OML -> GL_RESAMPLE_DECIMATE_OML
    int GL_FORMAT_SUBSAMPLE_24_24_OML -> GL_FORMAT_SUBSAMPLE_24_24_OML
    int GL_FORMAT_SUBSAMPLE_244_244_OML -> GL_FORMAT_SUBSAMPLE_244_244_OML
    int GL_PREFER_DOUBLEBUFFER_HINT_PGI -> GL_PREFER_DOUBLEBUFFER_HINT_PGI
    int GL_CONSERVE_MEMORY_HINT_PGI -> GL_CONSERVE_MEMORY_HINT_PGI
    int GL_RECLAIM_MEMORY_HINT_PGI -> GL_RECLAIM_MEMORY_HINT_PGI
    int GL_NATIVE_GRAPHICS_HANDLE_PGI -> GL_NATIVE_GRAPHICS_HANDLE_PGI
    int GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI -> GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI
    int GL_NATIVE_GRAPHICS_END_HINT_PGI -> GL_NATIVE_GRAPHICS_END_HINT_PGI
    int GL_ALWAYS_FAST_HINT_PGI -> GL_ALWAYS_FAST_HINT_PGI
    int GL_ALWAYS_SOFT_HINT_PGI -> GL_ALWAYS_SOFT_HINT_PGI
    int GL_ALLOW_DRAW_OBJ_HINT_PGI -> GL_ALLOW_DRAW_OBJ_HINT_PGI
    int GL_ALLOW_DRAW_WIN_HINT_PGI -> GL_ALLOW_DRAW_WIN_HINT_PGI
    int GL_ALLOW_DRAW_FRG_HINT_PGI -> GL_ALLOW_DRAW_FRG_HINT_PGI
    int GL_ALLOW_DRAW_MEM_HINT_PGI -> GL_ALLOW_DRAW_MEM_HINT_PGI
    int GL_STRICT_DEPTHFUNC_HINT_PGI -> GL_STRICT_DEPTHFUNC_HINT_PGI
    int GL_STRICT_LIGHTING_HINT_PGI -> GL_STRICT_LIGHTING_HINT_PGI
    int GL_STRICT_SCISSOR_HINT_PGI -> GL_STRICT_SCISSOR_HINT_PGI
    int GL_FULL_STIPPLE_HINT_PGI -> GL_FULL_STIPPLE_HINT_PGI
    int GL_CLIP_NEAR_HINT_PGI -> GL_CLIP_NEAR_HINT_PGI
    int GL_CLIP_FAR_HINT_PGI -> GL_CLIP_FAR_HINT_PGI
    int GL_WIDE_LINE_HINT_PGI -> GL_WIDE_LINE_HINT_PGI
    int GL_BACK_NORMALS_HINT_PGI -> GL_BACK_NORMALS_HINT_PGI
    int GL_VERTEX_DATA_HINT_PGI -> GL_VERTEX_DATA_HINT_PGI
    int GL_VERTEX_CONSISTENT_HINT_PGI -> GL_VERTEX_CONSISTENT_HINT_PGI
    int GL_MATERIAL_SIDE_HINT_PGI -> GL_MATERIAL_SIDE_HINT_PGI
    int GL_MAX_VERTEX_HINT_PGI -> GL_MAX_VERTEX_HINT_PGI
    int GL_COLOR3_BIT_PGI -> GL_COLOR3_BIT_PGI
    int GL_COLOR4_BIT_PGI -> GL_COLOR4_BIT_PGI
    int GL_EDGEFLAG_BIT_PGI -> GL_EDGEFLAG_BIT_PGI
    int GL_INDEX_BIT_PGI -> GL_INDEX_BIT_PGI
    int GL_MAT_AMBIENT_BIT_PGI -> GL_MAT_AMBIENT_BIT_PGI
    int GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI -> GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI
    int GL_MAT_DIFFUSE_BIT_PGI -> GL_MAT_DIFFUSE_BIT_PGI
    int GL_MAT_EMISSION_BIT_PGI -> GL_MAT_EMISSION_BIT_PGI
    int GL_MAT_COLOR_INDEXES_BIT_PGI -> GL_MAT_COLOR_INDEXES_BIT_PGI
    int GL_MAT_SHININESS_BIT_PGI -> GL_MAT_SHININESS_BIT_PGI
    int GL_MAT_SPECULAR_BIT_PGI -> GL_MAT_SPECULAR_BIT_PGI
    int GL_NORMAL_BIT_PGI -> GL_NORMAL_BIT_PGI
    int GL_TEXCOORD1_BIT_PGI -> GL_TEXCOORD1_BIT_PGI
    int GL_TEXCOORD2_BIT_PGI -> GL_TEXCOORD2_BIT_PGI
    int GL_TEXCOORD3_BIT_PGI -> GL_TEXCOORD3_BIT_PGI
    long GL_TEXCOORD4_BIT_PGI -> GL_TEXCOORD4_BIT_PGI
    int GL_VERTEX23_BIT_PGI -> GL_VERTEX23_BIT_PGI
    int GL_VERTEX4_BIT_PGI -> GL_VERTEX4_BIT_PGI
    int GL_SCREEN_COORDINATES_REND -> GL_SCREEN_COORDINATES_REND
    int GL_INVERTED_SCREEN_W_REND -> GL_INVERTED_SCREEN_W_REND
    int GL_RGB_S3TC -> GL_RGB_S3TC
    int GL_RGB4_S3TC -> GL_RGB4_S3TC
    int GL_RGBA_S3TC -> GL_RGBA_S3TC
    int GL_RGBA4_S3TC -> GL_RGBA4_S3TC
    int GL_RGBA_DXT5_S3TC -> GL_RGBA_DXT5_S3TC
    int GL_RGBA4_DXT5_S3TC -> GL_RGBA4_DXT5_S3TC
    int GL_UNPACK_CONSTANT_DATA_SUNX -> GL_UNPACK_CONSTANT_DATA_SUNX
    int GL_TEXTURE_CONSTANT_DATA_SUNX -> GL_TEXTURE_CONSTANT_DATA_SUNX
    void glAccum(int,float) -> glAccum
    void glActiveStencilFaceEXT(int) -> glActiveStencilFaceEXT
    void glApplyTextureEXT(int) -> glApplyTextureEXT
    boolean glAreTexturesResident(int,java.nio.IntBuffer,java.nio.ByteBuffer) -> glAreTexturesResident
    boolean glAreTexturesResident(int,int[],int,byte[],int) -> glAreTexturesResident
    void glArrayElement(int) -> glArrayElement
    void glAttachObjectARB(int,int) -> glAttachObjectARB
    void glBegin(int) -> glBegin
    void glBeginConditionalRenderNVX(int) -> glBeginConditionalRenderNVX
    void glBeginOcclusionQueryNV(int) -> glBeginOcclusionQueryNV
    void glBeginPerfMonitorAMD(int) -> glBeginPerfMonitorAMD
    void glBeginVertexShaderEXT() -> glBeginVertexShaderEXT
    void glBeginVideoCaptureNV(int) -> glBeginVideoCaptureNV
    int glBindLightParameterEXT(int,int) -> glBindLightParameterEXT
    int glBindMaterialParameterEXT(int,int) -> glBindMaterialParameterEXT
    void glBindMultiTextureEXT(int,int,int) -> glBindMultiTextureEXT
    int glBindParameterEXT(int) -> glBindParameterEXT
    void glBindProgramARB(int,int) -> glBindProgramARB
    int glBindTexGenParameterEXT(int,int,int) -> glBindTexGenParameterEXT
    int glBindTextureUnitParameterEXT(int,int) -> glBindTextureUnitParameterEXT
    void glBindTransformFeedbackNV(int,int) -> glBindTransformFeedbackNV
    void glBindVertexShaderEXT(int) -> glBindVertexShaderEXT
    void glBindVideoCaptureStreamBufferNV(int,int,int,long) -> glBindVideoCaptureStreamBufferNV
    void glBindVideoCaptureStreamTextureNV(int,int,int,int,int) -> glBindVideoCaptureStreamTextureNV
    void glBitmap(int,int,float,float,float,float,java.nio.ByteBuffer) -> glBitmap
    void glBitmap(int,int,float,float,float,float,byte[],int) -> glBitmap
    void glBitmap(int,int,float,float,float,float,long) -> glBitmap
    void glBlendEquationIndexedAMD(int,int) -> glBlendEquationIndexedAMD
    void glBlendEquationSeparateIndexedAMD(int,int,int) -> glBlendEquationSeparateIndexedAMD
    void glBlendFuncIndexedAMD(int,int,int) -> glBlendFuncIndexedAMD
    void glBlendFuncSeparateINGR(int,int,int,int) -> glBlendFuncSeparateINGR
    void glBlendFuncSeparateIndexedAMD(int,int,int,int,int) -> glBlendFuncSeparateIndexedAMD
    void glBufferParameteri(int,int,int) -> glBufferParameteri
    void glCallList(int) -> glCallList
    void glCallLists(int,int,java.nio.Buffer) -> glCallLists
    int glCheckNamedFramebufferStatusEXT(int,int) -> glCheckNamedFramebufferStatusEXT
    void glClearAccum(float,float,float,float) -> glClearAccum
    void glClearColorIi(int,int,int,int) -> glClearColorIi
    void glClearColorIui(int,int,int,int) -> glClearColorIui
    void glClearIndex(float) -> glClearIndex
    void glClientAttribDefaultEXT(int) -> glClientAttribDefaultEXT
    void glClipPlane(int,java.nio.DoubleBuffer) -> glClipPlane
    void glClipPlane(int,double[],int) -> glClipPlane
    void glClipPlanef(int,java.nio.FloatBuffer) -> glClipPlanef
    void glClipPlanef(int,float[],int) -> glClipPlanef
    void glColor3b(byte,byte,byte) -> glColor3b
    void glColor3bv(java.nio.ByteBuffer) -> glColor3bv
    void glColor3bv(byte[],int) -> glColor3bv
    void glColor3d(double,double,double) -> glColor3d
    void glColor3dv(java.nio.DoubleBuffer) -> glColor3dv
    void glColor3dv(double[],int) -> glColor3dv
    void glColor3f(float,float,float) -> glColor3f
    void glColor3fv(java.nio.FloatBuffer) -> glColor3fv
    void glColor3fv(float[],int) -> glColor3fv
    void glColor3h(short,short,short) -> glColor3h
    void glColor3hv(java.nio.ShortBuffer) -> glColor3hv
    void glColor3hv(short[],int) -> glColor3hv
    void glColor3i(int,int,int) -> glColor3i
    void glColor3iv(java.nio.IntBuffer) -> glColor3iv
    void glColor3iv(int[],int) -> glColor3iv
    void glColor3s(short,short,short) -> glColor3s
    void glColor3sv(java.nio.ShortBuffer) -> glColor3sv
    void glColor3sv(short[],int) -> glColor3sv
    void glColor3ub(byte,byte,byte) -> glColor3ub
    void glColor3ubv(java.nio.ByteBuffer) -> glColor3ubv
    void glColor3ubv(byte[],int) -> glColor3ubv
    void glColor3ui(int,int,int) -> glColor3ui
    void glColor3uiv(java.nio.IntBuffer) -> glColor3uiv
    void glColor3uiv(int[],int) -> glColor3uiv
    void glColor3us(short,short,short) -> glColor3us
    void glColor3usv(java.nio.ShortBuffer) -> glColor3usv
    void glColor3usv(short[],int) -> glColor3usv
    void glColor4b(byte,byte,byte,byte) -> glColor4b
    void glColor4bv(java.nio.ByteBuffer) -> glColor4bv
    void glColor4bv(byte[],int) -> glColor4bv
    void glColor4d(double,double,double,double) -> glColor4d
    void glColor4dv(java.nio.DoubleBuffer) -> glColor4dv
    void glColor4dv(double[],int) -> glColor4dv
    void glColor4fv(java.nio.FloatBuffer) -> glColor4fv
    void glColor4fv(float[],int) -> glColor4fv
    void glColor4h(short,short,short,short) -> glColor4h
    void glColor4hv(java.nio.ShortBuffer) -> glColor4hv
    void glColor4hv(short[],int) -> glColor4hv
    void glColor4i(int,int,int,int) -> glColor4i
    void glColor4iv(java.nio.IntBuffer) -> glColor4iv
    void glColor4iv(int[],int) -> glColor4iv
    void glColor4s(short,short,short,short) -> glColor4s
    void glColor4sv(java.nio.ShortBuffer) -> glColor4sv
    void glColor4sv(short[],int) -> glColor4sv
    void glColor4ubv(java.nio.ByteBuffer) -> glColor4ubv
    void glColor4ubv(byte[],int) -> glColor4ubv
    void glColor4ui(int,int,int,int) -> glColor4ui
    void glColor4uiv(java.nio.IntBuffer) -> glColor4uiv
    void glColor4uiv(int[],int) -> glColor4uiv
    void glColor4us(short,short,short,short) -> glColor4us
    void glColor4usv(java.nio.ShortBuffer) -> glColor4usv
    void glColor4usv(short[],int) -> glColor4usv
    void glColorMaskIndexed(int,boolean,boolean,boolean,boolean) -> glColorMaskIndexed
    void glColorMaterial(int,int) -> glColorMaterial
    void glColorSubTable(int,int,int,int,int,java.nio.Buffer) -> glColorSubTable
    void glColorSubTable(int,int,int,int,int,long) -> glColorSubTable
    void glColorTable(int,int,int,int,int,java.nio.Buffer) -> glColorTable
    void glColorTable(int,int,int,int,int,long) -> glColorTable
    void glColorTableParameterfv(int,int,java.nio.FloatBuffer) -> glColorTableParameterfv
    void glColorTableParameterfv(int,int,float[],int) -> glColorTableParameterfv
    void glColorTableParameteriv(int,int,java.nio.IntBuffer) -> glColorTableParameteriv
    void glColorTableParameteriv(int,int,int[],int) -> glColorTableParameteriv
    void glCompileShaderARB(int) -> glCompileShaderARB
    void glCompressedMultiTexImage1DEXT(int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedMultiTexImage1DEXT
    void glCompressedMultiTexImage2DEXT(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedMultiTexImage2DEXT
    void glCompressedMultiTexImage3DEXT(int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedMultiTexImage3DEXT
    void glCompressedMultiTexSubImage1DEXT(int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedMultiTexSubImage1DEXT
    void glCompressedMultiTexSubImage2DEXT(int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedMultiTexSubImage2DEXT
    void glCompressedMultiTexSubImage3DEXT(int,int,int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedMultiTexSubImage3DEXT
    void glCompressedTextureImage1DEXT(int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTextureImage1DEXT
    void glCompressedTextureImage2DEXT(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTextureImage2DEXT
    void glCompressedTextureImage3DEXT(int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTextureImage3DEXT
    void glCompressedTextureSubImage1DEXT(int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTextureSubImage1DEXT
    void glCompressedTextureSubImage2DEXT(int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTextureSubImage2DEXT
    void glCompressedTextureSubImage3DEXT(int,int,int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTextureSubImage3DEXT
    void glConvolutionFilter1D(int,int,int,int,int,java.nio.Buffer) -> glConvolutionFilter1D
    void glConvolutionFilter1D(int,int,int,int,int,long) -> glConvolutionFilter1D
    void glConvolutionFilter2D(int,int,int,int,int,int,java.nio.Buffer) -> glConvolutionFilter2D
    void glConvolutionFilter2D(int,int,int,int,int,int,long) -> glConvolutionFilter2D
    void glConvolutionParameterf(int,int,float) -> glConvolutionParameterf
    void glConvolutionParameterfv(int,int,java.nio.FloatBuffer) -> glConvolutionParameterfv
    void glConvolutionParameterfv(int,int,float[],int) -> glConvolutionParameterfv
    void glConvolutionParameteri(int,int,int) -> glConvolutionParameteri
    void glConvolutionParameteriv(int,int,java.nio.IntBuffer) -> glConvolutionParameteriv
    void glConvolutionParameteriv(int,int,int[],int) -> glConvolutionParameteriv
    void glCopyColorSubTable(int,int,int,int,int) -> glCopyColorSubTable
    void glCopyColorTable(int,int,int,int,int) -> glCopyColorTable
    void glCopyConvolutionFilter1D(int,int,int,int,int) -> glCopyConvolutionFilter1D
    void glCopyConvolutionFilter2D(int,int,int,int,int,int) -> glCopyConvolutionFilter2D
    void glCopyImageSubDataNV(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int) -> glCopyImageSubDataNV
    void glCopyMultiTexImage1DEXT(int,int,int,int,int,int,int,int) -> glCopyMultiTexImage1DEXT
    void glCopyMultiTexImage2DEXT(int,int,int,int,int,int,int,int,int) -> glCopyMultiTexImage2DEXT
    void glCopyMultiTexSubImage1DEXT(int,int,int,int,int,int,int) -> glCopyMultiTexSubImage1DEXT
    void glCopyMultiTexSubImage2DEXT(int,int,int,int,int,int,int,int,int) -> glCopyMultiTexSubImage2DEXT
    void glCopyMultiTexSubImage3DEXT(int,int,int,int,int,int,int,int,int,int) -> glCopyMultiTexSubImage3DEXT
    void glCopyPathNV(int,int) -> glCopyPathNV
    void glCopyPixels(int,int,int,int,int) -> glCopyPixels
    void glCopyTextureImage1DEXT(int,int,int,int,int,int,int,int) -> glCopyTextureImage1DEXT
    void glCopyTextureImage2DEXT(int,int,int,int,int,int,int,int,int) -> glCopyTextureImage2DEXT
    void glCopyTextureSubImage1DEXT(int,int,int,int,int,int,int) -> glCopyTextureSubImage1DEXT
    void glCopyTextureSubImage2DEXT(int,int,int,int,int,int,int,int,int) -> glCopyTextureSubImage2DEXT
    void glCopyTextureSubImage3DEXT(int,int,int,int,int,int,int,int,int,int) -> glCopyTextureSubImage3DEXT
    void glCoverFillPathInstancedNV(int,int,java.nio.Buffer,int,int,int,java.nio.FloatBuffer) -> glCoverFillPathInstancedNV
    void glCoverFillPathInstancedNV(int,int,java.nio.Buffer,int,int,int,float[],int) -> glCoverFillPathInstancedNV
    void glCoverFillPathNV(int,int) -> glCoverFillPathNV
    void glCoverStrokePathInstancedNV(int,int,java.nio.Buffer,int,int,int,java.nio.FloatBuffer) -> glCoverStrokePathInstancedNV
    void glCoverStrokePathInstancedNV(int,int,java.nio.Buffer,int,int,int,float[],int) -> glCoverStrokePathInstancedNV
    void glCoverStrokePathNV(int,int) -> glCoverStrokePathNV
    int glCreateProgramObjectARB() -> glCreateProgramObjectARB
    int glCreateShaderObjectARB(int) -> glCreateShaderObjectARB
    void glCullParameterdvEXT(int,java.nio.DoubleBuffer) -> glCullParameterdvEXT
    void glCullParameterdvEXT(int,double[],int) -> glCullParameterdvEXT
    void glCullParameterfvEXT(int,java.nio.FloatBuffer) -> glCullParameterfvEXT
    void glCullParameterfvEXT(int,float[],int) -> glCullParameterfvEXT
    void glCurrentPaletteMatrix(int) -> glCurrentPaletteMatrix
    void glDeleteFencesAPPLE(int,java.nio.IntBuffer) -> glDeleteFencesAPPLE
    void glDeleteFencesAPPLE(int,int[],int) -> glDeleteFencesAPPLE
    void glDeleteFencesNV(int,java.nio.IntBuffer) -> glDeleteFencesNV
    void glDeleteFencesNV(int,int[],int) -> glDeleteFencesNV
    void glDeleteLists(int,int) -> glDeleteLists
    void glDeleteNamesAMD(int,int,java.nio.IntBuffer) -> glDeleteNamesAMD
    void glDeleteNamesAMD(int,int,int[],int) -> glDeleteNamesAMD
    void glDeleteObjectARB(int) -> glDeleteObjectARB
    void glDeleteOcclusionQueriesNV(int,java.nio.IntBuffer) -> glDeleteOcclusionQueriesNV
    void glDeleteOcclusionQueriesNV(int,int[],int) -> glDeleteOcclusionQueriesNV
    void glDeletePathsNV(int,int) -> glDeletePathsNV
    void glDeletePerfMonitorsAMD(int,java.nio.IntBuffer) -> glDeletePerfMonitorsAMD
    void glDeletePerfMonitorsAMD(int,int[],int) -> glDeletePerfMonitorsAMD
    void glDeleteProgramsARB(int,java.nio.IntBuffer) -> glDeleteProgramsARB
    void glDeleteProgramsARB(int,int[],int) -> glDeleteProgramsARB
    void glDeleteTransformFeedbacksNV(int,java.nio.IntBuffer) -> glDeleteTransformFeedbacksNV
    void glDeleteTransformFeedbacksNV(int,int[],int) -> glDeleteTransformFeedbacksNV
    void glDeleteVertexShaderEXT(int) -> glDeleteVertexShaderEXT
    void glDepthBoundsEXT(double,double) -> glDepthBoundsEXT
    void glDetachObjectARB(int,int) -> glDetachObjectARB
    void glDisableClientStateIndexedEXT(int,int) -> glDisableClientStateIndexedEXT
    void glDisableClientStateiEXT(int,int) -> glDisableClientStateiEXT
    void glDisableIndexed(int,int) -> glDisableIndexed
    void glDisableVariantClientStateEXT(int) -> glDisableVariantClientStateEXT
    void glDisableVertexArrayAttribEXT(int,int) -> glDisableVertexArrayAttribEXT
    void glDisableVertexArrayEXT(int,int) -> glDisableVertexArrayEXT
    void glDisableVertexAttribAPPLE(int,int) -> glDisableVertexAttribAPPLE
    void glDisableVertexAttribArrayARB(int) -> glDisableVertexAttribArrayARB
    void glDrawBuffersATI(int,java.nio.IntBuffer) -> glDrawBuffersATI
    void glDrawBuffersATI(int,int[],int) -> glDrawBuffersATI
    void glDrawPixels(int,int,int,int,java.nio.Buffer) -> glDrawPixels
    void glDrawPixels(int,int,int,int,long) -> glDrawPixels
    void glDrawTextureNV(int,int,float,float,float,float,float,float,float,float,float) -> glDrawTextureNV
    void glDrawTransformFeedbackNV(int,int) -> glDrawTransformFeedbackNV
    void glEdgeFlag(boolean) -> glEdgeFlag
    void glEdgeFlagPointer(int,java.nio.Buffer) -> glEdgeFlagPointer
    void glEdgeFlagPointer(int,long) -> glEdgeFlagPointer
    void glEdgeFlagv(java.nio.ByteBuffer) -> glEdgeFlagv
    void glEdgeFlagv(byte[],int) -> glEdgeFlagv
    void glEnableClientStateIndexedEXT(int,int) -> glEnableClientStateIndexedEXT
    void glEnableClientStateiEXT(int,int) -> glEnableClientStateiEXT
    void glEnableIndexed(int,int) -> glEnableIndexed
    void glEnableVariantClientStateEXT(int) -> glEnableVariantClientStateEXT
    void glEnableVertexArrayAttribEXT(int,int) -> glEnableVertexArrayAttribEXT
    void glEnableVertexArrayEXT(int,int) -> glEnableVertexArrayEXT
    void glEnableVertexAttribAPPLE(int,int) -> glEnableVertexAttribAPPLE
    void glEnableVertexAttribArrayARB(int) -> glEnableVertexAttribArrayARB
    void glEnd() -> glEnd
    void glEndConditionalRenderNVX() -> glEndConditionalRenderNVX
    void glEndList() -> glEndList
    void glEndOcclusionQueryNV() -> glEndOcclusionQueryNV
    void glEndPerfMonitorAMD(int) -> glEndPerfMonitorAMD
    void glEndVertexShaderEXT() -> glEndVertexShaderEXT
    void glEndVideoCaptureNV(int) -> glEndVideoCaptureNV
    void glEvalCoord1d(double) -> glEvalCoord1d
    void glEvalCoord1dv(java.nio.DoubleBuffer) -> glEvalCoord1dv
    void glEvalCoord1dv(double[],int) -> glEvalCoord1dv
    void glEvalCoord1f(float) -> glEvalCoord1f
    void glEvalCoord1fv(java.nio.FloatBuffer) -> glEvalCoord1fv
    void glEvalCoord1fv(float[],int) -> glEvalCoord1fv
    void glEvalCoord2d(double,double) -> glEvalCoord2d
    void glEvalCoord2dv(java.nio.DoubleBuffer) -> glEvalCoord2dv
    void glEvalCoord2dv(double[],int) -> glEvalCoord2dv
    void glEvalCoord2f(float,float) -> glEvalCoord2f
    void glEvalCoord2fv(java.nio.FloatBuffer) -> glEvalCoord2fv
    void glEvalCoord2fv(float[],int) -> glEvalCoord2fv
    void glEvalMapsNV(int,int) -> glEvalMapsNV
    void glEvalMesh1(int,int,int) -> glEvalMesh1
    void glEvalMesh2(int,int,int,int,int) -> glEvalMesh2
    void glEvalPoint1(int) -> glEvalPoint1
    void glEvalPoint2(int,int) -> glEvalPoint2
    void glExtractComponentEXT(int,int,int) -> glExtractComponentEXT
    void glFeedbackBuffer(int,int,java.nio.FloatBuffer) -> glFeedbackBuffer
    void glFinishFenceAPPLE(int) -> glFinishFenceAPPLE
    void glFinishFenceNV(int) -> glFinishFenceNV
    void glFinishObjectAPPLE(int,int) -> glFinishObjectAPPLE
    void glFinishTextureSUNX() -> glFinishTextureSUNX
    void glFlushMappedNamedBufferRangeEXT(int,long,long) -> glFlushMappedNamedBufferRangeEXT
    void glFlushPixelDataRangeNV(int) -> glFlushPixelDataRangeNV
    void glFlushVertexArrayRangeAPPLE(int,java.nio.Buffer) -> glFlushVertexArrayRangeAPPLE
    void glFlushVertexArrayRangeNV() -> glFlushVertexArrayRangeNV
    void glFogCoordPointer(int,int,java.nio.Buffer) -> glFogCoordPointer
    void glFogCoordPointer(int,int,long) -> glFogCoordPointer
    void glFogCoordd(double) -> glFogCoordd
    void glFogCoorddv(java.nio.DoubleBuffer) -> glFogCoorddv
    void glFogCoorddv(double[],int) -> glFogCoorddv
    void glFogCoordf(float) -> glFogCoordf
    void glFogCoordfv(java.nio.FloatBuffer) -> glFogCoordfv
    void glFogCoordfv(float[],int) -> glFogCoordfv
    void glFogCoordh(short) -> glFogCoordh
    void glFogCoordhv(java.nio.ShortBuffer) -> glFogCoordhv
    void glFogCoordhv(short[],int) -> glFogCoordhv
    void glFogi(int,int) -> glFogi
    void glFogiv(int,java.nio.IntBuffer) -> glFogiv
    void glFogiv(int,int[],int) -> glFogiv
    void glFrameTerminatorGREMEDY() -> glFrameTerminatorGREMEDY
    void glFramebufferDrawBufferEXT(int,int) -> glFramebufferDrawBufferEXT
    void glFramebufferDrawBuffersEXT(int,int,java.nio.IntBuffer) -> glFramebufferDrawBuffersEXT
    void glFramebufferDrawBuffersEXT(int,int,int[],int) -> glFramebufferDrawBuffersEXT
    void glFramebufferReadBufferEXT(int,int) -> glFramebufferReadBufferEXT
    void glFramebufferTextureEXT(int,int,int,int) -> glFramebufferTextureEXT
    void glFramebufferTextureFaceEXT(int,int,int,int,int) -> glFramebufferTextureFaceEXT
    void glFramebufferTextureLayerEXT(int,int,int,int,int) -> glFramebufferTextureLayerEXT
    void glGenFencesAPPLE(int,java.nio.IntBuffer) -> glGenFencesAPPLE
    void glGenFencesAPPLE(int,int[],int) -> glGenFencesAPPLE
    void glGenFencesNV(int,java.nio.IntBuffer) -> glGenFencesNV
    void glGenFencesNV(int,int[],int) -> glGenFencesNV
    int glGenLists(int) -> glGenLists
    void glGenNamesAMD(int,int,java.nio.IntBuffer) -> glGenNamesAMD
    void glGenNamesAMD(int,int,int[],int) -> glGenNamesAMD
    void glGenOcclusionQueriesNV(int,java.nio.IntBuffer) -> glGenOcclusionQueriesNV
    void glGenOcclusionQueriesNV(int,int[],int) -> glGenOcclusionQueriesNV
    int glGenPathsNV(int) -> glGenPathsNV
    void glGenPerfMonitorsAMD(int,java.nio.IntBuffer) -> glGenPerfMonitorsAMD
    void glGenPerfMonitorsAMD(int,int[],int) -> glGenPerfMonitorsAMD
    void glGenProgramsARB(int,java.nio.IntBuffer) -> glGenProgramsARB
    void glGenProgramsARB(int,int[],int) -> glGenProgramsARB
    int glGenSymbolsEXT(int,int,int,int) -> glGenSymbolsEXT
    void glGenTransformFeedbacksNV(int,java.nio.IntBuffer) -> glGenTransformFeedbacksNV
    void glGenTransformFeedbacksNV(int,int[],int) -> glGenTransformFeedbacksNV
    int glGenVertexShadersEXT(int) -> glGenVertexShadersEXT
    void glGenerateMultiTexMipmapEXT(int,int) -> glGenerateMultiTexMipmapEXT
    void glGenerateTextureMipmapEXT(int,int) -> glGenerateTextureMipmapEXT
    void glGetActiveUniformARB(int,int,int,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.ByteBuffer) -> glGetActiveUniformARB
    void glGetActiveUniformARB(int,int,int,int[],int,int[],int,int[],int,byte[],int) -> glGetActiveUniformARB
    void glGetAttachedObjectsARB(int,int,java.nio.IntBuffer,java.nio.IntBuffer) -> glGetAttachedObjectsARB
    void glGetAttachedObjectsARB(int,int,int[],int,int[],int) -> glGetAttachedObjectsARB
    void glGetBooleanIndexedv(int,int,java.nio.ByteBuffer) -> glGetBooleanIndexedv
    void glGetBooleanIndexedv(int,int,byte[],int) -> glGetBooleanIndexedv
    void glGetClipPlane(int,java.nio.DoubleBuffer) -> glGetClipPlane
    void glGetClipPlane(int,double[],int) -> glGetClipPlane
    void glGetClipPlanef(int,java.nio.FloatBuffer) -> glGetClipPlanef
    void glGetClipPlanef(int,float[],int) -> glGetClipPlanef
    void glGetColorTable(int,int,int,java.nio.Buffer) -> glGetColorTable
    void glGetColorTable(int,int,int,long) -> glGetColorTable
    void glGetColorTableParameterfv(int,int,java.nio.FloatBuffer) -> glGetColorTableParameterfv
    void glGetColorTableParameterfv(int,int,float[],int) -> glGetColorTableParameterfv
    void glGetColorTableParameteriv(int,int,java.nio.IntBuffer) -> glGetColorTableParameteriv
    void glGetColorTableParameteriv(int,int,int[],int) -> glGetColorTableParameteriv
    void glGetCompressedMultiTexImageEXT(int,int,int,java.nio.Buffer) -> glGetCompressedMultiTexImageEXT
    void glGetCompressedTextureImageEXT(int,int,int,java.nio.Buffer) -> glGetCompressedTextureImageEXT
    void glGetConvolutionFilter(int,int,int,java.nio.Buffer) -> glGetConvolutionFilter
    void glGetConvolutionFilter(int,int,int,long) -> glGetConvolutionFilter
    void glGetConvolutionParameterfv(int,int,java.nio.FloatBuffer) -> glGetConvolutionParameterfv
    void glGetConvolutionParameterfv(int,int,float[],int) -> glGetConvolutionParameterfv
    void glGetConvolutionParameteriv(int,int,java.nio.IntBuffer) -> glGetConvolutionParameteriv
    void glGetConvolutionParameteriv(int,int,int[],int) -> glGetConvolutionParameteriv
    void glGetDoubleIndexedvEXT(int,int,java.nio.DoubleBuffer) -> glGetDoubleIndexedvEXT
    void glGetDoubleIndexedvEXT(int,int,double[],int) -> glGetDoubleIndexedvEXT
    void glGetDoublei_vEXT(int,int,java.nio.DoubleBuffer) -> glGetDoublei_vEXT
    void glGetDoublei_vEXT(int,int,double[],int) -> glGetDoublei_vEXT
    void glGetFenceivNV(int,int,java.nio.IntBuffer) -> glGetFenceivNV
    void glGetFenceivNV(int,int,int[],int) -> glGetFenceivNV
    void glGetFloatIndexedvEXT(int,int,java.nio.FloatBuffer) -> glGetFloatIndexedvEXT
    void glGetFloatIndexedvEXT(int,int,float[],int) -> glGetFloatIndexedvEXT
    void glGetFloati_vEXT(int,int,java.nio.FloatBuffer) -> glGetFloati_vEXT
    void glGetFloati_vEXT(int,int,float[],int) -> glGetFloati_vEXT
    void glGetFramebufferParameterivEXT(int,int,java.nio.IntBuffer) -> glGetFramebufferParameterivEXT
    void glGetFramebufferParameterivEXT(int,int,int[],int) -> glGetFramebufferParameterivEXT
    int glGetHandleARB(int) -> glGetHandleARB
    void glGetHistogram(int,boolean,int,int,java.nio.Buffer) -> glGetHistogram
    void glGetHistogram(int,boolean,int,int,long) -> glGetHistogram
    void glGetHistogramParameterfv(int,int,java.nio.FloatBuffer) -> glGetHistogramParameterfv
    void glGetHistogramParameterfv(int,int,float[],int) -> glGetHistogramParameterfv
    void glGetHistogramParameteriv(int,int,java.nio.IntBuffer) -> glGetHistogramParameteriv
    void glGetHistogramParameteriv(int,int,int[],int) -> glGetHistogramParameteriv
    long glGetImageHandleNV(int,int,boolean,int,int) -> glGetImageHandleNV
    void glGetInfoLogARB(int,int,java.nio.IntBuffer,java.nio.ByteBuffer) -> glGetInfoLogARB
    void glGetInfoLogARB(int,int,int[],int,byte[],int) -> glGetInfoLogARB
    void glGetIntegerIndexedv(int,int,java.nio.IntBuffer) -> glGetIntegerIndexedv
    void glGetIntegerIndexedv(int,int,int[],int) -> glGetIntegerIndexedv
    void glGetInvariantBooleanvEXT(int,int,java.nio.ByteBuffer) -> glGetInvariantBooleanvEXT
    void glGetInvariantBooleanvEXT(int,int,byte[],int) -> glGetInvariantBooleanvEXT
    void glGetInvariantFloatvEXT(int,int,java.nio.FloatBuffer) -> glGetInvariantFloatvEXT
    void glGetInvariantFloatvEXT(int,int,float[],int) -> glGetInvariantFloatvEXT
    void glGetInvariantIntegervEXT(int,int,java.nio.IntBuffer) -> glGetInvariantIntegervEXT
    void glGetInvariantIntegervEXT(int,int,int[],int) -> glGetInvariantIntegervEXT
    void glGetLightiv(int,int,java.nio.IntBuffer) -> glGetLightiv
    void glGetLightiv(int,int,int[],int) -> glGetLightiv
    void glGetLocalConstantBooleanvEXT(int,int,java.nio.ByteBuffer) -> glGetLocalConstantBooleanvEXT
    void glGetLocalConstantBooleanvEXT(int,int,byte[],int) -> glGetLocalConstantBooleanvEXT
    void glGetLocalConstantFloatvEXT(int,int,java.nio.FloatBuffer) -> glGetLocalConstantFloatvEXT
    void glGetLocalConstantFloatvEXT(int,int,float[],int) -> glGetLocalConstantFloatvEXT
    void glGetLocalConstantIntegervEXT(int,int,java.nio.IntBuffer) -> glGetLocalConstantIntegervEXT
    void glGetLocalConstantIntegervEXT(int,int,int[],int) -> glGetLocalConstantIntegervEXT
    void glGetMapAttribParameterfvNV(int,int,int,java.nio.FloatBuffer) -> glGetMapAttribParameterfvNV
    void glGetMapAttribParameterfvNV(int,int,int,float[],int) -> glGetMapAttribParameterfvNV
    void glGetMapAttribParameterivNV(int,int,int,java.nio.IntBuffer) -> glGetMapAttribParameterivNV
    void glGetMapAttribParameterivNV(int,int,int,int[],int) -> glGetMapAttribParameterivNV
    void glGetMapControlPointsNV(int,int,int,int,int,boolean,java.nio.Buffer) -> glGetMapControlPointsNV
    void glGetMapParameterfvNV(int,int,java.nio.FloatBuffer) -> glGetMapParameterfvNV
    void glGetMapParameterfvNV(int,int,float[],int) -> glGetMapParameterfvNV
    void glGetMapParameterivNV(int,int,java.nio.IntBuffer) -> glGetMapParameterivNV
    void glGetMapParameterivNV(int,int,int[],int) -> glGetMapParameterivNV
    void glGetMapdv(int,int,java.nio.DoubleBuffer) -> glGetMapdv
    void glGetMapdv(int,int,double[],int) -> glGetMapdv
    void glGetMapfv(int,int,java.nio.FloatBuffer) -> glGetMapfv
    void glGetMapfv(int,int,float[],int) -> glGetMapfv
    void glGetMapiv(int,int,java.nio.IntBuffer) -> glGetMapiv
    void glGetMapiv(int,int,int[],int) -> glGetMapiv
    void glGetMaterialiv(int,int,java.nio.IntBuffer) -> glGetMaterialiv
    void glGetMaterialiv(int,int,int[],int) -> glGetMaterialiv
    void glGetMinmax(int,boolean,int,int,java.nio.Buffer) -> glGetMinmax
    void glGetMinmax(int,boolean,int,int,long) -> glGetMinmax
    void glGetMinmaxParameterfv(int,int,java.nio.FloatBuffer) -> glGetMinmaxParameterfv
    void glGetMinmaxParameterfv(int,int,float[],int) -> glGetMinmaxParameterfv
    void glGetMinmaxParameteriv(int,int,java.nio.IntBuffer) -> glGetMinmaxParameteriv
    void glGetMinmaxParameteriv(int,int,int[],int) -> glGetMinmaxParameteriv
    void glGetMultiTexEnvfvEXT(int,int,int,java.nio.FloatBuffer) -> glGetMultiTexEnvfvEXT
    void glGetMultiTexEnvfvEXT(int,int,int,float[],int) -> glGetMultiTexEnvfvEXT
    void glGetMultiTexEnvivEXT(int,int,int,java.nio.IntBuffer) -> glGetMultiTexEnvivEXT
    void glGetMultiTexEnvivEXT(int,int,int,int[],int) -> glGetMultiTexEnvivEXT
    void glGetMultiTexGendvEXT(int,int,int,java.nio.DoubleBuffer) -> glGetMultiTexGendvEXT
    void glGetMultiTexGendvEXT(int,int,int,double[],int) -> glGetMultiTexGendvEXT
    void glGetMultiTexGenfvEXT(int,int,int,java.nio.FloatBuffer) -> glGetMultiTexGenfvEXT
    void glGetMultiTexGenfvEXT(int,int,int,float[],int) -> glGetMultiTexGenfvEXT
    void glGetMultiTexGenivEXT(int,int,int,java.nio.IntBuffer) -> glGetMultiTexGenivEXT
    void glGetMultiTexGenivEXT(int,int,int,int[],int) -> glGetMultiTexGenivEXT
    void glGetMultiTexImageEXT(int,int,int,int,int,java.nio.Buffer) -> glGetMultiTexImageEXT
    void glGetMultiTexLevelParameterfvEXT(int,int,int,int,java.nio.FloatBuffer) -> glGetMultiTexLevelParameterfvEXT
    void glGetMultiTexLevelParameterfvEXT(int,int,int,int,float[],int) -> glGetMultiTexLevelParameterfvEXT
    void glGetMultiTexLevelParameterivEXT(int,int,int,int,java.nio.IntBuffer) -> glGetMultiTexLevelParameterivEXT
    void glGetMultiTexLevelParameterivEXT(int,int,int,int,int[],int) -> glGetMultiTexLevelParameterivEXT
    void glGetMultiTexParameterIivEXT(int,int,int,java.nio.IntBuffer) -> glGetMultiTexParameterIivEXT
    void glGetMultiTexParameterIivEXT(int,int,int,int[],int) -> glGetMultiTexParameterIivEXT
    void glGetMultiTexParameterIuivEXT(int,int,int,java.nio.IntBuffer) -> glGetMultiTexParameterIuivEXT
    void glGetMultiTexParameterIuivEXT(int,int,int,int[],int) -> glGetMultiTexParameterIuivEXT
    void glGetMultiTexParameterfvEXT(int,int,int,java.nio.FloatBuffer) -> glGetMultiTexParameterfvEXT
    void glGetMultiTexParameterfvEXT(int,int,int,float[],int) -> glGetMultiTexParameterfvEXT
    void glGetMultiTexParameterivEXT(int,int,int,java.nio.IntBuffer) -> glGetMultiTexParameterivEXT
    void glGetMultiTexParameterivEXT(int,int,int,int[],int) -> glGetMultiTexParameterivEXT
    void glGetMultisamplefvNV(int,int,java.nio.FloatBuffer) -> glGetMultisamplefvNV
    void glGetMultisamplefvNV(int,int,float[],int) -> glGetMultisamplefvNV
    void glGetNamedBufferParameterivEXT(int,int,java.nio.IntBuffer) -> glGetNamedBufferParameterivEXT
    void glGetNamedBufferParameterivEXT(int,int,int[],int) -> glGetNamedBufferParameterivEXT
    void glGetNamedBufferSubDataEXT(int,long,long,java.nio.Buffer) -> glGetNamedBufferSubDataEXT
    void glGetNamedFramebufferAttachmentParameterivEXT(int,int,int,java.nio.IntBuffer) -> glGetNamedFramebufferAttachmentParameterivEXT
    void glGetNamedFramebufferAttachmentParameterivEXT(int,int,int,int[],int) -> glGetNamedFramebufferAttachmentParameterivEXT
    void glGetNamedProgramLocalParameterIivEXT(int,int,int,java.nio.IntBuffer) -> glGetNamedProgramLocalParameterIivEXT
    void glGetNamedProgramLocalParameterIivEXT(int,int,int,int[],int) -> glGetNamedProgramLocalParameterIivEXT
    void glGetNamedProgramLocalParameterIuivEXT(int,int,int,java.nio.IntBuffer) -> glGetNamedProgramLocalParameterIuivEXT
    void glGetNamedProgramLocalParameterIuivEXT(int,int,int,int[],int) -> glGetNamedProgramLocalParameterIuivEXT
    void glGetNamedProgramLocalParameterdvEXT(int,int,int,java.nio.DoubleBuffer) -> glGetNamedProgramLocalParameterdvEXT
    void glGetNamedProgramLocalParameterdvEXT(int,int,int,double[],int) -> glGetNamedProgramLocalParameterdvEXT
    void glGetNamedProgramLocalParameterfvEXT(int,int,int,java.nio.FloatBuffer) -> glGetNamedProgramLocalParameterfvEXT
    void glGetNamedProgramLocalParameterfvEXT(int,int,int,float[],int) -> glGetNamedProgramLocalParameterfvEXT
    void glGetNamedProgramStringEXT(int,int,int,java.nio.Buffer) -> glGetNamedProgramStringEXT
    void glGetNamedProgramivEXT(int,int,int,java.nio.IntBuffer) -> glGetNamedProgramivEXT
    void glGetNamedProgramivEXT(int,int,int,int[],int) -> glGetNamedProgramivEXT
    void glGetNamedRenderbufferParameterivEXT(int,int,java.nio.IntBuffer) -> glGetNamedRenderbufferParameterivEXT
    void glGetNamedRenderbufferParameterivEXT(int,int,int[],int) -> glGetNamedRenderbufferParameterivEXT
    void glGetObjectParameterfvARB(int,int,java.nio.FloatBuffer) -> glGetObjectParameterfvARB
    void glGetObjectParameterfvARB(int,int,float[],int) -> glGetObjectParameterfvARB
    void glGetObjectParameterivAPPLE(int,int,int,java.nio.IntBuffer) -> glGetObjectParameterivAPPLE
    void glGetObjectParameterivAPPLE(int,int,int,int[],int) -> glGetObjectParameterivAPPLE
    void glGetObjectParameterivARB(int,int,java.nio.IntBuffer) -> glGetObjectParameterivARB
    void glGetObjectParameterivARB(int,int,int[],int) -> glGetObjectParameterivARB
    void glGetOcclusionQueryivNV(int,int,java.nio.IntBuffer) -> glGetOcclusionQueryivNV
    void glGetOcclusionQueryivNV(int,int,int[],int) -> glGetOcclusionQueryivNV
    void glGetOcclusionQueryuivNV(int,int,java.nio.IntBuffer) -> glGetOcclusionQueryuivNV
    void glGetOcclusionQueryuivNV(int,int,int[],int) -> glGetOcclusionQueryuivNV
    void glGetPathColorGenfvNV(int,int,java.nio.FloatBuffer) -> glGetPathColorGenfvNV
    void glGetPathColorGenfvNV(int,int,float[],int) -> glGetPathColorGenfvNV
    void glGetPathColorGenivNV(int,int,java.nio.IntBuffer) -> glGetPathColorGenivNV
    void glGetPathColorGenivNV(int,int,int[],int) -> glGetPathColorGenivNV
    void glGetPathCommandsNV(int,java.nio.ByteBuffer) -> glGetPathCommandsNV
    void glGetPathCommandsNV(int,byte[],int) -> glGetPathCommandsNV
    void glGetPathCoordsNV(int,java.nio.FloatBuffer) -> glGetPathCoordsNV
    void glGetPathCoordsNV(int,float[],int) -> glGetPathCoordsNV
    void glGetPathDashArrayNV(int,java.nio.FloatBuffer) -> glGetPathDashArrayNV
    void glGetPathDashArrayNV(int,float[],int) -> glGetPathDashArrayNV
    float glGetPathLengthNV(int,int,int) -> glGetPathLengthNV
    void glGetPathMetricRangeNV(int,int,int,int,java.nio.FloatBuffer) -> glGetPathMetricRangeNV
    void glGetPathMetricRangeNV(int,int,int,int,float[],int) -> glGetPathMetricRangeNV
    void glGetPathMetricsNV(int,int,int,java.nio.Buffer,int,int,java.nio.FloatBuffer) -> glGetPathMetricsNV
    void glGetPathMetricsNV(int,int,int,java.nio.Buffer,int,int,float[],int) -> glGetPathMetricsNV
    void glGetPathParameterfvNV(int,int,java.nio.FloatBuffer) -> glGetPathParameterfvNV
    void glGetPathParameterfvNV(int,int,float[],int) -> glGetPathParameterfvNV
    void glGetPathParameterivNV(int,int,java.nio.IntBuffer) -> glGetPathParameterivNV
    void glGetPathParameterivNV(int,int,int[],int) -> glGetPathParameterivNV
    void glGetPathSpacingNV(int,int,int,java.nio.Buffer,int,float,float,int,java.nio.FloatBuffer) -> glGetPathSpacingNV
    void glGetPathSpacingNV(int,int,int,java.nio.Buffer,int,float,float,int,float[],int) -> glGetPathSpacingNV
    void glGetPathTexGenfvNV(int,int,java.nio.FloatBuffer) -> glGetPathTexGenfvNV
    void glGetPathTexGenfvNV(int,int,float[],int) -> glGetPathTexGenfvNV
    void glGetPathTexGenivNV(int,int,java.nio.IntBuffer) -> glGetPathTexGenivNV
    void glGetPathTexGenivNV(int,int,int[],int) -> glGetPathTexGenivNV
    void glGetPerfMonitorCounterDataAMD(int,int,int,java.nio.IntBuffer,java.nio.IntBuffer) -> glGetPerfMonitorCounterDataAMD
    void glGetPerfMonitorCounterDataAMD(int,int,int,int[],int,int[],int) -> glGetPerfMonitorCounterDataAMD
    void glGetPerfMonitorCounterInfoAMD(int,int,int,java.nio.Buffer) -> glGetPerfMonitorCounterInfoAMD
    void glGetPerfMonitorCounterStringAMD(int,int,int,java.nio.IntBuffer,java.nio.ByteBuffer) -> glGetPerfMonitorCounterStringAMD
    void glGetPerfMonitorCounterStringAMD(int,int,int,int[],int,byte[],int) -> glGetPerfMonitorCounterStringAMD
    void glGetPerfMonitorCountersAMD(int,java.nio.IntBuffer,java.nio.IntBuffer,int,java.nio.IntBuffer) -> glGetPerfMonitorCountersAMD
    void glGetPerfMonitorCountersAMD(int,int[],int,int[],int,int,int[],int) -> glGetPerfMonitorCountersAMD
    void glGetPerfMonitorGroupStringAMD(int,int,java.nio.IntBuffer,java.nio.ByteBuffer) -> glGetPerfMonitorGroupStringAMD
    void glGetPerfMonitorGroupStringAMD(int,int,int[],int,byte[],int) -> glGetPerfMonitorGroupStringAMD
    void glGetPerfMonitorGroupsAMD(java.nio.IntBuffer,int,java.nio.IntBuffer) -> glGetPerfMonitorGroupsAMD
    void glGetPerfMonitorGroupsAMD(int[],int,int,int[],int) -> glGetPerfMonitorGroupsAMD
    void glGetPixelMapfv(int,java.nio.FloatBuffer) -> glGetPixelMapfv
    void glGetPixelMapfv(int,float[],int) -> glGetPixelMapfv
    void glGetPixelMapfv(int,long) -> glGetPixelMapfv
    void glGetPixelMapuiv(int,java.nio.IntBuffer) -> glGetPixelMapuiv
    void glGetPixelMapuiv(int,int[],int) -> glGetPixelMapuiv
    void glGetPixelMapuiv(int,long) -> glGetPixelMapuiv
    void glGetPixelMapusv(int,java.nio.ShortBuffer) -> glGetPixelMapusv
    void glGetPixelMapusv(int,short[],int) -> glGetPixelMapusv
    void glGetPixelMapusv(int,long) -> glGetPixelMapusv
    void glGetPixelTransformParameterfvEXT(int,int,java.nio.FloatBuffer) -> glGetPixelTransformParameterfvEXT
    void glGetPixelTransformParameterfvEXT(int,int,float[],int) -> glGetPixelTransformParameterfvEXT
    void glGetPixelTransformParameterivEXT(int,int,java.nio.IntBuffer) -> glGetPixelTransformParameterivEXT
    void glGetPixelTransformParameterivEXT(int,int,int[],int) -> glGetPixelTransformParameterivEXT
    void glGetPointeri_vEXT(int,int,com.jogamp.common.nio.PointerBuffer) -> glGetPointeri_vEXT
    void glGetPolygonStipple(java.nio.ByteBuffer) -> glGetPolygonStipple
    void glGetPolygonStipple(byte[],int) -> glGetPolygonStipple
    void glGetPolygonStipple(long) -> glGetPolygonStipple
    void glGetProgramEnvParameterIivNV(int,int,java.nio.IntBuffer) -> glGetProgramEnvParameterIivNV
    void glGetProgramEnvParameterIivNV(int,int,int[],int) -> glGetProgramEnvParameterIivNV
    void glGetProgramEnvParameterIuivNV(int,int,java.nio.IntBuffer) -> glGetProgramEnvParameterIuivNV
    void glGetProgramEnvParameterIuivNV(int,int,int[],int) -> glGetProgramEnvParameterIuivNV
    void glGetProgramEnvParameterdvARB(int,int,java.nio.DoubleBuffer) -> glGetProgramEnvParameterdvARB
    void glGetProgramEnvParameterdvARB(int,int,double[],int) -> glGetProgramEnvParameterdvARB
    void glGetProgramEnvParameterfvARB(int,int,java.nio.FloatBuffer) -> glGetProgramEnvParameterfvARB
    void glGetProgramEnvParameterfvARB(int,int,float[],int) -> glGetProgramEnvParameterfvARB
    void glGetProgramLocalParameterIivNV(int,int,java.nio.IntBuffer) -> glGetProgramLocalParameterIivNV
    void glGetProgramLocalParameterIivNV(int,int,int[],int) -> glGetProgramLocalParameterIivNV
    void glGetProgramLocalParameterIuivNV(int,int,java.nio.IntBuffer) -> glGetProgramLocalParameterIuivNV
    void glGetProgramLocalParameterIuivNV(int,int,int[],int) -> glGetProgramLocalParameterIuivNV
    void glGetProgramLocalParameterdvARB(int,int,java.nio.DoubleBuffer) -> glGetProgramLocalParameterdvARB
    void glGetProgramLocalParameterdvARB(int,int,double[],int) -> glGetProgramLocalParameterdvARB
    void glGetProgramLocalParameterfvARB(int,int,java.nio.FloatBuffer) -> glGetProgramLocalParameterfvARB
    void glGetProgramLocalParameterfvARB(int,int,float[],int) -> glGetProgramLocalParameterfvARB
    void glGetProgramStringARB(int,int,java.nio.Buffer) -> glGetProgramStringARB
    void glGetProgramSubroutineParameteruivNV(int,int,java.nio.IntBuffer) -> glGetProgramSubroutineParameteruivNV
    void glGetProgramSubroutineParameteruivNV(int,int,int[],int) -> glGetProgramSubroutineParameteruivNV
    void glGetProgramivARB(int,int,java.nio.IntBuffer) -> glGetProgramivARB
    void glGetProgramivARB(int,int,int[],int) -> glGetProgramivARB
    void glGetQueryObjecti64vEXT(int,int,java.nio.LongBuffer) -> glGetQueryObjecti64vEXT
    void glGetQueryObjecti64vEXT(int,int,long[],int) -> glGetQueryObjecti64vEXT
    void glGetQueryObjectui64vEXT(int,int,java.nio.LongBuffer) -> glGetQueryObjectui64vEXT
    void glGetQueryObjectui64vEXT(int,int,long[],int) -> glGetQueryObjectui64vEXT
    void glGetSeparableFilter(int,int,int,java.nio.Buffer,java.nio.Buffer,java.nio.Buffer) -> glGetSeparableFilter
    void glGetSeparableFilter(int,int,int,long,long,long) -> glGetSeparableFilter
    void glGetShaderSourceARB(int,int,java.nio.IntBuffer,java.nio.ByteBuffer) -> glGetShaderSourceARB
    void glGetShaderSourceARB(int,int,int[],int,byte[],int) -> glGetShaderSourceARB
    void glGetTexGendv(int,int,java.nio.DoubleBuffer) -> glGetTexGendv
    void glGetTexGendv(int,int,double[],int) -> glGetTexGendv
    long glGetTextureHandleNV(int) -> glGetTextureHandleNV
    void glGetTextureImageEXT(int,int,int,int,int,java.nio.Buffer) -> glGetTextureImageEXT
    void glGetTextureLevelParameterfvEXT(int,int,int,int,java.nio.FloatBuffer) -> glGetTextureLevelParameterfvEXT
    void glGetTextureLevelParameterfvEXT(int,int,int,int,float[],int) -> glGetTextureLevelParameterfvEXT
    void glGetTextureLevelParameterivEXT(int,int,int,int,java.nio.IntBuffer) -> glGetTextureLevelParameterivEXT
    void glGetTextureLevelParameterivEXT(int,int,int,int,int[],int) -> glGetTextureLevelParameterivEXT
    void glGetTextureParameterIivEXT(int,int,int,java.nio.IntBuffer) -> glGetTextureParameterIivEXT
    void glGetTextureParameterIivEXT(int,int,int,int[],int) -> glGetTextureParameterIivEXT
    void glGetTextureParameterIuivEXT(int,int,int,java.nio.IntBuffer) -> glGetTextureParameterIuivEXT
    void glGetTextureParameterIuivEXT(int,int,int,int[],int) -> glGetTextureParameterIuivEXT
    void glGetTextureParameterfvEXT(int,int,int,java.nio.FloatBuffer) -> glGetTextureParameterfvEXT
    void glGetTextureParameterfvEXT(int,int,int,float[],int) -> glGetTextureParameterfvEXT
    void glGetTextureParameterivEXT(int,int,int,java.nio.IntBuffer) -> glGetTextureParameterivEXT
    void glGetTextureParameterivEXT(int,int,int,int[],int) -> glGetTextureParameterivEXT
    long glGetTextureSamplerHandleNV(int,int) -> glGetTextureSamplerHandleNV
    int glGetUniformBufferSizeEXT(int,int) -> glGetUniformBufferSizeEXT
    int glGetUniformLocationARB(int,java.lang.String) -> glGetUniformLocationARB
    long glGetUniformOffsetEXT(int,int) -> glGetUniformOffsetEXT
    void glGetUniformfvARB(int,int,java.nio.FloatBuffer) -> glGetUniformfvARB
    void glGetUniformfvARB(int,int,float[],int) -> glGetUniformfvARB
    void glGetUniformivARB(int,int,java.nio.IntBuffer) -> glGetUniformivARB
    void glGetUniformivARB(int,int,int[],int) -> glGetUniformivARB
    void glGetVariantBooleanvEXT(int,int,java.nio.ByteBuffer) -> glGetVariantBooleanvEXT
    void glGetVariantBooleanvEXT(int,int,byte[],int) -> glGetVariantBooleanvEXT
    void glGetVariantFloatvEXT(int,int,java.nio.FloatBuffer) -> glGetVariantFloatvEXT
    void glGetVariantFloatvEXT(int,int,float[],int) -> glGetVariantFloatvEXT
    void glGetVariantIntegervEXT(int,int,java.nio.IntBuffer) -> glGetVariantIntegervEXT
    void glGetVariantIntegervEXT(int,int,int[],int) -> glGetVariantIntegervEXT
    void glGetVertexArrayIntegeri_vEXT(int,int,int,java.nio.IntBuffer) -> glGetVertexArrayIntegeri_vEXT
    void glGetVertexArrayIntegeri_vEXT(int,int,int,int[],int) -> glGetVertexArrayIntegeri_vEXT
    void glGetVertexArrayIntegervEXT(int,int,java.nio.IntBuffer) -> glGetVertexArrayIntegervEXT
    void glGetVertexArrayIntegervEXT(int,int,int[],int) -> glGetVertexArrayIntegervEXT
    void glGetVertexArrayPointeri_vEXT(int,int,int,com.jogamp.common.nio.PointerBuffer) -> glGetVertexArrayPointeri_vEXT
    void glGetVertexArrayPointervEXT(int,int,com.jogamp.common.nio.PointerBuffer) -> glGetVertexArrayPointervEXT
    void glGetVertexAttribIivEXT(int,int,java.nio.IntBuffer) -> glGetVertexAttribIivEXT
    void glGetVertexAttribIivEXT(int,int,int[],int) -> glGetVertexAttribIivEXT
    void glGetVertexAttribIuivEXT(int,int,java.nio.IntBuffer) -> glGetVertexAttribIuivEXT
    void glGetVertexAttribIuivEXT(int,int,int[],int) -> glGetVertexAttribIuivEXT
    void glGetVertexAttribLi64vNV(int,int,java.nio.LongBuffer) -> glGetVertexAttribLi64vNV
    void glGetVertexAttribLi64vNV(int,int,long[],int) -> glGetVertexAttribLi64vNV
    void glGetVertexAttribLui64vNV(int,int,java.nio.LongBuffer) -> glGetVertexAttribLui64vNV
    void glGetVertexAttribLui64vNV(int,int,long[],int) -> glGetVertexAttribLui64vNV
    void glGetVertexAttribdvARB(int,int,java.nio.DoubleBuffer) -> glGetVertexAttribdvARB
    void glGetVertexAttribdvARB(int,int,double[],int) -> glGetVertexAttribdvARB
    void glGetVertexAttribfvARB(int,int,java.nio.FloatBuffer) -> glGetVertexAttribfvARB
    void glGetVertexAttribfvARB(int,int,float[],int) -> glGetVertexAttribfvARB
    void glGetVertexAttribivARB(int,int,java.nio.IntBuffer) -> glGetVertexAttribivARB
    void glGetVertexAttribivARB(int,int,int[],int) -> glGetVertexAttribivARB
    void glGetVideoCaptureStreamdvNV(int,int,int,java.nio.DoubleBuffer) -> glGetVideoCaptureStreamdvNV
    void glGetVideoCaptureStreamdvNV(int,int,int,double[],int) -> glGetVideoCaptureStreamdvNV
    void glGetVideoCaptureStreamfvNV(int,int,int,java.nio.FloatBuffer) -> glGetVideoCaptureStreamfvNV
    void glGetVideoCaptureStreamfvNV(int,int,int,float[],int) -> glGetVideoCaptureStreamfvNV
    void glGetVideoCaptureStreamivNV(int,int,int,java.nio.IntBuffer) -> glGetVideoCaptureStreamivNV
    void glGetVideoCaptureStreamivNV(int,int,int,int[],int) -> glGetVideoCaptureStreamivNV
    void glGetVideoCaptureivNV(int,int,java.nio.IntBuffer) -> glGetVideoCaptureivNV
    void glGetVideoCaptureivNV(int,int,int[],int) -> glGetVideoCaptureivNV
    void glGetnColorTable(int,int,int,int,java.nio.Buffer) -> glGetnColorTable
    void glGetnConvolutionFilter(int,int,int,int,java.nio.Buffer) -> glGetnConvolutionFilter
    void glGetnHistogram(int,boolean,int,int,int,java.nio.Buffer) -> glGetnHistogram
    void glGetnMapdv(int,int,int,java.nio.DoubleBuffer) -> glGetnMapdv
    void glGetnMapdv(int,int,int,double[],int) -> glGetnMapdv
    void glGetnMapfv(int,int,int,java.nio.FloatBuffer) -> glGetnMapfv
    void glGetnMapfv(int,int,int,float[],int) -> glGetnMapfv
    void glGetnMapiv(int,int,int,java.nio.IntBuffer) -> glGetnMapiv
    void glGetnMapiv(int,int,int,int[],int) -> glGetnMapiv
    void glGetnMinmax(int,boolean,int,int,int,java.nio.Buffer) -> glGetnMinmax
    void glGetnPixelMapfv(int,int,java.nio.FloatBuffer) -> glGetnPixelMapfv
    void glGetnPixelMapfv(int,int,float[],int) -> glGetnPixelMapfv
    void glGetnPixelMapuiv(int,int,java.nio.IntBuffer) -> glGetnPixelMapuiv
    void glGetnPixelMapuiv(int,int,int[],int) -> glGetnPixelMapuiv
    void glGetnPixelMapusv(int,int,java.nio.ShortBuffer) -> glGetnPixelMapusv
    void glGetnPixelMapusv(int,int,short[],int) -> glGetnPixelMapusv
    void glGetnPolygonStipple(int,java.nio.ByteBuffer) -> glGetnPolygonStipple
    void glGetnPolygonStipple(int,byte[],int) -> glGetnPolygonStipple
    void glGetnSeparableFilter(int,int,int,int,java.nio.Buffer,int,java.nio.Buffer,java.nio.Buffer) -> glGetnSeparableFilter
    void glHintPGI(int,int) -> glHintPGI
    void glHistogram(int,int,int,boolean) -> glHistogram
    void glIndexFuncEXT(int,float) -> glIndexFuncEXT
    void glIndexMask(int) -> glIndexMask
    void glIndexMaterialEXT(int,int) -> glIndexMaterialEXT
    void glIndexPointer(int,int,java.nio.Buffer) -> glIndexPointer
    void glIndexd(double) -> glIndexd
    void glIndexdv(java.nio.DoubleBuffer) -> glIndexdv
    void glIndexdv(double[],int) -> glIndexdv
    void glIndexf(float) -> glIndexf
    void glIndexfv(java.nio.FloatBuffer) -> glIndexfv
    void glIndexfv(float[],int) -> glIndexfv
    void glIndexi(int) -> glIndexi
    void glIndexiv(java.nio.IntBuffer) -> glIndexiv
    void glIndexiv(int[],int) -> glIndexiv
    void glIndexs(short) -> glIndexs
    void glIndexsv(java.nio.ShortBuffer) -> glIndexsv
    void glIndexsv(short[],int) -> glIndexsv
    void glIndexub(byte) -> glIndexub
    void glIndexubv(java.nio.ByteBuffer) -> glIndexubv
    void glIndexubv(byte[],int) -> glIndexubv
    void glInitNames() -> glInitNames
    void glInsertComponentEXT(int,int,int) -> glInsertComponentEXT
    void glInterleavedArrays(int,int,java.nio.Buffer) -> glInterleavedArrays
    void glInterleavedArrays(int,int,long) -> glInterleavedArrays
    void glInterpolatePathsNV(int,int,int,float) -> glInterpolatePathsNV
    boolean glIsEnabledIndexed(int,int) -> glIsEnabledIndexed
    boolean glIsFenceAPPLE(int) -> glIsFenceAPPLE
    boolean glIsFenceNV(int) -> glIsFenceNV
    boolean glIsImageHandleResidentNV(long) -> glIsImageHandleResidentNV
    boolean glIsList(int) -> glIsList
    boolean glIsNameAMD(int,int) -> glIsNameAMD
    boolean glIsOcclusionQueryNV(int) -> glIsOcclusionQueryNV
    boolean glIsPathNV(int) -> glIsPathNV
    boolean glIsPointInFillPathNV(int,int,float,float) -> glIsPointInFillPathNV
    boolean glIsPointInStrokePathNV(int,float,float) -> glIsPointInStrokePathNV
    boolean glIsProgramARB(int) -> glIsProgramARB
    boolean glIsTextureHandleResidentNV(long) -> glIsTextureHandleResidentNV
    boolean glIsTransformFeedbackNV(int) -> glIsTransformFeedbackNV
    boolean glIsVariantEnabledEXT(int,int) -> glIsVariantEnabledEXT
    boolean glIsVertexAttribEnabledAPPLE(int,int) -> glIsVertexAttribEnabledAPPLE
    void glLightModeli(int,int) -> glLightModeli
    void glLightModeliv(int,java.nio.IntBuffer) -> glLightModeliv
    void glLightModeliv(int,int[],int) -> glLightModeliv
    void glLighti(int,int,int) -> glLighti
    void glLightiv(int,int,java.nio.IntBuffer) -> glLightiv
    void glLightiv(int,int,int[],int) -> glLightiv
    void glLineStipple(int,short) -> glLineStipple
    void glLinkProgramARB(int) -> glLinkProgramARB
    void glListBase(int) -> glListBase
    void glLoadMatrixd(java.nio.DoubleBuffer) -> glLoadMatrixd
    void glLoadMatrixd(double[],int) -> glLoadMatrixd
    void glLoadName(int) -> glLoadName
    void glLoadTransposeMatrixd(java.nio.DoubleBuffer) -> glLoadTransposeMatrixd
    void glLoadTransposeMatrixd(double[],int) -> glLoadTransposeMatrixd
    void glLoadTransposeMatrixf(java.nio.FloatBuffer) -> glLoadTransposeMatrixf
    void glLoadTransposeMatrixf(float[],int) -> glLoadTransposeMatrixf
    void glLockArraysEXT(int,int) -> glLockArraysEXT
    void glMakeImageHandleNonResidentNV(long) -> glMakeImageHandleNonResidentNV
    void glMakeImageHandleResidentNV(long,int) -> glMakeImageHandleResidentNV
    void glMakeTextureHandleNonResidentNV(long) -> glMakeTextureHandleNonResidentNV
    void glMakeTextureHandleResidentNV(long) -> glMakeTextureHandleResidentNV
    void glMap1d(int,double,double,int,int,java.nio.DoubleBuffer) -> glMap1d
    void glMap1d(int,double,double,int,int,double[],int) -> glMap1d
    void glMap1f(int,float,float,int,int,java.nio.FloatBuffer) -> glMap1f
    void glMap1f(int,float,float,int,int,float[],int) -> glMap1f
    void glMap2d(int,double,double,int,int,double,double,int,int,java.nio.DoubleBuffer) -> glMap2d
    void glMap2d(int,double,double,int,int,double,double,int,int,double[],int) -> glMap2d
    void glMap2f(int,float,float,int,int,float,float,int,int,java.nio.FloatBuffer) -> glMap2f
    void glMap2f(int,float,float,int,int,float,float,int,int,float[],int) -> glMap2f
    void glMapControlPointsNV(int,int,int,int,int,int,int,boolean,java.nio.Buffer) -> glMapControlPointsNV
    void glMapGrid1d(int,double,double) -> glMapGrid1d
    void glMapGrid1f(int,float,float) -> glMapGrid1f
    void glMapGrid2d(int,double,double,int,double,double) -> glMapGrid2d
    void glMapGrid2f(int,float,float,int,float,float) -> glMapGrid2f
    java.nio.ByteBuffer glMapNamedBufferEXT(int,int) -> glMapNamedBufferEXT
    java.nio.ByteBuffer glMapNamedBufferRangeEXT(int,long,long,int) -> glMapNamedBufferRangeEXT
    void glMapParameterfvNV(int,int,java.nio.FloatBuffer) -> glMapParameterfvNV
    void glMapParameterfvNV(int,int,float[],int) -> glMapParameterfvNV
    void glMapParameterivNV(int,int,java.nio.IntBuffer) -> glMapParameterivNV
    void glMapParameterivNV(int,int,int[],int) -> glMapParameterivNV
    java.nio.ByteBuffer glMapTexture2DINTEL(int,int,int,java.nio.IntBuffer,java.nio.IntBuffer) -> glMapTexture2DINTEL
    java.nio.ByteBuffer glMapTexture2DINTEL(int,int,int,int[],int,int[],int) -> glMapTexture2DINTEL
    void glMapVertexAttrib1dAPPLE(int,int,double,double,int,int,java.nio.DoubleBuffer) -> glMapVertexAttrib1dAPPLE
    void glMapVertexAttrib1dAPPLE(int,int,double,double,int,int,double[],int) -> glMapVertexAttrib1dAPPLE
    void glMapVertexAttrib1fAPPLE(int,int,float,float,int,int,java.nio.FloatBuffer) -> glMapVertexAttrib1fAPPLE
    void glMapVertexAttrib1fAPPLE(int,int,float,float,int,int,float[],int) -> glMapVertexAttrib1fAPPLE
    void glMapVertexAttrib2dAPPLE(int,int,double,double,int,int,double,double,int,int,java.nio.DoubleBuffer) -> glMapVertexAttrib2dAPPLE
    void glMapVertexAttrib2dAPPLE(int,int,double,double,int,int,double,double,int,int,double[],int) -> glMapVertexAttrib2dAPPLE
    void glMapVertexAttrib2fAPPLE(int,int,float,float,int,int,float,float,int,int,java.nio.FloatBuffer) -> glMapVertexAttrib2fAPPLE
    void glMapVertexAttrib2fAPPLE(int,int,float,float,int,int,float,float,int,int,float[],int) -> glMapVertexAttrib2fAPPLE
    void glMateriali(int,int,int) -> glMateriali
    void glMaterialiv(int,int,java.nio.IntBuffer) -> glMaterialiv
    void glMaterialiv(int,int,int[],int) -> glMaterialiv
    void glMatrixFrustumEXT(int,double,double,double,double,double,double) -> glMatrixFrustumEXT
    void glMatrixIndexPointer(int,int,int,java.nio.Buffer) -> glMatrixIndexPointer
    void glMatrixIndexubvARB(int,java.nio.ByteBuffer) -> glMatrixIndexubvARB
    void glMatrixIndexubvARB(int,byte[],int) -> glMatrixIndexubvARB
    void glMatrixIndexuivARB(int,java.nio.IntBuffer) -> glMatrixIndexuivARB
    void glMatrixIndexuivARB(int,int[],int) -> glMatrixIndexuivARB
    void glMatrixIndexusvARB(int,java.nio.ShortBuffer) -> glMatrixIndexusvARB
    void glMatrixIndexusvARB(int,short[],int) -> glMatrixIndexusvARB
    void glMatrixLoadIdentityEXT(int) -> glMatrixLoadIdentityEXT
    void glMatrixLoadTransposedEXT(int,java.nio.DoubleBuffer) -> glMatrixLoadTransposedEXT
    void glMatrixLoadTransposedEXT(int,double[],int) -> glMatrixLoadTransposedEXT
    void glMatrixLoadTransposefEXT(int,java.nio.FloatBuffer) -> glMatrixLoadTransposefEXT
    void glMatrixLoadTransposefEXT(int,float[],int) -> glMatrixLoadTransposefEXT
    void glMatrixLoaddEXT(int,java.nio.DoubleBuffer) -> glMatrixLoaddEXT
    void glMatrixLoaddEXT(int,double[],int) -> glMatrixLoaddEXT
    void glMatrixLoadfEXT(int,java.nio.FloatBuffer) -> glMatrixLoadfEXT
    void glMatrixLoadfEXT(int,float[],int) -> glMatrixLoadfEXT
    void glMatrixMultTransposedEXT(int,java.nio.DoubleBuffer) -> glMatrixMultTransposedEXT
    void glMatrixMultTransposedEXT(int,double[],int) -> glMatrixMultTransposedEXT
    void glMatrixMultTransposefEXT(int,java.nio.FloatBuffer) -> glMatrixMultTransposefEXT
    void glMatrixMultTransposefEXT(int,float[],int) -> glMatrixMultTransposefEXT
    void glMatrixMultdEXT(int,java.nio.DoubleBuffer) -> glMatrixMultdEXT
    void glMatrixMultdEXT(int,double[],int) -> glMatrixMultdEXT
    void glMatrixMultfEXT(int,java.nio.FloatBuffer) -> glMatrixMultfEXT
    void glMatrixMultfEXT(int,float[],int) -> glMatrixMultfEXT
    void glMatrixOrthoEXT(int,double,double,double,double,double,double) -> glMatrixOrthoEXT
    void glMatrixPopEXT(int) -> glMatrixPopEXT
    void glMatrixPushEXT(int) -> glMatrixPushEXT
    void glMatrixRotatedEXT(int,double,double,double,double) -> glMatrixRotatedEXT
    void glMatrixRotatefEXT(int,float,float,float,float) -> glMatrixRotatefEXT
    void glMatrixScaledEXT(int,double,double,double) -> glMatrixScaledEXT
    void glMatrixScalefEXT(int,float,float,float) -> glMatrixScalefEXT
    void glMatrixTranslatedEXT(int,double,double,double) -> glMatrixTranslatedEXT
    void glMatrixTranslatefEXT(int,float,float,float) -> glMatrixTranslatefEXT
    void glMinmax(int,int,boolean) -> glMinmax
    void glMultMatrixd(java.nio.DoubleBuffer) -> glMultMatrixd
    void glMultMatrixd(double[],int) -> glMultMatrixd
    void glMultTransposeMatrixd(java.nio.DoubleBuffer) -> glMultTransposeMatrixd
    void glMultTransposeMatrixd(double[],int) -> glMultTransposeMatrixd
    void glMultTransposeMatrixf(java.nio.FloatBuffer) -> glMultTransposeMatrixf
    void glMultTransposeMatrixf(float[],int) -> glMultTransposeMatrixf
    void glMultiTexBufferEXT(int,int,int,int) -> glMultiTexBufferEXT
    void glMultiTexCoord1bOES(int,byte) -> glMultiTexCoord1bOES
    void glMultiTexCoord1bvOES(int,java.nio.ByteBuffer) -> glMultiTexCoord1bvOES
    void glMultiTexCoord1bvOES(int,byte[],int) -> glMultiTexCoord1bvOES
    void glMultiTexCoord1d(int,double) -> glMultiTexCoord1d
    void glMultiTexCoord1dv(int,java.nio.DoubleBuffer) -> glMultiTexCoord1dv
    void glMultiTexCoord1dv(int,double[],int) -> glMultiTexCoord1dv
    void glMultiTexCoord1f(int,float) -> glMultiTexCoord1f
    void glMultiTexCoord1fv(int,java.nio.FloatBuffer) -> glMultiTexCoord1fv
    void glMultiTexCoord1fv(int,float[],int) -> glMultiTexCoord1fv
    void glMultiTexCoord1h(int,short) -> glMultiTexCoord1h
    void glMultiTexCoord1hv(int,java.nio.ShortBuffer) -> glMultiTexCoord1hv
    void glMultiTexCoord1hv(int,short[],int) -> glMultiTexCoord1hv
    void glMultiTexCoord1i(int,int) -> glMultiTexCoord1i
    void glMultiTexCoord1iv(int,java.nio.IntBuffer) -> glMultiTexCoord1iv
    void glMultiTexCoord1iv(int,int[],int) -> glMultiTexCoord1iv
    void glMultiTexCoord1s(int,short) -> glMultiTexCoord1s
    void glMultiTexCoord1sv(int,java.nio.ShortBuffer) -> glMultiTexCoord1sv
    void glMultiTexCoord1sv(int,short[],int) -> glMultiTexCoord1sv
    void glMultiTexCoord2bOES(int,byte,byte) -> glMultiTexCoord2bOES
    void glMultiTexCoord2bvOES(int,java.nio.ByteBuffer) -> glMultiTexCoord2bvOES
    void glMultiTexCoord2bvOES(int,byte[],int) -> glMultiTexCoord2bvOES
    void glMultiTexCoord2d(int,double,double) -> glMultiTexCoord2d
    void glMultiTexCoord2dv(int,java.nio.DoubleBuffer) -> glMultiTexCoord2dv
    void glMultiTexCoord2dv(int,double[],int) -> glMultiTexCoord2dv
    void glMultiTexCoord2f(int,float,float) -> glMultiTexCoord2f
    void glMultiTexCoord2fv(int,java.nio.FloatBuffer) -> glMultiTexCoord2fv
    void glMultiTexCoord2fv(int,float[],int) -> glMultiTexCoord2fv
    void glMultiTexCoord2h(int,short,short) -> glMultiTexCoord2h
    void glMultiTexCoord2hv(int,java.nio.ShortBuffer) -> glMultiTexCoord2hv
    void glMultiTexCoord2hv(int,short[],int) -> glMultiTexCoord2hv
    void glMultiTexCoord2i(int,int,int) -> glMultiTexCoord2i
    void glMultiTexCoord2iv(int,java.nio.IntBuffer) -> glMultiTexCoord2iv
    void glMultiTexCoord2iv(int,int[],int) -> glMultiTexCoord2iv
    void glMultiTexCoord2s(int,short,short) -> glMultiTexCoord2s
    void glMultiTexCoord2sv(int,java.nio.ShortBuffer) -> glMultiTexCoord2sv
    void glMultiTexCoord2sv(int,short[],int) -> glMultiTexCoord2sv
    void glMultiTexCoord3bOES(int,byte,byte,byte) -> glMultiTexCoord3bOES
    void glMultiTexCoord3bvOES(int,java.nio.ByteBuffer) -> glMultiTexCoord3bvOES
    void glMultiTexCoord3bvOES(int,byte[],int) -> glMultiTexCoord3bvOES
    void glMultiTexCoord3d(int,double,double,double) -> glMultiTexCoord3d
    void glMultiTexCoord3dv(int,java.nio.DoubleBuffer) -> glMultiTexCoord3dv
    void glMultiTexCoord3dv(int,double[],int) -> glMultiTexCoord3dv
    void glMultiTexCoord3f(int,float,float,float) -> glMultiTexCoord3f
    void glMultiTexCoord3fv(int,java.nio.FloatBuffer) -> glMultiTexCoord3fv
    void glMultiTexCoord3fv(int,float[],int) -> glMultiTexCoord3fv
    void glMultiTexCoord3h(int,short,short,short) -> glMultiTexCoord3h
    void glMultiTexCoord3hv(int,java.nio.ShortBuffer) -> glMultiTexCoord3hv
    void glMultiTexCoord3hv(int,short[],int) -> glMultiTexCoord3hv
    void glMultiTexCoord3i(int,int,int,int) -> glMultiTexCoord3i
    void glMultiTexCoord3iv(int,java.nio.IntBuffer) -> glMultiTexCoord3iv
    void glMultiTexCoord3iv(int,int[],int) -> glMultiTexCoord3iv
    void glMultiTexCoord3s(int,short,short,short) -> glMultiTexCoord3s
    void glMultiTexCoord3sv(int,java.nio.ShortBuffer) -> glMultiTexCoord3sv
    void glMultiTexCoord3sv(int,short[],int) -> glMultiTexCoord3sv
    void glMultiTexCoord4bOES(int,byte,byte,byte,byte) -> glMultiTexCoord4bOES
    void glMultiTexCoord4bvOES(int,java.nio.ByteBuffer) -> glMultiTexCoord4bvOES
    void glMultiTexCoord4bvOES(int,byte[],int) -> glMultiTexCoord4bvOES
    void glMultiTexCoord4d(int,double,double,double,double) -> glMultiTexCoord4d
    void glMultiTexCoord4dv(int,java.nio.DoubleBuffer) -> glMultiTexCoord4dv
    void glMultiTexCoord4dv(int,double[],int) -> glMultiTexCoord4dv
    void glMultiTexCoord4fv(int,java.nio.FloatBuffer) -> glMultiTexCoord4fv
    void glMultiTexCoord4fv(int,float[],int) -> glMultiTexCoord4fv
    void glMultiTexCoord4h(int,short,short,short,short) -> glMultiTexCoord4h
    void glMultiTexCoord4hv(int,java.nio.ShortBuffer) -> glMultiTexCoord4hv
    void glMultiTexCoord4hv(int,short[],int) -> glMultiTexCoord4hv
    void glMultiTexCoord4i(int,int,int,int,int) -> glMultiTexCoord4i
    void glMultiTexCoord4iv(int,java.nio.IntBuffer) -> glMultiTexCoord4iv
    void glMultiTexCoord4iv(int,int[],int) -> glMultiTexCoord4iv
    void glMultiTexCoord4s(int,short,short,short,short) -> glMultiTexCoord4s
    void glMultiTexCoord4sv(int,java.nio.ShortBuffer) -> glMultiTexCoord4sv
    void glMultiTexCoord4sv(int,short[],int) -> glMultiTexCoord4sv
    void glMultiTexCoordPointerEXT(int,int,int,int,java.nio.Buffer) -> glMultiTexCoordPointerEXT
    void glMultiTexEnvfEXT(int,int,int,float) -> glMultiTexEnvfEXT
    void glMultiTexEnvfvEXT(int,int,int,java.nio.FloatBuffer) -> glMultiTexEnvfvEXT
    void glMultiTexEnvfvEXT(int,int,int,float[],int) -> glMultiTexEnvfvEXT
    void glMultiTexEnviEXT(int,int,int,int) -> glMultiTexEnviEXT
    void glMultiTexEnvivEXT(int,int,int,java.nio.IntBuffer) -> glMultiTexEnvivEXT
    void glMultiTexEnvivEXT(int,int,int,int[],int) -> glMultiTexEnvivEXT
    void glMultiTexGendEXT(int,int,int,double) -> glMultiTexGendEXT
    void glMultiTexGendvEXT(int,int,int,java.nio.DoubleBuffer) -> glMultiTexGendvEXT
    void glMultiTexGendvEXT(int,int,int,double[],int) -> glMultiTexGendvEXT
    void glMultiTexGenfEXT(int,int,int,float) -> glMultiTexGenfEXT
    void glMultiTexGenfvEXT(int,int,int,java.nio.FloatBuffer) -> glMultiTexGenfvEXT
    void glMultiTexGenfvEXT(int,int,int,float[],int) -> glMultiTexGenfvEXT
    void glMultiTexGeniEXT(int,int,int,int) -> glMultiTexGeniEXT
    void glMultiTexGenivEXT(int,int,int,java.nio.IntBuffer) -> glMultiTexGenivEXT
    void glMultiTexGenivEXT(int,int,int,int[],int) -> glMultiTexGenivEXT
    void glMultiTexImage1DEXT(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glMultiTexImage1DEXT
    void glMultiTexImage2DEXT(int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> glMultiTexImage2DEXT
    void glMultiTexImage3DEXT(int,int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> glMultiTexImage3DEXT
    void glMultiTexParameterIivEXT(int,int,int,java.nio.IntBuffer) -> glMultiTexParameterIivEXT
    void glMultiTexParameterIivEXT(int,int,int,int[],int) -> glMultiTexParameterIivEXT
    void glMultiTexParameterIuivEXT(int,int,int,java.nio.IntBuffer) -> glMultiTexParameterIuivEXT
    void glMultiTexParameterIuivEXT(int,int,int,int[],int) -> glMultiTexParameterIuivEXT
    void glMultiTexParameterfEXT(int,int,int,float) -> glMultiTexParameterfEXT
    void glMultiTexParameterfvEXT(int,int,int,java.nio.FloatBuffer) -> glMultiTexParameterfvEXT
    void glMultiTexParameterfvEXT(int,int,int,float[],int) -> glMultiTexParameterfvEXT
    void glMultiTexParameteriEXT(int,int,int,int) -> glMultiTexParameteriEXT
    void glMultiTexParameterivEXT(int,int,int,java.nio.IntBuffer) -> glMultiTexParameterivEXT
    void glMultiTexParameterivEXT(int,int,int,int[],int) -> glMultiTexParameterivEXT
    void glMultiTexRenderbufferEXT(int,int,int) -> glMultiTexRenderbufferEXT
    void glMultiTexSubImage1DEXT(int,int,int,int,int,int,int,java.nio.Buffer) -> glMultiTexSubImage1DEXT
    void glMultiTexSubImage2DEXT(int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> glMultiTexSubImage2DEXT
    void glMultiTexSubImage3DEXT(int,int,int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> glMultiTexSubImage3DEXT
    void glNamedBufferDataEXT(int,long,java.nio.Buffer,int) -> glNamedBufferDataEXT
    void glNamedBufferSubDataEXT(int,long,long,java.nio.Buffer) -> glNamedBufferSubDataEXT
    void glNamedCopyBufferSubDataEXT(int,int,long,long,long) -> glNamedCopyBufferSubDataEXT
    void glNamedFramebufferRenderbufferEXT(int,int,int,int) -> glNamedFramebufferRenderbufferEXT
    void glNamedFramebufferTexture1DEXT(int,int,int,int,int) -> glNamedFramebufferTexture1DEXT
    void glNamedFramebufferTexture2DEXT(int,int,int,int,int) -> glNamedFramebufferTexture2DEXT
    void glNamedFramebufferTexture3DEXT(int,int,int,int,int,int) -> glNamedFramebufferTexture3DEXT
    void glNamedFramebufferTextureEXT(int,int,int,int) -> glNamedFramebufferTextureEXT
    void glNamedFramebufferTextureFaceEXT(int,int,int,int,int) -> glNamedFramebufferTextureFaceEXT
    void glNamedFramebufferTextureLayerEXT(int,int,int,int,int) -> glNamedFramebufferTextureLayerEXT
    void glNamedProgramLocalParameter4dEXT(int,int,int,double,double,double,double) -> glNamedProgramLocalParameter4dEXT
    void glNamedProgramLocalParameter4dvEXT(int,int,int,java.nio.DoubleBuffer) -> glNamedProgramLocalParameter4dvEXT
    void glNamedProgramLocalParameter4dvEXT(int,int,int,double[],int) -> glNamedProgramLocalParameter4dvEXT
    void glNamedProgramLocalParameter4fEXT(int,int,int,float,float,float,float) -> glNamedProgramLocalParameter4fEXT
    void glNamedProgramLocalParameter4fvEXT(int,int,int,java.nio.FloatBuffer) -> glNamedProgramLocalParameter4fvEXT
    void glNamedProgramLocalParameter4fvEXT(int,int,int,float[],int) -> glNamedProgramLocalParameter4fvEXT
    void glNamedProgramLocalParameterI4iEXT(int,int,int,int,int,int,int) -> glNamedProgramLocalParameterI4iEXT
    void glNamedProgramLocalParameterI4ivEXT(int,int,int,java.nio.IntBuffer) -> glNamedProgramLocalParameterI4ivEXT
    void glNamedProgramLocalParameterI4ivEXT(int,int,int,int[],int) -> glNamedProgramLocalParameterI4ivEXT
    void glNamedProgramLocalParameterI4uiEXT(int,int,int,int,int,int,int) -> glNamedProgramLocalParameterI4uiEXT
    void glNamedProgramLocalParameterI4uivEXT(int,int,int,java.nio.IntBuffer) -> glNamedProgramLocalParameterI4uivEXT
    void glNamedProgramLocalParameterI4uivEXT(int,int,int,int[],int) -> glNamedProgramLocalParameterI4uivEXT
    void glNamedProgramLocalParameters4fvEXT(int,int,int,int,java.nio.FloatBuffer) -> glNamedProgramLocalParameters4fvEXT
    void glNamedProgramLocalParameters4fvEXT(int,int,int,int,float[],int) -> glNamedProgramLocalParameters4fvEXT
    void glNamedProgramLocalParametersI4ivEXT(int,int,int,int,java.nio.IntBuffer) -> glNamedProgramLocalParametersI4ivEXT
    void glNamedProgramLocalParametersI4ivEXT(int,int,int,int,int[],int) -> glNamedProgramLocalParametersI4ivEXT
    void glNamedProgramLocalParametersI4uivEXT(int,int,int,int,java.nio.IntBuffer) -> glNamedProgramLocalParametersI4uivEXT
    void glNamedProgramLocalParametersI4uivEXT(int,int,int,int,int[],int) -> glNamedProgramLocalParametersI4uivEXT
    void glNamedProgramStringEXT(int,int,int,int,java.nio.Buffer) -> glNamedProgramStringEXT
    void glNamedRenderbufferStorageEXT(int,int,int,int) -> glNamedRenderbufferStorageEXT
    void glNamedRenderbufferStorageMultisampleCoverageEXT(int,int,int,int,int,int) -> glNamedRenderbufferStorageMultisampleCoverageEXT
    void glNamedRenderbufferStorageMultisampleEXT(int,int,int,int,int) -> glNamedRenderbufferStorageMultisampleEXT
    void glNewList(int,int) -> glNewList
    void glNormal3b(byte,byte,byte) -> glNormal3b
    void glNormal3bv(java.nio.ByteBuffer) -> glNormal3bv
    void glNormal3bv(byte[],int) -> glNormal3bv
    void glNormal3d(double,double,double) -> glNormal3d
    void glNormal3dv(java.nio.DoubleBuffer) -> glNormal3dv
    void glNormal3dv(double[],int) -> glNormal3dv
    void glNormal3fv(java.nio.FloatBuffer) -> glNormal3fv
    void glNormal3fv(float[],int) -> glNormal3fv
    void glNormal3h(short,short,short) -> glNormal3h
    void glNormal3hv(java.nio.ShortBuffer) -> glNormal3hv
    void glNormal3hv(short[],int) -> glNormal3hv
    void glNormal3i(int,int,int) -> glNormal3i
    void glNormal3iv(java.nio.IntBuffer) -> glNormal3iv
    void glNormal3iv(int[],int) -> glNormal3iv
    void glNormal3s(short,short,short) -> glNormal3s
    void glNormal3sv(java.nio.ShortBuffer) -> glNormal3sv
    void glNormal3sv(short[],int) -> glNormal3sv
    int glObjectPurgeableAPPLE(int,int,int) -> glObjectPurgeableAPPLE
    int glObjectUnpurgeableAPPLE(int,int,int) -> glObjectUnpurgeableAPPLE
    void glPNTrianglesfATI(int,float) -> glPNTrianglesfATI
    void glPNTrianglesiATI(int,int) -> glPNTrianglesiATI
    void glPassThrough(float) -> glPassThrough
    void glPathColorGenNV(int,int,int,java.nio.FloatBuffer) -> glPathColorGenNV
    void glPathColorGenNV(int,int,int,float[],int) -> glPathColorGenNV
    void glPathCommandsNV(int,int,java.nio.ByteBuffer,int,int,java.nio.Buffer) -> glPathCommandsNV
    void glPathCommandsNV(int,int,byte[],int,int,int,java.nio.Buffer) -> glPathCommandsNV
    void glPathCoordsNV(int,int,int,java.nio.Buffer) -> glPathCoordsNV
    void glPathCoverDepthFuncNV(int) -> glPathCoverDepthFuncNV
    void glPathDashArrayNV(int,int,java.nio.FloatBuffer) -> glPathDashArrayNV
    void glPathDashArrayNV(int,int,float[],int) -> glPathDashArrayNV
    void glPathFogGenNV(int) -> glPathFogGenNV
    void glPathGlyphRangeNV(int,int,java.nio.Buffer,int,int,int,int,int,float) -> glPathGlyphRangeNV
    void glPathGlyphsNV(int,int,java.nio.Buffer,int,int,int,java.nio.Buffer,int,int,float) -> glPathGlyphsNV
    void glPathParameterfNV(int,int,float) -> glPathParameterfNV
    void glPathParameterfvNV(int,int,java.nio.FloatBuffer) -> glPathParameterfvNV
    void glPathParameterfvNV(int,int,float[],int) -> glPathParameterfvNV
    void glPathParameteriNV(int,int,int) -> glPathParameteriNV
    void glPathParameterivNV(int,int,java.nio.IntBuffer) -> glPathParameterivNV
    void glPathParameterivNV(int,int,int[],int) -> glPathParameterivNV
    void glPathStencilDepthOffsetNV(float,float) -> glPathStencilDepthOffsetNV
    void glPathStencilFuncNV(int,int,int) -> glPathStencilFuncNV
    void glPathStringNV(int,int,int,java.nio.Buffer) -> glPathStringNV
    void glPathSubCommandsNV(int,int,int,int,java.nio.ByteBuffer,int,int,java.nio.Buffer) -> glPathSubCommandsNV
    void glPathSubCommandsNV(int,int,int,int,byte[],int,int,int,java.nio.Buffer) -> glPathSubCommandsNV
    void glPathSubCoordsNV(int,int,int,int,java.nio.Buffer) -> glPathSubCoordsNV
    void glPathTexGenNV(int,int,int,java.nio.FloatBuffer) -> glPathTexGenNV
    void glPathTexGenNV(int,int,int,float[],int) -> glPathTexGenNV
    void glPauseTransformFeedbackNV() -> glPauseTransformFeedbackNV
    void glPixelDataRangeNV(int,int,java.nio.Buffer) -> glPixelDataRangeNV
    void glPixelMapfv(int,int,java.nio.FloatBuffer) -> glPixelMapfv
    void glPixelMapfv(int,int,float[],int) -> glPixelMapfv
    void glPixelMapfv(int,int,long) -> glPixelMapfv
    void glPixelMapuiv(int,int,java.nio.IntBuffer) -> glPixelMapuiv
    void glPixelMapuiv(int,int,int[],int) -> glPixelMapuiv
    void glPixelMapuiv(int,int,long) -> glPixelMapuiv
    void glPixelMapusv(int,int,java.nio.ShortBuffer) -> glPixelMapusv
    void glPixelMapusv(int,int,short[],int) -> glPixelMapusv
    void glPixelMapusv(int,int,long) -> glPixelMapusv
    void glPixelTransferf(int,float) -> glPixelTransferf
    void glPixelTransferi(int,int) -> glPixelTransferi
    void glPixelTransformParameterfEXT(int,int,float) -> glPixelTransformParameterfEXT
    void glPixelTransformParameterfvEXT(int,int,java.nio.FloatBuffer) -> glPixelTransformParameterfvEXT
    void glPixelTransformParameterfvEXT(int,int,float[],int) -> glPixelTransformParameterfvEXT
    void glPixelTransformParameteriEXT(int,int,int) -> glPixelTransformParameteriEXT
    void glPixelTransformParameterivEXT(int,int,java.nio.IntBuffer) -> glPixelTransformParameterivEXT
    void glPixelTransformParameterivEXT(int,int,int[],int) -> glPixelTransformParameterivEXT
    void glPixelZoom(float,float) -> glPixelZoom
    boolean glPointAlongPathNV(int,int,int,float,java.nio.FloatBuffer,java.nio.FloatBuffer,java.nio.FloatBuffer,java.nio.FloatBuffer) -> glPointAlongPathNV
    boolean glPointAlongPathNV(int,int,int,float,float[],int,float[],int,float[],int,float[],int) -> glPointAlongPathNV
    void glPolygonStipple(java.nio.ByteBuffer) -> glPolygonStipple
    void glPolygonStipple(byte[],int) -> glPolygonStipple
    void glPolygonStipple(long) -> glPolygonStipple
    void glPopAttrib() -> glPopAttrib
    void glPopClientAttrib() -> glPopClientAttrib
    void glPopName() -> glPopName
    void glPrimitiveRestartIndexNV(int) -> glPrimitiveRestartIndexNV
    void glPrimitiveRestartNV() -> glPrimitiveRestartNV
    void glPrioritizeTextures(int,java.nio.IntBuffer,java.nio.FloatBuffer) -> glPrioritizeTextures
    void glPrioritizeTextures(int,int[],int,float[],int) -> glPrioritizeTextures
    void glProgramBufferParametersIivNV(int,int,int,int,java.nio.IntBuffer) -> glProgramBufferParametersIivNV
    void glProgramBufferParametersIivNV(int,int,int,int,int[],int) -> glProgramBufferParametersIivNV
    void glProgramBufferParametersIuivNV(int,int,int,int,java.nio.IntBuffer) -> glProgramBufferParametersIuivNV
    void glProgramBufferParametersIuivNV(int,int,int,int,int[],int) -> glProgramBufferParametersIuivNV
    void glProgramBufferParametersfvNV(int,int,int,int,java.nio.FloatBuffer) -> glProgramBufferParametersfvNV
    void glProgramBufferParametersfvNV(int,int,int,int,float[],int) -> glProgramBufferParametersfvNV
    void glProgramEnvParameter4dARB(int,int,double,double,double,double) -> glProgramEnvParameter4dARB
    void glProgramEnvParameter4dvARB(int,int,java.nio.DoubleBuffer) -> glProgramEnvParameter4dvARB
    void glProgramEnvParameter4dvARB(int,int,double[],int) -> glProgramEnvParameter4dvARB
    void glProgramEnvParameter4fARB(int,int,float,float,float,float) -> glProgramEnvParameter4fARB
    void glProgramEnvParameter4fvARB(int,int,java.nio.FloatBuffer) -> glProgramEnvParameter4fvARB
    void glProgramEnvParameter4fvARB(int,int,float[],int) -> glProgramEnvParameter4fvARB
    void glProgramEnvParameterI4iNV(int,int,int,int,int,int) -> glProgramEnvParameterI4iNV
    void glProgramEnvParameterI4ivNV(int,int,java.nio.IntBuffer) -> glProgramEnvParameterI4ivNV
    void glProgramEnvParameterI4ivNV(int,int,int[],int) -> glProgramEnvParameterI4ivNV
    void glProgramEnvParameterI4uiNV(int,int,int,int,int,int) -> glProgramEnvParameterI4uiNV
    void glProgramEnvParameterI4uivNV(int,int,java.nio.IntBuffer) -> glProgramEnvParameterI4uivNV
    void glProgramEnvParameterI4uivNV(int,int,int[],int) -> glProgramEnvParameterI4uivNV
    void glProgramEnvParameters4fvEXT(int,int,int,java.nio.FloatBuffer) -> glProgramEnvParameters4fvEXT
    void glProgramEnvParameters4fvEXT(int,int,int,float[],int) -> glProgramEnvParameters4fvEXT
    void glProgramEnvParametersI4ivNV(int,int,int,java.nio.IntBuffer) -> glProgramEnvParametersI4ivNV
    void glProgramEnvParametersI4ivNV(int,int,int,int[],int) -> glProgramEnvParametersI4ivNV
    void glProgramEnvParametersI4uivNV(int,int,int,java.nio.IntBuffer) -> glProgramEnvParametersI4uivNV
    void glProgramEnvParametersI4uivNV(int,int,int,int[],int) -> glProgramEnvParametersI4uivNV
    void glProgramLocalParameter4dARB(int,int,double,double,double,double) -> glProgramLocalParameter4dARB
    void glProgramLocalParameter4dvARB(int,int,java.nio.DoubleBuffer) -> glProgramLocalParameter4dvARB
    void glProgramLocalParameter4dvARB(int,int,double[],int) -> glProgramLocalParameter4dvARB
    void glProgramLocalParameter4fARB(int,int,float,float,float,float) -> glProgramLocalParameter4fARB
    void glProgramLocalParameter4fvARB(int,int,java.nio.FloatBuffer) -> glProgramLocalParameter4fvARB
    void glProgramLocalParameter4fvARB(int,int,float[],int) -> glProgramLocalParameter4fvARB
    void glProgramLocalParameterI4iNV(int,int,int,int,int,int) -> glProgramLocalParameterI4iNV
    void glProgramLocalParameterI4ivNV(int,int,java.nio.IntBuffer) -> glProgramLocalParameterI4ivNV
    void glProgramLocalParameterI4ivNV(int,int,int[],int) -> glProgramLocalParameterI4ivNV
    void glProgramLocalParameterI4uiNV(int,int,int,int,int,int) -> glProgramLocalParameterI4uiNV
    void glProgramLocalParameterI4uivNV(int,int,java.nio.IntBuffer) -> glProgramLocalParameterI4uivNV
    void glProgramLocalParameterI4uivNV(int,int,int[],int) -> glProgramLocalParameterI4uivNV
    void glProgramLocalParameters4fvEXT(int,int,int,java.nio.FloatBuffer) -> glProgramLocalParameters4fvEXT
    void glProgramLocalParameters4fvEXT(int,int,int,float[],int) -> glProgramLocalParameters4fvEXT
    void glProgramLocalParametersI4ivNV(int,int,int,java.nio.IntBuffer) -> glProgramLocalParametersI4ivNV
    void glProgramLocalParametersI4ivNV(int,int,int,int[],int) -> glProgramLocalParametersI4ivNV
    void glProgramLocalParametersI4uivNV(int,int,int,java.nio.IntBuffer) -> glProgramLocalParametersI4uivNV
    void glProgramLocalParametersI4uivNV(int,int,int,int[],int) -> glProgramLocalParametersI4uivNV
    void glProgramStringARB(int,int,int,java.lang.String) -> glProgramStringARB
    void glProgramSubroutineParametersuivNV(int,int,java.nio.IntBuffer) -> glProgramSubroutineParametersuivNV
    void glProgramSubroutineParametersuivNV(int,int,int[],int) -> glProgramSubroutineParametersuivNV
    void glProgramUniform1uiEXT(int,int,int) -> glProgramUniform1uiEXT
    void glProgramUniform1uivEXT(int,int,int,java.nio.IntBuffer) -> glProgramUniform1uivEXT
    void glProgramUniform1uivEXT(int,int,int,int[],int) -> glProgramUniform1uivEXT
    void glProgramUniform2uiEXT(int,int,int,int) -> glProgramUniform2uiEXT
    void glProgramUniform2uivEXT(int,int,int,java.nio.IntBuffer) -> glProgramUniform2uivEXT
    void glProgramUniform2uivEXT(int,int,int,int[],int) -> glProgramUniform2uivEXT
    void glProgramUniform3uiEXT(int,int,int,int,int) -> glProgramUniform3uiEXT
    void glProgramUniform3uivEXT(int,int,int,java.nio.IntBuffer) -> glProgramUniform3uivEXT
    void glProgramUniform3uivEXT(int,int,int,int[],int) -> glProgramUniform3uivEXT
    void glProgramUniform4uiEXT(int,int,int,int,int,int) -> glProgramUniform4uiEXT
    void glProgramUniform4uivEXT(int,int,int,java.nio.IntBuffer) -> glProgramUniform4uivEXT
    void glProgramUniform4uivEXT(int,int,int,int[],int) -> glProgramUniform4uivEXT
    void glProgramUniformHandleui64NV(int,int,long) -> glProgramUniformHandleui64NV
    void glProgramUniformHandleui64vNV(int,int,int,java.nio.LongBuffer) -> glProgramUniformHandleui64vNV
    void glProgramUniformHandleui64vNV(int,int,int,long[],int) -> glProgramUniformHandleui64vNV
    void glProgramUniformMatrix2x3fvEXT(int,int,int,boolean,java.nio.FloatBuffer) -> glProgramUniformMatrix2x3fvEXT
    void glProgramUniformMatrix2x3fvEXT(int,int,int,boolean,float[],int) -> glProgramUniformMatrix2x3fvEXT
    void glProgramUniformMatrix2x4fvEXT(int,int,int,boolean,java.nio.FloatBuffer) -> glProgramUniformMatrix2x4fvEXT
    void glProgramUniformMatrix2x4fvEXT(int,int,int,boolean,float[],int) -> glProgramUniformMatrix2x4fvEXT
    void glProgramUniformMatrix3x2fvEXT(int,int,int,boolean,java.nio.FloatBuffer) -> glProgramUniformMatrix3x2fvEXT
    void glProgramUniformMatrix3x2fvEXT(int,int,int,boolean,float[],int) -> glProgramUniformMatrix3x2fvEXT
    void glProgramUniformMatrix3x4fvEXT(int,int,int,boolean,java.nio.FloatBuffer) -> glProgramUniformMatrix3x4fvEXT
    void glProgramUniformMatrix3x4fvEXT(int,int,int,boolean,float[],int) -> glProgramUniformMatrix3x4fvEXT
    void glProgramUniformMatrix4x2fvEXT(int,int,int,boolean,java.nio.FloatBuffer) -> glProgramUniformMatrix4x2fvEXT
    void glProgramUniformMatrix4x2fvEXT(int,int,int,boolean,float[],int) -> glProgramUniformMatrix4x2fvEXT
    void glProgramUniformMatrix4x3fvEXT(int,int,int,boolean,java.nio.FloatBuffer) -> glProgramUniformMatrix4x3fvEXT
    void glProgramUniformMatrix4x3fvEXT(int,int,int,boolean,float[],int) -> glProgramUniformMatrix4x3fvEXT
    void glProgramVertexLimitNV(int,int) -> glProgramVertexLimitNV
    void glProvokingVertexEXT(int) -> glProvokingVertexEXT
    void glPushAttrib(int) -> glPushAttrib
    void glPushClientAttrib(int) -> glPushClientAttrib
    void glPushClientAttribDefaultEXT(int) -> glPushClientAttribDefaultEXT
    void glPushName(int) -> glPushName
    int glQueryMatrixxOES(java.nio.IntBuffer,java.nio.IntBuffer) -> glQueryMatrixxOES
    int glQueryMatrixxOES(int[],int,int[],int) -> glQueryMatrixxOES
    void glRasterPos2d(double,double) -> glRasterPos2d
    void glRasterPos2dv(java.nio.DoubleBuffer) -> glRasterPos2dv
    void glRasterPos2dv(double[],int) -> glRasterPos2dv
    void glRasterPos2f(float,float) -> glRasterPos2f
    void glRasterPos2fv(java.nio.FloatBuffer) -> glRasterPos2fv
    void glRasterPos2fv(float[],int) -> glRasterPos2fv
    void glRasterPos2i(int,int) -> glRasterPos2i
    void glRasterPos2iv(java.nio.IntBuffer) -> glRasterPos2iv
    void glRasterPos2iv(int[],int) -> glRasterPos2iv
    void glRasterPos2s(short,short) -> glRasterPos2s
    void glRasterPos2sv(java.nio.ShortBuffer) -> glRasterPos2sv
    void glRasterPos2sv(short[],int) -> glRasterPos2sv
    void glRasterPos3d(double,double,double) -> glRasterPos3d
    void glRasterPos3dv(java.nio.DoubleBuffer) -> glRasterPos3dv
    void glRasterPos3dv(double[],int) -> glRasterPos3dv
    void glRasterPos3f(float,float,float) -> glRasterPos3f
    void glRasterPos3fv(java.nio.FloatBuffer) -> glRasterPos3fv
    void glRasterPos3fv(float[],int) -> glRasterPos3fv
    void glRasterPos3i(int,int,int) -> glRasterPos3i
    void glRasterPos3iv(java.nio.IntBuffer) -> glRasterPos3iv
    void glRasterPos3iv(int[],int) -> glRasterPos3iv
    void glRasterPos3s(short,short,short) -> glRasterPos3s
    void glRasterPos3sv(java.nio.ShortBuffer) -> glRasterPos3sv
    void glRasterPos3sv(short[],int) -> glRasterPos3sv
    void glRasterPos4d(double,double,double,double) -> glRasterPos4d
    void glRasterPos4dv(java.nio.DoubleBuffer) -> glRasterPos4dv
    void glRasterPos4dv(double[],int) -> glRasterPos4dv
    void glRasterPos4f(float,float,float,float) -> glRasterPos4f
    void glRasterPos4fv(java.nio.FloatBuffer) -> glRasterPos4fv
    void glRasterPos4fv(float[],int) -> glRasterPos4fv
    void glRasterPos4i(int,int,int,int) -> glRasterPos4i
    void glRasterPos4iv(java.nio.IntBuffer) -> glRasterPos4iv
    void glRasterPos4iv(int[],int) -> glRasterPos4iv
    void glRasterPos4s(short,short,short,short) -> glRasterPos4s
    void glRasterPos4sv(java.nio.ShortBuffer) -> glRasterPos4sv
    void glRasterPos4sv(short[],int) -> glRasterPos4sv
    void glRectd(double,double,double,double) -> glRectd
    void glRectdv(java.nio.DoubleBuffer,java.nio.DoubleBuffer) -> glRectdv
    void glRectdv(double[],int,double[],int) -> glRectdv
    void glRectf(float,float,float,float) -> glRectf
    void glRectfv(java.nio.FloatBuffer,java.nio.FloatBuffer) -> glRectfv
    void glRectfv(float[],int,float[],int) -> glRectfv
    void glRecti(int,int,int,int) -> glRecti
    void glRectiv(java.nio.IntBuffer,java.nio.IntBuffer) -> glRectiv
    void glRectiv(int[],int,int[],int) -> glRectiv
    void glRects(short,short,short,short) -> glRects
    void glRectsv(java.nio.ShortBuffer,java.nio.ShortBuffer) -> glRectsv
    void glRectsv(short[],int,short[],int) -> glRectsv
    int glRenderMode(int) -> glRenderMode
    void glRenderbufferStorageMultisampleCoverageNV(int,int,int,int,int,int) -> glRenderbufferStorageMultisampleCoverageNV
    void glResetHistogram(int) -> glResetHistogram
    void glResetMinmax(int) -> glResetMinmax
    void glResumeTransformFeedbackNV() -> glResumeTransformFeedbackNV
    void glRotated(double,double,double,double) -> glRotated
    void glSampleMaskIndexedNV(int,int) -> glSampleMaskIndexedNV
    void glScaled(double,double,double) -> glScaled
    void glSecondaryColor3b(byte,byte,byte) -> glSecondaryColor3b
    void glSecondaryColor3bv(java.nio.ByteBuffer) -> glSecondaryColor3bv
    void glSecondaryColor3bv(byte[],int) -> glSecondaryColor3bv
    void glSecondaryColor3d(double,double,double) -> glSecondaryColor3d
    void glSecondaryColor3dv(java.nio.DoubleBuffer) -> glSecondaryColor3dv
    void glSecondaryColor3dv(double[],int) -> glSecondaryColor3dv
    void glSecondaryColor3f(float,float,float) -> glSecondaryColor3f
    void glSecondaryColor3fv(java.nio.FloatBuffer) -> glSecondaryColor3fv
    void glSecondaryColor3fv(float[],int) -> glSecondaryColor3fv
    void glSecondaryColor3h(short,short,short) -> glSecondaryColor3h
    void glSecondaryColor3hv(java.nio.ShortBuffer) -> glSecondaryColor3hv
    void glSecondaryColor3hv(short[],int) -> glSecondaryColor3hv
    void glSecondaryColor3i(int,int,int) -> glSecondaryColor3i
    void glSecondaryColor3iv(java.nio.IntBuffer) -> glSecondaryColor3iv
    void glSecondaryColor3iv(int[],int) -> glSecondaryColor3iv
    void glSecondaryColor3s(short,short,short) -> glSecondaryColor3s
    void glSecondaryColor3sv(java.nio.ShortBuffer) -> glSecondaryColor3sv
    void glSecondaryColor3sv(short[],int) -> glSecondaryColor3sv
    void glSecondaryColor3ub(byte,byte,byte) -> glSecondaryColor3ub
    void glSecondaryColor3ubv(java.nio.ByteBuffer) -> glSecondaryColor3ubv
    void glSecondaryColor3ubv(byte[],int) -> glSecondaryColor3ubv
    void glSecondaryColor3ui(int,int,int) -> glSecondaryColor3ui
    void glSecondaryColor3uiv(java.nio.IntBuffer) -> glSecondaryColor3uiv
    void glSecondaryColor3uiv(int[],int) -> glSecondaryColor3uiv
    void glSecondaryColor3us(short,short,short) -> glSecondaryColor3us
    void glSecondaryColor3usv(java.nio.ShortBuffer) -> glSecondaryColor3usv
    void glSecondaryColor3usv(short[],int) -> glSecondaryColor3usv
    void glSecondaryColorPointer(int,int,int,java.nio.Buffer) -> glSecondaryColorPointer
    void glSecondaryColorPointer(int,int,int,long) -> glSecondaryColorPointer
    void glSelectBuffer(int,java.nio.IntBuffer) -> glSelectBuffer
    void glSelectPerfMonitorCountersAMD(int,boolean,int,int,java.nio.IntBuffer) -> glSelectPerfMonitorCountersAMD
    void glSelectPerfMonitorCountersAMD(int,boolean,int,int,int[],int) -> glSelectPerfMonitorCountersAMD
    void glSeparableFilter2D(int,int,int,int,int,int,java.nio.Buffer,java.nio.Buffer) -> glSeparableFilter2D
    void glSeparableFilter2D(int,int,int,int,int,int,long,long) -> glSeparableFilter2D
    void glSetFenceAPPLE(int) -> glSetFenceAPPLE
    void glSetFenceNV(int,int) -> glSetFenceNV
    void glSetInvariantEXT(int,int,java.nio.Buffer) -> glSetInvariantEXT
    void glSetLocalConstantEXT(int,int,java.nio.Buffer) -> glSetLocalConstantEXT
    void glShaderOp1EXT(int,int,int) -> glShaderOp1EXT
    void glShaderOp2EXT(int,int,int,int) -> glShaderOp2EXT
    void glShaderOp3EXT(int,int,int,int,int) -> glShaderOp3EXT
    void glShaderSourceARB(int,int,java.lang.String[],java.nio.IntBuffer) -> glShaderSourceARB
    void glShaderSourceARB(int,int,java.lang.String[],int[],int) -> glShaderSourceARB
    void glStencilClearTagEXT(int,int) -> glStencilClearTagEXT
    void glStencilFillPathInstancedNV(int,int,java.nio.Buffer,int,int,int,int,java.nio.FloatBuffer) -> glStencilFillPathInstancedNV
    void glStencilFillPathInstancedNV(int,int,java.nio.Buffer,int,int,int,int,float[],int) -> glStencilFillPathInstancedNV
    void glStencilFillPathNV(int,int,int) -> glStencilFillPathNV
    void glStencilStrokePathInstancedNV(int,int,java.nio.Buffer,int,int,int,int,java.nio.FloatBuffer) -> glStencilStrokePathInstancedNV
    void glStencilStrokePathInstancedNV(int,int,java.nio.Buffer,int,int,int,int,float[],int) -> glStencilStrokePathInstancedNV
    void glStencilStrokePathNV(int,int,int) -> glStencilStrokePathNV
    void glStringMarkerGREMEDY(int,java.nio.Buffer) -> glStringMarkerGREMEDY
    void glSwizzleEXT(int,int,int,int,int,int) -> glSwizzleEXT
    void glSyncTextureINTEL(int) -> glSyncTextureINTEL
    boolean glTestFenceAPPLE(int) -> glTestFenceAPPLE
    boolean glTestFenceNV(int) -> glTestFenceNV
    boolean glTestObjectAPPLE(int,int) -> glTestObjectAPPLE
    void glTexCoord1bOES(byte) -> glTexCoord1bOES
    void glTexCoord1bvOES(java.nio.ByteBuffer) -> glTexCoord1bvOES
    void glTexCoord1bvOES(byte[],int) -> glTexCoord1bvOES
    void glTexCoord1d(double) -> glTexCoord1d
    void glTexCoord1dv(java.nio.DoubleBuffer) -> glTexCoord1dv
    void glTexCoord1dv(double[],int) -> glTexCoord1dv
    void glTexCoord1f(float) -> glTexCoord1f
    void glTexCoord1fv(java.nio.FloatBuffer) -> glTexCoord1fv
    void glTexCoord1fv(float[],int) -> glTexCoord1fv
    void glTexCoord1h(short) -> glTexCoord1h
    void glTexCoord1hv(java.nio.ShortBuffer) -> glTexCoord1hv
    void glTexCoord1hv(short[],int) -> glTexCoord1hv
    void glTexCoord1i(int) -> glTexCoord1i
    void glTexCoord1iv(java.nio.IntBuffer) -> glTexCoord1iv
    void glTexCoord1iv(int[],int) -> glTexCoord1iv
    void glTexCoord1s(short) -> glTexCoord1s
    void glTexCoord1sv(java.nio.ShortBuffer) -> glTexCoord1sv
    void glTexCoord1sv(short[],int) -> glTexCoord1sv
    void glTexCoord2bOES(byte,byte) -> glTexCoord2bOES
    void glTexCoord2bvOES(java.nio.ByteBuffer) -> glTexCoord2bvOES
    void glTexCoord2bvOES(byte[],int) -> glTexCoord2bvOES
    void glTexCoord2d(double,double) -> glTexCoord2d
    void glTexCoord2dv(java.nio.DoubleBuffer) -> glTexCoord2dv
    void glTexCoord2dv(double[],int) -> glTexCoord2dv
    void glTexCoord2f(float,float) -> glTexCoord2f
    void glTexCoord2fv(java.nio.FloatBuffer) -> glTexCoord2fv
    void glTexCoord2fv(float[],int) -> glTexCoord2fv
    void glTexCoord2h(short,short) -> glTexCoord2h
    void glTexCoord2hv(java.nio.ShortBuffer) -> glTexCoord2hv
    void glTexCoord2hv(short[],int) -> glTexCoord2hv
    void glTexCoord2i(int,int) -> glTexCoord2i
    void glTexCoord2iv(java.nio.IntBuffer) -> glTexCoord2iv
    void glTexCoord2iv(int[],int) -> glTexCoord2iv
    void glTexCoord2s(short,short) -> glTexCoord2s
    void glTexCoord2sv(java.nio.ShortBuffer) -> glTexCoord2sv
    void glTexCoord2sv(short[],int) -> glTexCoord2sv
    void glTexCoord3bOES(byte,byte,byte) -> glTexCoord3bOES
    void glTexCoord3bvOES(java.nio.ByteBuffer) -> glTexCoord3bvOES
    void glTexCoord3bvOES(byte[],int) -> glTexCoord3bvOES
    void glTexCoord3d(double,double,double) -> glTexCoord3d
    void glTexCoord3dv(java.nio.DoubleBuffer) -> glTexCoord3dv
    void glTexCoord3dv(double[],int) -> glTexCoord3dv
    void glTexCoord3f(float,float,float) -> glTexCoord3f
    void glTexCoord3fv(java.nio.FloatBuffer) -> glTexCoord3fv
    void glTexCoord3fv(float[],int) -> glTexCoord3fv
    void glTexCoord3h(short,short,short) -> glTexCoord3h
    void glTexCoord3hv(java.nio.ShortBuffer) -> glTexCoord3hv
    void glTexCoord3hv(short[],int) -> glTexCoord3hv
    void glTexCoord3i(int,int,int) -> glTexCoord3i
    void glTexCoord3iv(java.nio.IntBuffer) -> glTexCoord3iv
    void glTexCoord3iv(int[],int) -> glTexCoord3iv
    void glTexCoord3s(short,short,short) -> glTexCoord3s
    void glTexCoord3sv(java.nio.ShortBuffer) -> glTexCoord3sv
    void glTexCoord3sv(short[],int) -> glTexCoord3sv
    void glTexCoord4bOES(byte,byte,byte,byte) -> glTexCoord4bOES
    void glTexCoord4bvOES(java.nio.ByteBuffer) -> glTexCoord4bvOES
    void glTexCoord4bvOES(byte[],int) -> glTexCoord4bvOES
    void glTexCoord4d(double,double,double,double) -> glTexCoord4d
    void glTexCoord4dv(java.nio.DoubleBuffer) -> glTexCoord4dv
    void glTexCoord4dv(double[],int) -> glTexCoord4dv
    void glTexCoord4f(float,float,float,float) -> glTexCoord4f
    void glTexCoord4fv(java.nio.FloatBuffer) -> glTexCoord4fv
    void glTexCoord4fv(float[],int) -> glTexCoord4fv
    void glTexCoord4h(short,short,short,short) -> glTexCoord4h
    void glTexCoord4hv(java.nio.ShortBuffer) -> glTexCoord4hv
    void glTexCoord4hv(short[],int) -> glTexCoord4hv
    void glTexCoord4i(int,int,int,int) -> glTexCoord4i
    void glTexCoord4iv(java.nio.IntBuffer) -> glTexCoord4iv
    void glTexCoord4iv(int[],int) -> glTexCoord4iv
    void glTexCoord4s(short,short,short,short) -> glTexCoord4s
    void glTexCoord4sv(java.nio.ShortBuffer) -> glTexCoord4sv
    void glTexCoord4sv(short[],int) -> glTexCoord4sv
    void glTexGend(int,int,double) -> glTexGend
    void glTexGendv(int,int,java.nio.DoubleBuffer) -> glTexGendv
    void glTexGendv(int,int,double[],int) -> glTexGendv
    void glTexRenderbufferNV(int,int) -> glTexRenderbufferNV
    void glTexStorageSparseAMD(int,int,int,int,int,int,int) -> glTexStorageSparseAMD
    void glTextureBarrierNV() -> glTextureBarrierNV
    void glTextureBufferEXT(int,int,int,int) -> glTextureBufferEXT
    void glTextureImage1DEXT(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTextureImage1DEXT
    void glTextureImage2DEXT(int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTextureImage2DEXT
    void glTextureImage3DEXT(int,int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTextureImage3DEXT
    void glTextureLightEXT(int) -> glTextureLightEXT
    void glTextureMaterialEXT(int,int) -> glTextureMaterialEXT
    void glTextureNormalEXT(int) -> glTextureNormalEXT
    void glTextureParameterIivEXT(int,int,int,java.nio.IntBuffer) -> glTextureParameterIivEXT
    void glTextureParameterIivEXT(int,int,int,int[],int) -> glTextureParameterIivEXT
    void glTextureParameterIuivEXT(int,int,int,java.nio.IntBuffer) -> glTextureParameterIuivEXT
    void glTextureParameterIuivEXT(int,int,int,int[],int) -> glTextureParameterIuivEXT
    void glTextureParameterfEXT(int,int,int,float) -> glTextureParameterfEXT
    void glTextureParameterfvEXT(int,int,int,java.nio.FloatBuffer) -> glTextureParameterfvEXT
    void glTextureParameterfvEXT(int,int,int,float[],int) -> glTextureParameterfvEXT
    void glTextureParameteriEXT(int,int,int,int) -> glTextureParameteriEXT
    void glTextureParameterivEXT(int,int,int,java.nio.IntBuffer) -> glTextureParameterivEXT
    void glTextureParameterivEXT(int,int,int,int[],int) -> glTextureParameterivEXT
    void glTextureRangeAPPLE(int,int,java.nio.Buffer) -> glTextureRangeAPPLE
    void glTextureRenderbufferEXT(int,int,int) -> glTextureRenderbufferEXT
    void glTextureStorageSparseAMD(int,int,int,int,int,int,int,int) -> glTextureStorageSparseAMD
    void glTextureSubImage1DEXT(int,int,int,int,int,int,int,java.nio.Buffer) -> glTextureSubImage1DEXT
    void glTextureSubImage2DEXT(int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTextureSubImage2DEXT
    void glTextureSubImage3DEXT(int,int,int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTextureSubImage3DEXT
    void glTransformPathNV(int,int,int,java.nio.FloatBuffer) -> glTransformPathNV
    void glTransformPathNV(int,int,int,float[],int) -> glTransformPathNV
    void glTranslated(double,double,double) -> glTranslated
    void glUniform1fARB(int,float) -> glUniform1fARB
    void glUniform1fvARB(int,int,java.nio.FloatBuffer) -> glUniform1fvARB
    void glUniform1fvARB(int,int,float[],int) -> glUniform1fvARB
    void glUniform1iARB(int,int) -> glUniform1iARB
    void glUniform1ivARB(int,int,java.nio.IntBuffer) -> glUniform1ivARB
    void glUniform1ivARB(int,int,int[],int) -> glUniform1ivARB
    void glUniform2fARB(int,float,float) -> glUniform2fARB
    void glUniform2fvARB(int,int,java.nio.FloatBuffer) -> glUniform2fvARB
    void glUniform2fvARB(int,int,float[],int) -> glUniform2fvARB
    void glUniform2iARB(int,int,int) -> glUniform2iARB
    void glUniform2ivARB(int,int,java.nio.IntBuffer) -> glUniform2ivARB
    void glUniform2ivARB(int,int,int[],int) -> glUniform2ivARB
    void glUniform3fARB(int,float,float,float) -> glUniform3fARB
    void glUniform3fvARB(int,int,java.nio.FloatBuffer) -> glUniform3fvARB
    void glUniform3fvARB(int,int,float[],int) -> glUniform3fvARB
    void glUniform3iARB(int,int,int,int) -> glUniform3iARB
    void glUniform3ivARB(int,int,java.nio.IntBuffer) -> glUniform3ivARB
    void glUniform3ivARB(int,int,int[],int) -> glUniform3ivARB
    void glUniform4fARB(int,float,float,float,float) -> glUniform4fARB
    void glUniform4fvARB(int,int,java.nio.FloatBuffer) -> glUniform4fvARB
    void glUniform4fvARB(int,int,float[],int) -> glUniform4fvARB
    void glUniform4iARB(int,int,int,int,int) -> glUniform4iARB
    void glUniform4ivARB(int,int,java.nio.IntBuffer) -> glUniform4ivARB
    void glUniform4ivARB(int,int,int[],int) -> glUniform4ivARB
    void glUniformBufferEXT(int,int,int) -> glUniformBufferEXT
    void glUniformHandleui64NV(int,long) -> glUniformHandleui64NV
    void glUniformHandleui64vNV(int,int,java.nio.LongBuffer) -> glUniformHandleui64vNV
    void glUniformHandleui64vNV(int,int,long[],int) -> glUniformHandleui64vNV
    void glUniformMatrix2fvARB(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix2fvARB
    void glUniformMatrix2fvARB(int,int,boolean,float[],int) -> glUniformMatrix2fvARB
    void glUniformMatrix3fvARB(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix3fvARB
    void glUniformMatrix3fvARB(int,int,boolean,float[],int) -> glUniformMatrix3fvARB
    void glUniformMatrix4fvARB(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix4fvARB
    void glUniformMatrix4fvARB(int,int,boolean,float[],int) -> glUniformMatrix4fvARB
    void glUnlockArraysEXT() -> glUnlockArraysEXT
    boolean glUnmapNamedBufferEXT(int) -> glUnmapNamedBufferEXT
    void glUnmapTexture2DINTEL(int,int) -> glUnmapTexture2DINTEL
    void glUseProgramObjectARB(int) -> glUseProgramObjectARB
    void glVDPAUFiniNV() -> glVDPAUFiniNV
    void glVDPAUGetSurfaceivNV(long,int,int,java.nio.IntBuffer,java.nio.IntBuffer) -> glVDPAUGetSurfaceivNV
    void glVDPAUGetSurfaceivNV(long,int,int,int[],int,int[],int) -> glVDPAUGetSurfaceivNV
    void glVDPAUInitNV(java.nio.Buffer,java.nio.Buffer) -> glVDPAUInitNV
    void glVDPAUIsSurfaceNV(long) -> glVDPAUIsSurfaceNV
    void glVDPAUMapSurfacesNV(int,com.jogamp.common.nio.PointerBuffer) -> glVDPAUMapSurfacesNV
    long glVDPAURegisterOutputSurfaceNV(java.nio.Buffer,int,int,java.nio.IntBuffer) -> glVDPAURegisterOutputSurfaceNV
    long glVDPAURegisterOutputSurfaceNV(java.nio.Buffer,int,int,int[],int) -> glVDPAURegisterOutputSurfaceNV
    long glVDPAURegisterVideoSurfaceNV(java.nio.Buffer,int,int,java.nio.IntBuffer) -> glVDPAURegisterVideoSurfaceNV
    long glVDPAURegisterVideoSurfaceNV(java.nio.Buffer,int,int,int[],int) -> glVDPAURegisterVideoSurfaceNV
    void glVDPAUSurfaceAccessNV(long,int) -> glVDPAUSurfaceAccessNV
    void glVDPAUUnmapSurfacesNV(int,com.jogamp.common.nio.PointerBuffer) -> glVDPAUUnmapSurfacesNV
    void glVDPAUUnregisterSurfaceNV(long) -> glVDPAUUnregisterSurfaceNV
    void glValidateProgramARB(int) -> glValidateProgramARB
    void glVariantPointerEXT(int,int,int,java.nio.Buffer) -> glVariantPointerEXT
    void glVariantPointerEXT(int,int,int,long) -> glVariantPointerEXT
    void glVariantbvEXT(int,java.nio.ByteBuffer) -> glVariantbvEXT
    void glVariantbvEXT(int,byte[],int) -> glVariantbvEXT
    void glVariantdvEXT(int,java.nio.DoubleBuffer) -> glVariantdvEXT
    void glVariantdvEXT(int,double[],int) -> glVariantdvEXT
    void glVariantfvEXT(int,java.nio.FloatBuffer) -> glVariantfvEXT
    void glVariantfvEXT(int,float[],int) -> glVariantfvEXT
    void glVariantivEXT(int,java.nio.IntBuffer) -> glVariantivEXT
    void glVariantivEXT(int,int[],int) -> glVariantivEXT
    void glVariantsvEXT(int,java.nio.ShortBuffer) -> glVariantsvEXT
    void glVariantsvEXT(int,short[],int) -> glVariantsvEXT
    void glVariantubvEXT(int,java.nio.ByteBuffer) -> glVariantubvEXT
    void glVariantubvEXT(int,byte[],int) -> glVariantubvEXT
    void glVariantuivEXT(int,java.nio.IntBuffer) -> glVariantuivEXT
    void glVariantuivEXT(int,int[],int) -> glVariantuivEXT
    void glVariantusvEXT(int,java.nio.ShortBuffer) -> glVariantusvEXT
    void glVariantusvEXT(int,short[],int) -> glVariantusvEXT
    void glVertex2bOES(byte) -> glVertex2bOES
    void glVertex2bvOES(java.nio.ByteBuffer) -> glVertex2bvOES
    void glVertex2bvOES(byte[],int) -> glVertex2bvOES
    void glVertex2d(double,double) -> glVertex2d
    void glVertex2dv(java.nio.DoubleBuffer) -> glVertex2dv
    void glVertex2dv(double[],int) -> glVertex2dv
    void glVertex2f(float,float) -> glVertex2f
    void glVertex2fv(java.nio.FloatBuffer) -> glVertex2fv
    void glVertex2fv(float[],int) -> glVertex2fv
    void glVertex2h(short,short) -> glVertex2h
    void glVertex2hv(java.nio.ShortBuffer) -> glVertex2hv
    void glVertex2hv(short[],int) -> glVertex2hv
    void glVertex2i(int,int) -> glVertex2i
    void glVertex2iv(java.nio.IntBuffer) -> glVertex2iv
    void glVertex2iv(int[],int) -> glVertex2iv
    void glVertex2s(short,short) -> glVertex2s
    void glVertex2sv(java.nio.ShortBuffer) -> glVertex2sv
    void glVertex2sv(short[],int) -> glVertex2sv
    void glVertex3bOES(byte,byte) -> glVertex3bOES
    void glVertex3bvOES(java.nio.ByteBuffer) -> glVertex3bvOES
    void glVertex3bvOES(byte[],int) -> glVertex3bvOES
    void glVertex3d(double,double,double) -> glVertex3d
    void glVertex3dv(java.nio.DoubleBuffer) -> glVertex3dv
    void glVertex3dv(double[],int) -> glVertex3dv
    void glVertex3f(float,float,float) -> glVertex3f
    void glVertex3fv(java.nio.FloatBuffer) -> glVertex3fv
    void glVertex3fv(float[],int) -> glVertex3fv
    void glVertex3h(short,short,short) -> glVertex3h
    void glVertex3hv(java.nio.ShortBuffer) -> glVertex3hv
    void glVertex3hv(short[],int) -> glVertex3hv
    void glVertex3i(int,int,int) -> glVertex3i
    void glVertex3iv(java.nio.IntBuffer) -> glVertex3iv
    void glVertex3iv(int[],int) -> glVertex3iv
    void glVertex3s(short,short,short) -> glVertex3s
    void glVertex3sv(java.nio.ShortBuffer) -> glVertex3sv
    void glVertex3sv(short[],int) -> glVertex3sv
    void glVertex4bOES(byte,byte,byte) -> glVertex4bOES
    void glVertex4bvOES(java.nio.ByteBuffer) -> glVertex4bvOES
    void glVertex4bvOES(byte[],int) -> glVertex4bvOES
    void glVertex4d(double,double,double,double) -> glVertex4d
    void glVertex4dv(java.nio.DoubleBuffer) -> glVertex4dv
    void glVertex4dv(double[],int) -> glVertex4dv
    void glVertex4f(float,float,float,float) -> glVertex4f
    void glVertex4fv(java.nio.FloatBuffer) -> glVertex4fv
    void glVertex4fv(float[],int) -> glVertex4fv
    void glVertex4h(short,short,short,short) -> glVertex4h
    void glVertex4hv(java.nio.ShortBuffer) -> glVertex4hv
    void glVertex4hv(short[],int) -> glVertex4hv
    void glVertex4i(int,int,int,int) -> glVertex4i
    void glVertex4iv(java.nio.IntBuffer) -> glVertex4iv
    void glVertex4iv(int[],int) -> glVertex4iv
    void glVertex4s(short,short,short,short) -> glVertex4s
    void glVertex4sv(java.nio.ShortBuffer) -> glVertex4sv
    void glVertex4sv(short[],int) -> glVertex4sv
    void glVertexArrayColorOffsetEXT(int,int,int,int,int,long) -> glVertexArrayColorOffsetEXT
    void glVertexArrayEdgeFlagOffsetEXT(int,int,int,long) -> glVertexArrayEdgeFlagOffsetEXT
    void glVertexArrayFogCoordOffsetEXT(int,int,int,int,long) -> glVertexArrayFogCoordOffsetEXT
    void glVertexArrayIndexOffsetEXT(int,int,int,int,long) -> glVertexArrayIndexOffsetEXT
    void glVertexArrayMultiTexCoordOffsetEXT(int,int,int,int,int,int,long) -> glVertexArrayMultiTexCoordOffsetEXT
    void glVertexArrayNormalOffsetEXT(int,int,int,int,long) -> glVertexArrayNormalOffsetEXT
    void glVertexArrayParameteriAPPLE(int,int) -> glVertexArrayParameteriAPPLE
    void glVertexArrayRangeAPPLE(int,java.nio.Buffer) -> glVertexArrayRangeAPPLE
    void glVertexArrayRangeNV(int,java.nio.Buffer) -> glVertexArrayRangeNV
    void glVertexArraySecondaryColorOffsetEXT(int,int,int,int,int,long) -> glVertexArraySecondaryColorOffsetEXT
    void glVertexArrayTexCoordOffsetEXT(int,int,int,int,int,long) -> glVertexArrayTexCoordOffsetEXT
    void glVertexArrayVertexAttribIOffsetEXT(int,int,int,int,int,int,long) -> glVertexArrayVertexAttribIOffsetEXT
    void glVertexArrayVertexAttribOffsetEXT(int,int,int,int,int,boolean,int,long) -> glVertexArrayVertexAttribOffsetEXT
    void glVertexArrayVertexOffsetEXT(int,int,int,int,int,long) -> glVertexArrayVertexOffsetEXT
    void glVertexAttrib1dARB(int,double) -> glVertexAttrib1dARB
    void glVertexAttrib1dvARB(int,java.nio.DoubleBuffer) -> glVertexAttrib1dvARB
    void glVertexAttrib1dvARB(int,double[],int) -> glVertexAttrib1dvARB
    void glVertexAttrib1fARB(int,float) -> glVertexAttrib1fARB
    void glVertexAttrib1fvARB(int,java.nio.FloatBuffer) -> glVertexAttrib1fvARB
    void glVertexAttrib1fvARB(int,float[],int) -> glVertexAttrib1fvARB
    void glVertexAttrib1h(int,short) -> glVertexAttrib1h
    void glVertexAttrib1hv(int,java.nio.ShortBuffer) -> glVertexAttrib1hv
    void glVertexAttrib1hv(int,short[],int) -> glVertexAttrib1hv
    void glVertexAttrib1sARB(int,short) -> glVertexAttrib1sARB
    void glVertexAttrib1svARB(int,java.nio.ShortBuffer) -> glVertexAttrib1svARB
    void glVertexAttrib1svARB(int,short[],int) -> glVertexAttrib1svARB
    void glVertexAttrib2dARB(int,double,double) -> glVertexAttrib2dARB
    void glVertexAttrib2dvARB(int,java.nio.DoubleBuffer) -> glVertexAttrib2dvARB
    void glVertexAttrib2dvARB(int,double[],int) -> glVertexAttrib2dvARB
    void glVertexAttrib2fARB(int,float,float) -> glVertexAttrib2fARB
    void glVertexAttrib2fvARB(int,java.nio.FloatBuffer) -> glVertexAttrib2fvARB
    void glVertexAttrib2fvARB(int,float[],int) -> glVertexAttrib2fvARB
    void glVertexAttrib2h(int,short,short) -> glVertexAttrib2h
    void glVertexAttrib2hv(int,java.nio.ShortBuffer) -> glVertexAttrib2hv
    void glVertexAttrib2hv(int,short[],int) -> glVertexAttrib2hv
    void glVertexAttrib2sARB(int,short,short) -> glVertexAttrib2sARB
    void glVertexAttrib2svARB(int,java.nio.ShortBuffer) -> glVertexAttrib2svARB
    void glVertexAttrib2svARB(int,short[],int) -> glVertexAttrib2svARB
    void glVertexAttrib3dARB(int,double,double,double) -> glVertexAttrib3dARB
    void glVertexAttrib3dvARB(int,java.nio.DoubleBuffer) -> glVertexAttrib3dvARB
    void glVertexAttrib3dvARB(int,double[],int) -> glVertexAttrib3dvARB
    void glVertexAttrib3fARB(int,float,float,float) -> glVertexAttrib3fARB
    void glVertexAttrib3fvARB(int,java.nio.FloatBuffer) -> glVertexAttrib3fvARB
    void glVertexAttrib3fvARB(int,float[],int) -> glVertexAttrib3fvARB
    void glVertexAttrib3h(int,short,short,short) -> glVertexAttrib3h
    void glVertexAttrib3hv(int,java.nio.ShortBuffer) -> glVertexAttrib3hv
    void glVertexAttrib3hv(int,short[],int) -> glVertexAttrib3hv
    void glVertexAttrib3sARB(int,short,short,short) -> glVertexAttrib3sARB
    void glVertexAttrib3svARB(int,java.nio.ShortBuffer) -> glVertexAttrib3svARB
    void glVertexAttrib3svARB(int,short[],int) -> glVertexAttrib3svARB
    void glVertexAttrib4NbvARB(int,java.nio.ByteBuffer) -> glVertexAttrib4NbvARB
    void glVertexAttrib4NbvARB(int,byte[],int) -> glVertexAttrib4NbvARB
    void glVertexAttrib4NivARB(int,java.nio.IntBuffer) -> glVertexAttrib4NivARB
    void glVertexAttrib4NivARB(int,int[],int) -> glVertexAttrib4NivARB
    void glVertexAttrib4NsvARB(int,java.nio.ShortBuffer) -> glVertexAttrib4NsvARB
    void glVertexAttrib4NsvARB(int,short[],int) -> glVertexAttrib4NsvARB
    void glVertexAttrib4NubARB(int,byte,byte,byte,byte) -> glVertexAttrib4NubARB
    void glVertexAttrib4NubvARB(int,java.nio.ByteBuffer) -> glVertexAttrib4NubvARB
    void glVertexAttrib4NubvARB(int,byte[],int) -> glVertexAttrib4NubvARB
    void glVertexAttrib4NuivARB(int,java.nio.IntBuffer) -> glVertexAttrib4NuivARB
    void glVertexAttrib4NuivARB(int,int[],int) -> glVertexAttrib4NuivARB
    void glVertexAttrib4NusvARB(int,java.nio.ShortBuffer) -> glVertexAttrib4NusvARB
    void glVertexAttrib4NusvARB(int,short[],int) -> glVertexAttrib4NusvARB
    void glVertexAttrib4bvARB(int,java.nio.ByteBuffer) -> glVertexAttrib4bvARB
    void glVertexAttrib4bvARB(int,byte[],int) -> glVertexAttrib4bvARB
    void glVertexAttrib4dARB(int,double,double,double,double) -> glVertexAttrib4dARB
    void glVertexAttrib4dvARB(int,java.nio.DoubleBuffer) -> glVertexAttrib4dvARB
    void glVertexAttrib4dvARB(int,double[],int) -> glVertexAttrib4dvARB
    void glVertexAttrib4fARB(int,float,float,float,float) -> glVertexAttrib4fARB
    void glVertexAttrib4fvARB(int,java.nio.FloatBuffer) -> glVertexAttrib4fvARB
    void glVertexAttrib4fvARB(int,float[],int) -> glVertexAttrib4fvARB
    void glVertexAttrib4h(int,short,short,short,short) -> glVertexAttrib4h
    void glVertexAttrib4hv(int,java.nio.ShortBuffer) -> glVertexAttrib4hv
    void glVertexAttrib4hv(int,short[],int) -> glVertexAttrib4hv
    void glVertexAttrib4ivARB(int,java.nio.IntBuffer) -> glVertexAttrib4ivARB
    void glVertexAttrib4ivARB(int,int[],int) -> glVertexAttrib4ivARB
    void glVertexAttrib4sARB(int,short,short,short,short) -> glVertexAttrib4sARB
    void glVertexAttrib4svARB(int,java.nio.ShortBuffer) -> glVertexAttrib4svARB
    void glVertexAttrib4svARB(int,short[],int) -> glVertexAttrib4svARB
    void glVertexAttrib4ubvARB(int,java.nio.ByteBuffer) -> glVertexAttrib4ubvARB
    void glVertexAttrib4ubvARB(int,byte[],int) -> glVertexAttrib4ubvARB
    void glVertexAttrib4uivARB(int,java.nio.IntBuffer) -> glVertexAttrib4uivARB
    void glVertexAttrib4uivARB(int,int[],int) -> glVertexAttrib4uivARB
    void glVertexAttrib4usvARB(int,java.nio.ShortBuffer) -> glVertexAttrib4usvARB
    void glVertexAttrib4usvARB(int,short[],int) -> glVertexAttrib4usvARB
    void glVertexAttribI1iEXT(int,int) -> glVertexAttribI1iEXT
    void glVertexAttribI1ivEXT(int,java.nio.IntBuffer) -> glVertexAttribI1ivEXT
    void glVertexAttribI1ivEXT(int,int[],int) -> glVertexAttribI1ivEXT
    void glVertexAttribI1uiEXT(int,int) -> glVertexAttribI1uiEXT
    void glVertexAttribI1uivEXT(int,java.nio.IntBuffer) -> glVertexAttribI1uivEXT
    void glVertexAttribI1uivEXT(int,int[],int) -> glVertexAttribI1uivEXT
    void glVertexAttribI2iEXT(int,int,int) -> glVertexAttribI2iEXT
    void glVertexAttribI2ivEXT(int,java.nio.IntBuffer) -> glVertexAttribI2ivEXT
    void glVertexAttribI2ivEXT(int,int[],int) -> glVertexAttribI2ivEXT
    void glVertexAttribI2uiEXT(int,int,int) -> glVertexAttribI2uiEXT
    void glVertexAttribI2uivEXT(int,java.nio.IntBuffer) -> glVertexAttribI2uivEXT
    void glVertexAttribI2uivEXT(int,int[],int) -> glVertexAttribI2uivEXT
    void glVertexAttribI3iEXT(int,int,int,int) -> glVertexAttribI3iEXT
    void glVertexAttribI3ivEXT(int,java.nio.IntBuffer) -> glVertexAttribI3ivEXT
    void glVertexAttribI3ivEXT(int,int[],int) -> glVertexAttribI3ivEXT
    void glVertexAttribI3uiEXT(int,int,int,int) -> glVertexAttribI3uiEXT
    void glVertexAttribI3uivEXT(int,java.nio.IntBuffer) -> glVertexAttribI3uivEXT
    void glVertexAttribI3uivEXT(int,int[],int) -> glVertexAttribI3uivEXT
    void glVertexAttribI4bvEXT(int,java.nio.ByteBuffer) -> glVertexAttribI4bvEXT
    void glVertexAttribI4bvEXT(int,byte[],int) -> glVertexAttribI4bvEXT
    void glVertexAttribI4iEXT(int,int,int,int,int) -> glVertexAttribI4iEXT
    void glVertexAttribI4ivEXT(int,java.nio.IntBuffer) -> glVertexAttribI4ivEXT
    void glVertexAttribI4ivEXT(int,int[],int) -> glVertexAttribI4ivEXT
    void glVertexAttribI4svEXT(int,java.nio.ShortBuffer) -> glVertexAttribI4svEXT
    void glVertexAttribI4svEXT(int,short[],int) -> glVertexAttribI4svEXT
    void glVertexAttribI4ubvEXT(int,java.nio.ByteBuffer) -> glVertexAttribI4ubvEXT
    void glVertexAttribI4ubvEXT(int,byte[],int) -> glVertexAttribI4ubvEXT
    void glVertexAttribI4uiEXT(int,int,int,int,int) -> glVertexAttribI4uiEXT
    void glVertexAttribI4uivEXT(int,java.nio.IntBuffer) -> glVertexAttribI4uivEXT
    void glVertexAttribI4uivEXT(int,int[],int) -> glVertexAttribI4uivEXT
    void glVertexAttribI4usvEXT(int,java.nio.ShortBuffer) -> glVertexAttribI4usvEXT
    void glVertexAttribI4usvEXT(int,short[],int) -> glVertexAttribI4usvEXT
    void glVertexAttribIPointerEXT(int,int,int,int,java.nio.Buffer) -> glVertexAttribIPointerEXT
    void glVertexAttribL1i64NV(int,long) -> glVertexAttribL1i64NV
    void glVertexAttribL1i64vNV(int,java.nio.LongBuffer) -> glVertexAttribL1i64vNV
    void glVertexAttribL1i64vNV(int,long[],int) -> glVertexAttribL1i64vNV
    void glVertexAttribL1ui64NV(int,long) -> glVertexAttribL1ui64NV
    void glVertexAttribL1ui64vNV(int,java.nio.LongBuffer) -> glVertexAttribL1ui64vNV
    void glVertexAttribL1ui64vNV(int,long[],int) -> glVertexAttribL1ui64vNV
    void glVertexAttribL2i64NV(int,long,long) -> glVertexAttribL2i64NV
    void glVertexAttribL2i64vNV(int,java.nio.LongBuffer) -> glVertexAttribL2i64vNV
    void glVertexAttribL2i64vNV(int,long[],int) -> glVertexAttribL2i64vNV
    void glVertexAttribL2ui64NV(int,long,long) -> glVertexAttribL2ui64NV
    void glVertexAttribL2ui64vNV(int,java.nio.LongBuffer) -> glVertexAttribL2ui64vNV
    void glVertexAttribL2ui64vNV(int,long[],int) -> glVertexAttribL2ui64vNV
    void glVertexAttribL3i64NV(int,long,long,long) -> glVertexAttribL3i64NV
    void glVertexAttribL3i64vNV(int,java.nio.LongBuffer) -> glVertexAttribL3i64vNV
    void glVertexAttribL3i64vNV(int,long[],int) -> glVertexAttribL3i64vNV
    void glVertexAttribL3ui64NV(int,long,long,long) -> glVertexAttribL3ui64NV
    void glVertexAttribL3ui64vNV(int,java.nio.LongBuffer) -> glVertexAttribL3ui64vNV
    void glVertexAttribL3ui64vNV(int,long[],int) -> glVertexAttribL3ui64vNV
    void glVertexAttribL4i64NV(int,long,long,long,long) -> glVertexAttribL4i64NV
    void glVertexAttribL4i64vNV(int,java.nio.LongBuffer) -> glVertexAttribL4i64vNV
    void glVertexAttribL4i64vNV(int,long[],int) -> glVertexAttribL4i64vNV
    void glVertexAttribL4ui64NV(int,long,long,long,long) -> glVertexAttribL4ui64NV
    void glVertexAttribL4ui64vNV(int,java.nio.LongBuffer) -> glVertexAttribL4ui64vNV
    void glVertexAttribL4ui64vNV(int,long[],int) -> glVertexAttribL4ui64vNV
    void glVertexAttribLFormatNV(int,int,int,int) -> glVertexAttribLFormatNV
    void glVertexAttribParameteriAMD(int,int,int) -> glVertexAttribParameteriAMD
    void glVertexAttribPointerARB(int,int,int,boolean,int,java.nio.Buffer) -> glVertexAttribPointerARB
    void glVertexAttribPointerARB(int,int,int,boolean,int,long) -> glVertexAttribPointerARB
    void glVertexAttribs1hv(int,int,java.nio.ShortBuffer) -> glVertexAttribs1hv
    void glVertexAttribs1hv(int,int,short[],int) -> glVertexAttribs1hv
    void glVertexAttribs2hv(int,int,java.nio.ShortBuffer) -> glVertexAttribs2hv
    void glVertexAttribs2hv(int,int,short[],int) -> glVertexAttribs2hv
    void glVertexAttribs3hv(int,int,java.nio.ShortBuffer) -> glVertexAttribs3hv
    void glVertexAttribs3hv(int,int,short[],int) -> glVertexAttribs3hv
    void glVertexAttribs4hv(int,int,java.nio.ShortBuffer) -> glVertexAttribs4hv
    void glVertexAttribs4hv(int,int,short[],int) -> glVertexAttribs4hv
    void glVertexBlendARB(int) -> glVertexBlendARB
    void glVertexWeightPointerEXT(int,int,int,java.nio.Buffer) -> glVertexWeightPointerEXT
    void glVertexWeightPointerEXT(int,int,int,long) -> glVertexWeightPointerEXT
    void glVertexWeightfEXT(float) -> glVertexWeightfEXT
    void glVertexWeightfvEXT(java.nio.FloatBuffer) -> glVertexWeightfvEXT
    void glVertexWeightfvEXT(float[],int) -> glVertexWeightfvEXT
    void glVertexWeighth(short) -> glVertexWeighth
    void glVertexWeighthv(java.nio.ShortBuffer) -> glVertexWeighthv
    void glVertexWeighthv(short[],int) -> glVertexWeighthv
    int glVideoCaptureNV(int,java.nio.IntBuffer,java.nio.LongBuffer) -> glVideoCaptureNV
    int glVideoCaptureNV(int,int[],int,long[],int) -> glVideoCaptureNV
    void glVideoCaptureStreamParameterdvNV(int,int,int,java.nio.DoubleBuffer) -> glVideoCaptureStreamParameterdvNV
    void glVideoCaptureStreamParameterdvNV(int,int,int,double[],int) -> glVideoCaptureStreamParameterdvNV
    void glVideoCaptureStreamParameterfvNV(int,int,int,java.nio.FloatBuffer) -> glVideoCaptureStreamParameterfvNV
    void glVideoCaptureStreamParameterfvNV(int,int,int,float[],int) -> glVideoCaptureStreamParameterfvNV
    void glVideoCaptureStreamParameterivNV(int,int,int,java.nio.IntBuffer) -> glVideoCaptureStreamParameterivNV
    void glVideoCaptureStreamParameterivNV(int,int,int,int[],int) -> glVideoCaptureStreamParameterivNV
    void glWeightPathsNV(int,int,java.nio.IntBuffer,java.nio.FloatBuffer) -> glWeightPathsNV
    void glWeightPathsNV(int,int,int[],int,float[],int) -> glWeightPathsNV
    void glWeightPointer(int,int,int,java.nio.Buffer) -> glWeightPointer
    void glWeightbvARB(int,java.nio.ByteBuffer) -> glWeightbvARB
    void glWeightbvARB(int,byte[],int) -> glWeightbvARB
    void glWeightdvARB(int,java.nio.DoubleBuffer) -> glWeightdvARB
    void glWeightdvARB(int,double[],int) -> glWeightdvARB
    void glWeightfvARB(int,java.nio.FloatBuffer) -> glWeightfvARB
    void glWeightfvARB(int,float[],int) -> glWeightfvARB
    void glWeightivARB(int,java.nio.IntBuffer) -> glWeightivARB
    void glWeightivARB(int,int[],int) -> glWeightivARB
    void glWeightsvARB(int,java.nio.ShortBuffer) -> glWeightsvARB
    void glWeightsvARB(int,short[],int) -> glWeightsvARB
    void glWeightubvARB(int,java.nio.ByteBuffer) -> glWeightubvARB
    void glWeightubvARB(int,byte[],int) -> glWeightubvARB
    void glWeightuivARB(int,java.nio.IntBuffer) -> glWeightuivARB
    void glWeightuivARB(int,int[],int) -> glWeightuivARB
    void glWeightusvARB(int,java.nio.ShortBuffer) -> glWeightusvARB
    void glWeightusvARB(int,short[],int) -> glWeightusvARB
    void glWindowPos2d(double,double) -> glWindowPos2d
    void glWindowPos2dv(java.nio.DoubleBuffer) -> glWindowPos2dv
    void glWindowPos2dv(double[],int) -> glWindowPos2dv
    void glWindowPos2f(float,float) -> glWindowPos2f
    void glWindowPos2fv(java.nio.FloatBuffer) -> glWindowPos2fv
    void glWindowPos2fv(float[],int) -> glWindowPos2fv
    void glWindowPos2i(int,int) -> glWindowPos2i
    void glWindowPos2iv(java.nio.IntBuffer) -> glWindowPos2iv
    void glWindowPos2iv(int[],int) -> glWindowPos2iv
    void glWindowPos2s(short,short) -> glWindowPos2s
    void glWindowPos2sv(java.nio.ShortBuffer) -> glWindowPos2sv
    void glWindowPos2sv(short[],int) -> glWindowPos2sv
    void glWindowPos3d(double,double,double) -> glWindowPos3d
    void glWindowPos3dv(java.nio.DoubleBuffer) -> glWindowPos3dv
    void glWindowPos3dv(double[],int) -> glWindowPos3dv
    void glWindowPos3f(float,float,float) -> glWindowPos3f
    void glWindowPos3fv(java.nio.FloatBuffer) -> glWindowPos3fv
    void glWindowPos3fv(float[],int) -> glWindowPos3fv
    void glWindowPos3i(int,int,int) -> glWindowPos3i
    void glWindowPos3iv(java.nio.IntBuffer) -> glWindowPos3iv
    void glWindowPos3iv(int[],int) -> glWindowPos3iv
    void glWindowPos3s(short,short,short) -> glWindowPos3s
    void glWindowPos3sv(java.nio.ShortBuffer) -> glWindowPos3sv
    void glWindowPos3sv(short[],int) -> glWindowPos3sv
    void glWriteMaskEXT(int,int,int,int,int,int) -> glWriteMaskEXT
    javax.media.opengl.GLBufferStorage mapNamedBuffer(int,int) -> mapNamedBuffer
    javax.media.opengl.GLBufferStorage mapNamedBufferRange(int,long,long,int) -> mapNamedBufferRange
    java.nio.ByteBuffer glAllocateMemoryNV(int,float,float,float) -> glAllocateMemoryNV
    void glFreeMemoryNV(java.nio.ByteBuffer) -> glFreeMemoryNV
    void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer) -> glVertexAttribPointer
    void glDrawElementsInstanced(int,int,int,java.nio.Buffer,int) -> glDrawElementsInstanced
    void glDrawRangeElements(int,int,int,int,int,java.nio.Buffer) -> glDrawRangeElements
    void glVertexAttribIPointer(int,int,int,int,java.nio.Buffer) -> glVertexAttribIPointer
javax.media.opengl.GL2ES1 -> javax.media.opengl.GL2ES1:
    int GL_CLIP_PLANE0 -> GL_CLIP_PLANE0
    int GL_CLIP_PLANE1 -> GL_CLIP_PLANE1
    int GL_CLIP_PLANE2 -> GL_CLIP_PLANE2
    int GL_CLIP_PLANE3 -> GL_CLIP_PLANE3
    int GL_CLIP_PLANE4 -> GL_CLIP_PLANE4
    int GL_CLIP_PLANE5 -> GL_CLIP_PLANE5
    int GL_FOG -> GL_FOG
    int GL_ALPHA_TEST -> GL_ALPHA_TEST
    int GL_POINT_SMOOTH -> GL_POINT_SMOOTH
    int GL_RESCALE_NORMAL -> GL_RESCALE_NORMAL
    int GL_STACK_OVERFLOW -> GL_STACK_OVERFLOW
    int GL_STACK_UNDERFLOW -> GL_STACK_UNDERFLOW
    int GL_EXP -> GL_EXP
    int GL_EXP2 -> GL_EXP2
    int GL_FOG_DENSITY -> GL_FOG_DENSITY
    int GL_FOG_START -> GL_FOG_START
    int GL_FOG_END -> GL_FOG_END
    int GL_FOG_MODE -> GL_FOG_MODE
    int GL_FOG_COLOR -> GL_FOG_COLOR
    int GL_CURRENT_COLOR -> GL_CURRENT_COLOR
    int GL_CURRENT_NORMAL -> GL_CURRENT_NORMAL
    int GL_CURRENT_TEXTURE_COORDS -> GL_CURRENT_TEXTURE_COORDS
    int GL_POINT_SIZE_MIN -> GL_POINT_SIZE_MIN
    int GL_POINT_SIZE_MAX -> GL_POINT_SIZE_MAX
    int GL_POINT_DISTANCE_ATTENUATION -> GL_POINT_DISTANCE_ATTENUATION
    int GL_SHADE_MODEL -> GL_SHADE_MODEL
    int GL_MODELVIEW_STACK_DEPTH -> GL_MODELVIEW_STACK_DEPTH
    int GL_PROJECTION_STACK_DEPTH -> GL_PROJECTION_STACK_DEPTH
    int GL_TEXTURE_STACK_DEPTH -> GL_TEXTURE_STACK_DEPTH
    int GL_ALPHA_TEST_FUNC -> GL_ALPHA_TEST_FUNC
    int GL_ALPHA_TEST_REF -> GL_ALPHA_TEST_REF
    int GL_MAX_LIGHTS -> GL_MAX_LIGHTS
    int GL_MAX_CLIP_PLANES -> GL_MAX_CLIP_PLANES
    int GL_MAX_MODELVIEW_STACK_DEPTH -> GL_MAX_MODELVIEW_STACK_DEPTH
    int GL_MAX_PROJECTION_STACK_DEPTH -> GL_MAX_PROJECTION_STACK_DEPTH
    int GL_MAX_TEXTURE_STACK_DEPTH -> GL_MAX_TEXTURE_STACK_DEPTH
    int GL_MAX_TEXTURE_UNITS -> GL_MAX_TEXTURE_UNITS
    int GL_VERTEX_ARRAY_SIZE -> GL_VERTEX_ARRAY_SIZE
    int GL_VERTEX_ARRAY_TYPE -> GL_VERTEX_ARRAY_TYPE
    int GL_VERTEX_ARRAY_STRIDE -> GL_VERTEX_ARRAY_STRIDE
    int GL_NORMAL_ARRAY_TYPE -> GL_NORMAL_ARRAY_TYPE
    int GL_NORMAL_ARRAY_STRIDE -> GL_NORMAL_ARRAY_STRIDE
    int GL_COLOR_ARRAY_SIZE -> GL_COLOR_ARRAY_SIZE
    int GL_COLOR_ARRAY_TYPE -> GL_COLOR_ARRAY_TYPE
    int GL_COLOR_ARRAY_STRIDE -> GL_COLOR_ARRAY_STRIDE
    int GL_TEXTURE_COORD_ARRAY_SIZE -> GL_TEXTURE_COORD_ARRAY_SIZE
    int GL_TEXTURE_COORD_ARRAY_TYPE -> GL_TEXTURE_COORD_ARRAY_TYPE
    int GL_TEXTURE_COORD_ARRAY_STRIDE -> GL_TEXTURE_COORD_ARRAY_STRIDE
    int GL_VERTEX_ARRAY_POINTER -> GL_VERTEX_ARRAY_POINTER
    int GL_NORMAL_ARRAY_POINTER -> GL_NORMAL_ARRAY_POINTER
    int GL_COLOR_ARRAY_POINTER -> GL_COLOR_ARRAY_POINTER
    int GL_TEXTURE_COORD_ARRAY_POINTER -> GL_TEXTURE_COORD_ARRAY_POINTER
    int GL_PERSPECTIVE_CORRECTION_HINT -> GL_PERSPECTIVE_CORRECTION_HINT
    int GL_POINT_SMOOTH_HINT -> GL_POINT_SMOOTH_HINT
    int GL_FOG_HINT -> GL_FOG_HINT
    int GL_LIGHT_MODEL_AMBIENT -> GL_LIGHT_MODEL_AMBIENT
    int GL_LIGHT_MODEL_TWO_SIDE -> GL_LIGHT_MODEL_TWO_SIDE
    int GL_MODULATE -> GL_MODULATE
    int GL_DECAL -> GL_DECAL
    int GL_ADD -> GL_ADD
    int GL_TEXTURE_ENV_MODE -> GL_TEXTURE_ENV_MODE
    int GL_TEXTURE_ENV_COLOR -> GL_TEXTURE_ENV_COLOR
    int GL_TEXTURE_ENV -> GL_TEXTURE_ENV
    int GL_GENERATE_MIPMAP -> GL_GENERATE_MIPMAP
    int GL_CLIENT_ACTIVE_TEXTURE -> GL_CLIENT_ACTIVE_TEXTURE
    int GL_VERTEX_ARRAY_BUFFER_BINDING -> GL_VERTEX_ARRAY_BUFFER_BINDING
    int GL_NORMAL_ARRAY_BUFFER_BINDING -> GL_NORMAL_ARRAY_BUFFER_BINDING
    int GL_COLOR_ARRAY_BUFFER_BINDING -> GL_COLOR_ARRAY_BUFFER_BINDING
    int GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING -> GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING
    int GL_SUBTRACT -> GL_SUBTRACT
    int GL_COMBINE -> GL_COMBINE
    int GL_COMBINE_RGB -> GL_COMBINE_RGB
    int GL_COMBINE_ALPHA -> GL_COMBINE_ALPHA
    int GL_RGB_SCALE -> GL_RGB_SCALE
    int GL_ADD_SIGNED -> GL_ADD_SIGNED
    int GL_INTERPOLATE -> GL_INTERPOLATE
    int GL_CONSTANT -> GL_CONSTANT
    int GL_PRIMARY_COLOR -> GL_PRIMARY_COLOR
    int GL_PREVIOUS -> GL_PREVIOUS
    int GL_OPERAND0_RGB -> GL_OPERAND0_RGB
    int GL_OPERAND1_RGB -> GL_OPERAND1_RGB
    int GL_OPERAND2_RGB -> GL_OPERAND2_RGB
    int GL_OPERAND0_ALPHA -> GL_OPERAND0_ALPHA
    int GL_OPERAND1_ALPHA -> GL_OPERAND1_ALPHA
    int GL_OPERAND2_ALPHA -> GL_OPERAND2_ALPHA
    int GL_ALPHA_SCALE -> GL_ALPHA_SCALE
    int GL_SRC0_RGB -> GL_SRC0_RGB
    int GL_SRC1_RGB -> GL_SRC1_RGB
    int GL_SRC2_RGB -> GL_SRC2_RGB
    int GL_SRC0_ALPHA -> GL_SRC0_ALPHA
    int GL_SRC1_ALPHA -> GL_SRC1_ALPHA
    int GL_SRC2_ALPHA -> GL_SRC2_ALPHA
    int GL_DOT3_RGB -> GL_DOT3_RGB
    int GL_DOT3_RGBA -> GL_DOT3_RGBA
    int GL_POINT_SPRITE -> GL_POINT_SPRITE
    int GL_COORD_REPLACE -> GL_COORD_REPLACE
    int GL_MAX_VERTEX_UNITS -> GL_MAX_VERTEX_UNITS
    int GL_MAX_PALETTE_MATRICES -> GL_MAX_PALETTE_MATRICES
    int GL_MATRIX_PALETTE -> GL_MATRIX_PALETTE
    int GL_MATRIX_INDEX_ARRAY -> GL_MATRIX_INDEX_ARRAY
    int GL_WEIGHT_ARRAY -> GL_WEIGHT_ARRAY
    int GL_CURRENT_PALETTE_MATRIX -> GL_CURRENT_PALETTE_MATRIX
    int GL_MATRIX_INDEX_ARRAY_SIZE -> GL_MATRIX_INDEX_ARRAY_SIZE
    int GL_MATRIX_INDEX_ARRAY_TYPE -> GL_MATRIX_INDEX_ARRAY_TYPE
    int GL_MATRIX_INDEX_ARRAY_STRIDE -> GL_MATRIX_INDEX_ARRAY_STRIDE
    int GL_MATRIX_INDEX_ARRAY_POINTER -> GL_MATRIX_INDEX_ARRAY_POINTER
    int GL_WEIGHT_ARRAY_SIZE -> GL_WEIGHT_ARRAY_SIZE
    int GL_WEIGHT_ARRAY_TYPE -> GL_WEIGHT_ARRAY_TYPE
    int GL_WEIGHT_ARRAY_STRIDE -> GL_WEIGHT_ARRAY_STRIDE
    int GL_WEIGHT_ARRAY_POINTER -> GL_WEIGHT_ARRAY_POINTER
    int GL_WEIGHT_ARRAY_BUFFER_BINDING -> GL_WEIGHT_ARRAY_BUFFER_BINDING
    int GL_NORMAL_MAP -> GL_NORMAL_MAP
    int GL_REFLECTION_MAP -> GL_REFLECTION_MAP
    int GL_TEXTURE_GEN_MODE -> GL_TEXTURE_GEN_MODE
    int GL_TEXTURE_GEN_STR -> GL_TEXTURE_GEN_STR
    int GL_CONTEXT_ROBUST_ACCESS -> GL_CONTEXT_ROBUST_ACCESS
    int GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING -> GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
    void glAlphaFunc(int,float) -> glAlphaFunc
    void glClientActiveTexture(int) -> glClientActiveTexture
    void glColor4ub(byte,byte,byte,byte) -> glColor4ub
    void glFogf(int,float) -> glFogf
    void glFogfv(int,java.nio.FloatBuffer) -> glFogfv
    void glFogfv(int,float[],int) -> glFogfv
    void glGetLightfv(int,int,java.nio.FloatBuffer) -> glGetLightfv
    void glGetLightfv(int,int,float[],int) -> glGetLightfv
    void glGetMaterialfv(int,int,java.nio.FloatBuffer) -> glGetMaterialfv
    void glGetMaterialfv(int,int,float[],int) -> glGetMaterialfv
    void glGetTexEnvfv(int,int,java.nio.FloatBuffer) -> glGetTexEnvfv
    void glGetTexEnvfv(int,int,float[],int) -> glGetTexEnvfv
    void glGetTexEnviv(int,int,java.nio.IntBuffer) -> glGetTexEnviv
    void glGetTexEnviv(int,int,int[],int) -> glGetTexEnviv
    void glGetTexGenfv(int,int,java.nio.FloatBuffer) -> glGetTexGenfv
    void glGetTexGenfv(int,int,float[],int) -> glGetTexGenfv
    void glGetTexGeniv(int,int,java.nio.IntBuffer) -> glGetTexGeniv
    void glGetTexGeniv(int,int,int[],int) -> glGetTexGeniv
    void glLightModelf(int,float) -> glLightModelf
    void glLightModelfv(int,java.nio.FloatBuffer) -> glLightModelfv
    void glLightModelfv(int,float[],int) -> glLightModelfv
    void glLightf(int,int,float) -> glLightf
    void glLogicOp(int) -> glLogicOp
    void glMultiTexCoord4f(int,float,float,float,float) -> glMultiTexCoord4f
    void glNormal3f(float,float,float) -> glNormal3f
    void glPointParameterf(int,float) -> glPointParameterf
    void glPointParameterfv(int,java.nio.FloatBuffer) -> glPointParameterfv
    void glPointParameterfv(int,float[],int) -> glPointParameterfv
    void glPointSize(float) -> glPointSize
    void glTexEnvf(int,int,float) -> glTexEnvf
    void glTexEnvfv(int,int,java.nio.FloatBuffer) -> glTexEnvfv
    void glTexEnvfv(int,int,float[],int) -> glTexEnvfv
    void glTexEnvi(int,int,int) -> glTexEnvi
    void glTexEnviv(int,int,java.nio.IntBuffer) -> glTexEnviv
    void glTexEnviv(int,int,int[],int) -> glTexEnviv
    void glTexGenf(int,int,float) -> glTexGenf
    void glTexGenfv(int,int,java.nio.FloatBuffer) -> glTexGenfv
    void glTexGenfv(int,int,float[],int) -> glTexGenfv
    void glTexGeni(int,int,int) -> glTexGeni
    void glTexGeniv(int,int,java.nio.IntBuffer) -> glTexGeniv
    void glTexGeniv(int,int,int[],int) -> glTexGeniv
    void glOrtho(double,double,double,double,double,double) -> glOrtho
    void glFrustum(double,double,double,double,double,double) -> glFrustum
    void glDrawElements(int,int,int,java.nio.Buffer) -> glDrawElements
javax.media.opengl.GL2ES2 -> javax.media.opengl.GL2ES2:
    int GL_CONSTANT_COLOR -> GL_CONSTANT_COLOR
    int GL_ONE_MINUS_CONSTANT_COLOR -> GL_ONE_MINUS_CONSTANT_COLOR
    int GL_CONSTANT_ALPHA -> GL_CONSTANT_ALPHA
    int GL_ONE_MINUS_CONSTANT_ALPHA -> GL_ONE_MINUS_CONSTANT_ALPHA
    int GL_BLEND_COLOR -> GL_BLEND_COLOR
    int GL_STREAM_DRAW -> GL_STREAM_DRAW
    int GL_CURRENT_VERTEX_ATTRIB -> GL_CURRENT_VERTEX_ATTRIB
    int GL_STENCIL_BACK_FUNC -> GL_STENCIL_BACK_FUNC
    int GL_STENCIL_BACK_FAIL -> GL_STENCIL_BACK_FAIL
    int GL_STENCIL_BACK_PASS_DEPTH_FAIL -> GL_STENCIL_BACK_PASS_DEPTH_FAIL
    int GL_STENCIL_BACK_PASS_DEPTH_PASS -> GL_STENCIL_BACK_PASS_DEPTH_PASS
    int GL_STENCIL_BACK_REF -> GL_STENCIL_BACK_REF
    int GL_STENCIL_BACK_VALUE_MASK -> GL_STENCIL_BACK_VALUE_MASK
    int GL_STENCIL_BACK_WRITEMASK -> GL_STENCIL_BACK_WRITEMASK
    int GL_INT -> GL_INT
    int GL_FRAGMENT_SHADER -> GL_FRAGMENT_SHADER
    int GL_VERTEX_SHADER -> GL_VERTEX_SHADER
    int GL_MAX_VERTEX_ATTRIBS -> GL_MAX_VERTEX_ATTRIBS
    int GL_MAX_VERTEX_UNIFORM_VECTORS -> GL_MAX_VERTEX_UNIFORM_VECTORS
    int GL_MAX_VARYING_VECTORS -> GL_MAX_VARYING_VECTORS
    int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS -> GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
    int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS -> GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
    int GL_MAX_TEXTURE_IMAGE_UNITS -> GL_MAX_TEXTURE_IMAGE_UNITS
    int GL_MAX_FRAGMENT_UNIFORM_VECTORS -> GL_MAX_FRAGMENT_UNIFORM_VECTORS
    int GL_SHADER_TYPE -> GL_SHADER_TYPE
    int GL_DELETE_STATUS -> GL_DELETE_STATUS
    int GL_LINK_STATUS -> GL_LINK_STATUS
    int GL_VALIDATE_STATUS -> GL_VALIDATE_STATUS
    int GL_ATTACHED_SHADERS -> GL_ATTACHED_SHADERS
    int GL_ACTIVE_UNIFORMS -> GL_ACTIVE_UNIFORMS
    int GL_ACTIVE_UNIFORM_MAX_LENGTH -> GL_ACTIVE_UNIFORM_MAX_LENGTH
    int GL_ACTIVE_ATTRIBUTES -> GL_ACTIVE_ATTRIBUTES
    int GL_ACTIVE_ATTRIBUTE_MAX_LENGTH -> GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
    int GL_SHADING_LANGUAGE_VERSION -> GL_SHADING_LANGUAGE_VERSION
    int GL_CURRENT_PROGRAM -> GL_CURRENT_PROGRAM
    int GL_FLOAT_VEC2 -> GL_FLOAT_VEC2
    int GL_FLOAT_VEC3 -> GL_FLOAT_VEC3
    int GL_FLOAT_VEC4 -> GL_FLOAT_VEC4
    int GL_INT_VEC2 -> GL_INT_VEC2
    int GL_INT_VEC3 -> GL_INT_VEC3
    int GL_INT_VEC4 -> GL_INT_VEC4
    int GL_BOOL -> GL_BOOL
    int GL_BOOL_VEC2 -> GL_BOOL_VEC2
    int GL_BOOL_VEC3 -> GL_BOOL_VEC3
    int GL_BOOL_VEC4 -> GL_BOOL_VEC4
    int GL_FLOAT_MAT2 -> GL_FLOAT_MAT2
    int GL_FLOAT_MAT3 -> GL_FLOAT_MAT3
    int GL_FLOAT_MAT4 -> GL_FLOAT_MAT4
    int GL_SAMPLER_2D -> GL_SAMPLER_2D
    int GL_SAMPLER_CUBE -> GL_SAMPLER_CUBE
    int GL_VERTEX_ATTRIB_ARRAY_ENABLED -> GL_VERTEX_ATTRIB_ARRAY_ENABLED
    int GL_VERTEX_ATTRIB_ARRAY_SIZE -> GL_VERTEX_ATTRIB_ARRAY_SIZE
    int GL_VERTEX_ATTRIB_ARRAY_STRIDE -> GL_VERTEX_ATTRIB_ARRAY_STRIDE
    int GL_VERTEX_ATTRIB_ARRAY_TYPE -> GL_VERTEX_ATTRIB_ARRAY_TYPE
    int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED -> GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
    int GL_VERTEX_ATTRIB_ARRAY_POINTER -> GL_VERTEX_ATTRIB_ARRAY_POINTER
    int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING -> GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
    int GL_COMPILE_STATUS -> GL_COMPILE_STATUS
    int GL_INFO_LOG_LENGTH -> GL_INFO_LOG_LENGTH
    int GL_SHADER_SOURCE_LENGTH -> GL_SHADER_SOURCE_LENGTH
    int GL_SHADER_COMPILER -> GL_SHADER_COMPILER
    int GL_SHADER_BINARY_FORMATS -> GL_SHADER_BINARY_FORMATS
    int GL_NUM_SHADER_BINARY_FORMATS -> GL_NUM_SHADER_BINARY_FORMATS
    int GL_LOW_FLOAT -> GL_LOW_FLOAT
    int GL_MEDIUM_FLOAT -> GL_MEDIUM_FLOAT
    int GL_HIGH_FLOAT -> GL_HIGH_FLOAT
    int GL_LOW_INT -> GL_LOW_INT
    int GL_MEDIUM_INT -> GL_MEDIUM_INT
    int GL_HIGH_INT -> GL_HIGH_INT
    int GL_STENCIL_INDEX -> GL_STENCIL_INDEX
    int GL_PROGRAM_BINARY_LENGTH -> GL_PROGRAM_BINARY_LENGTH
    int GL_NUM_PROGRAM_BINARY_FORMATS -> GL_NUM_PROGRAM_BINARY_FORMATS
    int GL_PROGRAM_BINARY_FORMATS -> GL_PROGRAM_BINARY_FORMATS
    int GL_FRAGMENT_SHADER_DERIVATIVE_HINT -> GL_FRAGMENT_SHADER_DERIVATIVE_HINT
    int GL_TEXTURE_WRAP_R -> GL_TEXTURE_WRAP_R
    int GL_TEXTURE_3D -> GL_TEXTURE_3D
    int GL_TEXTURE_BINDING_3D -> GL_TEXTURE_BINDING_3D
    int GL_MAX_3D_TEXTURE_SIZE -> GL_MAX_3D_TEXTURE_SIZE
    int GL_SAMPLER_3D -> GL_SAMPLER_3D
    int GL_UNSIGNED_INT_10_10_10_2 -> GL_UNSIGNED_INT_10_10_10_2
    int GL_INT_10_10_10_2 -> GL_INT_10_10_10_2
    int GL_DEBUG_OUTPUT_SYNCHRONOUS -> GL_DEBUG_OUTPUT_SYNCHRONOUS
    int GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH -> GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
    int GL_DEBUG_CALLBACK_FUNCTION -> GL_DEBUG_CALLBACK_FUNCTION
    int GL_DEBUG_CALLBACK_USER_PARAM -> GL_DEBUG_CALLBACK_USER_PARAM
    int GL_DEBUG_SOURCE_API -> GL_DEBUG_SOURCE_API
    int GL_DEBUG_SOURCE_WINDOW_SYSTEM -> GL_DEBUG_SOURCE_WINDOW_SYSTEM
    int GL_DEBUG_SOURCE_SHADER_COMPILER -> GL_DEBUG_SOURCE_SHADER_COMPILER
    int GL_DEBUG_SOURCE_THIRD_PARTY -> GL_DEBUG_SOURCE_THIRD_PARTY
    int GL_DEBUG_SOURCE_APPLICATION -> GL_DEBUG_SOURCE_APPLICATION
    int GL_DEBUG_SOURCE_OTHER -> GL_DEBUG_SOURCE_OTHER
    int GL_DEBUG_TYPE_ERROR -> GL_DEBUG_TYPE_ERROR
    int GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR -> GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
    int GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR -> GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
    int GL_DEBUG_TYPE_PORTABILITY -> GL_DEBUG_TYPE_PORTABILITY
    int GL_DEBUG_TYPE_PERFORMANCE -> GL_DEBUG_TYPE_PERFORMANCE
    int GL_DEBUG_TYPE_OTHER -> GL_DEBUG_TYPE_OTHER
    int GL_DEBUG_TYPE_MARKER -> GL_DEBUG_TYPE_MARKER
    int GL_DEBUG_TYPE_PUSH_GROUP -> GL_DEBUG_TYPE_PUSH_GROUP
    int GL_DEBUG_TYPE_POP_GROUP -> GL_DEBUG_TYPE_POP_GROUP
    int GL_DEBUG_SEVERITY_NOTIFICATION -> GL_DEBUG_SEVERITY_NOTIFICATION
    int GL_MAX_DEBUG_GROUP_STACK_DEPTH -> GL_MAX_DEBUG_GROUP_STACK_DEPTH
    int GL_DEBUG_GROUP_STACK_DEPTH -> GL_DEBUG_GROUP_STACK_DEPTH
    int GL_BUFFER -> GL_BUFFER
    int GL_SHADER -> GL_SHADER
    int GL_PROGRAM -> GL_PROGRAM
    int GL_QUERY -> GL_QUERY
    int GL_SAMPLER -> GL_SAMPLER
    int GL_MAX_LABEL_LENGTH -> GL_MAX_LABEL_LENGTH
    int GL_MAX_DEBUG_MESSAGE_LENGTH -> GL_MAX_DEBUG_MESSAGE_LENGTH
    int GL_MAX_DEBUG_LOGGED_MESSAGES -> GL_MAX_DEBUG_LOGGED_MESSAGES
    int GL_DEBUG_LOGGED_MESSAGES -> GL_DEBUG_LOGGED_MESSAGES
    int GL_DEBUG_SEVERITY_HIGH -> GL_DEBUG_SEVERITY_HIGH
    int GL_DEBUG_SEVERITY_MEDIUM -> GL_DEBUG_SEVERITY_MEDIUM
    int GL_DEBUG_SEVERITY_LOW -> GL_DEBUG_SEVERITY_LOW
    int GL_DEBUG_OUTPUT -> GL_DEBUG_OUTPUT
    int GL_CONTEXT_FLAG_DEBUG_BIT -> GL_CONTEXT_FLAG_DEBUG_BIT
    int GL_STACK_OVERFLOW -> GL_STACK_OVERFLOW
    int GL_STACK_UNDERFLOW -> GL_STACK_UNDERFLOW
    int GL_RG16F -> GL_RG16F
    int GL_R16F -> GL_R16F
    int GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE -> GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
    int GL_UNSIGNED_NORMALIZED -> GL_UNSIGNED_NORMALIZED
    int GL_CURRENT_QUERY -> GL_CURRENT_QUERY
    int GL_QUERY_RESULT -> GL_QUERY_RESULT
    int GL_QUERY_RESULT_AVAILABLE -> GL_QUERY_RESULT_AVAILABLE
    int GL_MAX_COLOR_ATTACHMENTS -> GL_MAX_COLOR_ATTACHMENTS
    int GL_MAX_DRAW_BUFFERS -> GL_MAX_DRAW_BUFFERS
    int GL_DRAW_BUFFER0 -> GL_DRAW_BUFFER0
    int GL_DRAW_BUFFER1 -> GL_DRAW_BUFFER1
    int GL_DRAW_BUFFER2 -> GL_DRAW_BUFFER2
    int GL_DRAW_BUFFER3 -> GL_DRAW_BUFFER3
    int GL_DRAW_BUFFER4 -> GL_DRAW_BUFFER4
    int GL_DRAW_BUFFER5 -> GL_DRAW_BUFFER5
    int GL_DRAW_BUFFER6 -> GL_DRAW_BUFFER6
    int GL_DRAW_BUFFER7 -> GL_DRAW_BUFFER7
    int GL_DRAW_BUFFER8 -> GL_DRAW_BUFFER8
    int GL_DRAW_BUFFER9 -> GL_DRAW_BUFFER9
    int GL_DRAW_BUFFER10 -> GL_DRAW_BUFFER10
    int GL_DRAW_BUFFER11 -> GL_DRAW_BUFFER11
    int GL_DRAW_BUFFER12 -> GL_DRAW_BUFFER12
    int GL_DRAW_BUFFER13 -> GL_DRAW_BUFFER13
    int GL_DRAW_BUFFER14 -> GL_DRAW_BUFFER14
    int GL_DRAW_BUFFER15 -> GL_DRAW_BUFFER15
    int GL_COLOR_ATTACHMENT1 -> GL_COLOR_ATTACHMENT1
    int GL_COLOR_ATTACHMENT2 -> GL_COLOR_ATTACHMENT2
    int GL_COLOR_ATTACHMENT3 -> GL_COLOR_ATTACHMENT3
    int GL_COLOR_ATTACHMENT4 -> GL_COLOR_ATTACHMENT4
    int GL_COLOR_ATTACHMENT5 -> GL_COLOR_ATTACHMENT5
    int GL_COLOR_ATTACHMENT6 -> GL_COLOR_ATTACHMENT6
    int GL_COLOR_ATTACHMENT7 -> GL_COLOR_ATTACHMENT7
    int GL_COLOR_ATTACHMENT8 -> GL_COLOR_ATTACHMENT8
    int GL_COLOR_ATTACHMENT9 -> GL_COLOR_ATTACHMENT9
    int GL_COLOR_ATTACHMENT10 -> GL_COLOR_ATTACHMENT10
    int GL_COLOR_ATTACHMENT11 -> GL_COLOR_ATTACHMENT11
    int GL_COLOR_ATTACHMENT12 -> GL_COLOR_ATTACHMENT12
    int GL_COLOR_ATTACHMENT13 -> GL_COLOR_ATTACHMENT13
    int GL_COLOR_ATTACHMENT14 -> GL_COLOR_ATTACHMENT14
    int GL_COLOR_ATTACHMENT15 -> GL_COLOR_ATTACHMENT15
    int GL_ANY_SAMPLES_PASSED -> GL_ANY_SAMPLES_PASSED
    int GL_ANY_SAMPLES_PASSED_CONSERVATIVE -> GL_ANY_SAMPLES_PASSED_CONSERVATIVE
    int GL_CONTEXT_ROBUST_ACCESS -> GL_CONTEXT_ROBUST_ACCESS
    int GL_VERTEX_SHADER_BIT -> GL_VERTEX_SHADER_BIT
    int GL_FRAGMENT_SHADER_BIT -> GL_FRAGMENT_SHADER_BIT
    int GL_PROGRAM_SEPARABLE -> GL_PROGRAM_SEPARABLE
    int GL_ACTIVE_PROGRAM -> GL_ACTIVE_PROGRAM
    int GL_PROGRAM_PIPELINE_BINDING -> GL_PROGRAM_PIPELINE_BINDING
    int GL_TEXTURE_COMPARE_MODE -> GL_TEXTURE_COMPARE_MODE
    int GL_TEXTURE_COMPARE_FUNC -> GL_TEXTURE_COMPARE_FUNC
    int GL_COMPARE_REF_TO_TEXTURE -> GL_COMPARE_REF_TO_TEXTURE
    int GL_SAMPLER_2D_SHADOW -> GL_SAMPLER_2D_SHADOW
    int GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING -> GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
    int GL_RED -> GL_RED
    int GL_RG -> GL_RG
    int GL_R8 -> GL_R8
    int GL_RG8 -> GL_RG8
    int GL_R32F -> GL_R32F
    int GL_RG32F -> GL_RG32F
    int GL_UNSIGNED_INT_2_10_10_10_REV -> GL_UNSIGNED_INT_2_10_10_10_REV
    int GL_UNPACK_ROW_LENGTH -> GL_UNPACK_ROW_LENGTH
    int GL_UNPACK_SKIP_ROWS -> GL_UNPACK_SKIP_ROWS
    int GL_UNPACK_SKIP_PIXELS -> GL_UNPACK_SKIP_PIXELS
    int GL_SHADER_BINARY_DMP -> GL_SHADER_BINARY_DMP
    int GL_ALL_SHADER_BITS -> GL_ALL_SHADER_BITS
    int GL_DEPTH_COMPONENT -> GL_DEPTH_COMPONENT
    void glAttachShader(int,int) -> glAttachShader
    void glBeginQuery(int,int) -> glBeginQuery
    void glBindAttribLocation(int,int,java.lang.String) -> glBindAttribLocation
    void glBlendColor(float,float,float,float) -> glBlendColor
    void glCompileShader(int) -> glCompileShader
    void glCompressedTexImage3D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexImage3D
    void glCompressedTexImage3D(int,int,int,int,int,int,int,int,long) -> glCompressedTexImage3D
    void glCompressedTexSubImage3D(int,int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexSubImage3D
    void glCompressedTexSubImage3D(int,int,int,int,int,int,int,int,int,int,long) -> glCompressedTexSubImage3D
    void glCopyTexSubImage3D(int,int,int,int,int,int,int,int,int) -> glCopyTexSubImage3D
    int glCreateProgram() -> glCreateProgram
    int glCreateShader(int) -> glCreateShader
    void glDebugMessageControl(int,int,int,int,java.nio.IntBuffer,boolean) -> glDebugMessageControl
    void glDebugMessageControl(int,int,int,int,int[],int,boolean) -> glDebugMessageControl
    void glDebugMessageInsert(int,int,int,int,int,java.lang.String) -> glDebugMessageInsert
    void glDeleteProgram(int) -> glDeleteProgram
    void glDeleteQueries(int,java.nio.IntBuffer) -> glDeleteQueries
    void glDeleteQueries(int,int[],int) -> glDeleteQueries
    void glDeleteShader(int) -> glDeleteShader
    void glDetachShader(int,int) -> glDetachShader
    void glDisableVertexAttribArray(int) -> glDisableVertexAttribArray
    void glEnableVertexAttribArray(int) -> glEnableVertexAttribArray
    void glEndQuery(int) -> glEndQuery
    void glFramebufferTexture3D(int,int,int,int,int,int) -> glFramebufferTexture3D
    void glGenQueries(int,java.nio.IntBuffer) -> glGenQueries
    void glGenQueries(int,int[],int) -> glGenQueries
    void glGetActiveAttrib(int,int,int,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.ByteBuffer) -> glGetActiveAttrib
    void glGetActiveAttrib(int,int,int,int[],int,int[],int,int[],int,byte[],int) -> glGetActiveAttrib
    void glGetActiveUniform(int,int,int,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.ByteBuffer) -> glGetActiveUniform
    void glGetActiveUniform(int,int,int,int[],int,int[],int,int[],int,byte[],int) -> glGetActiveUniform
    void glGetAttachedShaders(int,int,java.nio.IntBuffer,java.nio.IntBuffer) -> glGetAttachedShaders
    void glGetAttachedShaders(int,int,int[],int,int[],int) -> glGetAttachedShaders
    int glGetAttribLocation(int,java.lang.String) -> glGetAttribLocation
    int glGetDebugMessageLog(int,int,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.ByteBuffer) -> glGetDebugMessageLog
    int glGetDebugMessageLog(int,int,int[],int,int[],int,int[],int,int[],int,int[],int,byte[],int) -> glGetDebugMessageLog
    void glGetObjectLabel(int,int,int,java.nio.IntBuffer,java.nio.ByteBuffer) -> glGetObjectLabel
    void glGetObjectLabel(int,int,int,int[],int,byte[],int) -> glGetObjectLabel
    void glGetObjectPtrLabel(java.nio.Buffer,int,java.nio.IntBuffer,java.nio.ByteBuffer) -> glGetObjectPtrLabel
    void glGetObjectPtrLabel(java.nio.Buffer,int,int[],int,byte[],int) -> glGetObjectPtrLabel
    void glGetProgramBinary(int,int,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.Buffer) -> glGetProgramBinary
    void glGetProgramBinary(int,int,int[],int,int[],int,java.nio.Buffer) -> glGetProgramBinary
    void glGetProgramInfoLog(int,int,java.nio.IntBuffer,java.nio.ByteBuffer) -> glGetProgramInfoLog
    void glGetProgramInfoLog(int,int,int[],int,byte[],int) -> glGetProgramInfoLog
    void glGetProgramiv(int,int,java.nio.IntBuffer) -> glGetProgramiv
    void glGetProgramiv(int,int,int[],int) -> glGetProgramiv
    void glGetQueryObjectuiv(int,int,java.nio.IntBuffer) -> glGetQueryObjectuiv
    void glGetQueryObjectuiv(int,int,int[],int) -> glGetQueryObjectuiv
    void glGetQueryiv(int,int,java.nio.IntBuffer) -> glGetQueryiv
    void glGetQueryiv(int,int,int[],int) -> glGetQueryiv
    void glGetShaderInfoLog(int,int,java.nio.IntBuffer,java.nio.ByteBuffer) -> glGetShaderInfoLog
    void glGetShaderInfoLog(int,int,int[],int,byte[],int) -> glGetShaderInfoLog
    void glGetShaderSource(int,int,java.nio.IntBuffer,java.nio.ByteBuffer) -> glGetShaderSource
    void glGetShaderSource(int,int,int[],int,byte[],int) -> glGetShaderSource
    void glGetShaderiv(int,int,java.nio.IntBuffer) -> glGetShaderiv
    void glGetShaderiv(int,int,int[],int) -> glGetShaderiv
    int glGetUniformLocation(int,java.lang.String) -> glGetUniformLocation
    void glGetUniformfv(int,int,java.nio.FloatBuffer) -> glGetUniformfv
    void glGetUniformfv(int,int,float[],int) -> glGetUniformfv
    void glGetUniformiv(int,int,java.nio.IntBuffer) -> glGetUniformiv
    void glGetUniformiv(int,int,int[],int) -> glGetUniformiv
    void glGetVertexAttribfv(int,int,java.nio.FloatBuffer) -> glGetVertexAttribfv
    void glGetVertexAttribfv(int,int,float[],int) -> glGetVertexAttribfv
    void glGetVertexAttribiv(int,int,java.nio.IntBuffer) -> glGetVertexAttribiv
    void glGetVertexAttribiv(int,int,int[],int) -> glGetVertexAttribiv
    boolean glIsProgram(int) -> glIsProgram
    boolean glIsQuery(int) -> glIsQuery
    boolean glIsShader(int) -> glIsShader
    void glLinkProgram(int) -> glLinkProgram
    void glObjectLabel(int,int,int,java.nio.ByteBuffer) -> glObjectLabel
    void glObjectLabel(int,int,int,byte[],int) -> glObjectLabel
    void glObjectPtrLabel(java.nio.Buffer,int,java.nio.ByteBuffer) -> glObjectPtrLabel
    void glObjectPtrLabel(java.nio.Buffer,int,byte[],int) -> glObjectPtrLabel
    void glPopDebugGroup() -> glPopDebugGroup
    void glProgramBinary(int,int,java.nio.Buffer,int) -> glProgramBinary
    void glPushDebugGroup(int,int,int,java.nio.ByteBuffer) -> glPushDebugGroup
    void glPushDebugGroup(int,int,int,byte[],int) -> glPushDebugGroup
    void glShaderSource(int,int,java.lang.String[],java.nio.IntBuffer) -> glShaderSource
    void glShaderSource(int,int,java.lang.String[],int[],int) -> glShaderSource
    void glStencilFuncSeparate(int,int,int,int) -> glStencilFuncSeparate
    void glStencilMaskSeparate(int,int) -> glStencilMaskSeparate
    void glStencilOpSeparate(int,int,int,int) -> glStencilOpSeparate
    void glTexImage3D(int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexImage3D
    void glTexImage3D(int,int,int,int,int,int,int,int,int,long) -> glTexImage3D
    void glTexSubImage3D(int,int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexSubImage3D
    void glTexSubImage3D(int,int,int,int,int,int,int,int,int,int,long) -> glTexSubImage3D
    void glUniform1f(int,float) -> glUniform1f
    void glUniform1fv(int,int,java.nio.FloatBuffer) -> glUniform1fv
    void glUniform1fv(int,int,float[],int) -> glUniform1fv
    void glUniform1i(int,int) -> glUniform1i
    void glUniform1iv(int,int,java.nio.IntBuffer) -> glUniform1iv
    void glUniform1iv(int,int,int[],int) -> glUniform1iv
    void glUniform2f(int,float,float) -> glUniform2f
    void glUniform2fv(int,int,java.nio.FloatBuffer) -> glUniform2fv
    void glUniform2fv(int,int,float[],int) -> glUniform2fv
    void glUniform2i(int,int,int) -> glUniform2i
    void glUniform2iv(int,int,java.nio.IntBuffer) -> glUniform2iv
    void glUniform2iv(int,int,int[],int) -> glUniform2iv
    void glUniform3f(int,float,float,float) -> glUniform3f
    void glUniform3fv(int,int,java.nio.FloatBuffer) -> glUniform3fv
    void glUniform3fv(int,int,float[],int) -> glUniform3fv
    void glUniform3i(int,int,int,int) -> glUniform3i
    void glUniform3iv(int,int,java.nio.IntBuffer) -> glUniform3iv
    void glUniform3iv(int,int,int[],int) -> glUniform3iv
    void glUniform4f(int,float,float,float,float) -> glUniform4f
    void glUniform4fv(int,int,java.nio.FloatBuffer) -> glUniform4fv
    void glUniform4fv(int,int,float[],int) -> glUniform4fv
    void glUniform4i(int,int,int,int,int) -> glUniform4i
    void glUniform4iv(int,int,java.nio.IntBuffer) -> glUniform4iv
    void glUniform4iv(int,int,int[],int) -> glUniform4iv
    void glUniformMatrix2fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix2fv
    void glUniformMatrix2fv(int,int,boolean,float[],int) -> glUniformMatrix2fv
    void glUniformMatrix3fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix3fv
    void glUniformMatrix3fv(int,int,boolean,float[],int) -> glUniformMatrix3fv
    void glUniformMatrix4fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix4fv
    void glUniformMatrix4fv(int,int,boolean,float[],int) -> glUniformMatrix4fv
    void glUseProgram(int) -> glUseProgram
    void glValidateProgram(int) -> glValidateProgram
    void glVertexAttrib1f(int,float) -> glVertexAttrib1f
    void glVertexAttrib1fv(int,java.nio.FloatBuffer) -> glVertexAttrib1fv
    void glVertexAttrib1fv(int,float[],int) -> glVertexAttrib1fv
    void glVertexAttrib2f(int,float,float) -> glVertexAttrib2f
    void glVertexAttrib2fv(int,java.nio.FloatBuffer) -> glVertexAttrib2fv
    void glVertexAttrib2fv(int,float[],int) -> glVertexAttrib2fv
    void glVertexAttrib3f(int,float,float,float) -> glVertexAttrib3f
    void glVertexAttrib3fv(int,java.nio.FloatBuffer) -> glVertexAttrib3fv
    void glVertexAttrib3fv(int,float[],int) -> glVertexAttrib3fv
    void glVertexAttrib4f(int,float,float,float,float) -> glVertexAttrib4f
    void glVertexAttrib4fv(int,java.nio.FloatBuffer) -> glVertexAttrib4fv
    void glVertexAttrib4fv(int,float[],int) -> glVertexAttrib4fv
    void glVertexAttribPointer(int,int,int,boolean,int,long) -> glVertexAttribPointer
    void glReleaseShaderCompiler() -> glReleaseShaderCompiler
    void glShaderBinary(int,java.nio.IntBuffer,int,java.nio.Buffer,int) -> glShaderBinary
    void glShaderBinary(int,int[],int,int,java.nio.Buffer,int) -> glShaderBinary
    void glGetShaderPrecisionFormat(int,int,java.nio.IntBuffer,java.nio.IntBuffer) -> glGetShaderPrecisionFormat
    void glGetShaderPrecisionFormat(int,int,int[],int,int[],int) -> glGetShaderPrecisionFormat
    void glDepthRangef(float,float) -> glDepthRangef
    void glDepthRange(double,double) -> glDepthRange
    void glClearDepthf(float) -> glClearDepthf
    void glClearDepth(double) -> glClearDepth
    void glVertexAttribPointer(javax.media.opengl.GLArrayData) -> glVertexAttribPointer
    void glUniform(javax.media.opengl.GLUniformData) -> glUniform
javax.media.opengl.GL2ES3 -> javax.media.opengl.GL2ES3:
    int GL_GREEN -> GL_GREEN
    int GL_BLUE -> GL_BLUE
    int GL_READ_BUFFER -> GL_READ_BUFFER
    int GL_COLOR -> GL_COLOR
    int GL_DEPTH -> GL_DEPTH
    int GL_STENCIL -> GL_STENCIL
    int GL_PACK_ROW_LENGTH -> GL_PACK_ROW_LENGTH
    int GL_PACK_SKIP_PIXELS -> GL_PACK_SKIP_PIXELS
    int GL_PACK_SKIP_ROWS -> GL_PACK_SKIP_ROWS
    int GL_MIN -> GL_MIN
    int GL_MAX -> GL_MAX
    int GL_UNPACK_SKIP_IMAGES -> GL_UNPACK_SKIP_IMAGES
    int GL_UNPACK_IMAGE_HEIGHT -> GL_UNPACK_IMAGE_HEIGHT
    int GL_MAX_ELEMENTS_VERTICES -> GL_MAX_ELEMENTS_VERTICES
    int GL_MAX_ELEMENTS_INDICES -> GL_MAX_ELEMENTS_INDICES
    int GL_TEXTURE_MIN_LOD -> GL_TEXTURE_MIN_LOD
    int GL_TEXTURE_MAX_LOD -> GL_TEXTURE_MAX_LOD
    int GL_TEXTURE_BASE_LEVEL -> GL_TEXTURE_BASE_LEVEL
    int GL_TEXTURE_MAX_LEVEL -> GL_TEXTURE_MAX_LEVEL
    int GL_MAX_TEXTURE_LOD_BIAS -> GL_MAX_TEXTURE_LOD_BIAS
    int GL_STREAM_READ -> GL_STREAM_READ
    int GL_STREAM_COPY -> GL_STREAM_COPY
    int GL_STATIC_READ -> GL_STATIC_READ
    int GL_STATIC_COPY -> GL_STATIC_COPY
    int GL_DYNAMIC_READ -> GL_DYNAMIC_READ
    int GL_DYNAMIC_COPY -> GL_DYNAMIC_COPY
    int GL_MAX_FRAGMENT_UNIFORM_COMPONENTS -> GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
    int GL_MAX_VERTEX_UNIFORM_COMPONENTS -> GL_MAX_VERTEX_UNIFORM_COMPONENTS
    int GL_PIXEL_PACK_BUFFER -> GL_PIXEL_PACK_BUFFER
    int GL_PIXEL_UNPACK_BUFFER -> GL_PIXEL_UNPACK_BUFFER
    int GL_PIXEL_PACK_BUFFER_BINDING -> GL_PIXEL_PACK_BUFFER_BINDING
    int GL_PIXEL_UNPACK_BUFFER_BINDING -> GL_PIXEL_UNPACK_BUFFER_BINDING
    int GL_FLOAT_MAT2x3 -> GL_FLOAT_MAT2x3
    int GL_FLOAT_MAT2x4 -> GL_FLOAT_MAT2x4
    int GL_FLOAT_MAT3x2 -> GL_FLOAT_MAT3x2
    int GL_FLOAT_MAT3x4 -> GL_FLOAT_MAT3x4
    int GL_FLOAT_MAT4x2 -> GL_FLOAT_MAT4x2
    int GL_FLOAT_MAT4x3 -> GL_FLOAT_MAT4x3
    int GL_SRGB8 -> GL_SRGB8
    int GL_MAJOR_VERSION -> GL_MAJOR_VERSION
    int GL_MINOR_VERSION -> GL_MINOR_VERSION
    int GL_NUM_EXTENSIONS -> GL_NUM_EXTENSIONS
    int GL_VERTEX_ATTRIB_ARRAY_INTEGER -> GL_VERTEX_ATTRIB_ARRAY_INTEGER
    int GL_MIN_PROGRAM_TEXEL_OFFSET -> GL_MIN_PROGRAM_TEXEL_OFFSET
    int GL_MAX_PROGRAM_TEXEL_OFFSET -> GL_MAX_PROGRAM_TEXEL_OFFSET
    int GL_MAX_VARYING_COMPONENTS -> GL_MAX_VARYING_COMPONENTS
    int GL_RGB9_E5 -> GL_RGB9_E5
    int GL_UNSIGNED_INT_5_9_9_9_REV -> GL_UNSIGNED_INT_5_9_9_9_REV
    int GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH -> GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
    int GL_TRANSFORM_FEEDBACK_BUFFER_MODE -> GL_TRANSFORM_FEEDBACK_BUFFER_MODE
    int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS -> GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
    int GL_TRANSFORM_FEEDBACK_VARYINGS -> GL_TRANSFORM_FEEDBACK_VARYINGS
    int GL_TRANSFORM_FEEDBACK_BUFFER_START -> GL_TRANSFORM_FEEDBACK_BUFFER_START
    int GL_TRANSFORM_FEEDBACK_BUFFER_SIZE -> GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
    int GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN -> GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
    int GL_RASTERIZER_DISCARD -> GL_RASTERIZER_DISCARD
    int GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS -> GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
    int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS -> GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
    int GL_INTERLEAVED_ATTRIBS -> GL_INTERLEAVED_ATTRIBS
    int GL_SEPARATE_ATTRIBS -> GL_SEPARATE_ATTRIBS
    int GL_TRANSFORM_FEEDBACK_BUFFER -> GL_TRANSFORM_FEEDBACK_BUFFER
    int GL_TRANSFORM_FEEDBACK_BUFFER_BINDING -> GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
    int GL_RGBA32UI -> GL_RGBA32UI
    int GL_RGB32UI -> GL_RGB32UI
    int GL_RGBA16UI -> GL_RGBA16UI
    int GL_RGB16UI -> GL_RGB16UI
    int GL_RGBA8UI -> GL_RGBA8UI
    int GL_RGB8UI -> GL_RGB8UI
    int GL_RGBA32I -> GL_RGBA32I
    int GL_RGB32I -> GL_RGB32I
    int GL_RGBA16I -> GL_RGBA16I
    int GL_RGB16I -> GL_RGB16I
    int GL_RGBA8I -> GL_RGBA8I
    int GL_RGB8I -> GL_RGB8I
    int GL_RED_INTEGER -> GL_RED_INTEGER
    int GL_RGB_INTEGER -> GL_RGB_INTEGER
    int GL_RGBA_INTEGER -> GL_RGBA_INTEGER
    int GL_SAMPLER_2D_ARRAY_SHADOW -> GL_SAMPLER_2D_ARRAY_SHADOW
    int GL_SAMPLER_CUBE_SHADOW -> GL_SAMPLER_CUBE_SHADOW
    int GL_UNSIGNED_INT_VEC2 -> GL_UNSIGNED_INT_VEC2
    int GL_UNSIGNED_INT_VEC3 -> GL_UNSIGNED_INT_VEC3
    int GL_UNSIGNED_INT_VEC4 -> GL_UNSIGNED_INT_VEC4
    int GL_INT_SAMPLER_2D -> GL_INT_SAMPLER_2D
    int GL_INT_SAMPLER_3D -> GL_INT_SAMPLER_3D
    int GL_INT_SAMPLER_CUBE -> GL_INT_SAMPLER_CUBE
    int GL_INT_SAMPLER_2D_ARRAY -> GL_INT_SAMPLER_2D_ARRAY
    int GL_UNSIGNED_INT_SAMPLER_2D -> GL_UNSIGNED_INT_SAMPLER_2D
    int GL_UNSIGNED_INT_SAMPLER_3D -> GL_UNSIGNED_INT_SAMPLER_3D
    int GL_UNSIGNED_INT_SAMPLER_CUBE -> GL_UNSIGNED_INT_SAMPLER_CUBE
    int GL_UNSIGNED_INT_SAMPLER_2D_ARRAY -> GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
    int GL_BUFFER_ACCESS_FLAGS -> GL_BUFFER_ACCESS_FLAGS
    int GL_BUFFER_MAP_LENGTH -> GL_BUFFER_MAP_LENGTH
    int GL_BUFFER_MAP_OFFSET -> GL_BUFFER_MAP_OFFSET
    int GL_DEPTH_COMPONENT32F -> GL_DEPTH_COMPONENT32F
    int GL_DEPTH32F_STENCIL8 -> GL_DEPTH32F_STENCIL8
    int GL_FLOAT_32_UNSIGNED_INT_24_8_REV -> GL_FLOAT_32_UNSIGNED_INT_24_8_REV
    int GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE -> GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
    int GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE -> GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
    int GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE -> GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
    int GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE -> GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
    int GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE -> GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
    int GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE -> GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
    int GL_FRAMEBUFFER_DEFAULT -> GL_FRAMEBUFFER_DEFAULT
    int GL_FRAMEBUFFER_UNDEFINED -> GL_FRAMEBUFFER_UNDEFINED
    int GL_DEPTH_STENCIL_ATTACHMENT -> GL_DEPTH_STENCIL_ATTACHMENT
    int GL_DRAW_FRAMEBUFFER_BINDING -> GL_DRAW_FRAMEBUFFER_BINDING
    int GL_READ_FRAMEBUFFER -> GL_READ_FRAMEBUFFER
    int GL_DRAW_FRAMEBUFFER -> GL_DRAW_FRAMEBUFFER
    int GL_READ_FRAMEBUFFER_BINDING -> GL_READ_FRAMEBUFFER_BINDING
    int GL_RENDERBUFFER_SAMPLES -> GL_RENDERBUFFER_SAMPLES
    int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE -> GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
    int GL_MAX_SAMPLES -> GL_MAX_SAMPLES
    int GL_RG_INTEGER -> GL_RG_INTEGER
    int GL_R8I -> GL_R8I
    int GL_R8UI -> GL_R8UI
    int GL_R16I -> GL_R16I
    int GL_R16UI -> GL_R16UI
    int GL_R32I -> GL_R32I
    int GL_R32UI -> GL_R32UI
    int GL_RG8I -> GL_RG8I
    int GL_RG8UI -> GL_RG8UI
    int GL_RG16I -> GL_RG16I
    int GL_RG16UI -> GL_RG16UI
    int GL_RG32I -> GL_RG32I
    int GL_RG32UI -> GL_RG32UI
    int GL_VERTEX_ARRAY_BINDING -> GL_VERTEX_ARRAY_BINDING
    int GL_R8_SNORM -> GL_R8_SNORM
    int GL_RG8_SNORM -> GL_RG8_SNORM
    int GL_RGB8_SNORM -> GL_RGB8_SNORM
    int GL_RGBA8_SNORM -> GL_RGBA8_SNORM
    int GL_SIGNED_NORMALIZED -> GL_SIGNED_NORMALIZED
    int GL_COPY_READ_BUFFER -> GL_COPY_READ_BUFFER
    int GL_COPY_WRITE_BUFFER -> GL_COPY_WRITE_BUFFER
    int GL_UNIFORM_BUFFER -> GL_UNIFORM_BUFFER
    int GL_UNIFORM_BUFFER_BINDING -> GL_UNIFORM_BUFFER_BINDING
    int GL_UNIFORM_BUFFER_START -> GL_UNIFORM_BUFFER_START
    int GL_UNIFORM_BUFFER_SIZE -> GL_UNIFORM_BUFFER_SIZE
    int GL_MAX_VERTEX_UNIFORM_BLOCKS -> GL_MAX_VERTEX_UNIFORM_BLOCKS
    int GL_MAX_FRAGMENT_UNIFORM_BLOCKS -> GL_MAX_FRAGMENT_UNIFORM_BLOCKS
    int GL_MAX_COMBINED_UNIFORM_BLOCKS -> GL_MAX_COMBINED_UNIFORM_BLOCKS
    int GL_MAX_UNIFORM_BUFFER_BINDINGS -> GL_MAX_UNIFORM_BUFFER_BINDINGS
    int GL_MAX_UNIFORM_BLOCK_SIZE -> GL_MAX_UNIFORM_BLOCK_SIZE
    int GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS -> GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
    int GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS -> GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
    int GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT -> GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
    int GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH -> GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
    int GL_ACTIVE_UNIFORM_BLOCKS -> GL_ACTIVE_UNIFORM_BLOCKS
    int GL_UNIFORM_TYPE -> GL_UNIFORM_TYPE
    int GL_UNIFORM_SIZE -> GL_UNIFORM_SIZE
    int GL_UNIFORM_NAME_LENGTH -> GL_UNIFORM_NAME_LENGTH
    int GL_UNIFORM_BLOCK_INDEX -> GL_UNIFORM_BLOCK_INDEX
    int GL_UNIFORM_OFFSET -> GL_UNIFORM_OFFSET
    int GL_UNIFORM_ARRAY_STRIDE -> GL_UNIFORM_ARRAY_STRIDE
    int GL_UNIFORM_MATRIX_STRIDE -> GL_UNIFORM_MATRIX_STRIDE
    int GL_UNIFORM_IS_ROW_MAJOR -> GL_UNIFORM_IS_ROW_MAJOR
    int GL_UNIFORM_BLOCK_BINDING -> GL_UNIFORM_BLOCK_BINDING
    int GL_UNIFORM_BLOCK_DATA_SIZE -> GL_UNIFORM_BLOCK_DATA_SIZE
    int GL_UNIFORM_BLOCK_NAME_LENGTH -> GL_UNIFORM_BLOCK_NAME_LENGTH
    int GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS -> GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
    int GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES -> GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
    int GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER -> GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
    int GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER -> GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
    int GL_COPY_READ_BUFFER_BINDING -> GL_COPY_READ_BUFFER_BINDING
    int GL_COPY_WRITE_BUFFER_BINDING -> GL_COPY_WRITE_BUFFER_BINDING
    int GL_TRANSFORM_FEEDBACK_PAUSED -> GL_TRANSFORM_FEEDBACK_PAUSED
    int GL_TRANSFORM_FEEDBACK_ACTIVE -> GL_TRANSFORM_FEEDBACK_ACTIVE
    int GL_COMPRESSED_RGBA_ASTC_4x4_KHR -> GL_COMPRESSED_RGBA_ASTC_4x4_KHR
    int GL_COMPRESSED_RGBA_ASTC_5x4_KHR -> GL_COMPRESSED_RGBA_ASTC_5x4_KHR
    int GL_COMPRESSED_RGBA_ASTC_5x5_KHR -> GL_COMPRESSED_RGBA_ASTC_5x5_KHR
    int GL_COMPRESSED_RGBA_ASTC_6x5_KHR -> GL_COMPRESSED_RGBA_ASTC_6x5_KHR
    int GL_COMPRESSED_RGBA_ASTC_6x6_KHR -> GL_COMPRESSED_RGBA_ASTC_6x6_KHR
    int GL_COMPRESSED_RGBA_ASTC_8x5_KHR -> GL_COMPRESSED_RGBA_ASTC_8x5_KHR
    int GL_COMPRESSED_RGBA_ASTC_8x6_KHR -> GL_COMPRESSED_RGBA_ASTC_8x6_KHR
    int GL_COMPRESSED_RGBA_ASTC_8x8_KHR -> GL_COMPRESSED_RGBA_ASTC_8x8_KHR
    int GL_COMPRESSED_RGBA_ASTC_10x5_KHR -> GL_COMPRESSED_RGBA_ASTC_10x5_KHR
    int GL_COMPRESSED_RGBA_ASTC_10x6_KHR -> GL_COMPRESSED_RGBA_ASTC_10x6_KHR
    int GL_COMPRESSED_RGBA_ASTC_10x8_KHR -> GL_COMPRESSED_RGBA_ASTC_10x8_KHR
    int GL_COMPRESSED_RGBA_ASTC_10x10_KHR -> GL_COMPRESSED_RGBA_ASTC_10x10_KHR
    int GL_COMPRESSED_RGBA_ASTC_12x10_KHR -> GL_COMPRESSED_RGBA_ASTC_12x10_KHR
    int GL_COMPRESSED_RGBA_ASTC_12x12_KHR -> GL_COMPRESSED_RGBA_ASTC_12x12_KHR
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR -> GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR -> GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR -> GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR -> GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR -> GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR -> GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR -> GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR -> GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR -> GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR -> GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR -> GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR -> GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR -> GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR -> GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR
    int GL_INVALID_INDEX -> GL_INVALID_INDEX
    long GL_TIMEOUT_IGNORED -> GL_TIMEOUT_IGNORED
    int GL_ALL_BARRIER_BITS -> GL_ALL_BARRIER_BITS
    void glBeginTransformFeedback(int) -> glBeginTransformFeedback
    void glBindBufferBase(int,int,int) -> glBindBufferBase
    void glBindBufferRange(int,int,int,long,long) -> glBindBufferRange
    void glBindVertexArray(int) -> glBindVertexArray
    void glBlitFramebuffer(int,int,int,int,int,int,int,int,int,int) -> glBlitFramebuffer
    void glClearBufferfi(int,int,float,int) -> glClearBufferfi
    void glClearBufferfv(int,int,java.nio.FloatBuffer) -> glClearBufferfv
    void glClearBufferfv(int,int,float[],int) -> glClearBufferfv
    void glClearBufferiv(int,int,java.nio.IntBuffer) -> glClearBufferiv
    void glClearBufferiv(int,int,int[],int) -> glClearBufferiv
    void glClearBufferuiv(int,int,java.nio.IntBuffer) -> glClearBufferuiv
    void glClearBufferuiv(int,int,int[],int) -> glClearBufferuiv
    void glCopyBufferSubData(int,int,long,long,long) -> glCopyBufferSubData
    void glDeleteVertexArrays(int,java.nio.IntBuffer) -> glDeleteVertexArrays
    void glDeleteVertexArrays(int,int[],int) -> glDeleteVertexArrays
    void glDrawArraysInstanced(int,int,int,int) -> glDrawArraysInstanced
    void glDrawBuffers(int,java.nio.IntBuffer) -> glDrawBuffers
    void glDrawBuffers(int,int[],int) -> glDrawBuffers
    void glDrawElementsInstanced(int,int,int,long,int) -> glDrawElementsInstanced
    void glDrawRangeElements(int,int,int,int,int,long) -> glDrawRangeElements
    void glEndTransformFeedback() -> glEndTransformFeedback
    void glFramebufferTextureLayer(int,int,int,int,int) -> glFramebufferTextureLayer
    void glGenVertexArrays(int,java.nio.IntBuffer) -> glGenVertexArrays
    void glGenVertexArrays(int,int[],int) -> glGenVertexArrays
    void glGetActiveUniformBlockName(int,int,int,java.nio.IntBuffer,java.nio.ByteBuffer) -> glGetActiveUniformBlockName
    void glGetActiveUniformBlockName(int,int,int,int[],int,byte[],int) -> glGetActiveUniformBlockName
    void glGetActiveUniformBlockiv(int,int,int,java.nio.IntBuffer) -> glGetActiveUniformBlockiv
    void glGetActiveUniformBlockiv(int,int,int,int[],int) -> glGetActiveUniformBlockiv
    void glGetActiveUniformsiv(int,int,java.nio.IntBuffer,int,java.nio.IntBuffer) -> glGetActiveUniformsiv
    void glGetActiveUniformsiv(int,int,int[],int,int,int[],int) -> glGetActiveUniformsiv
    int glGetFragDataLocation(int,java.lang.String) -> glGetFragDataLocation
    void glGetIntegeri_v(int,int,java.nio.IntBuffer) -> glGetIntegeri_v
    void glGetIntegeri_v(int,int,int[],int) -> glGetIntegeri_v
    void glGetInternalformativ(int,int,int,int,java.nio.IntBuffer) -> glGetInternalformativ
    void glGetInternalformativ(int,int,int,int,int[],int) -> glGetInternalformativ
    java.lang.String glGetStringi(int,int) -> glGetStringi
    void glGetTransformFeedbackVarying(int,int,int,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.ByteBuffer) -> glGetTransformFeedbackVarying
    void glGetTransformFeedbackVarying(int,int,int,int[],int,int[],int,int[],int,byte[],int) -> glGetTransformFeedbackVarying
    int glGetUniformBlockIndex(int,java.lang.String) -> glGetUniformBlockIndex
    void glGetUniformIndices(int,int,java.lang.String[],java.nio.IntBuffer) -> glGetUniformIndices
    void glGetUniformIndices(int,int,java.lang.String[],int[],int) -> glGetUniformIndices
    void glGetUniformuiv(int,int,java.nio.IntBuffer) -> glGetUniformuiv
    void glGetUniformuiv(int,int,int[],int) -> glGetUniformuiv
    void glGetVertexAttribIiv(int,int,java.nio.IntBuffer) -> glGetVertexAttribIiv
    void glGetVertexAttribIiv(int,int,int[],int) -> glGetVertexAttribIiv
    void glGetVertexAttribIuiv(int,int,java.nio.IntBuffer) -> glGetVertexAttribIuiv
    void glGetVertexAttribIuiv(int,int,int[],int) -> glGetVertexAttribIuiv
    boolean glIsVertexArray(int) -> glIsVertexArray
    void glReadBuffer(int) -> glReadBuffer
    void glRenderbufferStorageMultisample(int,int,int,int,int) -> glRenderbufferStorageMultisample
    void glTransformFeedbackVaryings(int,int,java.lang.String[],int) -> glTransformFeedbackVaryings
    void glUniform1ui(int,int) -> glUniform1ui
    void glUniform1uiv(int,int,java.nio.IntBuffer) -> glUniform1uiv
    void glUniform1uiv(int,int,int[],int) -> glUniform1uiv
    void glUniform2ui(int,int,int) -> glUniform2ui
    void glUniform2uiv(int,int,java.nio.IntBuffer) -> glUniform2uiv
    void glUniform2uiv(int,int,int[],int) -> glUniform2uiv
    void glUniform3ui(int,int,int,int) -> glUniform3ui
    void glUniform3uiv(int,int,java.nio.IntBuffer) -> glUniform3uiv
    void glUniform3uiv(int,int,int[],int) -> glUniform3uiv
    void glUniform4ui(int,int,int,int,int) -> glUniform4ui
    void glUniform4uiv(int,int,java.nio.IntBuffer) -> glUniform4uiv
    void glUniform4uiv(int,int,int[],int) -> glUniform4uiv
    void glUniformBlockBinding(int,int,int) -> glUniformBlockBinding
    void glUniformMatrix2x3fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix2x3fv
    void glUniformMatrix2x3fv(int,int,boolean,float[],int) -> glUniformMatrix2x3fv
    void glUniformMatrix2x4fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix2x4fv
    void glUniformMatrix2x4fv(int,int,boolean,float[],int) -> glUniformMatrix2x4fv
    void glUniformMatrix3x2fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix3x2fv
    void glUniformMatrix3x2fv(int,int,boolean,float[],int) -> glUniformMatrix3x2fv
    void glUniformMatrix3x4fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix3x4fv
    void glUniformMatrix3x4fv(int,int,boolean,float[],int) -> glUniformMatrix3x4fv
    void glUniformMatrix4x2fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix4x2fv
    void glUniformMatrix4x2fv(int,int,boolean,float[],int) -> glUniformMatrix4x2fv
    void glUniformMatrix4x3fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix4x3fv
    void glUniformMatrix4x3fv(int,int,boolean,float[],int) -> glUniformMatrix4x3fv
    void glVertexAttribI4i(int,int,int,int,int) -> glVertexAttribI4i
    void glVertexAttribI4iv(int,java.nio.IntBuffer) -> glVertexAttribI4iv
    void glVertexAttribI4iv(int,int[],int) -> glVertexAttribI4iv
    void glVertexAttribI4ui(int,int,int,int,int) -> glVertexAttribI4ui
    void glVertexAttribI4uiv(int,java.nio.IntBuffer) -> glVertexAttribI4uiv
    void glVertexAttribI4uiv(int,int[],int) -> glVertexAttribI4uiv
    void glVertexAttribIPointer(int,int,int,int,long) -> glVertexAttribIPointer
    boolean isPBOPackBound() -> isPBOPackBound
    boolean isPBOUnpackBound() -> isPBOUnpackBound
javax.media.opengl.GL2GL3 -> javax.media.opengl.GL2GL3:
    int GL_DOUBLE -> GL_DOUBLE
    int GL_QUADS -> GL_QUADS
    int GL_POINT_SIZE_GRANULARITY -> GL_POINT_SIZE_GRANULARITY
    int GL_POINT_SIZE_RANGE -> GL_POINT_SIZE_RANGE
    int GL_LINE_WIDTH_GRANULARITY -> GL_LINE_WIDTH_GRANULARITY
    int GL_LINE_WIDTH_RANGE -> GL_LINE_WIDTH_RANGE
    int GL_POINT -> GL_POINT
    int GL_LINE -> GL_LINE
    int GL_FILL -> GL_FILL
    int GL_POLYGON_MODE -> GL_POLYGON_MODE
    int GL_POLYGON_SMOOTH -> GL_POLYGON_SMOOTH
    int GL_POLYGON_OFFSET_POINT -> GL_POLYGON_OFFSET_POINT
    int GL_POLYGON_OFFSET_LINE -> GL_POLYGON_OFFSET_LINE
    int GL_LEFT -> GL_LEFT
    int GL_RIGHT -> GL_RIGHT
    int GL_FRONT_LEFT -> GL_FRONT_LEFT
    int GL_FRONT_RIGHT -> GL_FRONT_RIGHT
    int GL_BACK_LEFT -> GL_BACK_LEFT
    int GL_BACK_RIGHT -> GL_BACK_RIGHT
    int GL_DRAW_BUFFER -> GL_DRAW_BUFFER
    int GL_DOUBLEBUFFER -> GL_DOUBLEBUFFER
    int GL_STEREO -> GL_STEREO
    int GL_POLYGON_SMOOTH_HINT -> GL_POLYGON_SMOOTH_HINT
    int GL_PACK_LSB_FIRST -> GL_PACK_LSB_FIRST
    int GL_PACK_SWAP_BYTES -> GL_PACK_SWAP_BYTES
    int GL_UNPACK_LSB_FIRST -> GL_UNPACK_LSB_FIRST
    int GL_UNPACK_SWAP_BYTES -> GL_UNPACK_SWAP_BYTES
    int GL_TEXTURE_1D -> GL_TEXTURE_1D
    int GL_TEXTURE_BORDER_COLOR -> GL_TEXTURE_BORDER_COLOR
    int GL_TEXTURE_WIDTH -> GL_TEXTURE_WIDTH
    int GL_TEXTURE_HEIGHT -> GL_TEXTURE_HEIGHT
    int GL_TEXTURE_RED_SIZE -> GL_TEXTURE_RED_SIZE
    int GL_TEXTURE_GREEN_SIZE -> GL_TEXTURE_GREEN_SIZE
    int GL_TEXTURE_BLUE_SIZE -> GL_TEXTURE_BLUE_SIZE
    int GL_TEXTURE_ALPHA_SIZE -> GL_TEXTURE_ALPHA_SIZE
    int GL_PROXY_TEXTURE_1D -> GL_PROXY_TEXTURE_1D
    int GL_PROXY_TEXTURE_2D -> GL_PROXY_TEXTURE_2D
    int GL_TEXTURE_BINDING_1D -> GL_TEXTURE_BINDING_1D
    int GL_TEXTURE_INTERNAL_FORMAT -> GL_TEXTURE_INTERNAL_FORMAT
    int GL_R3_G3_B2 -> GL_R3_G3_B2
    int GL_RGB4 -> GL_RGB4
    int GL_RGB5 -> GL_RGB5
    int GL_RGB12 -> GL_RGB12
    int GL_RGB16 -> GL_RGB16
    int GL_RGBA2 -> GL_RGBA2
    int GL_RGBA12 -> GL_RGBA12
    int GL_RGBA16 -> GL_RGBA16
    int GL_UNSIGNED_BYTE_3_3_2 -> GL_UNSIGNED_BYTE_3_3_2
    int GL_UNSIGNED_INT_8_8_8_8 -> GL_UNSIGNED_INT_8_8_8_8
    int GL_PACK_SKIP_IMAGES -> GL_PACK_SKIP_IMAGES
    int GL_PACK_IMAGE_HEIGHT -> GL_PACK_IMAGE_HEIGHT
    int GL_PROXY_TEXTURE_3D -> GL_PROXY_TEXTURE_3D
    int GL_TEXTURE_DEPTH -> GL_TEXTURE_DEPTH
    int GL_UNSIGNED_BYTE_2_3_3_REV -> GL_UNSIGNED_BYTE_2_3_3_REV
    int GL_UNSIGNED_SHORT_5_6_5_REV -> GL_UNSIGNED_SHORT_5_6_5_REV
    int GL_UNSIGNED_SHORT_4_4_4_4_REV -> GL_UNSIGNED_SHORT_4_4_4_4_REV
    int GL_UNSIGNED_SHORT_1_5_5_5_REV -> GL_UNSIGNED_SHORT_1_5_5_5_REV
    int GL_UNSIGNED_INT_8_8_8_8_REV -> GL_UNSIGNED_INT_8_8_8_8_REV
    int GL_BGR -> GL_BGR
    int GL_SMOOTH_POINT_SIZE_GRANULARITY -> GL_SMOOTH_POINT_SIZE_GRANULARITY
    int GL_SMOOTH_LINE_WIDTH_GRANULARITY -> GL_SMOOTH_LINE_WIDTH_GRANULARITY
    int GL_PROXY_TEXTURE_CUBE_MAP -> GL_PROXY_TEXTURE_CUBE_MAP
    int GL_COMPRESSED_RGB -> GL_COMPRESSED_RGB
    int GL_COMPRESSED_RGBA -> GL_COMPRESSED_RGBA
    int GL_TEXTURE_COMPRESSION_HINT -> GL_TEXTURE_COMPRESSION_HINT
    int GL_TEXTURE_COMPRESSED_IMAGE_SIZE -> GL_TEXTURE_COMPRESSED_IMAGE_SIZE
    int GL_TEXTURE_COMPRESSED -> GL_TEXTURE_COMPRESSED
    int GL_CLAMP_TO_BORDER -> GL_CLAMP_TO_BORDER
    int GL_TEXTURE_LOD_BIAS -> GL_TEXTURE_LOD_BIAS
    int GL_TEXTURE_DEPTH_SIZE -> GL_TEXTURE_DEPTH_SIZE
    int GL_QUERY_COUNTER_BITS -> GL_QUERY_COUNTER_BITS
    int GL_READ_ONLY -> GL_READ_ONLY
    int GL_READ_WRITE -> GL_READ_WRITE
    int GL_SAMPLES_PASSED -> GL_SAMPLES_PASSED
    int GL_SRC1_ALPHA -> GL_SRC1_ALPHA
    int GL_VERTEX_PROGRAM_POINT_SIZE -> GL_VERTEX_PROGRAM_POINT_SIZE
    int GL_MAX_VARYING_FLOATS -> GL_MAX_VARYING_FLOATS
    int GL_SAMPLER_1D -> GL_SAMPLER_1D
    int GL_SAMPLER_1D_SHADOW -> GL_SAMPLER_1D_SHADOW
    int GL_POINT_SPRITE_COORD_ORIGIN -> GL_POINT_SPRITE_COORD_ORIGIN
    int GL_LOWER_LEFT -> GL_LOWER_LEFT
    int GL_UPPER_LEFT -> GL_UPPER_LEFT
    int GL_COMPRESSED_SRGB -> GL_COMPRESSED_SRGB
    int GL_COMPRESSED_SRGB_ALPHA -> GL_COMPRESSED_SRGB_ALPHA
    int GL_CLIP_DISTANCE0 -> GL_CLIP_DISTANCE0
    int GL_CLIP_DISTANCE1 -> GL_CLIP_DISTANCE1
    int GL_CLIP_DISTANCE2 -> GL_CLIP_DISTANCE2
    int GL_CLIP_DISTANCE3 -> GL_CLIP_DISTANCE3
    int GL_CLIP_DISTANCE4 -> GL_CLIP_DISTANCE4
    int GL_CLIP_DISTANCE5 -> GL_CLIP_DISTANCE5
    int GL_CLIP_DISTANCE6 -> GL_CLIP_DISTANCE6
    int GL_CLIP_DISTANCE7 -> GL_CLIP_DISTANCE7
    int GL_MAX_CLIP_DISTANCES -> GL_MAX_CLIP_DISTANCES
    int GL_CONTEXT_FLAGS -> GL_CONTEXT_FLAGS
    int GL_COMPRESSED_RED -> GL_COMPRESSED_RED
    int GL_COMPRESSED_RG -> GL_COMPRESSED_RG
    int GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT -> GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
    int GL_CLAMP_READ_COLOR -> GL_CLAMP_READ_COLOR
    int GL_FIXED_ONLY -> GL_FIXED_ONLY
    int GL_TEXTURE_1D_ARRAY -> GL_TEXTURE_1D_ARRAY
    int GL_PROXY_TEXTURE_1D_ARRAY -> GL_PROXY_TEXTURE_1D_ARRAY
    int GL_PROXY_TEXTURE_2D_ARRAY -> GL_PROXY_TEXTURE_2D_ARRAY
    int GL_TEXTURE_BINDING_1D_ARRAY -> GL_TEXTURE_BINDING_1D_ARRAY
    int GL_TEXTURE_SHARED_SIZE -> GL_TEXTURE_SHARED_SIZE
    int GL_PRIMITIVES_GENERATED -> GL_PRIMITIVES_GENERATED
    int GL_GREEN_INTEGER -> GL_GREEN_INTEGER
    int GL_BLUE_INTEGER -> GL_BLUE_INTEGER
    int GL_BGR_INTEGER -> GL_BGR_INTEGER
    int GL_BGRA_INTEGER -> GL_BGRA_INTEGER
    int GL_SAMPLER_1D_ARRAY -> GL_SAMPLER_1D_ARRAY
    int GL_SAMPLER_1D_ARRAY_SHADOW -> GL_SAMPLER_1D_ARRAY_SHADOW
    int GL_INT_SAMPLER_1D -> GL_INT_SAMPLER_1D
    int GL_INT_SAMPLER_1D_ARRAY -> GL_INT_SAMPLER_1D_ARRAY
    int GL_UNSIGNED_INT_SAMPLER_1D -> GL_UNSIGNED_INT_SAMPLER_1D
    int GL_UNSIGNED_INT_SAMPLER_1D_ARRAY -> GL_UNSIGNED_INT_SAMPLER_1D_ARRAY
    int GL_QUERY_WAIT -> GL_QUERY_WAIT
    int GL_QUERY_NO_WAIT -> GL_QUERY_NO_WAIT
    int GL_QUERY_BY_REGION_WAIT -> GL_QUERY_BY_REGION_WAIT
    int GL_QUERY_BY_REGION_NO_WAIT -> GL_QUERY_BY_REGION_NO_WAIT
    int GL_TEXTURE_STENCIL_SIZE -> GL_TEXTURE_STENCIL_SIZE
    int GL_TEXTURE_RED_TYPE -> GL_TEXTURE_RED_TYPE
    int GL_TEXTURE_GREEN_TYPE -> GL_TEXTURE_GREEN_TYPE
    int GL_TEXTURE_BLUE_TYPE -> GL_TEXTURE_BLUE_TYPE
    int GL_TEXTURE_ALPHA_TYPE -> GL_TEXTURE_ALPHA_TYPE
    int GL_TEXTURE_DEPTH_TYPE -> GL_TEXTURE_DEPTH_TYPE
    int GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER -> GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
    int GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER -> GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
    int GL_STENCIL_INDEX16 -> GL_STENCIL_INDEX16
    int GL_FRAMEBUFFER_SRGB -> GL_FRAMEBUFFER_SRGB
    int GL_COMPRESSED_RED_RGTC1 -> GL_COMPRESSED_RED_RGTC1
    int GL_COMPRESSED_SIGNED_RED_RGTC1 -> GL_COMPRESSED_SIGNED_RED_RGTC1
    int GL_COMPRESSED_RG_RGTC2 -> GL_COMPRESSED_RG_RGTC2
    int GL_COMPRESSED_SIGNED_RG_RGTC2 -> GL_COMPRESSED_SIGNED_RG_RGTC2
    int GL_R16 -> GL_R16
    int GL_RG16 -> GL_RG16
    int GL_SAMPLER_2D_RECT -> GL_SAMPLER_2D_RECT
    int GL_SAMPLER_2D_RECT_SHADOW -> GL_SAMPLER_2D_RECT_SHADOW
    int GL_SAMPLER_BUFFER -> GL_SAMPLER_BUFFER
    int GL_INT_SAMPLER_2D_RECT -> GL_INT_SAMPLER_2D_RECT
    int GL_INT_SAMPLER_BUFFER -> GL_INT_SAMPLER_BUFFER
    int GL_UNSIGNED_INT_SAMPLER_2D_RECT -> GL_UNSIGNED_INT_SAMPLER_2D_RECT
    int GL_UNSIGNED_INT_SAMPLER_BUFFER -> GL_UNSIGNED_INT_SAMPLER_BUFFER
    int GL_TEXTURE_BUFFER -> GL_TEXTURE_BUFFER
    int GL_MAX_TEXTURE_BUFFER_SIZE -> GL_MAX_TEXTURE_BUFFER_SIZE
    int GL_TEXTURE_BINDING_BUFFER -> GL_TEXTURE_BINDING_BUFFER
    int GL_TEXTURE_BUFFER_DATA_STORE_BINDING -> GL_TEXTURE_BUFFER_DATA_STORE_BINDING
    int GL_TEXTURE_RECTANGLE -> GL_TEXTURE_RECTANGLE
    int GL_TEXTURE_BINDING_RECTANGLE -> GL_TEXTURE_BINDING_RECTANGLE
    int GL_PROXY_TEXTURE_RECTANGLE -> GL_PROXY_TEXTURE_RECTANGLE
    int GL_MAX_RECTANGLE_TEXTURE_SIZE -> GL_MAX_RECTANGLE_TEXTURE_SIZE
    int GL_RED_SNORM -> GL_RED_SNORM
    int GL_RG_SNORM -> GL_RG_SNORM
    int GL_RGB_SNORM -> GL_RGB_SNORM
    int GL_RGBA_SNORM -> GL_RGBA_SNORM
    int GL_R16_SNORM -> GL_R16_SNORM
    int GL_RG16_SNORM -> GL_RG16_SNORM
    int GL_RGB16_SNORM -> GL_RGB16_SNORM
    int GL_RGBA16_SNORM -> GL_RGBA16_SNORM
    int GL_PRIMITIVE_RESTART -> GL_PRIMITIVE_RESTART
    int GL_PRIMITIVE_RESTART_INDEX -> GL_PRIMITIVE_RESTART_INDEX
    int GL_SYNC_CL_EVENT_ARB -> GL_SYNC_CL_EVENT_ARB
    int GL_SYNC_CL_EVENT_COMPLETE_ARB -> GL_SYNC_CL_EVENT_COMPLETE_ARB
    int GL_COMPUTE_SHADER_BIT -> GL_COMPUTE_SHADER_BIT
    int GL_LINES_ADJACENCY_ARB -> GL_LINES_ADJACENCY_ARB
    int GL_LINE_STRIP_ADJACENCY_ARB -> GL_LINE_STRIP_ADJACENCY_ARB
    int GL_TRIANGLES_ADJACENCY_ARB -> GL_TRIANGLES_ADJACENCY_ARB
    int GL_TRIANGLE_STRIP_ADJACENCY_ARB -> GL_TRIANGLE_STRIP_ADJACENCY_ARB
    int GL_PROGRAM_POINT_SIZE_ARB -> GL_PROGRAM_POINT_SIZE_ARB
    int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB -> GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB
    int GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB -> GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB
    int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB -> GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB
    int GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB -> GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB
    int GL_GEOMETRY_SHADER_ARB -> GL_GEOMETRY_SHADER_ARB
    int GL_GEOMETRY_VERTICES_OUT_ARB -> GL_GEOMETRY_VERTICES_OUT_ARB
    int GL_GEOMETRY_INPUT_TYPE_ARB -> GL_GEOMETRY_INPUT_TYPE_ARB
    int GL_GEOMETRY_OUTPUT_TYPE_ARB -> GL_GEOMETRY_OUTPUT_TYPE_ARB
    int GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB -> GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB
    int GL_MAX_VERTEX_VARYING_COMPONENTS_ARB -> GL_MAX_VERTEX_VARYING_COMPONENTS_ARB
    int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB -> GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB
    int GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB -> GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB
    int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB -> GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB
    int GL_SRGB_DECODE_ARB -> GL_SRGB_DECODE_ARB
    int GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT -> GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT
    int GL_SHADER_INCLUDE_ARB -> GL_SHADER_INCLUDE_ARB
    int GL_NAMED_STRING_LENGTH_ARB -> GL_NAMED_STRING_LENGTH_ARB
    int GL_NAMED_STRING_TYPE_ARB -> GL_NAMED_STRING_TYPE_ARB
    int GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS -> GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS
    int GL_MAX_GEOMETRY_UNIFORM_BLOCKS -> GL_MAX_GEOMETRY_UNIFORM_BLOCKS
    int GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS -> GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
    int GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER -> GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
    int GL_FACTOR_MIN_AMD -> GL_FACTOR_MIN_AMD
    int GL_FACTOR_MAX_AMD -> GL_FACTOR_MAX_AMD
    int GL_MAX_DEBUG_LOGGED_MESSAGES_AMD -> GL_MAX_DEBUG_LOGGED_MESSAGES_AMD
    int GL_DEBUG_LOGGED_MESSAGES_AMD -> GL_DEBUG_LOGGED_MESSAGES_AMD
    int GL_DEBUG_SEVERITY_HIGH_AMD -> GL_DEBUG_SEVERITY_HIGH_AMD
    int GL_DEBUG_SEVERITY_MEDIUM_AMD -> GL_DEBUG_SEVERITY_MEDIUM_AMD
    int GL_DEBUG_SEVERITY_LOW_AMD -> GL_DEBUG_SEVERITY_LOW_AMD
    int GL_DEBUG_CATEGORY_API_ERROR_AMD -> GL_DEBUG_CATEGORY_API_ERROR_AMD
    int GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD -> GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD
    int GL_DEBUG_CATEGORY_DEPRECATION_AMD -> GL_DEBUG_CATEGORY_DEPRECATION_AMD
    int GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD -> GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD
    int GL_DEBUG_CATEGORY_PERFORMANCE_AMD -> GL_DEBUG_CATEGORY_PERFORMANCE_AMD
    int GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD -> GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD
    int GL_DEBUG_CATEGORY_APPLICATION_AMD -> GL_DEBUG_CATEGORY_APPLICATION_AMD
    int GL_DEBUG_CATEGORY_OTHER_AMD -> GL_DEBUG_CATEGORY_OTHER_AMD
    int GL_DEPTH_CLAMP_NEAR_AMD -> GL_DEPTH_CLAMP_NEAR_AMD
    int GL_DEPTH_CLAMP_FAR_AMD -> GL_DEPTH_CLAMP_FAR_AMD
    int GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD -> GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD
    int GL_SUBSAMPLE_DISTANCE_AMD -> GL_SUBSAMPLE_DISTANCE_AMD
    int GL_SET_AMD -> GL_SET_AMD
    int GL_REPLACE_VALUE_AMD -> GL_REPLACE_VALUE_AMD
    int GL_STENCIL_OP_VALUE_AMD -> GL_STENCIL_OP_VALUE_AMD
    int GL_STENCIL_BACK_OP_VALUE_AMD -> GL_STENCIL_BACK_OP_VALUE_AMD
    int GL_SAMPLER_BUFFER_AMD -> GL_SAMPLER_BUFFER_AMD
    int GL_INT_SAMPLER_BUFFER_AMD -> GL_INT_SAMPLER_BUFFER_AMD
    int GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD -> GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD
    int GL_TESSELLATION_MODE_AMD -> GL_TESSELLATION_MODE_AMD
    int GL_TESSELLATION_FACTOR_AMD -> GL_TESSELLATION_FACTOR_AMD
    int GL_DISCRETE_AMD -> GL_DISCRETE_AMD
    int GL_CONTINUOUS_AMD -> GL_CONTINUOUS_AMD
    int GL_SCALED_RESOLVE_FASTEST_EXT -> GL_SCALED_RESOLVE_FASTEST_EXT
    int GL_SCALED_RESOLVE_NICEST_EXT -> GL_SCALED_RESOLVE_NICEST_EXT
    int GL_TEXTURE_SRGB_DECODE_EXT -> GL_TEXTURE_SRGB_DECODE_EXT
    int GL_DECODE_EXT -> GL_DECODE_EXT
    int GL_SKIP_DECODE_EXT -> GL_SKIP_DECODE_EXT
    int GL_SYNC_X11_FENCE_EXT -> GL_SYNC_X11_FENCE_EXT
    int GL_BUFFER_GPU_ADDRESS_NV -> GL_BUFFER_GPU_ADDRESS_NV
    int GL_GPU_ADDRESS_NV -> GL_GPU_ADDRESS_NV
    int GL_MAX_SHADER_BUFFER_ADDRESS_NV -> GL_MAX_SHADER_BUFFER_ADDRESS_NV
    int GL_TEXTURE_COVERAGE_SAMPLES_NV -> GL_TEXTURE_COVERAGE_SAMPLES_NV
    int GL_TEXTURE_COLOR_SAMPLES_NV -> GL_TEXTURE_COLOR_SAMPLES_NV
    int GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV -> GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV
    int GL_ELEMENT_ARRAY_UNIFIED_NV -> GL_ELEMENT_ARRAY_UNIFIED_NV
    int GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV -> GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV
    int GL_VERTEX_ARRAY_ADDRESS_NV -> GL_VERTEX_ARRAY_ADDRESS_NV
    int GL_NORMAL_ARRAY_ADDRESS_NV -> GL_NORMAL_ARRAY_ADDRESS_NV
    int GL_COLOR_ARRAY_ADDRESS_NV -> GL_COLOR_ARRAY_ADDRESS_NV
    int GL_INDEX_ARRAY_ADDRESS_NV -> GL_INDEX_ARRAY_ADDRESS_NV
    int GL_TEXTURE_COORD_ARRAY_ADDRESS_NV -> GL_TEXTURE_COORD_ARRAY_ADDRESS_NV
    int GL_EDGE_FLAG_ARRAY_ADDRESS_NV -> GL_EDGE_FLAG_ARRAY_ADDRESS_NV
    int GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV -> GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV
    int GL_FOG_COORD_ARRAY_ADDRESS_NV -> GL_FOG_COORD_ARRAY_ADDRESS_NV
    int GL_ELEMENT_ARRAY_ADDRESS_NV -> GL_ELEMENT_ARRAY_ADDRESS_NV
    int GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV -> GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV
    int GL_VERTEX_ARRAY_LENGTH_NV -> GL_VERTEX_ARRAY_LENGTH_NV
    int GL_NORMAL_ARRAY_LENGTH_NV -> GL_NORMAL_ARRAY_LENGTH_NV
    int GL_COLOR_ARRAY_LENGTH_NV -> GL_COLOR_ARRAY_LENGTH_NV
    int GL_INDEX_ARRAY_LENGTH_NV -> GL_INDEX_ARRAY_LENGTH_NV
    int GL_TEXTURE_COORD_ARRAY_LENGTH_NV -> GL_TEXTURE_COORD_ARRAY_LENGTH_NV
    int GL_EDGE_FLAG_ARRAY_LENGTH_NV -> GL_EDGE_FLAG_ARRAY_LENGTH_NV
    int GL_SECONDARY_COLOR_ARRAY_LENGTH_NV -> GL_SECONDARY_COLOR_ARRAY_LENGTH_NV
    int GL_FOG_COORD_ARRAY_LENGTH_NV -> GL_FOG_COORD_ARRAY_LENGTH_NV
    int GL_ELEMENT_ARRAY_LENGTH_NV -> GL_ELEMENT_ARRAY_LENGTH_NV
    int GL_DRAW_INDIRECT_UNIFIED_NV -> GL_DRAW_INDIRECT_UNIFIED_NV
    int GL_DRAW_INDIRECT_ADDRESS_NV -> GL_DRAW_INDIRECT_ADDRESS_NV
    int GL_DRAW_INDIRECT_LENGTH_NV -> GL_DRAW_INDIRECT_LENGTH_NV
    void glBeginConditionalRender(int,int) -> glBeginConditionalRender
    void glBindFragDataLocation(int,int,java.lang.String) -> glBindFragDataLocation
    void glBufferAddressRangeNV(int,int,long,long) -> glBufferAddressRangeNV
    void glClampColor(int,int) -> glClampColor
    void glClearNamedBufferDataEXT(int,int,int,int,java.nio.Buffer) -> glClearNamedBufferDataEXT
    void glClearNamedBufferSubDataEXT(int,int,int,int,long,long,java.nio.Buffer) -> glClearNamedBufferSubDataEXT
    void glColorFormatNV(int,int,int) -> glColorFormatNV
    void glColorMaski(int,boolean,boolean,boolean,boolean) -> glColorMaski
    void glCompileShaderIncludeARB(int,int,java.lang.String[],java.nio.IntBuffer) -> glCompileShaderIncludeARB
    void glCompileShaderIncludeARB(int,int,java.lang.String[],int[],int) -> glCompileShaderIncludeARB
    void glCompressedTexImage1D(int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexImage1D
    void glCompressedTexImage1D(int,int,int,int,int,int,long) -> glCompressedTexImage1D
    void glCompressedTexSubImage1D(int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexSubImage1D
    void glCompressedTexSubImage1D(int,int,int,int,int,int,long) -> glCompressedTexSubImage1D
    void glCopyTexImage1D(int,int,int,int,int,int,int) -> glCopyTexImage1D
    void glCopyTexSubImage1D(int,int,int,int,int,int) -> glCopyTexSubImage1D
    long glCreateSyncFromCLeventARB(long,long,int) -> glCreateSyncFromCLeventARB
    void glDebugMessageEnableAMD(int,int,int,java.nio.IntBuffer,boolean) -> glDebugMessageEnableAMD
    void glDebugMessageEnableAMD(int,int,int,int[],int,boolean) -> glDebugMessageEnableAMD
    void glDebugMessageInsertAMD(int,int,int,int,java.lang.String) -> glDebugMessageInsertAMD
    void glDeleteNamedStringARB(int,java.lang.String) -> glDeleteNamedStringARB
    void glDisableClientState(int) -> glDisableClientState
    void glDisablei(int,int) -> glDisablei
    void glDrawBuffer(int) -> glDrawBuffer
    void glEdgeFlagFormatNV(int) -> glEdgeFlagFormatNV
    void glEnableClientState(int) -> glEnableClientState
    void glEnablei(int,int) -> glEnablei
    void glEndConditionalRender() -> glEndConditionalRender
    void glFogCoordFormatNV(int,int) -> glFogCoordFormatNV
    void glFramebufferTexture1D(int,int,int,int,int) -> glFramebufferTexture1D
    void glFramebufferTextureARB(int,int,int,int) -> glFramebufferTextureARB
    void glFramebufferTextureFaceARB(int,int,int,int,int) -> glFramebufferTextureFaceARB
    void glFramebufferTextureLayerARB(int,int,int,int,int) -> glFramebufferTextureLayerARB
    void glGetActiveUniformName(int,int,int,java.nio.IntBuffer,java.nio.ByteBuffer) -> glGetActiveUniformName
    void glGetActiveUniformName(int,int,int,int[],int,byte[],int) -> glGetActiveUniformName
    void glGetBooleani_v(int,int,java.nio.ByteBuffer) -> glGetBooleani_v
    void glGetBooleani_v(int,int,byte[],int) -> glGetBooleani_v
    void glGetBufferParameterui64vNV(int,int,java.nio.LongBuffer) -> glGetBufferParameterui64vNV
    void glGetBufferParameterui64vNV(int,int,long[],int) -> glGetBufferParameterui64vNV
    void glGetBufferSubData(int,long,long,java.nio.Buffer) -> glGetBufferSubData
    void glGetCompressedTexImage(int,int,java.nio.Buffer) -> glGetCompressedTexImage
    void glGetCompressedTexImage(int,int,long) -> glGetCompressedTexImage
    int glGetDebugMessageLogAMD(int,int,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.ByteBuffer) -> glGetDebugMessageLogAMD
    int glGetDebugMessageLogAMD(int,int,int[],int,int[],int,int[],int,int[],int,byte[],int) -> glGetDebugMessageLogAMD
    void glGetDoublev(int,java.nio.DoubleBuffer) -> glGetDoublev
    void glGetDoublev(int,double[],int) -> glGetDoublev
    void glGetIntegerui64i_vNV(int,int,java.nio.LongBuffer) -> glGetIntegerui64i_vNV
    void glGetIntegerui64i_vNV(int,int,long[],int) -> glGetIntegerui64i_vNV
    void glGetIntegerui64vNV(int,java.nio.LongBuffer) -> glGetIntegerui64vNV
    void glGetIntegerui64vNV(int,long[],int) -> glGetIntegerui64vNV
    void glGetNamedBufferParameterui64vNV(int,int,java.nio.LongBuffer) -> glGetNamedBufferParameterui64vNV
    void glGetNamedBufferParameterui64vNV(int,int,long[],int) -> glGetNamedBufferParameterui64vNV
    void glGetNamedFramebufferParameterivEXT(int,int,java.nio.IntBuffer) -> glGetNamedFramebufferParameterivEXT
    void glGetNamedFramebufferParameterivEXT(int,int,int[],int) -> glGetNamedFramebufferParameterivEXT
    void glGetNamedStringARB(int,java.lang.String,int,java.nio.IntBuffer,java.nio.ByteBuffer) -> glGetNamedStringARB
    void glGetNamedStringARB(int,java.lang.String,int,int[],int,byte[],int) -> glGetNamedStringARB
    void glGetNamedStringivARB(int,java.lang.String,int,java.nio.IntBuffer) -> glGetNamedStringivARB
    void glGetNamedStringivARB(int,java.lang.String,int,int[],int) -> glGetNamedStringivARB
    void glGetQueryObjectiv(int,int,java.nio.IntBuffer) -> glGetQueryObjectiv
    void glGetQueryObjectiv(int,int,int[],int) -> glGetQueryObjectiv
    void glGetTexImage(int,int,int,int,java.nio.Buffer) -> glGetTexImage
    void glGetTexImage(int,int,int,int,long) -> glGetTexImage
    void glGetTexLevelParameterfv(int,int,int,java.nio.FloatBuffer) -> glGetTexLevelParameterfv
    void glGetTexLevelParameterfv(int,int,int,float[],int) -> glGetTexLevelParameterfv
    void glGetTexLevelParameteriv(int,int,int,java.nio.IntBuffer) -> glGetTexLevelParameteriv
    void glGetTexLevelParameteriv(int,int,int,int[],int) -> glGetTexLevelParameteriv
    void glGetTexParameterIiv(int,int,java.nio.IntBuffer) -> glGetTexParameterIiv
    void glGetTexParameterIiv(int,int,int[],int) -> glGetTexParameterIiv
    void glGetTexParameterIuiv(int,int,java.nio.IntBuffer) -> glGetTexParameterIuiv
    void glGetTexParameterIuiv(int,int,int[],int) -> glGetTexParameterIuiv
    void glGetUniformui64vNV(int,int,java.nio.LongBuffer) -> glGetUniformui64vNV
    void glGetUniformui64vNV(int,int,long[],int) -> glGetUniformui64vNV
    void glGetVertexAttribdv(int,int,java.nio.DoubleBuffer) -> glGetVertexAttribdv
    void glGetVertexAttribdv(int,int,double[],int) -> glGetVertexAttribdv
    void glGetnCompressedTexImage(int,int,int,java.nio.Buffer) -> glGetnCompressedTexImage
    void glGetnTexImage(int,int,int,int,int,java.nio.Buffer) -> glGetnTexImage
    void glGetnUniformdv(int,int,int,java.nio.DoubleBuffer) -> glGetnUniformdv
    void glGetnUniformdv(int,int,int,double[],int) -> glGetnUniformdv
    void glGetnUniformuiv(int,int,int,java.nio.IntBuffer) -> glGetnUniformuiv
    void glGetnUniformuiv(int,int,int,int[],int) -> glGetnUniformuiv
    long glImportSyncEXT(int,long,int) -> glImportSyncEXT
    void glIndexFormatNV(int,int) -> glIndexFormatNV
    boolean glIsBufferResidentNV(int) -> glIsBufferResidentNV
    boolean glIsEnabledi(int,int) -> glIsEnabledi
    boolean glIsNamedBufferResidentNV(int) -> glIsNamedBufferResidentNV
    boolean glIsNamedStringARB(int,java.lang.String) -> glIsNamedStringARB
    void glLogicOp(int) -> glLogicOp
    void glMakeBufferNonResidentNV(int) -> glMakeBufferNonResidentNV
    void glMakeBufferResidentNV(int,int) -> glMakeBufferResidentNV
    void glMakeNamedBufferNonResidentNV(int) -> glMakeNamedBufferNonResidentNV
    void glMakeNamedBufferResidentNV(int,int) -> glMakeNamedBufferResidentNV
    void glMultiDrawArrays(int,java.nio.IntBuffer,java.nio.IntBuffer,int) -> glMultiDrawArrays
    void glMultiDrawArrays(int,int[],int,int[],int,int) -> glMultiDrawArrays
    void glMultiDrawArraysIndirectAMD(int,java.nio.Buffer,int,int) -> glMultiDrawArraysIndirectAMD
    void glMultiDrawElements(int,java.nio.IntBuffer,int,com.jogamp.common.nio.PointerBuffer,int) -> glMultiDrawElements
    void glMultiDrawElementsIndirectAMD(int,int,java.nio.Buffer,int,int) -> glMultiDrawElementsIndirectAMD
    void glNamedFramebufferParameteriEXT(int,int,int) -> glNamedFramebufferParameteriEXT
    void glNamedStringARB(int,int,java.lang.String,int,java.lang.String) -> glNamedStringARB
    void glNormalFormatNV(int,int) -> glNormalFormatNV
    void glPixelStoref(int,float) -> glPixelStoref
    void glPointParameterf(int,float) -> glPointParameterf
    void glPointParameterfv(int,java.nio.FloatBuffer) -> glPointParameterfv
    void glPointParameterfv(int,float[],int) -> glPointParameterfv
    void glPointParameteri(int,int) -> glPointParameteri
    void glPointParameteriv(int,java.nio.IntBuffer) -> glPointParameteriv
    void glPointParameteriv(int,int[],int) -> glPointParameteriv
    void glPointSize(float) -> glPointSize
    void glPolygonMode(int,int) -> glPolygonMode
    void glPrimitiveRestartIndex(int) -> glPrimitiveRestartIndex
    void glProgramParameteriARB(int,int,int) -> glProgramParameteriARB
    void glProgramUniformui64NV(int,int,long) -> glProgramUniformui64NV
    void glProgramUniformui64vNV(int,int,int,java.nio.LongBuffer) -> glProgramUniformui64vNV
    void glProgramUniformui64vNV(int,int,int,long[],int) -> glProgramUniformui64vNV
    void glSecondaryColorFormatNV(int,int,int) -> glSecondaryColorFormatNV
    void glSetMultisamplefvAMD(int,int,java.nio.FloatBuffer) -> glSetMultisamplefvAMD
    void glSetMultisamplefvAMD(int,int,float[],int) -> glSetMultisamplefvAMD
    void glStencilOpValueAMD(int,int) -> glStencilOpValueAMD
    void glTessellationFactorAMD(float) -> glTessellationFactorAMD
    void glTessellationModeAMD(int) -> glTessellationModeAMD
    void glTexBuffer(int,int,int) -> glTexBuffer
    void glTexCoordFormatNV(int,int,int) -> glTexCoordFormatNV
    void glTexImage1D(int,int,int,int,int,int,int,java.nio.Buffer) -> glTexImage1D
    void glTexImage1D(int,int,int,int,int,int,int,long) -> glTexImage1D
    void glTexImage2DMultisampleCoverageNV(int,int,int,int,int,int,boolean) -> glTexImage2DMultisampleCoverageNV
    void glTexImage3DMultisampleCoverageNV(int,int,int,int,int,int,int,boolean) -> glTexImage3DMultisampleCoverageNV
    void glTexParameterIiv(int,int,java.nio.IntBuffer) -> glTexParameterIiv
    void glTexParameterIiv(int,int,int[],int) -> glTexParameterIiv
    void glTexParameterIuiv(int,int,java.nio.IntBuffer) -> glTexParameterIuiv
    void glTexParameterIuiv(int,int,int[],int) -> glTexParameterIuiv
    void glTexSubImage1D(int,int,int,int,int,int,java.nio.Buffer) -> glTexSubImage1D
    void glTexSubImage1D(int,int,int,int,int,int,long) -> glTexSubImage1D
    void glTextureBufferRangeEXT(int,int,int,int,long,long) -> glTextureBufferRangeEXT
    void glTextureImage2DMultisampleCoverageNV(int,int,int,int,int,int,int,boolean) -> glTextureImage2DMultisampleCoverageNV
    void glTextureImage2DMultisampleNV(int,int,int,int,int,int,boolean) -> glTextureImage2DMultisampleNV
    void glTextureImage3DMultisampleCoverageNV(int,int,int,int,int,int,int,int,boolean) -> glTextureImage3DMultisampleCoverageNV
    void glTextureImage3DMultisampleNV(int,int,int,int,int,int,int,boolean) -> glTextureImage3DMultisampleNV
    void glUniformui64NV(int,long) -> glUniformui64NV
    void glUniformui64vNV(int,int,java.nio.LongBuffer) -> glUniformui64vNV
    void glUniformui64vNV(int,int,long[],int) -> glUniformui64vNV
    void glVertexArrayBindVertexBufferEXT(int,int,int,long,int) -> glVertexArrayBindVertexBufferEXT
    void glVertexArrayVertexAttribBindingEXT(int,int,int) -> glVertexArrayVertexAttribBindingEXT
    void glVertexArrayVertexAttribFormatEXT(int,int,int,int,boolean,int) -> glVertexArrayVertexAttribFormatEXT
    void glVertexArrayVertexAttribIFormatEXT(int,int,int,int,int) -> glVertexArrayVertexAttribIFormatEXT
    void glVertexArrayVertexAttribLFormatEXT(int,int,int,int,int) -> glVertexArrayVertexAttribLFormatEXT
    void glVertexArrayVertexBindingDivisorEXT(int,int,int) -> glVertexArrayVertexBindingDivisorEXT
    void glVertexAttrib1d(int,double) -> glVertexAttrib1d
    void glVertexAttrib1dv(int,java.nio.DoubleBuffer) -> glVertexAttrib1dv
    void glVertexAttrib1dv(int,double[],int) -> glVertexAttrib1dv
    void glVertexAttrib1s(int,short) -> glVertexAttrib1s
    void glVertexAttrib1sv(int,java.nio.ShortBuffer) -> glVertexAttrib1sv
    void glVertexAttrib1sv(int,short[],int) -> glVertexAttrib1sv
    void glVertexAttrib2d(int,double,double) -> glVertexAttrib2d
    void glVertexAttrib2dv(int,java.nio.DoubleBuffer) -> glVertexAttrib2dv
    void glVertexAttrib2dv(int,double[],int) -> glVertexAttrib2dv
    void glVertexAttrib2s(int,short,short) -> glVertexAttrib2s
    void glVertexAttrib2sv(int,java.nio.ShortBuffer) -> glVertexAttrib2sv
    void glVertexAttrib2sv(int,short[],int) -> glVertexAttrib2sv
    void glVertexAttrib3d(int,double,double,double) -> glVertexAttrib3d
    void glVertexAttrib3dv(int,java.nio.DoubleBuffer) -> glVertexAttrib3dv
    void glVertexAttrib3dv(int,double[],int) -> glVertexAttrib3dv
    void glVertexAttrib3s(int,short,short,short) -> glVertexAttrib3s
    void glVertexAttrib3sv(int,java.nio.ShortBuffer) -> glVertexAttrib3sv
    void glVertexAttrib3sv(int,short[],int) -> glVertexAttrib3sv
    void glVertexAttrib4Nbv(int,java.nio.ByteBuffer) -> glVertexAttrib4Nbv
    void glVertexAttrib4Nbv(int,byte[],int) -> glVertexAttrib4Nbv
    void glVertexAttrib4Niv(int,java.nio.IntBuffer) -> glVertexAttrib4Niv
    void glVertexAttrib4Niv(int,int[],int) -> glVertexAttrib4Niv
    void glVertexAttrib4Nsv(int,java.nio.ShortBuffer) -> glVertexAttrib4Nsv
    void glVertexAttrib4Nsv(int,short[],int) -> glVertexAttrib4Nsv
    void glVertexAttrib4Nub(int,byte,byte,byte,byte) -> glVertexAttrib4Nub
    void glVertexAttrib4Nubv(int,java.nio.ByteBuffer) -> glVertexAttrib4Nubv
    void glVertexAttrib4Nubv(int,byte[],int) -> glVertexAttrib4Nubv
    void glVertexAttrib4Nuiv(int,java.nio.IntBuffer) -> glVertexAttrib4Nuiv
    void glVertexAttrib4Nuiv(int,int[],int) -> glVertexAttrib4Nuiv
    void glVertexAttrib4Nusv(int,java.nio.ShortBuffer) -> glVertexAttrib4Nusv
    void glVertexAttrib4Nusv(int,short[],int) -> glVertexAttrib4Nusv
    void glVertexAttrib4bv(int,java.nio.ByteBuffer) -> glVertexAttrib4bv
    void glVertexAttrib4bv(int,byte[],int) -> glVertexAttrib4bv
    void glVertexAttrib4d(int,double,double,double,double) -> glVertexAttrib4d
    void glVertexAttrib4dv(int,java.nio.DoubleBuffer) -> glVertexAttrib4dv
    void glVertexAttrib4dv(int,double[],int) -> glVertexAttrib4dv
    void glVertexAttrib4iv(int,java.nio.IntBuffer) -> glVertexAttrib4iv
    void glVertexAttrib4iv(int,int[],int) -> glVertexAttrib4iv
    void glVertexAttrib4s(int,short,short,short,short) -> glVertexAttrib4s
    void glVertexAttrib4sv(int,java.nio.ShortBuffer) -> glVertexAttrib4sv
    void glVertexAttrib4sv(int,short[],int) -> glVertexAttrib4sv
    void glVertexAttrib4ubv(int,java.nio.ByteBuffer) -> glVertexAttrib4ubv
    void glVertexAttrib4ubv(int,byte[],int) -> glVertexAttrib4ubv
    void glVertexAttrib4uiv(int,java.nio.IntBuffer) -> glVertexAttrib4uiv
    void glVertexAttrib4uiv(int,int[],int) -> glVertexAttrib4uiv
    void glVertexAttrib4usv(int,java.nio.ShortBuffer) -> glVertexAttrib4usv
    void glVertexAttrib4usv(int,short[],int) -> glVertexAttrib4usv
    void glVertexAttribFormatNV(int,int,int,boolean,int) -> glVertexAttribFormatNV
    void glVertexAttribI1i(int,int) -> glVertexAttribI1i
    void glVertexAttribI1iv(int,java.nio.IntBuffer) -> glVertexAttribI1iv
    void glVertexAttribI1iv(int,int[],int) -> glVertexAttribI1iv
    void glVertexAttribI1ui(int,int) -> glVertexAttribI1ui
    void glVertexAttribI1uiv(int,java.nio.IntBuffer) -> glVertexAttribI1uiv
    void glVertexAttribI1uiv(int,int[],int) -> glVertexAttribI1uiv
    void glVertexAttribI2i(int,int,int) -> glVertexAttribI2i
    void glVertexAttribI2iv(int,java.nio.IntBuffer) -> glVertexAttribI2iv
    void glVertexAttribI2iv(int,int[],int) -> glVertexAttribI2iv
    void glVertexAttribI2ui(int,int,int) -> glVertexAttribI2ui
    void glVertexAttribI2uiv(int,java.nio.IntBuffer) -> glVertexAttribI2uiv
    void glVertexAttribI2uiv(int,int[],int) -> glVertexAttribI2uiv
    void glVertexAttribI3i(int,int,int,int) -> glVertexAttribI3i
    void glVertexAttribI3iv(int,java.nio.IntBuffer) -> glVertexAttribI3iv
    void glVertexAttribI3iv(int,int[],int) -> glVertexAttribI3iv
    void glVertexAttribI3ui(int,int,int,int) -> glVertexAttribI3ui
    void glVertexAttribI3uiv(int,java.nio.IntBuffer) -> glVertexAttribI3uiv
    void glVertexAttribI3uiv(int,int[],int) -> glVertexAttribI3uiv
    void glVertexAttribI4bv(int,java.nio.ByteBuffer) -> glVertexAttribI4bv
    void glVertexAttribI4bv(int,byte[],int) -> glVertexAttribI4bv
    void glVertexAttribI4sv(int,java.nio.ShortBuffer) -> glVertexAttribI4sv
    void glVertexAttribI4sv(int,short[],int) -> glVertexAttribI4sv
    void glVertexAttribI4ubv(int,java.nio.ByteBuffer) -> glVertexAttribI4ubv
    void glVertexAttribI4ubv(int,byte[],int) -> glVertexAttribI4ubv
    void glVertexAttribI4usv(int,java.nio.ShortBuffer) -> glVertexAttribI4usv
    void glVertexAttribI4usv(int,short[],int) -> glVertexAttribI4usv
    void glVertexAttribIFormatNV(int,int,int,int) -> glVertexAttribIFormatNV
    void glVertexFormatNV(int,int,int) -> glVertexFormatNV
javax.media.opengl.GL3 -> javax.media.opengl.GL3:
    int GL_CONTEXT_CORE_PROFILE_BIT -> GL_CONTEXT_CORE_PROFILE_BIT
    int GL_CONTEXT_COMPATIBILITY_PROFILE_BIT -> GL_CONTEXT_COMPATIBILITY_PROFILE_BIT
    int GL_LINES_ADJACENCY -> GL_LINES_ADJACENCY
    int GL_LINE_STRIP_ADJACENCY -> GL_LINE_STRIP_ADJACENCY
    int GL_TRIANGLES_ADJACENCY -> GL_TRIANGLES_ADJACENCY
    int GL_TRIANGLE_STRIP_ADJACENCY -> GL_TRIANGLE_STRIP_ADJACENCY
    int GL_PROGRAM_POINT_SIZE -> GL_PROGRAM_POINT_SIZE
    int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS -> GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS
    int GL_FRAMEBUFFER_ATTACHMENT_LAYERED -> GL_FRAMEBUFFER_ATTACHMENT_LAYERED
    int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS -> GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
    int GL_GEOMETRY_SHADER -> GL_GEOMETRY_SHADER
    int GL_GEOMETRY_VERTICES_OUT -> GL_GEOMETRY_VERTICES_OUT
    int GL_GEOMETRY_INPUT_TYPE -> GL_GEOMETRY_INPUT_TYPE
    int GL_GEOMETRY_OUTPUT_TYPE -> GL_GEOMETRY_OUTPUT_TYPE
    int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS -> GL_MAX_GEOMETRY_UNIFORM_COMPONENTS
    int GL_MAX_GEOMETRY_OUTPUT_VERTICES -> GL_MAX_GEOMETRY_OUTPUT_VERTICES
    int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS -> GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS
    int GL_MAX_GEOMETRY_INPUT_COMPONENTS -> GL_MAX_GEOMETRY_INPUT_COMPONENTS
    int GL_MAX_GEOMETRY_OUTPUT_COMPONENTS -> GL_MAX_GEOMETRY_OUTPUT_COMPONENTS
    int GL_CONTEXT_PROFILE_MASK -> GL_CONTEXT_PROFILE_MASK
    int GL_DEPTH_CLAMP -> GL_DEPTH_CLAMP
    int GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION -> GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION
    int GL_FIRST_VERTEX_CONVENTION -> GL_FIRST_VERTEX_CONVENTION
    int GL_LAST_VERTEX_CONVENTION -> GL_LAST_VERTEX_CONVENTION
    int GL_PROVOKING_VERTEX -> GL_PROVOKING_VERTEX
    int GL_TEXTURE_CUBE_MAP_SEAMLESS -> GL_TEXTURE_CUBE_MAP_SEAMLESS
    int GL_SAMPLE_POSITION -> GL_SAMPLE_POSITION
    int GL_SAMPLE_MASK -> GL_SAMPLE_MASK
    int GL_SAMPLE_MASK_VALUE -> GL_SAMPLE_MASK_VALUE
    int GL_MAX_SAMPLE_MASK_WORDS -> GL_MAX_SAMPLE_MASK_WORDS
    int GL_TEXTURE_2D_MULTISAMPLE -> GL_TEXTURE_2D_MULTISAMPLE
    int GL_PROXY_TEXTURE_2D_MULTISAMPLE -> GL_PROXY_TEXTURE_2D_MULTISAMPLE
    int GL_TEXTURE_2D_MULTISAMPLE_ARRAY -> GL_TEXTURE_2D_MULTISAMPLE_ARRAY
    int GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY -> GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY
    int GL_TEXTURE_BINDING_2D_MULTISAMPLE -> GL_TEXTURE_BINDING_2D_MULTISAMPLE
    int GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY -> GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
    int GL_TEXTURE_SAMPLES -> GL_TEXTURE_SAMPLES
    int GL_TEXTURE_FIXED_SAMPLE_LOCATIONS -> GL_TEXTURE_FIXED_SAMPLE_LOCATIONS
    int GL_SAMPLER_2D_MULTISAMPLE -> GL_SAMPLER_2D_MULTISAMPLE
    int GL_INT_SAMPLER_2D_MULTISAMPLE -> GL_INT_SAMPLER_2D_MULTISAMPLE
    int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE -> GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
    int GL_SAMPLER_2D_MULTISAMPLE_ARRAY -> GL_SAMPLER_2D_MULTISAMPLE_ARRAY
    int GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY -> GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
    int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY -> GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
    int GL_MAX_COLOR_TEXTURE_SAMPLES -> GL_MAX_COLOR_TEXTURE_SAMPLES
    int GL_MAX_DEPTH_TEXTURE_SAMPLES -> GL_MAX_DEPTH_TEXTURE_SAMPLES
    int GL_MAX_INTEGER_SAMPLES -> GL_MAX_INTEGER_SAMPLES
    int GL_SRC1_COLOR -> GL_SRC1_COLOR
    int GL_ONE_MINUS_SRC1_COLOR -> GL_ONE_MINUS_SRC1_COLOR
    int GL_ONE_MINUS_SRC1_ALPHA -> GL_ONE_MINUS_SRC1_ALPHA
    int GL_MAX_DUAL_SOURCE_DRAW_BUFFERS -> GL_MAX_DUAL_SOURCE_DRAW_BUFFERS
    int GL_TEXTURE_SWIZZLE_RGBA -> GL_TEXTURE_SWIZZLE_RGBA
    int GL_TIME_ELAPSED -> GL_TIME_ELAPSED
    int GL_TIMESTAMP -> GL_TIMESTAMP
    int GL_COMPRESSED_RGBA_BPTC_UNORM_ARB -> GL_COMPRESSED_RGBA_BPTC_UNORM_ARB
    int GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB -> GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB
    int GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB -> GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB
    int GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB -> GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB
    void glBindFragDataLocationIndexed(int,int,int,java.lang.String) -> glBindFragDataLocationIndexed
    void glColorP3ui(int,int) -> glColorP3ui
    void glColorP3uiv(int,java.nio.IntBuffer) -> glColorP3uiv
    void glColorP3uiv(int,int[],int) -> glColorP3uiv
    void glColorP4ui(int,int) -> glColorP4ui
    void glColorP4uiv(int,java.nio.IntBuffer) -> glColorP4uiv
    void glColorP4uiv(int,int[],int) -> glColorP4uiv
    void glDrawElementsBaseVertex(int,int,int,long,int) -> glDrawElementsBaseVertex
    void glDrawElementsInstancedBaseVertex(int,int,int,long,int,int) -> glDrawElementsInstancedBaseVertex
    void glDrawRangeElementsBaseVertex(int,int,int,int,int,long,int) -> glDrawRangeElementsBaseVertex
    void glFramebufferTexture(int,int,int,int) -> glFramebufferTexture
    int glGetFragDataIndex(int,java.lang.String) -> glGetFragDataIndex
    void glGetMultisamplefv(int,int,java.nio.FloatBuffer) -> glGetMultisamplefv
    void glGetMultisamplefv(int,int,float[],int) -> glGetMultisamplefv
    void glGetQueryObjecti64v(int,int,java.nio.LongBuffer) -> glGetQueryObjecti64v
    void glGetQueryObjecti64v(int,int,long[],int) -> glGetQueryObjecti64v
    void glGetQueryObjectui64v(int,int,java.nio.LongBuffer) -> glGetQueryObjectui64v
    void glGetQueryObjectui64v(int,int,long[],int) -> glGetQueryObjectui64v
    void glGetSamplerParameterIiv(int,int,java.nio.IntBuffer) -> glGetSamplerParameterIiv
    void glGetSamplerParameterIiv(int,int,int[],int) -> glGetSamplerParameterIiv
    void glGetSamplerParameterIuiv(int,int,java.nio.IntBuffer) -> glGetSamplerParameterIuiv
    void glGetSamplerParameterIuiv(int,int,int[],int) -> glGetSamplerParameterIuiv
    void glMultiDrawElementsBaseVertex(int,java.nio.IntBuffer,int,com.jogamp.common.nio.PointerBuffer,int,java.nio.IntBuffer) -> glMultiDrawElementsBaseVertex
    void glMultiTexCoordP1ui(int,int,int) -> glMultiTexCoordP1ui
    void glMultiTexCoordP1uiv(int,int,java.nio.IntBuffer) -> glMultiTexCoordP1uiv
    void glMultiTexCoordP1uiv(int,int,int[],int) -> glMultiTexCoordP1uiv
    void glMultiTexCoordP2ui(int,int,int) -> glMultiTexCoordP2ui
    void glMultiTexCoordP2uiv(int,int,java.nio.IntBuffer) -> glMultiTexCoordP2uiv
    void glMultiTexCoordP2uiv(int,int,int[],int) -> glMultiTexCoordP2uiv
    void glMultiTexCoordP3ui(int,int,int) -> glMultiTexCoordP3ui
    void glMultiTexCoordP3uiv(int,int,java.nio.IntBuffer) -> glMultiTexCoordP3uiv
    void glMultiTexCoordP3uiv(int,int,int[],int) -> glMultiTexCoordP3uiv
    void glMultiTexCoordP4ui(int,int,int) -> glMultiTexCoordP4ui
    void glMultiTexCoordP4uiv(int,int,java.nio.IntBuffer) -> glMultiTexCoordP4uiv
    void glMultiTexCoordP4uiv(int,int,int[],int) -> glMultiTexCoordP4uiv
    void glNormalP3ui(int,int) -> glNormalP3ui
    void glNormalP3uiv(int,java.nio.IntBuffer) -> glNormalP3uiv
    void glNormalP3uiv(int,int[],int) -> glNormalP3uiv
    void glProvokingVertex(int) -> glProvokingVertex
    void glQueryCounter(int,int) -> glQueryCounter
    void glSampleMaski(int,int) -> glSampleMaski
    void glSamplerParameterIiv(int,int,java.nio.IntBuffer) -> glSamplerParameterIiv
    void glSamplerParameterIiv(int,int,int[],int) -> glSamplerParameterIiv
    void glSamplerParameterIuiv(int,int,java.nio.IntBuffer) -> glSamplerParameterIuiv
    void glSamplerParameterIuiv(int,int,int[],int) -> glSamplerParameterIuiv
    void glSecondaryColorP3ui(int,int) -> glSecondaryColorP3ui
    void glSecondaryColorP3uiv(int,java.nio.IntBuffer) -> glSecondaryColorP3uiv
    void glSecondaryColorP3uiv(int,int[],int) -> glSecondaryColorP3uiv
    void glTexCoordP1ui(int,int) -> glTexCoordP1ui
    void glTexCoordP1uiv(int,java.nio.IntBuffer) -> glTexCoordP1uiv
    void glTexCoordP1uiv(int,int[],int) -> glTexCoordP1uiv
    void glTexCoordP2ui(int,int) -> glTexCoordP2ui
    void glTexCoordP2uiv(int,java.nio.IntBuffer) -> glTexCoordP2uiv
    void glTexCoordP2uiv(int,int[],int) -> glTexCoordP2uiv
    void glTexCoordP3ui(int,int) -> glTexCoordP3ui
    void glTexCoordP3uiv(int,java.nio.IntBuffer) -> glTexCoordP3uiv
    void glTexCoordP3uiv(int,int[],int) -> glTexCoordP3uiv
    void glTexCoordP4ui(int,int) -> glTexCoordP4ui
    void glTexCoordP4uiv(int,java.nio.IntBuffer) -> glTexCoordP4uiv
    void glTexCoordP4uiv(int,int[],int) -> glTexCoordP4uiv
    void glTexImage2DMultisample(int,int,int,int,int,boolean) -> glTexImage2DMultisample
    void glTexImage3DMultisample(int,int,int,int,int,int,boolean) -> glTexImage3DMultisample
    void glVertexAttribP1ui(int,int,boolean,int) -> glVertexAttribP1ui
    void glVertexAttribP1uiv(int,int,boolean,java.nio.IntBuffer) -> glVertexAttribP1uiv
    void glVertexAttribP1uiv(int,int,boolean,int[],int) -> glVertexAttribP1uiv
    void glVertexAttribP2ui(int,int,boolean,int) -> glVertexAttribP2ui
    void glVertexAttribP2uiv(int,int,boolean,java.nio.IntBuffer) -> glVertexAttribP2uiv
    void glVertexAttribP2uiv(int,int,boolean,int[],int) -> glVertexAttribP2uiv
    void glVertexAttribP3ui(int,int,boolean,int) -> glVertexAttribP3ui
    void glVertexAttribP3uiv(int,int,boolean,java.nio.IntBuffer) -> glVertexAttribP3uiv
    void glVertexAttribP3uiv(int,int,boolean,int[],int) -> glVertexAttribP3uiv
    void glVertexAttribP4ui(int,int,boolean,int) -> glVertexAttribP4ui
    void glVertexAttribP4uiv(int,int,boolean,java.nio.IntBuffer) -> glVertexAttribP4uiv
    void glVertexAttribP4uiv(int,int,boolean,int[],int) -> glVertexAttribP4uiv
    void glVertexP2ui(int,int) -> glVertexP2ui
    void glVertexP2uiv(int,java.nio.IntBuffer) -> glVertexP2uiv
    void glVertexP2uiv(int,int[],int) -> glVertexP2uiv
    void glVertexP3ui(int,int) -> glVertexP3ui
    void glVertexP3uiv(int,java.nio.IntBuffer) -> glVertexP3uiv
    void glVertexP3uiv(int,int[],int) -> glVertexP3uiv
    void glVertexP4ui(int,int) -> glVertexP4ui
    void glVertexP4uiv(int,java.nio.IntBuffer) -> glVertexP4uiv
    void glVertexP4uiv(int,int[],int) -> glVertexP4uiv
javax.media.opengl.GL3ES3 -> javax.media.opengl.GL3ES3:
    int GL_MAX_VERTEX_OUTPUT_COMPONENTS -> GL_MAX_VERTEX_OUTPUT_COMPONENTS
    int GL_MAX_FRAGMENT_INPUT_COMPONENTS -> GL_MAX_FRAGMENT_INPUT_COMPONENTS
    int GL_MAX_SERVER_WAIT_TIMEOUT -> GL_MAX_SERVER_WAIT_TIMEOUT
    int GL_OBJECT_TYPE -> GL_OBJECT_TYPE
    int GL_SYNC_CONDITION -> GL_SYNC_CONDITION
    int GL_SYNC_STATUS -> GL_SYNC_STATUS
    int GL_SYNC_FLAGS -> GL_SYNC_FLAGS
    int GL_SYNC_FENCE -> GL_SYNC_FENCE
    int GL_SYNC_GPU_COMMANDS_COMPLETE -> GL_SYNC_GPU_COMMANDS_COMPLETE
    int GL_UNSIGNALED -> GL_UNSIGNALED
    int GL_SIGNALED -> GL_SIGNALED
    int GL_ALREADY_SIGNALED -> GL_ALREADY_SIGNALED
    int GL_TIMEOUT_EXPIRED -> GL_TIMEOUT_EXPIRED
    int GL_CONDITION_SATISFIED -> GL_CONDITION_SATISFIED
    int GL_WAIT_FAILED -> GL_WAIT_FAILED
    int GL_SYNC_FLUSH_COMMANDS_BIT -> GL_SYNC_FLUSH_COMMANDS_BIT
    int GL_VERTEX_ATTRIB_ARRAY_DIVISOR -> GL_VERTEX_ATTRIB_ARRAY_DIVISOR
    int GL_SAMPLER_BINDING -> GL_SAMPLER_BINDING
    int GL_RGB10_A2UI -> GL_RGB10_A2UI
    int GL_TEXTURE_SWIZZLE_R -> GL_TEXTURE_SWIZZLE_R
    int GL_TEXTURE_SWIZZLE_G -> GL_TEXTURE_SWIZZLE_G
    int GL_TEXTURE_SWIZZLE_B -> GL_TEXTURE_SWIZZLE_B
    int GL_TEXTURE_SWIZZLE_A -> GL_TEXTURE_SWIZZLE_A
    int GL_INT_2_10_10_10_REV -> GL_INT_2_10_10_10_REV
    void glBindSampler(int,int) -> glBindSampler
    int glClientWaitSync(long,int,long) -> glClientWaitSync
    void glDeleteSamplers(int,java.nio.IntBuffer) -> glDeleteSamplers
    void glDeleteSamplers(int,int[],int) -> glDeleteSamplers
    void glDeleteSync(long) -> glDeleteSync
    long glFenceSync(int,int) -> glFenceSync
    void glGenSamplers(int,java.nio.IntBuffer) -> glGenSamplers
    void glGenSamplers(int,int[],int) -> glGenSamplers
    void glGetBufferParameteri64v(int,int,java.nio.LongBuffer) -> glGetBufferParameteri64v
    void glGetBufferParameteri64v(int,int,long[],int) -> glGetBufferParameteri64v
    void glGetInteger64i_v(int,int,java.nio.LongBuffer) -> glGetInteger64i_v
    void glGetInteger64i_v(int,int,long[],int) -> glGetInteger64i_v
    void glGetInteger64v(int,java.nio.LongBuffer) -> glGetInteger64v
    void glGetInteger64v(int,long[],int) -> glGetInteger64v
    void glGetSamplerParameterfv(int,int,java.nio.FloatBuffer) -> glGetSamplerParameterfv
    void glGetSamplerParameterfv(int,int,float[],int) -> glGetSamplerParameterfv
    void glGetSamplerParameteriv(int,int,java.nio.IntBuffer) -> glGetSamplerParameteriv
    void glGetSamplerParameteriv(int,int,int[],int) -> glGetSamplerParameteriv
    void glGetSynciv(long,int,int,java.nio.IntBuffer,java.nio.IntBuffer) -> glGetSynciv
    void glGetSynciv(long,int,int,int[],int,int[],int) -> glGetSynciv
    boolean glIsSampler(int) -> glIsSampler
    boolean glIsSync(long) -> glIsSync
    void glSamplerParameterf(int,int,float) -> glSamplerParameterf
    void glSamplerParameterfv(int,int,java.nio.FloatBuffer) -> glSamplerParameterfv
    void glSamplerParameterfv(int,int,float[],int) -> glSamplerParameterfv
    void glSamplerParameteri(int,int,int) -> glSamplerParameteri
    void glSamplerParameteriv(int,int,java.nio.IntBuffer) -> glSamplerParameteriv
    void glSamplerParameteriv(int,int,int[],int) -> glSamplerParameteriv
    void glVertexAttribDivisor(int,int) -> glVertexAttribDivisor
    void glWaitSync(long,int,long) -> glWaitSync
javax.media.opengl.GL3bc -> javax.media.opengl.GL3bc:
    int GL_INT64_NV -> GL_INT64_NV
    int GL_UNSIGNED_INT64_NV -> GL_UNSIGNED_INT64_NV
    int GL_INT8_NV -> GL_INT8_NV
    int GL_INT8_VEC2_NV -> GL_INT8_VEC2_NV
    int GL_INT8_VEC3_NV -> GL_INT8_VEC3_NV
    int GL_INT8_VEC4_NV -> GL_INT8_VEC4_NV
    int GL_INT16_NV -> GL_INT16_NV
    int GL_INT16_VEC2_NV -> GL_INT16_VEC2_NV
    int GL_INT16_VEC3_NV -> GL_INT16_VEC3_NV
    int GL_INT16_VEC4_NV -> GL_INT16_VEC4_NV
    int GL_INT64_VEC2_NV -> GL_INT64_VEC2_NV
    int GL_INT64_VEC3_NV -> GL_INT64_VEC3_NV
    int GL_INT64_VEC4_NV -> GL_INT64_VEC4_NV
    int GL_UNSIGNED_INT8_NV -> GL_UNSIGNED_INT8_NV
    int GL_UNSIGNED_INT8_VEC2_NV -> GL_UNSIGNED_INT8_VEC2_NV
    int GL_UNSIGNED_INT8_VEC3_NV -> GL_UNSIGNED_INT8_VEC3_NV
    int GL_UNSIGNED_INT8_VEC4_NV -> GL_UNSIGNED_INT8_VEC4_NV
    int GL_UNSIGNED_INT16_NV -> GL_UNSIGNED_INT16_NV
    int GL_UNSIGNED_INT16_VEC2_NV -> GL_UNSIGNED_INT16_VEC2_NV
    int GL_UNSIGNED_INT16_VEC3_NV -> GL_UNSIGNED_INT16_VEC3_NV
    int GL_UNSIGNED_INT16_VEC4_NV -> GL_UNSIGNED_INT16_VEC4_NV
    int GL_UNSIGNED_INT64_VEC2_NV -> GL_UNSIGNED_INT64_VEC2_NV
    int GL_UNSIGNED_INT64_VEC3_NV -> GL_UNSIGNED_INT64_VEC3_NV
    int GL_UNSIGNED_INT64_VEC4_NV -> GL_UNSIGNED_INT64_VEC4_NV
    int GL_FLOAT16_NV -> GL_FLOAT16_NV
    int GL_FLOAT16_VEC2_NV -> GL_FLOAT16_VEC2_NV
    int GL_FLOAT16_VEC3_NV -> GL_FLOAT16_VEC3_NV
    int GL_FLOAT16_VEC4_NV -> GL_FLOAT16_VEC4_NV
    void glGetUniformi64vNV(int,int,java.nio.LongBuffer) -> glGetUniformi64vNV
    void glGetUniformi64vNV(int,int,long[],int) -> glGetUniformi64vNV
    void glProgramUniform1i64NV(int,int,long) -> glProgramUniform1i64NV
    void glProgramUniform1i64vNV(int,int,int,java.nio.LongBuffer) -> glProgramUniform1i64vNV
    void glProgramUniform1i64vNV(int,int,int,long[],int) -> glProgramUniform1i64vNV
    void glProgramUniform1ui64NV(int,int,long) -> glProgramUniform1ui64NV
    void glProgramUniform1ui64vNV(int,int,int,java.nio.LongBuffer) -> glProgramUniform1ui64vNV
    void glProgramUniform1ui64vNV(int,int,int,long[],int) -> glProgramUniform1ui64vNV
    void glProgramUniform2i64NV(int,int,long,long) -> glProgramUniform2i64NV
    void glProgramUniform2i64vNV(int,int,int,java.nio.LongBuffer) -> glProgramUniform2i64vNV
    void glProgramUniform2i64vNV(int,int,int,long[],int) -> glProgramUniform2i64vNV
    void glProgramUniform2ui64NV(int,int,long,long) -> glProgramUniform2ui64NV
    void glProgramUniform2ui64vNV(int,int,int,java.nio.LongBuffer) -> glProgramUniform2ui64vNV
    void glProgramUniform2ui64vNV(int,int,int,long[],int) -> glProgramUniform2ui64vNV
    void glProgramUniform3i64NV(int,int,long,long,long) -> glProgramUniform3i64NV
    void glProgramUniform3i64vNV(int,int,int,java.nio.LongBuffer) -> glProgramUniform3i64vNV
    void glProgramUniform3i64vNV(int,int,int,long[],int) -> glProgramUniform3i64vNV
    void glProgramUniform3ui64NV(int,int,long,long,long) -> glProgramUniform3ui64NV
    void glProgramUniform3ui64vNV(int,int,int,java.nio.LongBuffer) -> glProgramUniform3ui64vNV
    void glProgramUniform3ui64vNV(int,int,int,long[],int) -> glProgramUniform3ui64vNV
    void glProgramUniform4i64NV(int,int,long,long,long,long) -> glProgramUniform4i64NV
    void glProgramUniform4i64vNV(int,int,int,java.nio.LongBuffer) -> glProgramUniform4i64vNV
    void glProgramUniform4i64vNV(int,int,int,long[],int) -> glProgramUniform4i64vNV
    void glProgramUniform4ui64NV(int,int,long,long,long,long) -> glProgramUniform4ui64NV
    void glProgramUniform4ui64vNV(int,int,int,java.nio.LongBuffer) -> glProgramUniform4ui64vNV
    void glProgramUniform4ui64vNV(int,int,int,long[],int) -> glProgramUniform4ui64vNV
    void glUniform1i64NV(int,long) -> glUniform1i64NV
    void glUniform1i64vNV(int,int,java.nio.LongBuffer) -> glUniform1i64vNV
    void glUniform1i64vNV(int,int,long[],int) -> glUniform1i64vNV
    void glUniform1ui64NV(int,long) -> glUniform1ui64NV
    void glUniform1ui64vNV(int,int,java.nio.LongBuffer) -> glUniform1ui64vNV
    void glUniform1ui64vNV(int,int,long[],int) -> glUniform1ui64vNV
    void glUniform2i64NV(int,long,long) -> glUniform2i64NV
    void glUniform2i64vNV(int,int,java.nio.LongBuffer) -> glUniform2i64vNV
    void glUniform2i64vNV(int,int,long[],int) -> glUniform2i64vNV
    void glUniform2ui64NV(int,long,long) -> glUniform2ui64NV
    void glUniform2ui64vNV(int,int,java.nio.LongBuffer) -> glUniform2ui64vNV
    void glUniform2ui64vNV(int,int,long[],int) -> glUniform2ui64vNV
    void glUniform3i64NV(int,long,long,long) -> glUniform3i64NV
    void glUniform3i64vNV(int,int,java.nio.LongBuffer) -> glUniform3i64vNV
    void glUniform3i64vNV(int,int,long[],int) -> glUniform3i64vNV
    void glUniform3ui64NV(int,long,long,long) -> glUniform3ui64NV
    void glUniform3ui64vNV(int,int,java.nio.LongBuffer) -> glUniform3ui64vNV
    void glUniform3ui64vNV(int,int,long[],int) -> glUniform3ui64vNV
    void glUniform4i64NV(int,long,long,long,long) -> glUniform4i64NV
    void glUniform4i64vNV(int,int,java.nio.LongBuffer) -> glUniform4i64vNV
    void glUniform4i64vNV(int,int,long[],int) -> glUniform4i64vNV
    void glUniform4ui64NV(int,long,long,long,long) -> glUniform4ui64NV
    void glUniform4ui64vNV(int,int,java.nio.LongBuffer) -> glUniform4ui64vNV
    void glUniform4ui64vNV(int,int,long[],int) -> glUniform4ui64vNV
    void glDrawElementsBaseVertex(int,int,int,java.nio.Buffer,int) -> glDrawElementsBaseVertex
    void glDrawElementsInstancedBaseVertex(int,int,int,java.nio.Buffer,int,int) -> glDrawElementsInstancedBaseVertex
    void glDrawRangeElementsBaseVertex(int,int,int,int,int,java.nio.Buffer,int) -> glDrawRangeElementsBaseVertex
javax.media.opengl.GL4 -> javax.media.opengl.GL4:
    int GL_SAMPLE_SHADING -> GL_SAMPLE_SHADING
    int GL_MIN_SAMPLE_SHADING_VALUE -> GL_MIN_SAMPLE_SHADING_VALUE
    int GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET -> GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET
    int GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET -> GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET
    int GL_TEXTURE_CUBE_MAP_ARRAY -> GL_TEXTURE_CUBE_MAP_ARRAY
    int GL_TEXTURE_BINDING_CUBE_MAP_ARRAY -> GL_TEXTURE_BINDING_CUBE_MAP_ARRAY
    int GL_PROXY_TEXTURE_CUBE_MAP_ARRAY -> GL_PROXY_TEXTURE_CUBE_MAP_ARRAY
    int GL_SAMPLER_CUBE_MAP_ARRAY -> GL_SAMPLER_CUBE_MAP_ARRAY
    int GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW -> GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW
    int GL_INT_SAMPLER_CUBE_MAP_ARRAY -> GL_INT_SAMPLER_CUBE_MAP_ARRAY
    int GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY -> GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY
    int GL_DRAW_INDIRECT_BUFFER -> GL_DRAW_INDIRECT_BUFFER
    int GL_DRAW_INDIRECT_BUFFER_BINDING -> GL_DRAW_INDIRECT_BUFFER_BINDING
    int GL_GEOMETRY_SHADER_INVOCATIONS -> GL_GEOMETRY_SHADER_INVOCATIONS
    int GL_MAX_GEOMETRY_SHADER_INVOCATIONS -> GL_MAX_GEOMETRY_SHADER_INVOCATIONS
    int GL_MIN_FRAGMENT_INTERPOLATION_OFFSET -> GL_MIN_FRAGMENT_INTERPOLATION_OFFSET
    int GL_MAX_FRAGMENT_INTERPOLATION_OFFSET -> GL_MAX_FRAGMENT_INTERPOLATION_OFFSET
    int GL_FRAGMENT_INTERPOLATION_OFFSET_BITS -> GL_FRAGMENT_INTERPOLATION_OFFSET_BITS
    int GL_MAX_VERTEX_STREAMS -> GL_MAX_VERTEX_STREAMS
    int GL_DOUBLE_VEC2 -> GL_DOUBLE_VEC2
    int GL_DOUBLE_VEC3 -> GL_DOUBLE_VEC3
    int GL_DOUBLE_VEC4 -> GL_DOUBLE_VEC4
    int GL_DOUBLE_MAT2 -> GL_DOUBLE_MAT2
    int GL_DOUBLE_MAT3 -> GL_DOUBLE_MAT3
    int GL_DOUBLE_MAT4 -> GL_DOUBLE_MAT4
    int GL_DOUBLE_MAT2x3 -> GL_DOUBLE_MAT2x3
    int GL_DOUBLE_MAT2x4 -> GL_DOUBLE_MAT2x4
    int GL_DOUBLE_MAT3x2 -> GL_DOUBLE_MAT3x2
    int GL_DOUBLE_MAT3x4 -> GL_DOUBLE_MAT3x4
    int GL_DOUBLE_MAT4x2 -> GL_DOUBLE_MAT4x2
    int GL_DOUBLE_MAT4x3 -> GL_DOUBLE_MAT4x3
    int GL_ACTIVE_SUBROUTINES -> GL_ACTIVE_SUBROUTINES
    int GL_ACTIVE_SUBROUTINE_UNIFORMS -> GL_ACTIVE_SUBROUTINE_UNIFORMS
    int GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS -> GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS
    int GL_ACTIVE_SUBROUTINE_MAX_LENGTH -> GL_ACTIVE_SUBROUTINE_MAX_LENGTH
    int GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH -> GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH
    int GL_MAX_SUBROUTINES -> GL_MAX_SUBROUTINES
    int GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS -> GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS
    int GL_NUM_COMPATIBLE_SUBROUTINES -> GL_NUM_COMPATIBLE_SUBROUTINES
    int GL_COMPATIBLE_SUBROUTINES -> GL_COMPATIBLE_SUBROUTINES
    int GL_PATCHES -> GL_PATCHES
    int GL_PATCH_VERTICES -> GL_PATCH_VERTICES
    int GL_PATCH_DEFAULT_INNER_LEVEL -> GL_PATCH_DEFAULT_INNER_LEVEL
    int GL_PATCH_DEFAULT_OUTER_LEVEL -> GL_PATCH_DEFAULT_OUTER_LEVEL
    int GL_TESS_CONTROL_OUTPUT_VERTICES -> GL_TESS_CONTROL_OUTPUT_VERTICES
    int GL_TESS_GEN_MODE -> GL_TESS_GEN_MODE
    int GL_TESS_GEN_SPACING -> GL_TESS_GEN_SPACING
    int GL_TESS_GEN_VERTEX_ORDER -> GL_TESS_GEN_VERTEX_ORDER
    int GL_TESS_GEN_POINT_MODE -> GL_TESS_GEN_POINT_MODE
    int GL_ISOLINES -> GL_ISOLINES
    int GL_FRACTIONAL_ODD -> GL_FRACTIONAL_ODD
    int GL_FRACTIONAL_EVEN -> GL_FRACTIONAL_EVEN
    int GL_MAX_PATCH_VERTICES -> GL_MAX_PATCH_VERTICES
    int GL_MAX_TESS_GEN_LEVEL -> GL_MAX_TESS_GEN_LEVEL
    int GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS -> GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS
    int GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS -> GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS
    int GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS -> GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS
    int GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS -> GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS
    int GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS -> GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS
    int GL_MAX_TESS_PATCH_COMPONENTS -> GL_MAX_TESS_PATCH_COMPONENTS
    int GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS -> GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS
    int GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS -> GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS
    int GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS -> GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS
    int GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS -> GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS
    int GL_MAX_TESS_CONTROL_INPUT_COMPONENTS -> GL_MAX_TESS_CONTROL_INPUT_COMPONENTS
    int GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS -> GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS
    int GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS -> GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS
    int GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS -> GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS
    int GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER -> GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER
    int GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER -> GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER
    int GL_TESS_EVALUATION_SHADER -> GL_TESS_EVALUATION_SHADER
    int GL_TESS_CONTROL_SHADER -> GL_TESS_CONTROL_SHADER
    int GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED -> GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED
    int GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE -> GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE
    int GL_MAX_TRANSFORM_FEEDBACK_BUFFERS -> GL_MAX_TRANSFORM_FEEDBACK_BUFFERS
    int GL_GEOMETRY_SHADER_BIT -> GL_GEOMETRY_SHADER_BIT
    int GL_TESS_CONTROL_SHADER_BIT -> GL_TESS_CONTROL_SHADER_BIT
    int GL_TESS_EVALUATION_SHADER_BIT -> GL_TESS_EVALUATION_SHADER_BIT
    int GL_MAX_VIEWPORTS -> GL_MAX_VIEWPORTS
    int GL_VIEWPORT_SUBPIXEL_BITS -> GL_VIEWPORT_SUBPIXEL_BITS
    int GL_VIEWPORT_BOUNDS_RANGE -> GL_VIEWPORT_BOUNDS_RANGE
    int GL_LAYER_PROVOKING_VERTEX -> GL_LAYER_PROVOKING_VERTEX
    int GL_VIEWPORT_INDEX_PROVOKING_VERTEX -> GL_VIEWPORT_INDEX_PROVOKING_VERTEX
    int GL_UNDEFINED_VERTEX -> GL_UNDEFINED_VERTEX
    int GL_UNPACK_COMPRESSED_BLOCK_WIDTH -> GL_UNPACK_COMPRESSED_BLOCK_WIDTH
    int GL_UNPACK_COMPRESSED_BLOCK_HEIGHT -> GL_UNPACK_COMPRESSED_BLOCK_HEIGHT
    int GL_UNPACK_COMPRESSED_BLOCK_DEPTH -> GL_UNPACK_COMPRESSED_BLOCK_DEPTH
    int GL_UNPACK_COMPRESSED_BLOCK_SIZE -> GL_UNPACK_COMPRESSED_BLOCK_SIZE
    int GL_PACK_COMPRESSED_BLOCK_WIDTH -> GL_PACK_COMPRESSED_BLOCK_WIDTH
    int GL_PACK_COMPRESSED_BLOCK_HEIGHT -> GL_PACK_COMPRESSED_BLOCK_HEIGHT
    int GL_PACK_COMPRESSED_BLOCK_DEPTH -> GL_PACK_COMPRESSED_BLOCK_DEPTH
    int GL_PACK_COMPRESSED_BLOCK_SIZE -> GL_PACK_COMPRESSED_BLOCK_SIZE
    int GL_MIN_MAP_BUFFER_ALIGNMENT -> GL_MIN_MAP_BUFFER_ALIGNMENT
    int GL_ATOMIC_COUNTER_BUFFER -> GL_ATOMIC_COUNTER_BUFFER
    int GL_ATOMIC_COUNTER_BUFFER_BINDING -> GL_ATOMIC_COUNTER_BUFFER_BINDING
    int GL_ATOMIC_COUNTER_BUFFER_START -> GL_ATOMIC_COUNTER_BUFFER_START
    int GL_ATOMIC_COUNTER_BUFFER_SIZE -> GL_ATOMIC_COUNTER_BUFFER_SIZE
    int GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE -> GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
    int GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS -> GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
    int GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES -> GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
    int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER -> GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
    int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER -> GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
    int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER -> GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
    int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER -> GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
    int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER -> GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
    int GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS -> GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
    int GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS -> GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
    int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS -> GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
    int GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS -> GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
    int GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS -> GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
    int GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS -> GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
    int GL_MAX_VERTEX_ATOMIC_COUNTERS -> GL_MAX_VERTEX_ATOMIC_COUNTERS
    int GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS -> GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
    int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS -> GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
    int GL_MAX_GEOMETRY_ATOMIC_COUNTERS -> GL_MAX_GEOMETRY_ATOMIC_COUNTERS
    int GL_MAX_FRAGMENT_ATOMIC_COUNTERS -> GL_MAX_FRAGMENT_ATOMIC_COUNTERS
    int GL_MAX_COMBINED_ATOMIC_COUNTERS -> GL_MAX_COMBINED_ATOMIC_COUNTERS
    int GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE -> GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
    int GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS -> GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
    int GL_ACTIVE_ATOMIC_COUNTER_BUFFERS -> GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
    int GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX -> GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
    int GL_UNSIGNED_INT_ATOMIC_COUNTER -> GL_UNSIGNED_INT_ATOMIC_COUNTER
    int GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT -> GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
    int GL_ELEMENT_ARRAY_BARRIER_BIT -> GL_ELEMENT_ARRAY_BARRIER_BIT
    int GL_UNIFORM_BARRIER_BIT -> GL_UNIFORM_BARRIER_BIT
    int GL_TEXTURE_FETCH_BARRIER_BIT -> GL_TEXTURE_FETCH_BARRIER_BIT
    int GL_SHADER_IMAGE_ACCESS_BARRIER_BIT -> GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
    int GL_COMMAND_BARRIER_BIT -> GL_COMMAND_BARRIER_BIT
    int GL_PIXEL_BUFFER_BARRIER_BIT -> GL_PIXEL_BUFFER_BARRIER_BIT
    int GL_TEXTURE_UPDATE_BARRIER_BIT -> GL_TEXTURE_UPDATE_BARRIER_BIT
    int GL_BUFFER_UPDATE_BARRIER_BIT -> GL_BUFFER_UPDATE_BARRIER_BIT
    int GL_FRAMEBUFFER_BARRIER_BIT -> GL_FRAMEBUFFER_BARRIER_BIT
    int GL_TRANSFORM_FEEDBACK_BARRIER_BIT -> GL_TRANSFORM_FEEDBACK_BARRIER_BIT
    int GL_ATOMIC_COUNTER_BARRIER_BIT -> GL_ATOMIC_COUNTER_BARRIER_BIT
    int GL_MAX_IMAGE_UNITS -> GL_MAX_IMAGE_UNITS
    int GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS -> GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
    int GL_IMAGE_BINDING_NAME -> GL_IMAGE_BINDING_NAME
    int GL_IMAGE_BINDING_LEVEL -> GL_IMAGE_BINDING_LEVEL
    int GL_IMAGE_BINDING_LAYERED -> GL_IMAGE_BINDING_LAYERED
    int GL_IMAGE_BINDING_LAYER -> GL_IMAGE_BINDING_LAYER
    int GL_IMAGE_BINDING_ACCESS -> GL_IMAGE_BINDING_ACCESS
    int GL_IMAGE_1D -> GL_IMAGE_1D
    int GL_IMAGE_2D -> GL_IMAGE_2D
    int GL_IMAGE_3D -> GL_IMAGE_3D
    int GL_IMAGE_2D_RECT -> GL_IMAGE_2D_RECT
    int GL_IMAGE_CUBE -> GL_IMAGE_CUBE
    int GL_IMAGE_BUFFER -> GL_IMAGE_BUFFER
    int GL_IMAGE_1D_ARRAY -> GL_IMAGE_1D_ARRAY
    int GL_IMAGE_2D_ARRAY -> GL_IMAGE_2D_ARRAY
    int GL_IMAGE_CUBE_MAP_ARRAY -> GL_IMAGE_CUBE_MAP_ARRAY
    int GL_IMAGE_2D_MULTISAMPLE -> GL_IMAGE_2D_MULTISAMPLE
    int GL_IMAGE_2D_MULTISAMPLE_ARRAY -> GL_IMAGE_2D_MULTISAMPLE_ARRAY
    int GL_INT_IMAGE_1D -> GL_INT_IMAGE_1D
    int GL_INT_IMAGE_2D -> GL_INT_IMAGE_2D
    int GL_INT_IMAGE_3D -> GL_INT_IMAGE_3D
    int GL_INT_IMAGE_2D_RECT -> GL_INT_IMAGE_2D_RECT
    int GL_INT_IMAGE_CUBE -> GL_INT_IMAGE_CUBE
    int GL_INT_IMAGE_BUFFER -> GL_INT_IMAGE_BUFFER
    int GL_INT_IMAGE_1D_ARRAY -> GL_INT_IMAGE_1D_ARRAY
    int GL_INT_IMAGE_2D_ARRAY -> GL_INT_IMAGE_2D_ARRAY
    int GL_INT_IMAGE_CUBE_MAP_ARRAY -> GL_INT_IMAGE_CUBE_MAP_ARRAY
    int GL_INT_IMAGE_2D_MULTISAMPLE -> GL_INT_IMAGE_2D_MULTISAMPLE
    int GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY -> GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
    int GL_UNSIGNED_INT_IMAGE_1D -> GL_UNSIGNED_INT_IMAGE_1D
    int GL_UNSIGNED_INT_IMAGE_2D -> GL_UNSIGNED_INT_IMAGE_2D
    int GL_UNSIGNED_INT_IMAGE_3D -> GL_UNSIGNED_INT_IMAGE_3D
    int GL_UNSIGNED_INT_IMAGE_2D_RECT -> GL_UNSIGNED_INT_IMAGE_2D_RECT
    int GL_UNSIGNED_INT_IMAGE_CUBE -> GL_UNSIGNED_INT_IMAGE_CUBE
    int GL_UNSIGNED_INT_IMAGE_BUFFER -> GL_UNSIGNED_INT_IMAGE_BUFFER
    int GL_UNSIGNED_INT_IMAGE_1D_ARRAY -> GL_UNSIGNED_INT_IMAGE_1D_ARRAY
    int GL_UNSIGNED_INT_IMAGE_2D_ARRAY -> GL_UNSIGNED_INT_IMAGE_2D_ARRAY
    int GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY -> GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
    int GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE -> GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
    int GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY -> GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
    int GL_MAX_IMAGE_SAMPLES -> GL_MAX_IMAGE_SAMPLES
    int GL_IMAGE_BINDING_FORMAT -> GL_IMAGE_BINDING_FORMAT
    int GL_IMAGE_FORMAT_COMPATIBILITY_TYPE -> GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
    int GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE -> GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
    int GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS -> GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
    int GL_MAX_VERTEX_IMAGE_UNIFORMS -> GL_MAX_VERTEX_IMAGE_UNIFORMS
    int GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS -> GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
    int GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS -> GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
    int GL_MAX_GEOMETRY_IMAGE_UNIFORMS -> GL_MAX_GEOMETRY_IMAGE_UNIFORMS
    int GL_MAX_FRAGMENT_IMAGE_UNIFORMS -> GL_MAX_FRAGMENT_IMAGE_UNIFORMS
    int GL_MAX_COMBINED_IMAGE_UNIFORMS -> GL_MAX_COMBINED_IMAGE_UNIFORMS
    int GL_NUM_SHADING_LANGUAGE_VERSIONS -> GL_NUM_SHADING_LANGUAGE_VERSIONS
    int GL_VERTEX_ATTRIB_ARRAY_LONG -> GL_VERTEX_ATTRIB_ARRAY_LONG
    int GL_COMPUTE_SHADER -> GL_COMPUTE_SHADER
    int GL_MAX_COMPUTE_UNIFORM_BLOCKS -> GL_MAX_COMPUTE_UNIFORM_BLOCKS
    int GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS -> GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS
    int GL_MAX_COMPUTE_IMAGE_UNIFORMS -> GL_MAX_COMPUTE_IMAGE_UNIFORMS
    int GL_MAX_COMPUTE_SHARED_MEMORY_SIZE -> GL_MAX_COMPUTE_SHARED_MEMORY_SIZE
    int GL_MAX_COMPUTE_UNIFORM_COMPONENTS -> GL_MAX_COMPUTE_UNIFORM_COMPONENTS
    int GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS -> GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS
    int GL_MAX_COMPUTE_ATOMIC_COUNTERS -> GL_MAX_COMPUTE_ATOMIC_COUNTERS
    int GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS -> GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS
    int GL_MAX_COMPUTE_LOCAL_INVOCATIONS -> GL_MAX_COMPUTE_LOCAL_INVOCATIONS
    int GL_MAX_COMPUTE_WORK_GROUP_COUNT -> GL_MAX_COMPUTE_WORK_GROUP_COUNT
    int GL_MAX_COMPUTE_WORK_GROUP_SIZE -> GL_MAX_COMPUTE_WORK_GROUP_SIZE
    int GL_COMPUTE_LOCAL_WORK_SIZE -> GL_COMPUTE_LOCAL_WORK_SIZE
    int GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER -> GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER
    int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER -> GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER
    int GL_DISPATCH_INDIRECT_BUFFER -> GL_DISPATCH_INDIRECT_BUFFER
    int GL_DISPATCH_INDIRECT_BUFFER_BINDING -> GL_DISPATCH_INDIRECT_BUFFER_BINDING
    int GL_PROGRAM_PIPELINE -> GL_PROGRAM_PIPELINE
    int GL_MAX_UNIFORM_LOCATIONS -> GL_MAX_UNIFORM_LOCATIONS
    int GL_FRAMEBUFFER_DEFAULT_WIDTH -> GL_FRAMEBUFFER_DEFAULT_WIDTH
    int GL_FRAMEBUFFER_DEFAULT_HEIGHT -> GL_FRAMEBUFFER_DEFAULT_HEIGHT
    int GL_FRAMEBUFFER_DEFAULT_LAYERS -> GL_FRAMEBUFFER_DEFAULT_LAYERS
    int GL_FRAMEBUFFER_DEFAULT_SAMPLES -> GL_FRAMEBUFFER_DEFAULT_SAMPLES
    int GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS -> GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS
    int GL_MAX_FRAMEBUFFER_WIDTH -> GL_MAX_FRAMEBUFFER_WIDTH
    int GL_MAX_FRAMEBUFFER_HEIGHT -> GL_MAX_FRAMEBUFFER_HEIGHT
    int GL_MAX_FRAMEBUFFER_LAYERS -> GL_MAX_FRAMEBUFFER_LAYERS
    int GL_MAX_FRAMEBUFFER_SAMPLES -> GL_MAX_FRAMEBUFFER_SAMPLES
    int GL_INTERNALFORMAT_SUPPORTED -> GL_INTERNALFORMAT_SUPPORTED
    int GL_INTERNALFORMAT_PREFERRED -> GL_INTERNALFORMAT_PREFERRED
    int GL_INTERNALFORMAT_RED_SIZE -> GL_INTERNALFORMAT_RED_SIZE
    int GL_INTERNALFORMAT_GREEN_SIZE -> GL_INTERNALFORMAT_GREEN_SIZE
    int GL_INTERNALFORMAT_BLUE_SIZE -> GL_INTERNALFORMAT_BLUE_SIZE
    int GL_INTERNALFORMAT_ALPHA_SIZE -> GL_INTERNALFORMAT_ALPHA_SIZE
    int GL_INTERNALFORMAT_DEPTH_SIZE -> GL_INTERNALFORMAT_DEPTH_SIZE
    int GL_INTERNALFORMAT_STENCIL_SIZE -> GL_INTERNALFORMAT_STENCIL_SIZE
    int GL_INTERNALFORMAT_SHARED_SIZE -> GL_INTERNALFORMAT_SHARED_SIZE
    int GL_INTERNALFORMAT_RED_TYPE -> GL_INTERNALFORMAT_RED_TYPE
    int GL_INTERNALFORMAT_GREEN_TYPE -> GL_INTERNALFORMAT_GREEN_TYPE
    int GL_INTERNALFORMAT_BLUE_TYPE -> GL_INTERNALFORMAT_BLUE_TYPE
    int GL_INTERNALFORMAT_ALPHA_TYPE -> GL_INTERNALFORMAT_ALPHA_TYPE
    int GL_INTERNALFORMAT_DEPTH_TYPE -> GL_INTERNALFORMAT_DEPTH_TYPE
    int GL_INTERNALFORMAT_STENCIL_TYPE -> GL_INTERNALFORMAT_STENCIL_TYPE
    int GL_MAX_WIDTH -> GL_MAX_WIDTH
    int GL_MAX_HEIGHT -> GL_MAX_HEIGHT
    int GL_MAX_DEPTH -> GL_MAX_DEPTH
    int GL_MAX_LAYERS -> GL_MAX_LAYERS
    int GL_MAX_COMBINED_DIMENSIONS -> GL_MAX_COMBINED_DIMENSIONS
    int GL_COLOR_COMPONENTS -> GL_COLOR_COMPONENTS
    int GL_DEPTH_COMPONENTS -> GL_DEPTH_COMPONENTS
    int GL_STENCIL_COMPONENTS -> GL_STENCIL_COMPONENTS
    int GL_COLOR_RENDERABLE -> GL_COLOR_RENDERABLE
    int GL_DEPTH_RENDERABLE -> GL_DEPTH_RENDERABLE
    int GL_STENCIL_RENDERABLE -> GL_STENCIL_RENDERABLE
    int GL_FRAMEBUFFER_RENDERABLE -> GL_FRAMEBUFFER_RENDERABLE
    int GL_FRAMEBUFFER_RENDERABLE_LAYERED -> GL_FRAMEBUFFER_RENDERABLE_LAYERED
    int GL_FRAMEBUFFER_BLEND -> GL_FRAMEBUFFER_BLEND
    int GL_READ_PIXELS -> GL_READ_PIXELS
    int GL_READ_PIXELS_FORMAT -> GL_READ_PIXELS_FORMAT
    int GL_READ_PIXELS_TYPE -> GL_READ_PIXELS_TYPE
    int GL_TEXTURE_IMAGE_FORMAT -> GL_TEXTURE_IMAGE_FORMAT
    int GL_TEXTURE_IMAGE_TYPE -> GL_TEXTURE_IMAGE_TYPE
    int GL_GET_TEXTURE_IMAGE_FORMAT -> GL_GET_TEXTURE_IMAGE_FORMAT
    int GL_GET_TEXTURE_IMAGE_TYPE -> GL_GET_TEXTURE_IMAGE_TYPE
    int GL_MIPMAP -> GL_MIPMAP
    int GL_MANUAL_GENERATE_MIPMAP -> GL_MANUAL_GENERATE_MIPMAP
    int GL_AUTO_GENERATE_MIPMAP -> GL_AUTO_GENERATE_MIPMAP
    int GL_COLOR_ENCODING -> GL_COLOR_ENCODING
    int GL_SRGB_READ -> GL_SRGB_READ
    int GL_SRGB_WRITE -> GL_SRGB_WRITE
    int GL_FILTER -> GL_FILTER
    int GL_VERTEX_TEXTURE -> GL_VERTEX_TEXTURE
    int GL_TESS_CONTROL_TEXTURE -> GL_TESS_CONTROL_TEXTURE
    int GL_TESS_EVALUATION_TEXTURE -> GL_TESS_EVALUATION_TEXTURE
    int GL_GEOMETRY_TEXTURE -> GL_GEOMETRY_TEXTURE
    int GL_FRAGMENT_TEXTURE -> GL_FRAGMENT_TEXTURE
    int GL_COMPUTE_TEXTURE -> GL_COMPUTE_TEXTURE
    int GL_TEXTURE_SHADOW -> GL_TEXTURE_SHADOW
    int GL_TEXTURE_GATHER -> GL_TEXTURE_GATHER
    int GL_TEXTURE_GATHER_SHADOW -> GL_TEXTURE_GATHER_SHADOW
    int GL_SHADER_IMAGE_LOAD -> GL_SHADER_IMAGE_LOAD
    int GL_SHADER_IMAGE_STORE -> GL_SHADER_IMAGE_STORE
    int GL_SHADER_IMAGE_ATOMIC -> GL_SHADER_IMAGE_ATOMIC
    int GL_IMAGE_TEXEL_SIZE -> GL_IMAGE_TEXEL_SIZE
    int GL_IMAGE_COMPATIBILITY_CLASS -> GL_IMAGE_COMPATIBILITY_CLASS
    int GL_IMAGE_PIXEL_FORMAT -> GL_IMAGE_PIXEL_FORMAT
    int GL_IMAGE_PIXEL_TYPE -> GL_IMAGE_PIXEL_TYPE
    int GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST -> GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST
    int GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST -> GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST
    int GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE -> GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE
    int GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE -> GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE
    int GL_TEXTURE_COMPRESSED_BLOCK_WIDTH -> GL_TEXTURE_COMPRESSED_BLOCK_WIDTH
    int GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT -> GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT
    int GL_TEXTURE_COMPRESSED_BLOCK_SIZE -> GL_TEXTURE_COMPRESSED_BLOCK_SIZE
    int GL_CLEAR_BUFFER -> GL_CLEAR_BUFFER
    int GL_TEXTURE_VIEW -> GL_TEXTURE_VIEW
    int GL_VIEW_COMPATIBILITY_CLASS -> GL_VIEW_COMPATIBILITY_CLASS
    int GL_FULL_SUPPORT -> GL_FULL_SUPPORT
    int GL_CAVEAT_SUPPORT -> GL_CAVEAT_SUPPORT
    int GL_IMAGE_CLASS_4_X_32 -> GL_IMAGE_CLASS_4_X_32
    int GL_IMAGE_CLASS_2_X_32 -> GL_IMAGE_CLASS_2_X_32
    int GL_IMAGE_CLASS_1_X_32 -> GL_IMAGE_CLASS_1_X_32
    int GL_IMAGE_CLASS_4_X_16 -> GL_IMAGE_CLASS_4_X_16
    int GL_IMAGE_CLASS_2_X_16 -> GL_IMAGE_CLASS_2_X_16
    int GL_IMAGE_CLASS_1_X_16 -> GL_IMAGE_CLASS_1_X_16
    int GL_IMAGE_CLASS_4_X_8 -> GL_IMAGE_CLASS_4_X_8
    int GL_IMAGE_CLASS_2_X_8 -> GL_IMAGE_CLASS_2_X_8
    int GL_IMAGE_CLASS_1_X_8 -> GL_IMAGE_CLASS_1_X_8
    int GL_IMAGE_CLASS_11_11_10 -> GL_IMAGE_CLASS_11_11_10
    int GL_IMAGE_CLASS_10_10_10_2 -> GL_IMAGE_CLASS_10_10_10_2
    int GL_VIEW_CLASS_128_BITS -> GL_VIEW_CLASS_128_BITS
    int GL_VIEW_CLASS_96_BITS -> GL_VIEW_CLASS_96_BITS
    int GL_VIEW_CLASS_64_BITS -> GL_VIEW_CLASS_64_BITS
    int GL_VIEW_CLASS_48_BITS -> GL_VIEW_CLASS_48_BITS
    int GL_VIEW_CLASS_32_BITS -> GL_VIEW_CLASS_32_BITS
    int GL_VIEW_CLASS_24_BITS -> GL_VIEW_CLASS_24_BITS
    int GL_VIEW_CLASS_16_BITS -> GL_VIEW_CLASS_16_BITS
    int GL_VIEW_CLASS_8_BITS -> GL_VIEW_CLASS_8_BITS
    int GL_VIEW_CLASS_S3TC_DXT1_RGB -> GL_VIEW_CLASS_S3TC_DXT1_RGB
    int GL_VIEW_CLASS_S3TC_DXT1_RGBA -> GL_VIEW_CLASS_S3TC_DXT1_RGBA
    int GL_VIEW_CLASS_S3TC_DXT3_RGBA -> GL_VIEW_CLASS_S3TC_DXT3_RGBA
    int GL_VIEW_CLASS_S3TC_DXT5_RGBA -> GL_VIEW_CLASS_S3TC_DXT5_RGBA
    int GL_VIEW_CLASS_RGTC1_RED -> GL_VIEW_CLASS_RGTC1_RED
    int GL_VIEW_CLASS_RGTC2_RG -> GL_VIEW_CLASS_RGTC2_RG
    int GL_VIEW_CLASS_BPTC_UNORM -> GL_VIEW_CLASS_BPTC_UNORM
    int GL_VIEW_CLASS_BPTC_FLOAT -> GL_VIEW_CLASS_BPTC_FLOAT
    int GL_UNIFORM -> GL_UNIFORM
    int GL_UNIFORM_BLOCK -> GL_UNIFORM_BLOCK
    int GL_PROGRAM_INPUT -> GL_PROGRAM_INPUT
    int GL_PROGRAM_OUTPUT -> GL_PROGRAM_OUTPUT
    int GL_BUFFER_VARIABLE -> GL_BUFFER_VARIABLE
    int GL_SHADER_STORAGE_BLOCK -> GL_SHADER_STORAGE_BLOCK
    int GL_VERTEX_SUBROUTINE -> GL_VERTEX_SUBROUTINE
    int GL_TESS_CONTROL_SUBROUTINE -> GL_TESS_CONTROL_SUBROUTINE
    int GL_TESS_EVALUATION_SUBROUTINE -> GL_TESS_EVALUATION_SUBROUTINE
    int GL_GEOMETRY_SUBROUTINE -> GL_GEOMETRY_SUBROUTINE
    int GL_FRAGMENT_SUBROUTINE -> GL_FRAGMENT_SUBROUTINE
    int GL_COMPUTE_SUBROUTINE -> GL_COMPUTE_SUBROUTINE
    int GL_VERTEX_SUBROUTINE_UNIFORM -> GL_VERTEX_SUBROUTINE_UNIFORM
    int GL_TESS_CONTROL_SUBROUTINE_UNIFORM -> GL_TESS_CONTROL_SUBROUTINE_UNIFORM
    int GL_TESS_EVALUATION_SUBROUTINE_UNIFORM -> GL_TESS_EVALUATION_SUBROUTINE_UNIFORM
    int GL_GEOMETRY_SUBROUTINE_UNIFORM -> GL_GEOMETRY_SUBROUTINE_UNIFORM
    int GL_FRAGMENT_SUBROUTINE_UNIFORM -> GL_FRAGMENT_SUBROUTINE_UNIFORM
    int GL_COMPUTE_SUBROUTINE_UNIFORM -> GL_COMPUTE_SUBROUTINE_UNIFORM
    int GL_TRANSFORM_FEEDBACK_VARYING -> GL_TRANSFORM_FEEDBACK_VARYING
    int GL_ACTIVE_RESOURCES -> GL_ACTIVE_RESOURCES
    int GL_MAX_NAME_LENGTH -> GL_MAX_NAME_LENGTH
    int GL_MAX_NUM_ACTIVE_VARIABLES -> GL_MAX_NUM_ACTIVE_VARIABLES
    int GL_MAX_NUM_COMPATIBLE_SUBROUTINES -> GL_MAX_NUM_COMPATIBLE_SUBROUTINES
    int GL_NAME_LENGTH -> GL_NAME_LENGTH
    int GL_TYPE -> GL_TYPE
    int GL_ARRAY_SIZE -> GL_ARRAY_SIZE
    int GL_OFFSET -> GL_OFFSET
    int GL_BLOCK_INDEX -> GL_BLOCK_INDEX
    int GL_ARRAY_STRIDE -> GL_ARRAY_STRIDE
    int GL_MATRIX_STRIDE -> GL_MATRIX_STRIDE
    int GL_IS_ROW_MAJOR -> GL_IS_ROW_MAJOR
    int GL_ATOMIC_COUNTER_BUFFER_INDEX -> GL_ATOMIC_COUNTER_BUFFER_INDEX
    int GL_BUFFER_BINDING -> GL_BUFFER_BINDING
    int GL_BUFFER_DATA_SIZE -> GL_BUFFER_DATA_SIZE
    int GL_NUM_ACTIVE_VARIABLES -> GL_NUM_ACTIVE_VARIABLES
    int GL_ACTIVE_VARIABLES -> GL_ACTIVE_VARIABLES
    int GL_REFERENCED_BY_VERTEX_SHADER -> GL_REFERENCED_BY_VERTEX_SHADER
    int GL_REFERENCED_BY_TESS_CONTROL_SHADER -> GL_REFERENCED_BY_TESS_CONTROL_SHADER
    int GL_REFERENCED_BY_TESS_EVALUATION_SHADER -> GL_REFERENCED_BY_TESS_EVALUATION_SHADER
    int GL_REFERENCED_BY_GEOMETRY_SHADER -> GL_REFERENCED_BY_GEOMETRY_SHADER
    int GL_REFERENCED_BY_FRAGMENT_SHADER -> GL_REFERENCED_BY_FRAGMENT_SHADER
    int GL_REFERENCED_BY_COMPUTE_SHADER -> GL_REFERENCED_BY_COMPUTE_SHADER
    int GL_TOP_LEVEL_ARRAY_SIZE -> GL_TOP_LEVEL_ARRAY_SIZE
    int GL_TOP_LEVEL_ARRAY_STRIDE -> GL_TOP_LEVEL_ARRAY_STRIDE
    int GL_LOCATION -> GL_LOCATION
    int GL_LOCATION_INDEX -> GL_LOCATION_INDEX
    int GL_IS_PER_PATCH -> GL_IS_PER_PATCH
    int GL_SHADER_STORAGE_BUFFER -> GL_SHADER_STORAGE_BUFFER
    int GL_SHADER_STORAGE_BUFFER_BINDING -> GL_SHADER_STORAGE_BUFFER_BINDING
    int GL_SHADER_STORAGE_BUFFER_START -> GL_SHADER_STORAGE_BUFFER_START
    int GL_SHADER_STORAGE_BUFFER_SIZE -> GL_SHADER_STORAGE_BUFFER_SIZE
    int GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS -> GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS
    int GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS -> GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS
    int GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS -> GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS
    int GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS -> GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS
    int GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS -> GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS
    int GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS -> GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS
    int GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS -> GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS
    int GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS -> GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS
    int GL_MAX_SHADER_STORAGE_BLOCK_SIZE -> GL_MAX_SHADER_STORAGE_BLOCK_SIZE
    int GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT -> GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT
    int GL_SHADER_STORAGE_BARRIER_BIT -> GL_SHADER_STORAGE_BARRIER_BIT
    int GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES -> GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES
    int GL_DEPTH_STENCIL_TEXTURE_MODE -> GL_DEPTH_STENCIL_TEXTURE_MODE
    int GL_TEXTURE_BUFFER_OFFSET -> GL_TEXTURE_BUFFER_OFFSET
    int GL_TEXTURE_BUFFER_SIZE -> GL_TEXTURE_BUFFER_SIZE
    int GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT -> GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT
    int GL_TEXTURE_VIEW_MIN_LEVEL -> GL_TEXTURE_VIEW_MIN_LEVEL
    int GL_TEXTURE_VIEW_NUM_LEVELS -> GL_TEXTURE_VIEW_NUM_LEVELS
    int GL_TEXTURE_VIEW_MIN_LAYER -> GL_TEXTURE_VIEW_MIN_LAYER
    int GL_TEXTURE_VIEW_NUM_LAYERS -> GL_TEXTURE_VIEW_NUM_LAYERS
    int GL_VERTEX_ATTRIB_BINDING -> GL_VERTEX_ATTRIB_BINDING
    int GL_VERTEX_ATTRIB_RELATIVE_OFFSET -> GL_VERTEX_ATTRIB_RELATIVE_OFFSET
    int GL_VERTEX_BINDING_DIVISOR -> GL_VERTEX_BINDING_DIVISOR
    int GL_VERTEX_BINDING_OFFSET -> GL_VERTEX_BINDING_OFFSET
    int GL_VERTEX_BINDING_STRIDE -> GL_VERTEX_BINDING_STRIDE
    int GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET -> GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET
    int GL_MAX_VERTEX_ATTRIB_BINDINGS -> GL_MAX_VERTEX_ATTRIB_BINDINGS
    void glActiveShaderProgram(int,int) -> glActiveShaderProgram
    void glBeginQueryIndexed(int,int,int) -> glBeginQueryIndexed
    void glBindImageTexture(int,int,int,boolean,int,int,int) -> glBindImageTexture
    void glBindProgramPipeline(int) -> glBindProgramPipeline
    void glBindVertexBuffer(int,int,long,int) -> glBindVertexBuffer
    void glBlendEquationSeparatei(int,int,int) -> glBlendEquationSeparatei
    void glBlendEquationi(int,int) -> glBlendEquationi
    void glBlendFuncSeparatei(int,int,int,int,int) -> glBlendFuncSeparatei
    void glBlendFunci(int,int,int) -> glBlendFunci
    void glClearBufferData(int,int,int,int,java.nio.Buffer) -> glClearBufferData
    void glClearBufferSubData(int,int,long,long,int,int,java.nio.Buffer) -> glClearBufferSubData
    void glCopyImageSubData(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int) -> glCopyImageSubData
    int glCreateShaderProgramv(int,int,java.lang.String[]) -> glCreateShaderProgramv
    void glDeleteProgramPipelines(int,java.nio.IntBuffer) -> glDeleteProgramPipelines
    void glDeleteProgramPipelines(int,int[],int) -> glDeleteProgramPipelines
    void glDepthRangeArrayv(int,int,java.nio.DoubleBuffer) -> glDepthRangeArrayv
    void glDepthRangeArrayv(int,int,double[],int) -> glDepthRangeArrayv
    void glDepthRangeIndexed(int,double,double) -> glDepthRangeIndexed
    void glDispatchCompute(int,int,int) -> glDispatchCompute
    void glDispatchComputeIndirect(long) -> glDispatchComputeIndirect
    void glDrawArraysIndirect(int,long) -> glDrawArraysIndirect
    void glDrawArraysInstancedBaseInstance(int,int,int,int,int) -> glDrawArraysInstancedBaseInstance
    void glDrawElementsIndirect(int,int,long) -> glDrawElementsIndirect
    void glDrawElementsInstancedBaseInstance(int,int,int,long,int,int) -> glDrawElementsInstancedBaseInstance
    void glDrawElementsInstancedBaseVertexBaseInstance(int,int,int,long,int,int,int) -> glDrawElementsInstancedBaseVertexBaseInstance
    void glDrawTransformFeedback(int,int) -> glDrawTransformFeedback
    void glDrawTransformFeedbackInstanced(int,int,int) -> glDrawTransformFeedbackInstanced
    void glDrawTransformFeedbackStream(int,int,int) -> glDrawTransformFeedbackStream
    void glDrawTransformFeedbackStreamInstanced(int,int,int,int) -> glDrawTransformFeedbackStreamInstanced
    void glEndQueryIndexed(int,int) -> glEndQueryIndexed
    void glFramebufferParameteri(int,int,int) -> glFramebufferParameteri
    void glGenProgramPipelines(int,java.nio.IntBuffer) -> glGenProgramPipelines
    void glGenProgramPipelines(int,int[],int) -> glGenProgramPipelines
    void glGetActiveAtomicCounterBufferiv(int,int,int,java.nio.IntBuffer) -> glGetActiveAtomicCounterBufferiv
    void glGetActiveAtomicCounterBufferiv(int,int,int,int[],int) -> glGetActiveAtomicCounterBufferiv
    void glGetActiveSubroutineName(int,int,int,int,java.nio.IntBuffer,java.nio.ByteBuffer) -> glGetActiveSubroutineName
    void glGetActiveSubroutineName(int,int,int,int,int[],int,byte[],int) -> glGetActiveSubroutineName
    void glGetActiveSubroutineUniformName(int,int,int,int,java.nio.IntBuffer,java.nio.ByteBuffer) -> glGetActiveSubroutineUniformName
    void glGetActiveSubroutineUniformName(int,int,int,int,int[],int,byte[],int) -> glGetActiveSubroutineUniformName
    void glGetActiveSubroutineUniformiv(int,int,int,int,java.nio.IntBuffer) -> glGetActiveSubroutineUniformiv
    void glGetActiveSubroutineUniformiv(int,int,int,int,int[],int) -> glGetActiveSubroutineUniformiv
    void glGetDoublei_v(int,int,java.nio.DoubleBuffer) -> glGetDoublei_v
    void glGetDoublei_v(int,int,double[],int) -> glGetDoublei_v
    void glGetFloati_v(int,int,java.nio.FloatBuffer) -> glGetFloati_v
    void glGetFloati_v(int,int,float[],int) -> glGetFloati_v
    void glGetFramebufferParameteriv(int,int,java.nio.IntBuffer) -> glGetFramebufferParameteriv
    void glGetFramebufferParameteriv(int,int,int[],int) -> glGetFramebufferParameteriv
    void glGetInternalformati64v(int,int,int,int,java.nio.LongBuffer) -> glGetInternalformati64v
    void glGetInternalformati64v(int,int,int,int,long[],int) -> glGetInternalformati64v
    void glGetProgramInterfaceiv(int,int,int,java.nio.IntBuffer) -> glGetProgramInterfaceiv
    void glGetProgramInterfaceiv(int,int,int,int[],int) -> glGetProgramInterfaceiv
    void glGetProgramPipelineInfoLog(int,int,java.nio.IntBuffer,java.nio.ByteBuffer) -> glGetProgramPipelineInfoLog
    void glGetProgramPipelineInfoLog(int,int,int[],int,byte[],int) -> glGetProgramPipelineInfoLog
    void glGetProgramPipelineiv(int,int,java.nio.IntBuffer) -> glGetProgramPipelineiv
    void glGetProgramPipelineiv(int,int,int[],int) -> glGetProgramPipelineiv
    int glGetProgramResourceIndex(int,int,java.nio.ByteBuffer) -> glGetProgramResourceIndex
    int glGetProgramResourceIndex(int,int,byte[],int) -> glGetProgramResourceIndex
    int glGetProgramResourceLocation(int,int,java.nio.ByteBuffer) -> glGetProgramResourceLocation
    int glGetProgramResourceLocation(int,int,byte[],int) -> glGetProgramResourceLocation
    int glGetProgramResourceLocationIndex(int,int,java.nio.ByteBuffer) -> glGetProgramResourceLocationIndex
    int glGetProgramResourceLocationIndex(int,int,byte[],int) -> glGetProgramResourceLocationIndex
    void glGetProgramResourceName(int,int,int,int,java.nio.IntBuffer,java.nio.ByteBuffer) -> glGetProgramResourceName
    void glGetProgramResourceName(int,int,int,int,int[],int,byte[],int) -> glGetProgramResourceName
    void glGetProgramResourceiv(int,int,int,int,java.nio.IntBuffer,int,java.nio.IntBuffer,java.nio.IntBuffer) -> glGetProgramResourceiv
    void glGetProgramResourceiv(int,int,int,int,int[],int,int,int[],int,int[],int) -> glGetProgramResourceiv
    void glGetProgramStageiv(int,int,int,java.nio.IntBuffer) -> glGetProgramStageiv
    void glGetProgramStageiv(int,int,int,int[],int) -> glGetProgramStageiv
    void glGetQueryIndexediv(int,int,int,java.nio.IntBuffer) -> glGetQueryIndexediv
    void glGetQueryIndexediv(int,int,int,int[],int) -> glGetQueryIndexediv
    int glGetSubroutineIndex(int,int,java.lang.String) -> glGetSubroutineIndex
    int glGetSubroutineUniformLocation(int,int,java.lang.String) -> glGetSubroutineUniformLocation
    void glGetUniformSubroutineuiv(int,int,java.nio.IntBuffer) -> glGetUniformSubroutineuiv
    void glGetUniformSubroutineuiv(int,int,int[],int) -> glGetUniformSubroutineuiv
    void glGetUniformdv(int,int,java.nio.DoubleBuffer) -> glGetUniformdv
    void glGetUniformdv(int,int,double[],int) -> glGetUniformdv
    void glGetVertexAttribLdv(int,int,java.nio.DoubleBuffer) -> glGetVertexAttribLdv
    void glGetVertexAttribLdv(int,int,double[],int) -> glGetVertexAttribLdv
    void glInvalidateBufferData(int) -> glInvalidateBufferData
    void glInvalidateBufferSubData(int,long,long) -> glInvalidateBufferSubData
    void glInvalidateTexImage(int,int) -> glInvalidateTexImage
    void glInvalidateTexSubImage(int,int,int,int,int,int,int,int) -> glInvalidateTexSubImage
    boolean glIsProgramPipeline(int) -> glIsProgramPipeline
    void glMemoryBarrier(int) -> glMemoryBarrier
    void glMinSampleShading(float) -> glMinSampleShading
    void glMultiDrawArraysIndirect(int,long,int,int) -> glMultiDrawArraysIndirect
    void glMultiDrawElementsIndirect(int,int,java.nio.Buffer,int,int) -> glMultiDrawElementsIndirect
    void glPatchParameterfv(int,java.nio.FloatBuffer) -> glPatchParameterfv
    void glPatchParameterfv(int,float[],int) -> glPatchParameterfv
    void glPatchParameteri(int,int) -> glPatchParameteri
    void glProgramUniform1d(int,int,double) -> glProgramUniform1d
    void glProgramUniform1dv(int,int,int,java.nio.DoubleBuffer) -> glProgramUniform1dv
    void glProgramUniform1dv(int,int,int,double[],int) -> glProgramUniform1dv
    void glProgramUniform1f(int,int,float) -> glProgramUniform1f
    void glProgramUniform1fv(int,int,int,java.nio.FloatBuffer) -> glProgramUniform1fv
    void glProgramUniform1fv(int,int,int,float[],int) -> glProgramUniform1fv
    void glProgramUniform1i(int,int,int) -> glProgramUniform1i
    void glProgramUniform1iv(int,int,int,java.nio.IntBuffer) -> glProgramUniform1iv
    void glProgramUniform1iv(int,int,int,int[],int) -> glProgramUniform1iv
    void glProgramUniform1ui(int,int,int) -> glProgramUniform1ui
    void glProgramUniform1uiv(int,int,int,java.nio.IntBuffer) -> glProgramUniform1uiv
    void glProgramUniform1uiv(int,int,int,int[],int) -> glProgramUniform1uiv
    void glProgramUniform2d(int,int,double,double) -> glProgramUniform2d
    void glProgramUniform2dv(int,int,int,java.nio.DoubleBuffer) -> glProgramUniform2dv
    void glProgramUniform2dv(int,int,int,double[],int) -> glProgramUniform2dv
    void glProgramUniform2f(int,int,float,float) -> glProgramUniform2f
    void glProgramUniform2fv(int,int,int,java.nio.FloatBuffer) -> glProgramUniform2fv
    void glProgramUniform2fv(int,int,int,float[],int) -> glProgramUniform2fv
    void glProgramUniform2i(int,int,int,int) -> glProgramUniform2i
    void glProgramUniform2iv(int,int,int,java.nio.IntBuffer) -> glProgramUniform2iv
    void glProgramUniform2iv(int,int,int,int[],int) -> glProgramUniform2iv
    void glProgramUniform2ui(int,int,int,int) -> glProgramUniform2ui
    void glProgramUniform2uiv(int,int,int,java.nio.IntBuffer) -> glProgramUniform2uiv
    void glProgramUniform2uiv(int,int,int,int[],int) -> glProgramUniform2uiv
    void glProgramUniform3d(int,int,double,double,double) -> glProgramUniform3d
    void glProgramUniform3dv(int,int,int,java.nio.DoubleBuffer) -> glProgramUniform3dv
    void glProgramUniform3dv(int,int,int,double[],int) -> glProgramUniform3dv
    void glProgramUniform3f(int,int,float,float,float) -> glProgramUniform3f
    void glProgramUniform3fv(int,int,int,java.nio.FloatBuffer) -> glProgramUniform3fv
    void glProgramUniform3fv(int,int,int,float[],int) -> glProgramUniform3fv
    void glProgramUniform3i(int,int,int,int,int) -> glProgramUniform3i
    void glProgramUniform3iv(int,int,int,java.nio.IntBuffer) -> glProgramUniform3iv
    void glProgramUniform3iv(int,int,int,int[],int) -> glProgramUniform3iv
    void glProgramUniform3ui(int,int,int,int,int) -> glProgramUniform3ui
    void glProgramUniform3uiv(int,int,int,java.nio.IntBuffer) -> glProgramUniform3uiv
    void glProgramUniform3uiv(int,int,int,int[],int) -> glProgramUniform3uiv
    void glProgramUniform4d(int,int,double,double,double,double) -> glProgramUniform4d
    void glProgramUniform4dv(int,int,int,java.nio.DoubleBuffer) -> glProgramUniform4dv
    void glProgramUniform4dv(int,int,int,double[],int) -> glProgramUniform4dv
    void glProgramUniform4f(int,int,float,float,float,float) -> glProgramUniform4f
    void glProgramUniform4fv(int,int,int,java.nio.FloatBuffer) -> glProgramUniform4fv
    void glProgramUniform4fv(int,int,int,float[],int) -> glProgramUniform4fv
    void glProgramUniform4i(int,int,int,int,int,int) -> glProgramUniform4i
    void glProgramUniform4iv(int,int,int,java.nio.IntBuffer) -> glProgramUniform4iv
    void glProgramUniform4iv(int,int,int,int[],int) -> glProgramUniform4iv
    void glProgramUniform4ui(int,int,int,int,int,int) -> glProgramUniform4ui
    void glProgramUniform4uiv(int,int,int,java.nio.IntBuffer) -> glProgramUniform4uiv
    void glProgramUniform4uiv(int,int,int,int[],int) -> glProgramUniform4uiv
    void glProgramUniformMatrix2dv(int,int,int,boolean,java.nio.DoubleBuffer) -> glProgramUniformMatrix2dv
    void glProgramUniformMatrix2dv(int,int,int,boolean,double[],int) -> glProgramUniformMatrix2dv
    void glProgramUniformMatrix2fv(int,int,int,boolean,java.nio.FloatBuffer) -> glProgramUniformMatrix2fv
    void glProgramUniformMatrix2fv(int,int,int,boolean,float[],int) -> glProgramUniformMatrix2fv
    void glProgramUniformMatrix2x3dv(int,int,int,boolean,java.nio.DoubleBuffer) -> glProgramUniformMatrix2x3dv
    void glProgramUniformMatrix2x3dv(int,int,int,boolean,double[],int) -> glProgramUniformMatrix2x3dv
    void glProgramUniformMatrix2x3fv(int,int,int,boolean,java.nio.FloatBuffer) -> glProgramUniformMatrix2x3fv
    void glProgramUniformMatrix2x3fv(int,int,int,boolean,float[],int) -> glProgramUniformMatrix2x3fv
    void glProgramUniformMatrix2x4dv(int,int,int,boolean,java.nio.DoubleBuffer) -> glProgramUniformMatrix2x4dv
    void glProgramUniformMatrix2x4dv(int,int,int,boolean,double[],int) -> glProgramUniformMatrix2x4dv
    void glProgramUniformMatrix2x4fv(int,int,int,boolean,java.nio.FloatBuffer) -> glProgramUniformMatrix2x4fv
    void glProgramUniformMatrix2x4fv(int,int,int,boolean,float[],int) -> glProgramUniformMatrix2x4fv
    void glProgramUniformMatrix3dv(int,int,int,boolean,java.nio.DoubleBuffer) -> glProgramUniformMatrix3dv
    void glProgramUniformMatrix3dv(int,int,int,boolean,double[],int) -> glProgramUniformMatrix3dv
    void glProgramUniformMatrix3fv(int,int,int,boolean,java.nio.FloatBuffer) -> glProgramUniformMatrix3fv
    void glProgramUniformMatrix3fv(int,int,int,boolean,float[],int) -> glProgramUniformMatrix3fv
    void glProgramUniformMatrix3x2dv(int,int,int,boolean,java.nio.DoubleBuffer) -> glProgramUniformMatrix3x2dv
    void glProgramUniformMatrix3x2dv(int,int,int,boolean,double[],int) -> glProgramUniformMatrix3x2dv
    void glProgramUniformMatrix3x2fv(int,int,int,boolean,java.nio.FloatBuffer) -> glProgramUniformMatrix3x2fv
    void glProgramUniformMatrix3x2fv(int,int,int,boolean,float[],int) -> glProgramUniformMatrix3x2fv
    void glProgramUniformMatrix3x4dv(int,int,int,boolean,java.nio.DoubleBuffer) -> glProgramUniformMatrix3x4dv
    void glProgramUniformMatrix3x4dv(int,int,int,boolean,double[],int) -> glProgramUniformMatrix3x4dv
    void glProgramUniformMatrix3x4fv(int,int,int,boolean,java.nio.FloatBuffer) -> glProgramUniformMatrix3x4fv
    void glProgramUniformMatrix3x4fv(int,int,int,boolean,float[],int) -> glProgramUniformMatrix3x4fv
    void glProgramUniformMatrix4dv(int,int,int,boolean,java.nio.DoubleBuffer) -> glProgramUniformMatrix4dv
    void glProgramUniformMatrix4dv(int,int,int,boolean,double[],int) -> glProgramUniformMatrix4dv
    void glProgramUniformMatrix4fv(int,int,int,boolean,java.nio.FloatBuffer) -> glProgramUniformMatrix4fv
    void glProgramUniformMatrix4fv(int,int,int,boolean,float[],int) -> glProgramUniformMatrix4fv
    void glProgramUniformMatrix4x2dv(int,int,int,boolean,java.nio.DoubleBuffer) -> glProgramUniformMatrix4x2dv
    void glProgramUniformMatrix4x2dv(int,int,int,boolean,double[],int) -> glProgramUniformMatrix4x2dv
    void glProgramUniformMatrix4x2fv(int,int,int,boolean,java.nio.FloatBuffer) -> glProgramUniformMatrix4x2fv
    void glProgramUniformMatrix4x2fv(int,int,int,boolean,float[],int) -> glProgramUniformMatrix4x2fv
    void glProgramUniformMatrix4x3dv(int,int,int,boolean,java.nio.DoubleBuffer) -> glProgramUniformMatrix4x3dv
    void glProgramUniformMatrix4x3dv(int,int,int,boolean,double[],int) -> glProgramUniformMatrix4x3dv
    void glProgramUniformMatrix4x3fv(int,int,int,boolean,java.nio.FloatBuffer) -> glProgramUniformMatrix4x3fv
    void glProgramUniformMatrix4x3fv(int,int,int,boolean,float[],int) -> glProgramUniformMatrix4x3fv
    void glScissorArrayv(int,int,java.nio.IntBuffer) -> glScissorArrayv
    void glScissorArrayv(int,int,int[],int) -> glScissorArrayv
    void glScissorIndexed(int,int,int,int,int) -> glScissorIndexed
    void glScissorIndexedv(int,java.nio.IntBuffer) -> glScissorIndexedv
    void glScissorIndexedv(int,int[],int) -> glScissorIndexedv
    void glShaderStorageBlockBinding(int,int,int) -> glShaderStorageBlockBinding
    void glTexBufferRange(int,int,int,long,long) -> glTexBufferRange
    void glTexStorage2DMultisample(int,int,int,int,int,boolean) -> glTexStorage2DMultisample
    void glTexStorage3DMultisample(int,int,int,int,int,int,boolean) -> glTexStorage3DMultisample
    void glTextureStorage2DMultisampleEXT(int,int,int,int,int,int,boolean) -> glTextureStorage2DMultisampleEXT
    void glTextureStorage3DMultisampleEXT(int,int,int,int,int,int,int,boolean) -> glTextureStorage3DMultisampleEXT
    void glTextureView(int,int,int,int,int,int,int,int) -> glTextureView
    void glUniform1d(int,double) -> glUniform1d
    void glUniform1dv(int,int,java.nio.DoubleBuffer) -> glUniform1dv
    void glUniform1dv(int,int,double[],int) -> glUniform1dv
    void glUniform2d(int,double,double) -> glUniform2d
    void glUniform2dv(int,int,java.nio.DoubleBuffer) -> glUniform2dv
    void glUniform2dv(int,int,double[],int) -> glUniform2dv
    void glUniform3d(int,double,double,double) -> glUniform3d
    void glUniform3dv(int,int,java.nio.DoubleBuffer) -> glUniform3dv
    void glUniform3dv(int,int,double[],int) -> glUniform3dv
    void glUniform4d(int,double,double,double,double) -> glUniform4d
    void glUniform4dv(int,int,java.nio.DoubleBuffer) -> glUniform4dv
    void glUniform4dv(int,int,double[],int) -> glUniform4dv
    void glUniformMatrix2dv(int,int,boolean,java.nio.DoubleBuffer) -> glUniformMatrix2dv
    void glUniformMatrix2dv(int,int,boolean,double[],int) -> glUniformMatrix2dv
    void glUniformMatrix2x3dv(int,int,boolean,java.nio.DoubleBuffer) -> glUniformMatrix2x3dv
    void glUniformMatrix2x3dv(int,int,boolean,double[],int) -> glUniformMatrix2x3dv
    void glUniformMatrix2x4dv(int,int,boolean,java.nio.DoubleBuffer) -> glUniformMatrix2x4dv
    void glUniformMatrix2x4dv(int,int,boolean,double[],int) -> glUniformMatrix2x4dv
    void glUniformMatrix3dv(int,int,boolean,java.nio.DoubleBuffer) -> glUniformMatrix3dv
    void glUniformMatrix3dv(int,int,boolean,double[],int) -> glUniformMatrix3dv
    void glUniformMatrix3x2dv(int,int,boolean,java.nio.DoubleBuffer) -> glUniformMatrix3x2dv
    void glUniformMatrix3x2dv(int,int,boolean,double[],int) -> glUniformMatrix3x2dv
    void glUniformMatrix3x4dv(int,int,boolean,java.nio.DoubleBuffer) -> glUniformMatrix3x4dv
    void glUniformMatrix3x4dv(int,int,boolean,double[],int) -> glUniformMatrix3x4dv
    void glUniformMatrix4dv(int,int,boolean,java.nio.DoubleBuffer) -> glUniformMatrix4dv
    void glUniformMatrix4dv(int,int,boolean,double[],int) -> glUniformMatrix4dv
    void glUniformMatrix4x2dv(int,int,boolean,java.nio.DoubleBuffer) -> glUniformMatrix4x2dv
    void glUniformMatrix4x2dv(int,int,boolean,double[],int) -> glUniformMatrix4x2dv
    void glUniformMatrix4x3dv(int,int,boolean,java.nio.DoubleBuffer) -> glUniformMatrix4x3dv
    void glUniformMatrix4x3dv(int,int,boolean,double[],int) -> glUniformMatrix4x3dv
    void glUniformSubroutinesuiv(int,int,java.nio.IntBuffer) -> glUniformSubroutinesuiv
    void glUniformSubroutinesuiv(int,int,int[],int) -> glUniformSubroutinesuiv
    void glUseProgramStages(int,int,int) -> glUseProgramStages
    void glValidateProgramPipeline(int) -> glValidateProgramPipeline
    void glVertexAttribBinding(int,int) -> glVertexAttribBinding
    void glVertexAttribFormat(int,int,int,boolean,int) -> glVertexAttribFormat
    void glVertexAttribIFormat(int,int,int,int) -> glVertexAttribIFormat
    void glVertexAttribL1d(int,double) -> glVertexAttribL1d
    void glVertexAttribL1dv(int,java.nio.DoubleBuffer) -> glVertexAttribL1dv
    void glVertexAttribL1dv(int,double[],int) -> glVertexAttribL1dv
    void glVertexAttribL2d(int,double,double) -> glVertexAttribL2d
    void glVertexAttribL2dv(int,java.nio.DoubleBuffer) -> glVertexAttribL2dv
    void glVertexAttribL2dv(int,double[],int) -> glVertexAttribL2dv
    void glVertexAttribL3d(int,double,double,double) -> glVertexAttribL3d
    void glVertexAttribL3dv(int,java.nio.DoubleBuffer) -> glVertexAttribL3dv
    void glVertexAttribL3dv(int,double[],int) -> glVertexAttribL3dv
    void glVertexAttribL4d(int,double,double,double,double) -> glVertexAttribL4d
    void glVertexAttribL4dv(int,java.nio.DoubleBuffer) -> glVertexAttribL4dv
    void glVertexAttribL4dv(int,double[],int) -> glVertexAttribL4dv
    void glVertexAttribLFormat(int,int,int,int) -> glVertexAttribLFormat
    void glVertexAttribLPointer(int,int,int,int,long) -> glVertexAttribLPointer
    void glVertexBindingDivisor(int,int) -> glVertexBindingDivisor
    void glViewportArrayv(int,int,java.nio.FloatBuffer) -> glViewportArrayv
    void glViewportArrayv(int,int,float[],int) -> glViewportArrayv
    void glViewportIndexedf(int,float,float,float,float) -> glViewportIndexedf
    void glViewportIndexedfv(int,java.nio.FloatBuffer) -> glViewportIndexedfv
    void glViewportIndexedfv(int,float[],int) -> glViewportIndexedfv
javax.media.opengl.GL4ES3 -> javax.media.opengl.GL4ES3:
    int GL_PRIMITIVE_RESTART_FIXED_INDEX -> GL_PRIMITIVE_RESTART_FIXED_INDEX
    int GL_TRANSFORM_FEEDBACK -> GL_TRANSFORM_FEEDBACK
    int GL_TRANSFORM_FEEDBACK_BINDING -> GL_TRANSFORM_FEEDBACK_BINDING
    int GL_PROGRAM_BINARY_RETRIEVABLE_HINT -> GL_PROGRAM_BINARY_RETRIEVABLE_HINT
    int GL_COMPRESSED_R11_EAC -> GL_COMPRESSED_R11_EAC
    int GL_COMPRESSED_SIGNED_R11_EAC -> GL_COMPRESSED_SIGNED_R11_EAC
    int GL_COMPRESSED_RG11_EAC -> GL_COMPRESSED_RG11_EAC
    int GL_COMPRESSED_SIGNED_RG11_EAC -> GL_COMPRESSED_SIGNED_RG11_EAC
    int GL_COMPRESSED_RGB8_ETC2 -> GL_COMPRESSED_RGB8_ETC2
    int GL_COMPRESSED_SRGB8_ETC2 -> GL_COMPRESSED_SRGB8_ETC2
    int GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 -> GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
    int GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 -> GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
    int GL_COMPRESSED_RGBA8_ETC2_EAC -> GL_COMPRESSED_RGBA8_ETC2_EAC
    int GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC -> GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
    int GL_MAX_ELEMENT_INDEX -> GL_MAX_ELEMENT_INDEX
    int GL_NUM_SAMPLE_COUNTS -> GL_NUM_SAMPLE_COUNTS
    int GL_TEXTURE_IMMUTABLE_LEVELS -> GL_TEXTURE_IMMUTABLE_LEVELS
    void glBindTransformFeedback(int,int) -> glBindTransformFeedback
    void glDeleteTransformFeedbacks(int,java.nio.IntBuffer) -> glDeleteTransformFeedbacks
    void glDeleteTransformFeedbacks(int,int[],int) -> glDeleteTransformFeedbacks
    void glGenTransformFeedbacks(int,java.nio.IntBuffer) -> glGenTransformFeedbacks
    void glGenTransformFeedbacks(int,int[],int) -> glGenTransformFeedbacks
    void glInvalidateFramebuffer(int,int,java.nio.IntBuffer) -> glInvalidateFramebuffer
    void glInvalidateFramebuffer(int,int,int[],int) -> glInvalidateFramebuffer
    void glInvalidateSubFramebuffer(int,int,java.nio.IntBuffer,int,int,int,int) -> glInvalidateSubFramebuffer
    void glInvalidateSubFramebuffer(int,int,int[],int,int,int,int,int) -> glInvalidateSubFramebuffer
    boolean glIsTransformFeedback(int) -> glIsTransformFeedback
    void glPauseTransformFeedback() -> glPauseTransformFeedback
    void glProgramParameteri(int,int,int) -> glProgramParameteri
    void glResumeTransformFeedback() -> glResumeTransformFeedback
javax.media.opengl.GL4bc -> javax.media.opengl.GL4bc:
    int GL_DISPLAY_LIST -> GL_DISPLAY_LIST
    void glDrawArraysIndirect(int,java.nio.Buffer) -> glDrawArraysIndirect
    void glDrawElementsIndirect(int,int,java.nio.Buffer) -> glDrawElementsIndirect
    void glMultiDrawArraysIndirect(int,java.nio.Buffer,int,int) -> glMultiDrawArraysIndirect
    void glDrawElementsInstancedBaseInstance(int,int,int,java.nio.Buffer,int,int) -> glDrawElementsInstancedBaseInstance
    void glDrawElementsInstancedBaseVertexBaseInstance(int,int,int,java.nio.Buffer,int,int,int) -> glDrawElementsInstancedBaseVertexBaseInstance
    void glVertexAttribLPointer(int,int,int,int,java.nio.Buffer) -> glVertexAttribLPointer
javax.media.opengl.GLAnimatorControl -> javax.media.opengl.GLAnimatorControl:
    boolean isStarted() -> isStarted
    boolean isAnimating() -> isAnimating
    boolean isPaused() -> isPaused
    java.lang.Thread getThread() -> getThread
    boolean start() -> start
    boolean stop() -> stop
    boolean pause() -> pause
    boolean resume() -> resume
    void add(javax.media.opengl.GLAutoDrawable) -> add
    void remove(javax.media.opengl.GLAutoDrawable) -> remove
    javax.media.opengl.GLAnimatorControl$UncaughtExceptionHandler getUncaughtExceptionHandler() -> getUncaughtExceptionHandler
    void setUncaughtExceptionHandler(javax.media.opengl.GLAnimatorControl$UncaughtExceptionHandler) -> setUncaughtExceptionHandler
javax.media.opengl.GLAnimatorControl$UncaughtExceptionHandler -> javax.media.opengl.GLAnimatorControl$UncaughtExceptionHandler:
    void uncaughtException(javax.media.opengl.GLAnimatorControl,javax.media.opengl.GLAutoDrawable,java.lang.Throwable) -> uncaughtException
javax.media.opengl.GLArrayData -> javax.media.opengl.GLArrayData:
    void associate(java.lang.Object,boolean) -> associate
    boolean isVertexAttribute() -> isVertexAttribute
    int getIndex() -> getIndex
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    int getLocation() -> getLocation
    int setLocation(int) -> setLocation
    int setLocation(javax.media.opengl.GL2ES2,int) -> setLocation
    int setLocation(javax.media.opengl.GL2ES2,int,int) -> setLocation
    boolean isVBO() -> isVBO
    long getVBOOffset() -> getVBOOffset
    int getVBOName() -> getVBOName
    int getVBOUsage() -> getVBOUsage
    int getVBOTarget() -> getVBOTarget
    java.nio.Buffer getBuffer() -> getBuffer
    int getComponentCount() -> getComponentCount
    int getComponentType() -> getComponentType
    int getComponentSizeInBytes() -> getComponentSizeInBytes
    int getElementCount() -> getElementCount
    int getSizeInBytes() -> getSizeInBytes
    boolean getNormalized() -> getNormalized
    int getStride() -> getStride
    java.lang.String toString() -> toString
    void destroy(javax.media.opengl.GL) -> destroy
javax.media.opengl.GLAutoDrawable -> javax.media.opengl.GLAutoDrawable:
    boolean SCREEN_CHANGE_ACTION_ENABLED -> SCREEN_CHANGE_ACTION_ENABLED
    javax.media.opengl.GLDrawable getDelegatedDrawable() -> getDelegatedDrawable
    javax.media.opengl.GLContext getContext() -> getContext
    javax.media.opengl.GLContext setContext(javax.media.opengl.GLContext,boolean) -> setContext
    void addGLEventListener(javax.media.opengl.GLEventListener) -> addGLEventListener
    void addGLEventListener(int,javax.media.opengl.GLEventListener) -> addGLEventListener
    int getGLEventListenerCount() -> getGLEventListenerCount
    boolean areAllGLEventListenerInitialized() -> areAllGLEventListenerInitialized
    javax.media.opengl.GLEventListener getGLEventListener(int) -> getGLEventListener
    boolean getGLEventListenerInitState(javax.media.opengl.GLEventListener) -> getGLEventListenerInitState
    void setGLEventListenerInitState(javax.media.opengl.GLEventListener,boolean) -> setGLEventListenerInitState
    javax.media.opengl.GLEventListener disposeGLEventListener(javax.media.opengl.GLEventListener,boolean) -> disposeGLEventListener
    javax.media.opengl.GLEventListener removeGLEventListener(javax.media.opengl.GLEventListener) -> removeGLEventListener
    void setAnimator(javax.media.opengl.GLAnimatorControl) -> setAnimator
    javax.media.opengl.GLAnimatorControl getAnimator() -> getAnimator
    java.lang.Thread setExclusiveContextThread(java.lang.Thread) -> setExclusiveContextThread
    java.lang.Thread getExclusiveContextThread() -> getExclusiveContextThread
    boolean invoke(boolean,javax.media.opengl.GLRunnable) -> invoke
    boolean invoke(boolean,java.util.List) -> invoke
    void flushGLRunnables() -> flushGLRunnables
    void destroy() -> destroy
    void display() -> display
    void setAutoSwapBufferMode(boolean) -> setAutoSwapBufferMode
    boolean getAutoSwapBufferMode() -> getAutoSwapBufferMode
    void setContextCreationFlags(int) -> setContextCreationFlags
    int getContextCreationFlags() -> getContextCreationFlags
    javax.media.opengl.GLContext createContext(javax.media.opengl.GLContext) -> createContext
    javax.media.opengl.GL getGL() -> getGL
    javax.media.opengl.GL setGL(javax.media.opengl.GL) -> setGL
    java.lang.Object getUpstreamWidget() -> getUpstreamWidget
    com.jogamp.common.util.locks.RecursiveLock getUpstreamLock() -> getUpstreamLock
    boolean isThreadGLCapable() -> isThreadGLCapable
    void <clinit>() -> <clinit>
javax.media.opengl.GLBase -> javax.media.opengl.GLBase:
    boolean isGL() -> isGL
    boolean isGL4bc() -> isGL4bc
    boolean isGL4() -> isGL4
    boolean isGL3bc() -> isGL3bc
    boolean isGL3() -> isGL3
    boolean isGL2() -> isGL2
    boolean isGLES1() -> isGLES1
    boolean isGLES2() -> isGLES2
    boolean isGLES3() -> isGLES3
    boolean isGLES() -> isGLES
    boolean isGL2ES1() -> isGL2ES1
    boolean isGL2ES2() -> isGL2ES2
    boolean isGL2ES3() -> isGL2ES3
    boolean isGL3ES3() -> isGL3ES3
    boolean isGL4ES3() -> isGL4ES3
    boolean isGL2GL3() -> isGL2GL3
    boolean isGL4core() -> isGL4core
    boolean isGL3core() -> isGL3core
    boolean isGLcore() -> isGLcore
    boolean isGLES2Compatible() -> isGLES2Compatible
    boolean isGLES3Compatible() -> isGLES3Compatible
    boolean hasGLSL() -> hasGLSL
    javax.media.opengl.GL getDownstreamGL() -> getDownstreamGL
    javax.media.opengl.GL getRootGL() -> getRootGL
    javax.media.opengl.GL getGL() -> getGL
    javax.media.opengl.GL4bc getGL4bc() -> getGL4bc
    javax.media.opengl.GL4 getGL4() -> getGL4
    javax.media.opengl.GL3bc getGL3bc() -> getGL3bc
    javax.media.opengl.GL3 getGL3() -> getGL3
    javax.media.opengl.GL2 getGL2() -> getGL2
    javax.media.opengl.GLES1 getGLES1() -> getGLES1
    javax.media.opengl.GLES2 getGLES2() -> getGLES2
    javax.media.opengl.GLES3 getGLES3() -> getGLES3
    javax.media.opengl.GL2ES1 getGL2ES1() -> getGL2ES1
    javax.media.opengl.GL2ES2 getGL2ES2() -> getGL2ES2
    javax.media.opengl.GL2ES3 getGL2ES3() -> getGL2ES3
    javax.media.opengl.GL3ES3 getGL3ES3() -> getGL3ES3
    javax.media.opengl.GL4ES3 getGL4ES3() -> getGL4ES3
    javax.media.opengl.GL2GL3 getGL2GL3() -> getGL2GL3
    javax.media.opengl.GLProfile getGLProfile() -> getGLProfile
    javax.media.opengl.GLContext getContext() -> getContext
    boolean isFunctionAvailable(java.lang.String) -> isFunctionAvailable
    boolean isExtensionAvailable(java.lang.String) -> isExtensionAvailable
    boolean hasBasicFBOSupport() -> hasBasicFBOSupport
    boolean hasFullFBOSupport() -> hasFullFBOSupport
    int getMaxRenderbufferSamples() -> getMaxRenderbufferSamples
    boolean isNPOTTextureAvailable() -> isNPOTTextureAvailable
    boolean isTextureFormatBGRA8888Available() -> isTextureFormatBGRA8888Available
    void setSwapInterval(int) -> setSwapInterval
    int getSwapInterval() -> getSwapInterval
    java.lang.Object getPlatformGLExtensions() -> getPlatformGLExtensions
    java.lang.Object getExtension(java.lang.String) -> getExtension
    void glClearDepth(double) -> glClearDepth
    void glDepthRange(double,double) -> glDepthRange
    int getBoundBuffer(int) -> getBoundBuffer
    javax.media.opengl.GLBufferStorage getBufferStorage(int) -> getBufferStorage
    javax.media.opengl.GLBufferStorage mapBuffer(int,int) -> mapBuffer
    javax.media.opengl.GLBufferStorage mapBufferRange(int,long,long,int) -> mapBufferRange
    boolean isVBOArrayBound() -> isVBOArrayBound
    boolean isVBOElementArrayBound() -> isVBOElementArrayBound
    int getBoundFramebuffer(int) -> getBoundFramebuffer
    int getDefaultDrawFramebuffer() -> getDefaultDrawFramebuffer
    int getDefaultReadFramebuffer() -> getDefaultReadFramebuffer
    int getDefaultReadBuffer() -> getDefaultReadBuffer
javax.media.opengl.GLBufferStorage -> javax.media.opengl.GLBufferStorage:
    int name -> name
    long size -> size
    int mutableUsage -> mutableUsage
    int immutableFlags -> immutableFlags
    java.nio.ByteBuffer mappedBuffer -> mappedBuffer
    java.lang.String msgClazzName -> msgClazzName
    void <init>(int,long,int,int) -> <init>
    void reset(long,int,int) -> reset
    void setMappedBuffer(java.nio.ByteBuffer) -> setMappedBuffer
    int getName() -> getName
    long getSize() -> getSize
    boolean isMutableStorage() -> isMutableStorage
    int getMutableUsage() -> getMutableUsage
    int getImmutableFlags() -> getImmutableFlags
    java.nio.ByteBuffer getMappedBuffer() -> getMappedBuffer
    java.lang.String toString() -> toString
    java.lang.String toString(boolean) -> toString
javax.media.opengl.GLCapabilities -> javax.media.opengl.GLCapabilities:
    javax.media.opengl.GLProfile glProfile -> glProfile
    boolean isPBuffer -> isPBuffer
    boolean isFBO -> isFBO
    boolean doubleBuffered -> doubleBuffered
    boolean stereo -> stereo
    boolean hardwareAccelerated -> hardwareAccelerated
    int depthBits -> depthBits
    int stencilBits -> stencilBits
    int accumRedBits -> accumRedBits
    int accumGreenBits -> accumGreenBits
    int accumBlueBits -> accumBlueBits
    int accumAlphaBits -> accumAlphaBits
    java.lang.String sampleExtension -> sampleExtension
    boolean sampleBuffers -> sampleBuffers
    int numSamples -> numSamples
    void <init>(javax.media.opengl.GLProfile) -> <init>
    java.lang.Object cloneMutable() -> cloneMutable
    java.lang.Object clone() -> clone
    javax.media.opengl.GLCapabilities copyFrom(javax.media.opengl.GLCapabilitiesImmutable) -> copyFrom
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(javax.media.nativewindow.CapabilitiesImmutable) -> compareTo
    javax.media.opengl.GLProfile getGLProfile() -> getGLProfile
    void setGLProfile(javax.media.opengl.GLProfile) -> setGLProfile
    boolean isPBuffer() -> isPBuffer
    void setPBuffer(boolean) -> setPBuffer
    boolean isFBO() -> isFBO
    void setFBO(boolean) -> setFBO
    boolean getDoubleBuffered() -> getDoubleBuffered
    void setDoubleBuffered(boolean) -> setDoubleBuffered
    boolean getStereo() -> getStereo
    void setStereo(boolean) -> setStereo
    boolean getHardwareAccelerated() -> getHardwareAccelerated
    void setHardwareAccelerated(boolean) -> setHardwareAccelerated
    int getDepthBits() -> getDepthBits
    void setDepthBits(int) -> setDepthBits
    int getStencilBits() -> getStencilBits
    void setStencilBits(int) -> setStencilBits
    int getAccumRedBits() -> getAccumRedBits
    void setAccumRedBits(int) -> setAccumRedBits
    int getAccumGreenBits() -> getAccumGreenBits
    void setAccumGreenBits(int) -> setAccumGreenBits
    int getAccumBlueBits() -> getAccumBlueBits
    void setAccumBlueBits(int) -> setAccumBlueBits
    int getAccumAlphaBits() -> getAccumAlphaBits
    void setAccumAlphaBits(int) -> setAccumAlphaBits
    void setSampleExtension(java.lang.String) -> setSampleExtension
    java.lang.String getSampleExtension() -> getSampleExtension
    void setSampleBuffers(boolean) -> setSampleBuffers
    boolean getSampleBuffers() -> getSampleBuffers
    void setNumSamples(int) -> setNumSamples
    int getNumSamples() -> getNumSamples
    java.lang.StringBuilder toString(java.lang.StringBuilder) -> toString
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
javax.media.opengl.GLCapabilitiesChooser -> javax.media.opengl.GLCapabilitiesChooser:
javax.media.opengl.GLCapabilitiesImmutable -> javax.media.opengl.GLCapabilitiesImmutable:
    java.lang.String DEFAULT_SAMPLE_EXTENSION -> DEFAULT_SAMPLE_EXTENSION
    javax.media.opengl.GLProfile getGLProfile() -> getGLProfile
    int getAccumAlphaBits() -> getAccumAlphaBits
    int getAccumBlueBits() -> getAccumBlueBits
    int getAccumGreenBits() -> getAccumGreenBits
    int getAccumRedBits() -> getAccumRedBits
    int getDepthBits() -> getDepthBits
    boolean getDoubleBuffered() -> getDoubleBuffered
    boolean getHardwareAccelerated() -> getHardwareAccelerated
    java.lang.String getSampleExtension() -> getSampleExtension
    boolean getSampleBuffers() -> getSampleBuffers
    int getNumSamples() -> getNumSamples
    int getStencilBits() -> getStencilBits
    boolean getStereo() -> getStereo
    boolean isPBuffer() -> isPBuffer
    boolean isFBO() -> isFBO
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
javax.media.opengl.GLContext -> javax.media.opengl.GLContext:
    boolean DEBUG -> DEBUG
    boolean TRACE_SWITCH -> TRACE_SWITCH
    boolean DEBUG_TRACE_SWITCH -> DEBUG_TRACE_SWITCH
    boolean PROFILE_ALIASING -> PROFILE_ALIASING
    boolean FORCE_NO_FBO_SUPPORT -> FORCE_NO_FBO_SUPPORT
    boolean FORCE_MIN_FBO_SUPPORT -> FORCE_MIN_FBO_SUPPORT
    boolean DEBUG_GL -> DEBUG_GL
    boolean TRACE_GL -> TRACE_GL
    int CONTEXT_NOT_CURRENT -> CONTEXT_NOT_CURRENT
    int CONTEXT_CURRENT -> CONTEXT_CURRENT
    int CONTEXT_CURRENT_NEW -> CONTEXT_CURRENT_NEW
    com.jogamp.common.util.VersionNumber Version100 -> Version100
    com.jogamp.common.util.VersionNumber Version110 -> Version110
    com.jogamp.common.util.VersionNumber Version120 -> Version120
    com.jogamp.common.util.VersionNumber Version130 -> Version130
    com.jogamp.common.util.VersionNumber Version140 -> Version140
    com.jogamp.common.util.VersionNumber Version150 -> Version150
    com.jogamp.common.util.VersionNumber Version300 -> Version300
    com.jogamp.common.util.VersionNumber Version310 -> Version310
    com.jogamp.common.util.VersionNumber Version320 -> Version320
    com.jogamp.common.util.VersionNumber Version430 -> Version430
    com.jogamp.common.util.VersionNumber Version800 -> Version800
    int CTX_IMPL_FULL_MASK -> CTX_IMPL_FULL_MASK
    int CTX_IMPL_CACHE_MASK -> CTX_IMPL_CACHE_MASK
    int CTX_IS_ARB_CREATED -> CTX_IS_ARB_CREATED
    int CTX_PROFILE_COMPAT -> CTX_PROFILE_COMPAT
    int CTX_PROFILE_CORE -> CTX_PROFILE_CORE
    int CTX_PROFILE_ES -> CTX_PROFILE_ES
    int CTX_OPTION_FORWARD -> CTX_OPTION_FORWARD
    int CTX_OPTION_DEBUG -> CTX_OPTION_DEBUG
    int CTX_IMPL_ACCEL_SOFT -> CTX_IMPL_ACCEL_SOFT
    int CTX_IMPL_ES2_COMPAT -> CTX_IMPL_ES2_COMPAT
    int CTX_IMPL_ES3_COMPAT -> CTX_IMPL_ES3_COMPAT
    int CTX_IMPL_FBO -> CTX_IMPL_FBO
    int CTX_IMPL_FP32_COMPAT_API -> CTX_IMPL_FP32_COMPAT_API
    java.lang.ThreadLocal currentContext -> currentContext
    java.util.HashMap attachedObjects -> attachedObjects
    com.jogamp.common.util.locks.RecursiveLock lock -> lock
    long contextHandle -> contextHandle
    com.jogamp.common.util.VersionNumber ctxVersion -> ctxVersion
    int ctxOptions -> ctxOptions
    java.lang.String ctxVersionString -> ctxVersionString
    com.jogamp.common.util.VersionNumberString ctxVendorVersion -> ctxVendorVersion
    com.jogamp.common.util.VersionNumber ctxGLSLVersion -> ctxGLSLVersion
    int currentSwapInterval -> currentSwapInterval
    com.jogamp.opengl.GLRendererQuirks glRendererQuirks -> glRendererQuirks
    boolean drawableRetargeted -> drawableRetargeted
    int currentSwapGroup -> currentSwapGroup
    int[][] GL_VERSIONS -> GL_VERSIONS
    int[][] ES_VERSIONS -> ES_VERSIONS
    java.util.IdentityHashMap deviceVersionAvailable -> deviceVersionAvailable
    java.util.IdentityHashMap deviceVersionsAvailableSet -> deviceVersionsAvailableSet
    void <init>() -> <init>
    void resetStates(boolean) -> resetStates
    boolean isShared() -> isShared
    java.util.List getCreatedShares() -> getCreatedShares
    java.util.List getDestroyedShares() -> getDestroyedShares
    com.jogamp.opengl.GLRendererQuirks getRendererQuirks() -> getRendererQuirks
    boolean hasRendererQuirk(int) -> hasRendererQuirk
    javax.media.opengl.GLDrawable setGLDrawable(javax.media.opengl.GLDrawable,boolean) -> setGLDrawable
    javax.media.opengl.GLDrawable getGLDrawable() -> getGLDrawable
    boolean isGLReadDrawableAvailable() -> isGLReadDrawableAvailable
    javax.media.opengl.GLDrawable setGLReadDrawable(javax.media.opengl.GLDrawable) -> setGLReadDrawable
    javax.media.opengl.GLDrawable getGLReadDrawable() -> getGLReadDrawable
    int makeCurrent() -> makeCurrent
    void release() -> release
    void copy(javax.media.opengl.GLContext,int) -> copy
    javax.media.opengl.GL getCurrentGL() -> getCurrentGL
    javax.media.opengl.GLContext getCurrent() -> getCurrent
    boolean isCurrent() -> isCurrent
    void validateCurrent() -> validateCurrent
    java.lang.String makeCurrentResultToString(int) -> makeCurrentResultToString
    void setCurrent(javax.media.opengl.GLContext) -> setCurrent
    void destroy() -> destroy
    javax.media.opengl.GL getRootGL() -> getRootGL
    javax.media.opengl.GL getGL() -> getGL
    javax.media.opengl.GL setGL(javax.media.opengl.GL) -> setGL
    long getHandle() -> getHandle
    boolean isCreated() -> isCreated
    java.lang.Object getAttachedObject(java.lang.String) -> getAttachedObject
    java.lang.Object attachObject(java.lang.String,java.lang.Object) -> attachObject
    java.lang.Object detachObject(java.lang.String) -> detachObject
    java.lang.String toString() -> toString
    java.lang.StringBuilder append(java.lang.StringBuilder) -> append
    boolean isFunctionAvailable(java.lang.String) -> isFunctionAvailable
    boolean isExtensionAvailable(java.lang.String) -> isExtensionAvailable
    int getPlatformExtensionCount() -> getPlatformExtensionCount
    java.lang.String getPlatformExtensionsString() -> getPlatformExtensionsString
    int getGLExtensionCount() -> getGLExtensionCount
    java.lang.String getGLExtensionsString() -> getGLExtensionsString
    int getContextCreationFlags() -> getContextCreationFlags
    void setContextCreationFlags(int) -> setContextCreationFlags
    java.lang.String getGLVersion() -> getGLVersion
    com.jogamp.common.util.VersionNumber getGLVersionNumber() -> getGLVersionNumber
    com.jogamp.common.util.VersionNumberString getGLVendorVersionNumber() -> getGLVendorVersionNumber
    boolean isGLCompatibilityProfile() -> isGLCompatibilityProfile
    boolean isGLCoreProfile() -> isGLCoreProfile
    boolean isGLESProfile() -> isGLESProfile
    boolean isGLForwardCompatible() -> isGLForwardCompatible
    boolean isGLDebugEnabled() -> isGLDebugEnabled
    boolean isCreatedWithARBMethod() -> isCreatedWithARBMethod
    com.jogamp.common.util.VersionNumber getGLSLVersionNumber() -> getGLSLVersionNumber
    java.lang.String getGLSLVersionString() -> getGLSLVersionString
    com.jogamp.common.util.VersionNumber getStaticGLSLVersionNumber(int,int,int) -> getStaticGLSLVersionNumber
    boolean isGLES2Compatible() -> isGLES2Compatible
    boolean isGLES3Compatible() -> isGLES3Compatible
    boolean isHardwareRasterizer() -> isHardwareRasterizer
    boolean hasGLSL() -> hasGLSL
    boolean hasBasicFBOSupport() -> hasBasicFBOSupport
    boolean hasFullFBOSupport() -> hasFullFBOSupport
    boolean hasFP32CompatAPI() -> hasFP32CompatAPI
    int getMaxRenderbufferSamples() -> getMaxRenderbufferSamples
    boolean isNPOTTextureAvailable() -> isNPOTTextureAvailable
    boolean isTextureFormatBGRA8888Available() -> isTextureFormatBGRA8888Available
    boolean isGL4bc() -> isGL4bc
    boolean isGL4() -> isGL4
    boolean isGL4core() -> isGL4core
    boolean isGL3bc() -> isGL3bc
    boolean isGL3() -> isGL3
    boolean isGL3core() -> isGL3core
    boolean isGLcore() -> isGLcore
    boolean isCPUDataSourcingAvail() -> isCPUDataSourcingAvail
    boolean hasNoDefaultVAO() -> hasNoDefaultVAO
    int getDefaultVAO() -> getDefaultVAO
    boolean isGL2() -> isGL2
    boolean isGL2GL3() -> isGL2GL3
    boolean isGLES1() -> isGLES1
    boolean isGLES2() -> isGLES2
    boolean isGLES3() -> isGLES3
    boolean isGLES() -> isGLES
    boolean isGL2ES1() -> isGL2ES1
    boolean isGL2ES2() -> isGL2ES2
    boolean isGL2ES3() -> isGL2ES3
    boolean isGL3ES3() -> isGL3ES3
    boolean isGL4ES3() -> isGL4ES3
    boolean setSwapInterval(int) -> setSwapInterval
    boolean setSwapIntervalImpl(int) -> setSwapIntervalImpl
    int getSwapInterval() -> getSwapInterval
    void setDefaultSwapInterval() -> setDefaultSwapInterval
    boolean queryMaxSwapGroups(int[],int,int[],int) -> queryMaxSwapGroups
    boolean queryMaxSwapGroupsImpl(int[],int,int[],int) -> queryMaxSwapGroupsImpl
    boolean joinSwapGroup(int) -> joinSwapGroup
    boolean joinSwapGroupImpl(int) -> joinSwapGroupImpl
    int getSwapGroup() -> getSwapGroup
    boolean bindSwapBarrier(int,int) -> bindSwapBarrier
    boolean bindSwapBarrierImpl(int,int) -> bindSwapBarrierImpl
    int getBoundFramebuffer(int) -> getBoundFramebuffer
    int getDefaultDrawFramebuffer() -> getDefaultDrawFramebuffer
    int getDefaultReadFramebuffer() -> getDefaultReadFramebuffer
    int getDefaultReadBuffer() -> getDefaultReadBuffer
    int getDefaultPixelDataType() -> getDefaultPixelDataType
    int getDefaultPixelDataFormat() -> getDefaultPixelDataFormat
    java.lang.String getGLDebugMessageExtension() -> getGLDebugMessageExtension
    boolean isGLDebugSynchronous() -> isGLDebugSynchronous
    void setGLDebugSynchronous(boolean) -> setGLDebugSynchronous
    boolean isGLDebugMessageEnabled() -> isGLDebugMessageEnabled
    void enableGLDebugMessage(boolean) -> enableGLDebugMessage
    void addGLDebugListener(javax.media.opengl.GLDebugListener) -> addGLDebugListener
    void removeGLDebugListener(javax.media.opengl.GLDebugListener) -> removeGLDebugListener
    void glDebugMessageControl(int,int,int,int,java.nio.IntBuffer,boolean) -> glDebugMessageControl
    void glDebugMessageControl(int,int,int,int,int[],int,boolean) -> glDebugMessageControl
    void glDebugMessageInsert(int,int,int,int,java.lang.String) -> glDebugMessageInsert
    int getMaxMajor(int) -> getMaxMajor
    int getMaxMinor(int,int) -> getMaxMinor
    boolean isValidGLVersion(int,int,int) -> isValidGLVersion
    boolean clipGLVersion(int,int[],int[]) -> clipGLVersion
    boolean decrementGLVersion(int,int[],int[]) -> decrementGLVersion
    int composeBits(int,int,int) -> composeBits
    void validateProfileBits(int,java.lang.String) -> validateProfileBits
    void shutdown() -> shutdown
    boolean getAvailableGLVersionsSet(javax.media.nativewindow.AbstractGraphicsDevice) -> getAvailableGLVersionsSet
    void setAvailableGLVersionsSet(javax.media.nativewindow.AbstractGraphicsDevice) -> setAvailableGLVersionsSet
    java.lang.String getDeviceVersionAvailableKey(javax.media.nativewindow.AbstractGraphicsDevice,int,int) -> getDeviceVersionAvailableKey
    java.lang.Integer mapAvailableGLVersion(javax.media.nativewindow.AbstractGraphicsDevice,int,int,int,int,int) -> mapAvailableGLVersion
    java.lang.StringBuilder dumpAvailableGLVersions(java.lang.StringBuilder) -> dumpAvailableGLVersions
    java.lang.Integer getAvailableGLVersion(javax.media.nativewindow.AbstractGraphicsDevice,int,int) -> getAvailableGLVersion
    boolean getAvailableGLVersion(javax.media.nativewindow.AbstractGraphicsDevice,int,int,int[],int[],int[]) -> getAvailableGLVersion
    java.lang.String getGLProfile(int,int,int) -> getGLProfile
    void getRequestMajorAndCompat(javax.media.opengl.GLProfile,int[]) -> getRequestMajorAndCompat
    int getAvailableContextProperties(javax.media.nativewindow.AbstractGraphicsDevice,javax.media.opengl.GLProfile) -> getAvailableContextProperties
    javax.media.opengl.GLProfile getAvailableGLProfile(javax.media.nativewindow.AbstractGraphicsDevice,int,int) -> getAvailableGLProfile
    java.lang.String getAvailableGLProfileName(javax.media.nativewindow.AbstractGraphicsDevice,int,int) -> getAvailableGLProfileName
    java.lang.String getAvailableGLVersionAsString(javax.media.nativewindow.AbstractGraphicsDevice,int,int) -> getAvailableGLVersionAsString
    boolean isFBOAvailable(javax.media.nativewindow.AbstractGraphicsDevice,javax.media.opengl.GLProfile) -> isFBOAvailable
    int isHardwareRasterizer(javax.media.nativewindow.AbstractGraphicsDevice,javax.media.opengl.GLProfile) -> isHardwareRasterizer
    boolean isGLVersionAvailable(javax.media.nativewindow.AbstractGraphicsDevice,int,int,boolean[]) -> isGLVersionAvailable
    boolean isGLES1Available(javax.media.nativewindow.AbstractGraphicsDevice,boolean[]) -> isGLES1Available
    boolean isGLES2Available(javax.media.nativewindow.AbstractGraphicsDevice,boolean[]) -> isGLES2Available
    boolean isGLES3Available(javax.media.nativewindow.AbstractGraphicsDevice,boolean[]) -> isGLES3Available
    boolean isGLES3CompatibleAvailable(javax.media.nativewindow.AbstractGraphicsDevice) -> isGLES3CompatibleAvailable
    boolean isGL4bcAvailable(javax.media.nativewindow.AbstractGraphicsDevice,boolean[]) -> isGL4bcAvailable
    boolean isGL4Available(javax.media.nativewindow.AbstractGraphicsDevice,boolean[]) -> isGL4Available
    boolean isGL3bcAvailable(javax.media.nativewindow.AbstractGraphicsDevice,boolean[]) -> isGL3bcAvailable
    boolean isGL3Available(javax.media.nativewindow.AbstractGraphicsDevice,boolean[]) -> isGL3Available
    boolean isGL2Available(javax.media.nativewindow.AbstractGraphicsDevice,boolean[]) -> isGL2Available
    java.lang.String getGLVersion(int,int,int,java.lang.String) -> getGLVersion
    java.lang.String toHexString(int) -> toHexString
    java.lang.String toHexString(long) -> toHexString
    boolean appendString(java.lang.StringBuilder,java.lang.String,boolean,boolean) -> appendString
    java.lang.String getThreadName() -> getThreadName
    void <clinit>() -> <clinit>
javax.media.opengl.GLDebugListener -> javax.media.opengl.GLDebugListener:
    void messageSent(javax.media.opengl.GLDebugMessage) -> messageSent
javax.media.opengl.GLDebugMessage -> javax.media.opengl.GLDebugMessage:
    javax.media.opengl.GLContext source -> source
    long when -> when
    int dbgSource -> dbgSource
    int dbgType -> dbgType
    int dbgId -> dbgId
    int dbgSeverity -> dbgSeverity
    java.lang.String dbgMsg -> dbgMsg
    void <init>(javax.media.opengl.GLContext,long,int,int,int,int,java.lang.String) -> <init>
    javax.media.opengl.GLDebugMessage translateAMDEvent(javax.media.opengl.GLContext,long,int,int,int,java.lang.String) -> translateAMDEvent
    int translateARB2AMDCategory(int,int) -> translateARB2AMDCategory
    javax.media.opengl.GLContext getSource() -> getSource
    long getWhen() -> getWhen
    int getDbgSource() -> getDbgSource
    int getDbgType() -> getDbgType
    int getDbgId() -> getDbgId
    int getDbgSeverity() -> getDbgSeverity
    java.lang.String getDbgMsg() -> getDbgMsg
    java.lang.StringBuilder toString(java.lang.StringBuilder) -> toString
    java.lang.String toString() -> toString
    java.lang.String getDbgSourceString(int) -> getDbgSourceString
    java.lang.String getDbgTypeString(int) -> getDbgTypeString
    java.lang.String getDbgSeverityString(int) -> getDbgSeverityString
    java.lang.StringBuilder toHexString(java.lang.StringBuilder,int) -> toHexString
    java.lang.String toHexString(int) -> toHexString
javax.media.opengl.GLDrawable -> javax.media.opengl.GLDrawable:
    javax.media.opengl.GLContext createContext(javax.media.opengl.GLContext) -> createContext
    void setRealized(boolean) -> setRealized
    boolean isRealized() -> isRealized
    int getSurfaceWidth() -> getSurfaceWidth
    int getSurfaceHeight() -> getSurfaceHeight
    boolean isGLOriented() -> isGLOriented
    void swapBuffers() -> swapBuffers
    javax.media.opengl.GLCapabilitiesImmutable getChosenGLCapabilities() -> getChosenGLCapabilities
    javax.media.opengl.GLCapabilitiesImmutable getRequestedGLCapabilities() -> getRequestedGLCapabilities
    javax.media.opengl.GLProfile getGLProfile() -> getGLProfile
    javax.media.nativewindow.NativeSurface getNativeSurface() -> getNativeSurface
    long getHandle() -> getHandle
    javax.media.opengl.GLDrawableFactory getFactory() -> getFactory
    java.lang.String toString() -> toString
javax.media.opengl.GLDrawableFactory -> javax.media.opengl.GLDrawableFactory:
    boolean DEBUG -> DEBUG
    boolean isInit -> isInit
    javax.media.opengl.GLDrawableFactory eglFactory -> eglFactory
    javax.media.opengl.GLDrawableFactory nativeOSFactory -> nativeOSFactory
    java.util.ArrayList glDrawableFactories -> glDrawableFactories
    void initSingleton() -> initSingleton
    void initSingletonImpl() -> initSingletonImpl
    void shutdown() -> shutdown
    void shutdown0() -> shutdown0
    void <init>() -> <init>
    java.lang.String getThreadName() -> getThreadName
    boolean isComplete() -> isComplete
    void enterThreadCriticalZone() -> enterThreadCriticalZone
    void leaveThreadCriticalZone() -> leaveThreadCriticalZone
    void shutdownImpl() -> shutdownImpl
    boolean setDisplayGamma(javax.media.nativewindow.NativeSurface,float,float,float) -> setDisplayGamma
    void resetDisplayGamma(javax.media.nativewindow.NativeSurface) -> resetDisplayGamma
    void resetAllDisplayGamma() -> resetAllDisplayGamma
    void resetAllDisplayGammaNoSync() -> resetAllDisplayGammaNoSync
    javax.media.nativewindow.AbstractGraphicsDevice getDefaultDevice() -> getDefaultDevice
    boolean getIsDeviceCompatible(javax.media.nativewindow.AbstractGraphicsDevice) -> getIsDeviceCompatible
    javax.media.nativewindow.AbstractGraphicsDevice validateDevice(javax.media.nativewindow.AbstractGraphicsDevice) -> validateDevice
    java.lang.Thread getSharedResourceThread() -> getSharedResourceThread
    boolean createSharedResource(javax.media.nativewindow.AbstractGraphicsDevice) -> createSharedResource
    boolean createSharedResourceImpl(javax.media.nativewindow.AbstractGraphicsDevice) -> createSharedResourceImpl
    boolean hasRendererQuirk(javax.media.nativewindow.AbstractGraphicsDevice,int) -> hasRendererQuirk
    com.jogamp.opengl.GLRendererQuirks getRendererQuirks(javax.media.nativewindow.AbstractGraphicsDevice) -> getRendererQuirks
    javax.media.opengl.GLDrawableFactory getDesktopFactory() -> getDesktopFactory
    javax.media.opengl.GLDrawableFactory getEGLFactory() -> getEGLFactory
    javax.media.opengl.GLDrawableFactory getFactory(javax.media.opengl.GLProfile) -> getFactory
    javax.media.opengl.GLDrawableFactory getFactoryImpl(java.lang.String) -> getFactoryImpl
    javax.media.opengl.GLDrawableFactory getFactoryImpl(javax.media.nativewindow.AbstractGraphicsDevice) -> getFactoryImpl
    java.util.List getAvailableCapabilities(javax.media.nativewindow.AbstractGraphicsDevice) -> getAvailableCapabilities
    java.util.List getAvailableCapabilitiesImpl(javax.media.nativewindow.AbstractGraphicsDevice) -> getAvailableCapabilitiesImpl
    javax.media.opengl.GLDrawable createGLDrawable(javax.media.nativewindow.NativeSurface) -> createGLDrawable
    javax.media.opengl.GLOffscreenAutoDrawable createOffscreenAutoDrawable(javax.media.nativewindow.AbstractGraphicsDevice,javax.media.opengl.GLCapabilitiesImmutable,javax.media.opengl.GLCapabilitiesChooser,int,int) -> createOffscreenAutoDrawable
    javax.media.opengl.GLAutoDrawable createDummyAutoDrawable(javax.media.nativewindow.AbstractGraphicsDevice,boolean,javax.media.opengl.GLCapabilitiesImmutable,javax.media.opengl.GLCapabilitiesChooser) -> createDummyAutoDrawable
    javax.media.opengl.GLDrawable createOffscreenDrawable(javax.media.nativewindow.AbstractGraphicsDevice,javax.media.opengl.GLCapabilitiesImmutable,javax.media.opengl.GLCapabilitiesChooser,int,int) -> createOffscreenDrawable
    javax.media.opengl.GLDrawable createDummyDrawable(javax.media.nativewindow.AbstractGraphicsDevice,boolean,javax.media.opengl.GLCapabilitiesImmutable,javax.media.opengl.GLCapabilitiesChooser) -> createDummyDrawable
    javax.media.nativewindow.ProxySurface createProxySurface(javax.media.nativewindow.AbstractGraphicsDevice,int,long,javax.media.opengl.GLCapabilitiesImmutable,javax.media.opengl.GLCapabilitiesChooser,javax.media.nativewindow.UpstreamSurfaceHook) -> createProxySurface
    boolean canCreateFBO(javax.media.nativewindow.AbstractGraphicsDevice,javax.media.opengl.GLProfile) -> canCreateFBO
    boolean canCreateGLPbuffer(javax.media.nativewindow.AbstractGraphicsDevice,javax.media.opengl.GLProfile) -> canCreateGLPbuffer
    javax.media.opengl.GLContext createExternalGLContext() -> createExternalGLContext
    boolean canCreateExternalGLDrawable(javax.media.nativewindow.AbstractGraphicsDevice) -> canCreateExternalGLDrawable
    javax.media.opengl.GLDrawable createExternalGLDrawable() -> createExternalGLDrawable
    void access$000() -> access$000
    void <clinit>() -> <clinit>
javax.media.opengl.GLDrawableFactory$1 -> javax.media.opengl.GLDrawableFactory$1:
    void <init>() -> <init>
    void run() -> run
javax.media.opengl.GLES1 -> javax.media.opengl.GLES1:
    int GL_PALETTE4_RGB8_OES -> GL_PALETTE4_RGB8_OES
    int GL_PALETTE4_RGBA8_OES -> GL_PALETTE4_RGBA8_OES
    int GL_PALETTE4_R5_G6_B5_OES -> GL_PALETTE4_R5_G6_B5_OES
    int GL_PALETTE4_RGBA4_OES -> GL_PALETTE4_RGBA4_OES
    int GL_PALETTE4_RGB5_A1_OES -> GL_PALETTE4_RGB5_A1_OES
    int GL_PALETTE8_RGB8_OES -> GL_PALETTE8_RGB8_OES
    int GL_PALETTE8_RGBA8_OES -> GL_PALETTE8_RGBA8_OES
    int GL_PALETTE8_R5_G6_B5_OES -> GL_PALETTE8_R5_G6_B5_OES
    int GL_PALETTE8_RGBA4_OES -> GL_PALETTE8_RGBA4_OES
    int GL_PALETTE8_RGB5_A1_OES -> GL_PALETTE8_RGB5_A1_OES
    int GL_POINT_SIZE_ARRAY_OES -> GL_POINT_SIZE_ARRAY_OES
    int GL_POINT_SIZE_ARRAY_TYPE_OES -> GL_POINT_SIZE_ARRAY_TYPE_OES
    int GL_POINT_SIZE_ARRAY_STRIDE_OES -> GL_POINT_SIZE_ARRAY_STRIDE_OES
    int GL_POINT_SIZE_ARRAY_POINTER_OES -> GL_POINT_SIZE_ARRAY_POINTER_OES
    int GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES -> GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES
    int GL_ETC1_RGB8_OES -> GL_ETC1_RGB8_OES
    int GL_TEXTURE_CROP_RECT_OES -> GL_TEXTURE_CROP_RECT_OES
    int GL_TEXTURE_EXTERNAL_OES -> GL_TEXTURE_EXTERNAL_OES
    int GL_TEXTURE_BINDING_EXTERNAL_OES -> GL_TEXTURE_BINDING_EXTERNAL_OES
    int GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES -> GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES
    int GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES -> GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES
    int GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES -> GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES
    int GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES -> GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES
    int GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES -> GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES
    int GL_VERTEX_ARRAY_BINDING_OES -> GL_VERTEX_ARRAY_BINDING_OES
    int GL_3DC_X_AMD -> GL_3DC_X_AMD
    int GL_3DC_XY_AMD -> GL_3DC_XY_AMD
    int GL_ATC_RGB_AMD -> GL_ATC_RGB_AMD
    int GL_ATC_RGBA_EXPLICIT_ALPHA_AMD -> GL_ATC_RGBA_EXPLICIT_ALPHA_AMD
    int GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD -> GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD
    int GL_RENDERBUFFER_SAMPLES_APPLE -> GL_RENDERBUFFER_SAMPLES_APPLE
    int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE -> GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE
    int GL_MAX_SAMPLES_APPLE -> GL_MAX_SAMPLES_APPLE
    int GL_READ_FRAMEBUFFER_APPLE -> GL_READ_FRAMEBUFFER_APPLE
    int GL_DRAW_FRAMEBUFFER_APPLE -> GL_DRAW_FRAMEBUFFER_APPLE
    int GL_DRAW_FRAMEBUFFER_BINDING_APPLE -> GL_DRAW_FRAMEBUFFER_BINDING_APPLE
    int GL_READ_FRAMEBUFFER_BINDING_APPLE -> GL_READ_FRAMEBUFFER_BINDING_APPLE
    int GL_TEXTURE_MAX_LEVEL_APPLE -> GL_TEXTURE_MAX_LEVEL_APPLE
    int GL_COLOR_EXT -> GL_COLOR_EXT
    int GL_DEPTH_EXT -> GL_DEPTH_EXT
    int GL_STENCIL_EXT -> GL_STENCIL_EXT
    int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT -> GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT
    int GL_LUMINANCE8 -> GL_LUMINANCE8
    int GL_LUMINANCE8_ALPHA8 -> GL_LUMINANCE8_ALPHA8
    int GL_LUMINANCE32F -> GL_LUMINANCE32F
    int GL_LUMINANCE_ALPHA32F -> GL_LUMINANCE_ALPHA32F
    int GL_LUMINANCE16F -> GL_LUMINANCE16F
    int GL_LUMINANCE_ALPHA16F -> GL_LUMINANCE_ALPHA16F
    int GL_BGRA_IMG -> GL_BGRA_IMG
    int GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG -> GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG
    int GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG -> GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG
    int GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG -> GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG
    int GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG -> GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG
    int GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG -> GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG
    int GL_MODULATE_COLOR_IMG -> GL_MODULATE_COLOR_IMG
    int GL_RECIP_ADD_SIGNED_ALPHA_IMG -> GL_RECIP_ADD_SIGNED_ALPHA_IMG
    int GL_TEXTURE_ALPHA_MODULATE_IMG -> GL_TEXTURE_ALPHA_MODULATE_IMG
    int GL_FACTOR_ALPHA_MODULATE_IMG -> GL_FACTOR_ALPHA_MODULATE_IMG
    int GL_FRAGMENT_ALPHA_MODULATE_IMG -> GL_FRAGMENT_ALPHA_MODULATE_IMG
    int GL_ADD_BLEND_IMG -> GL_ADD_BLEND_IMG
    int GL_DOT3_RGBA_IMG -> GL_DOT3_RGBA_IMG
    int GL_CLIP_PLANE0_IMG -> GL_CLIP_PLANE0_IMG
    int GL_CLIP_PLANE1_IMG -> GL_CLIP_PLANE1_IMG
    int GL_CLIP_PLANE2_IMG -> GL_CLIP_PLANE2_IMG
    int GL_CLIP_PLANE3_IMG -> GL_CLIP_PLANE3_IMG
    int GL_CLIP_PLANE4_IMG -> GL_CLIP_PLANE4_IMG
    int GL_CLIP_PLANE5_IMG -> GL_CLIP_PLANE5_IMG
    int GL_MAX_CLIP_PLANES_IMG -> GL_MAX_CLIP_PLANES_IMG
    int GL_RENDERBUFFER_SAMPLES_IMG -> GL_RENDERBUFFER_SAMPLES_IMG
    int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG -> GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG
    int GL_MAX_SAMPLES_IMG -> GL_MAX_SAMPLES_IMG
    int GL_TEXTURE_SAMPLES_IMG -> GL_TEXTURE_SAMPLES_IMG
    int GL_ALL_COMPLETED_NV -> GL_ALL_COMPLETED_NV
    int GL_FENCE_STATUS_NV -> GL_FENCE_STATUS_NV
    int GL_FENCE_CONDITION_NV -> GL_FENCE_CONDITION_NV
    int GL_TEXTURE_WIDTH_QCOM -> GL_TEXTURE_WIDTH_QCOM
    int GL_TEXTURE_HEIGHT_QCOM -> GL_TEXTURE_HEIGHT_QCOM
    int GL_TEXTURE_DEPTH_QCOM -> GL_TEXTURE_DEPTH_QCOM
    int GL_TEXTURE_INTERNAL_FORMAT_QCOM -> GL_TEXTURE_INTERNAL_FORMAT_QCOM
    int GL_TEXTURE_FORMAT_QCOM -> GL_TEXTURE_FORMAT_QCOM
    int GL_TEXTURE_TYPE_QCOM -> GL_TEXTURE_TYPE_QCOM
    int GL_TEXTURE_IMAGE_VALID_QCOM -> GL_TEXTURE_IMAGE_VALID_QCOM
    int GL_TEXTURE_NUM_LEVELS_QCOM -> GL_TEXTURE_NUM_LEVELS_QCOM
    int GL_TEXTURE_TARGET_QCOM -> GL_TEXTURE_TARGET_QCOM
    int GL_TEXTURE_OBJECT_VALID_QCOM -> GL_TEXTURE_OBJECT_VALID_QCOM
    int GL_STATE_RESTORE -> GL_STATE_RESTORE
    int GL_PERFMON_GLOBAL_MODE_QCOM -> GL_PERFMON_GLOBAL_MODE_QCOM
    int GL_WRITEONLY_RENDERING_QCOM -> GL_WRITEONLY_RENDERING_QCOM
    int GL_COLOR_BUFFER_BIT0_QCOM -> GL_COLOR_BUFFER_BIT0_QCOM
    int GL_COLOR_BUFFER_BIT1_QCOM -> GL_COLOR_BUFFER_BIT1_QCOM
    int GL_COLOR_BUFFER_BIT2_QCOM -> GL_COLOR_BUFFER_BIT2_QCOM
    int GL_COLOR_BUFFER_BIT3_QCOM -> GL_COLOR_BUFFER_BIT3_QCOM
    int GL_COLOR_BUFFER_BIT4_QCOM -> GL_COLOR_BUFFER_BIT4_QCOM
    int GL_COLOR_BUFFER_BIT5_QCOM -> GL_COLOR_BUFFER_BIT5_QCOM
    int GL_COLOR_BUFFER_BIT6_QCOM -> GL_COLOR_BUFFER_BIT6_QCOM
    int GL_COLOR_BUFFER_BIT7_QCOM -> GL_COLOR_BUFFER_BIT7_QCOM
    int GL_DEPTH_BUFFER_BIT0_QCOM -> GL_DEPTH_BUFFER_BIT0_QCOM
    int GL_DEPTH_BUFFER_BIT1_QCOM -> GL_DEPTH_BUFFER_BIT1_QCOM
    int GL_DEPTH_BUFFER_BIT2_QCOM -> GL_DEPTH_BUFFER_BIT2_QCOM
    int GL_DEPTH_BUFFER_BIT3_QCOM -> GL_DEPTH_BUFFER_BIT3_QCOM
    int GL_DEPTH_BUFFER_BIT4_QCOM -> GL_DEPTH_BUFFER_BIT4_QCOM
    int GL_DEPTH_BUFFER_BIT5_QCOM -> GL_DEPTH_BUFFER_BIT5_QCOM
    int GL_DEPTH_BUFFER_BIT6_QCOM -> GL_DEPTH_BUFFER_BIT6_QCOM
    int GL_DEPTH_BUFFER_BIT7_QCOM -> GL_DEPTH_BUFFER_BIT7_QCOM
    int GL_STENCIL_BUFFER_BIT0_QCOM -> GL_STENCIL_BUFFER_BIT0_QCOM
    int GL_STENCIL_BUFFER_BIT1_QCOM -> GL_STENCIL_BUFFER_BIT1_QCOM
    int GL_STENCIL_BUFFER_BIT2_QCOM -> GL_STENCIL_BUFFER_BIT2_QCOM
    int GL_STENCIL_BUFFER_BIT3_QCOM -> GL_STENCIL_BUFFER_BIT3_QCOM
    int GL_STENCIL_BUFFER_BIT4_QCOM -> GL_STENCIL_BUFFER_BIT4_QCOM
    int GL_STENCIL_BUFFER_BIT5_QCOM -> GL_STENCIL_BUFFER_BIT5_QCOM
    int GL_STENCIL_BUFFER_BIT6_QCOM -> GL_STENCIL_BUFFER_BIT6_QCOM
    int GL_STENCIL_BUFFER_BIT7_QCOM -> GL_STENCIL_BUFFER_BIT7_QCOM
    int GL_MULTISAMPLE_BUFFER_BIT0_QCOM -> GL_MULTISAMPLE_BUFFER_BIT0_QCOM
    int GL_MULTISAMPLE_BUFFER_BIT1_QCOM -> GL_MULTISAMPLE_BUFFER_BIT1_QCOM
    int GL_MULTISAMPLE_BUFFER_BIT2_QCOM -> GL_MULTISAMPLE_BUFFER_BIT2_QCOM
    int GL_MULTISAMPLE_BUFFER_BIT3_QCOM -> GL_MULTISAMPLE_BUFFER_BIT3_QCOM
    int GL_MULTISAMPLE_BUFFER_BIT4_QCOM -> GL_MULTISAMPLE_BUFFER_BIT4_QCOM
    int GL_MULTISAMPLE_BUFFER_BIT5_QCOM -> GL_MULTISAMPLE_BUFFER_BIT5_QCOM
    int GL_MULTISAMPLE_BUFFER_BIT6_QCOM -> GL_MULTISAMPLE_BUFFER_BIT6_QCOM
    long GL_MULTISAMPLE_BUFFER_BIT7_QCOM -> GL_MULTISAMPLE_BUFFER_BIT7_QCOM
    void glAlphaFuncx(int,int) -> glAlphaFuncx
    void glBindVertexArrayOES(int) -> glBindVertexArrayOES
    void glClearColorx(int,int,int,int) -> glClearColorx
    void glClearDepthx(int) -> glClearDepthx
    void glClipPlanef(int,java.nio.FloatBuffer) -> glClipPlanef
    void glClipPlanef(int,float[],int) -> glClipPlanef
    void glClipPlanefIMG(int,java.nio.FloatBuffer) -> glClipPlanefIMG
    void glClipPlanefIMG(int,float[],int) -> glClipPlanefIMG
    void glClipPlanex(int,java.nio.IntBuffer) -> glClipPlanex
    void glClipPlanex(int,int[],int) -> glClipPlanex
    void glClipPlanexIMG(int,java.nio.IntBuffer) -> glClipPlanexIMG
    void glClipPlanexIMG(int,int[],int) -> glClipPlanexIMG
    void glColor4x(int,int,int,int) -> glColor4x
    void glCopyTextureLevelsAPPLE(int,int,int,int) -> glCopyTextureLevelsAPPLE
    void glCurrentPaletteMatrix(int) -> glCurrentPaletteMatrix
    void glDeleteFencesNV(int,java.nio.IntBuffer) -> glDeleteFencesNV
    void glDeleteFencesNV(int,int[],int) -> glDeleteFencesNV
    void glDeleteVertexArraysOES(int,java.nio.IntBuffer) -> glDeleteVertexArraysOES
    void glDeleteVertexArraysOES(int,int[],int) -> glDeleteVertexArraysOES
    void glDepthRangex(int,int) -> glDepthRangex
    void glDisableDriverControlQCOM(int) -> glDisableDriverControlQCOM
    void glDiscardFramebufferEXT(int,int,java.nio.IntBuffer) -> glDiscardFramebufferEXT
    void glDiscardFramebufferEXT(int,int,int[],int) -> glDiscardFramebufferEXT
    void glDrawTexfOES(float,float,float,float,float) -> glDrawTexfOES
    void glDrawTexfvOES(java.nio.FloatBuffer) -> glDrawTexfvOES
    void glDrawTexfvOES(float[],int) -> glDrawTexfvOES
    void glDrawTexiOES(int,int,int,int,int) -> glDrawTexiOES
    void glDrawTexivOES(java.nio.IntBuffer) -> glDrawTexivOES
    void glDrawTexivOES(int[],int) -> glDrawTexivOES
    void glDrawTexsOES(short,short,short,short,short) -> glDrawTexsOES
    void glDrawTexsvOES(java.nio.ShortBuffer) -> glDrawTexsvOES
    void glDrawTexsvOES(short[],int) -> glDrawTexsvOES
    void glDrawTexxOES(int,int,int,int,int) -> glDrawTexxOES
    void glDrawTexxvOES(java.nio.IntBuffer) -> glDrawTexxvOES
    void glDrawTexxvOES(int[],int) -> glDrawTexxvOES
    void glEGLImageTargetRenderbufferStorageOES(int,long) -> glEGLImageTargetRenderbufferStorageOES
    void glEGLImageTargetTexture2DOES(int,long) -> glEGLImageTargetTexture2DOES
    void glEnableDriverControlQCOM(int) -> glEnableDriverControlQCOM
    void glEndTilingQCOM(int) -> glEndTilingQCOM
    void glExtGetBufferPointervQCOM(int,com.jogamp.common.nio.PointerBuffer) -> glExtGetBufferPointervQCOM
    void glExtGetBuffersQCOM(java.nio.IntBuffer,int,java.nio.IntBuffer) -> glExtGetBuffersQCOM
    void glExtGetBuffersQCOM(int[],int,int,int[],int) -> glExtGetBuffersQCOM
    void glExtGetFramebuffersQCOM(java.nio.IntBuffer,int,java.nio.IntBuffer) -> glExtGetFramebuffersQCOM
    void glExtGetFramebuffersQCOM(int[],int,int,int[],int) -> glExtGetFramebuffersQCOM
    void glExtGetProgramBinarySourceQCOM(int,int,java.nio.ByteBuffer,java.nio.IntBuffer) -> glExtGetProgramBinarySourceQCOM
    void glExtGetProgramBinarySourceQCOM(int,int,byte[],int,int[],int) -> glExtGetProgramBinarySourceQCOM
    void glExtGetProgramsQCOM(java.nio.IntBuffer,int,java.nio.IntBuffer) -> glExtGetProgramsQCOM
    void glExtGetProgramsQCOM(int[],int,int,int[],int) -> glExtGetProgramsQCOM
    void glExtGetRenderbuffersQCOM(java.nio.IntBuffer,int,java.nio.IntBuffer) -> glExtGetRenderbuffersQCOM
    void glExtGetRenderbuffersQCOM(int[],int,int,int[],int) -> glExtGetRenderbuffersQCOM
    void glExtGetShadersQCOM(java.nio.IntBuffer,int,java.nio.IntBuffer) -> glExtGetShadersQCOM
    void glExtGetShadersQCOM(int[],int,int,int[],int) -> glExtGetShadersQCOM
    void glExtGetTexLevelParameterivQCOM(int,int,int,int,java.nio.IntBuffer) -> glExtGetTexLevelParameterivQCOM
    void glExtGetTexLevelParameterivQCOM(int,int,int,int,int[],int) -> glExtGetTexLevelParameterivQCOM
    void glExtGetTexSubImageQCOM(int,int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> glExtGetTexSubImageQCOM
    void glExtGetTexturesQCOM(java.nio.IntBuffer,int,java.nio.IntBuffer) -> glExtGetTexturesQCOM
    void glExtGetTexturesQCOM(int[],int,int,int[],int) -> glExtGetTexturesQCOM
    boolean glExtIsProgramBinaryQCOM(int) -> glExtIsProgramBinaryQCOM
    void glExtTexObjectStateOverrideiQCOM(int,int,int) -> glExtTexObjectStateOverrideiQCOM
    void glFinishFenceNV(int) -> glFinishFenceNV
    void glFogx(int,int) -> glFogx
    void glFogxv(int,java.nio.IntBuffer) -> glFogxv
    void glFogxv(int,int[],int) -> glFogxv
    void glFramebufferTexture2DMultisampleEXT(int,int,int,int,int,int) -> glFramebufferTexture2DMultisampleEXT
    void glFramebufferTexture2DMultisampleIMG(int,int,int,int,int,int) -> glFramebufferTexture2DMultisampleIMG
    void glFrustumx(int,int,int,int,int,int) -> glFrustumx
    void glGenFencesNV(int,java.nio.IntBuffer) -> glGenFencesNV
    void glGenFencesNV(int,int[],int) -> glGenFencesNV
    void glGenVertexArraysOES(int,java.nio.IntBuffer) -> glGenVertexArraysOES
    void glGenVertexArraysOES(int,int[],int) -> glGenVertexArraysOES
    void glGetClipPlanef(int,java.nio.FloatBuffer) -> glGetClipPlanef
    void glGetClipPlanef(int,float[],int) -> glGetClipPlanef
    void glGetClipPlanex(int,java.nio.IntBuffer) -> glGetClipPlanex
    void glGetClipPlanex(int,int[],int) -> glGetClipPlanex
    void glGetDriverControlStringQCOM(int,int,java.nio.IntBuffer,java.nio.ByteBuffer) -> glGetDriverControlStringQCOM
    void glGetDriverControlStringQCOM(int,int,int[],int,byte[],int) -> glGetDriverControlStringQCOM
    void glGetDriverControlsQCOM(java.nio.IntBuffer,int,java.nio.IntBuffer) -> glGetDriverControlsQCOM
    void glGetDriverControlsQCOM(int[],int,int,int[],int) -> glGetDriverControlsQCOM
    void glGetFenceivNV(int,int,java.nio.IntBuffer) -> glGetFenceivNV
    void glGetFenceivNV(int,int,int[],int) -> glGetFenceivNV
    void glGetFixedv(int,java.nio.IntBuffer) -> glGetFixedv
    void glGetFixedv(int,int[],int) -> glGetFixedv
    void glGetLightxv(int,int,java.nio.IntBuffer) -> glGetLightxv
    void glGetLightxv(int,int,int[],int) -> glGetLightxv
    void glGetMaterialxv(int,int,java.nio.IntBuffer) -> glGetMaterialxv
    void glGetMaterialxv(int,int,int[],int) -> glGetMaterialxv
    void glGetTexEnvxv(int,int,java.nio.IntBuffer) -> glGetTexEnvxv
    void glGetTexEnvxv(int,int,int[],int) -> glGetTexEnvxv
    void glGetTexParameterxv(int,int,java.nio.IntBuffer) -> glGetTexParameterxv
    void glGetTexParameterxv(int,int,int[],int) -> glGetTexParameterxv
    boolean glIsFenceNV(int) -> glIsFenceNV
    boolean glIsVertexArrayOES(int) -> glIsVertexArrayOES
    void glLightModelx(int,int) -> glLightModelx
    void glLightModelxv(int,java.nio.IntBuffer) -> glLightModelxv
    void glLightModelxv(int,int[],int) -> glLightModelxv
    void glLightx(int,int,int) -> glLightx
    void glLightxv(int,int,java.nio.IntBuffer) -> glLightxv
    void glLightxv(int,int,int[],int) -> glLightxv
    void glLineWidthx(int) -> glLineWidthx
    void glLoadMatrixx(java.nio.IntBuffer) -> glLoadMatrixx
    void glLoadMatrixx(int[],int) -> glLoadMatrixx
    void glLoadPaletteFromModelViewMatrixOES() -> glLoadPaletteFromModelViewMatrixOES
    void glMaterialx(int,int,int) -> glMaterialx
    void glMaterialxv(int,int,java.nio.IntBuffer) -> glMaterialxv
    void glMaterialxv(int,int,int[],int) -> glMaterialxv
    void glMatrixIndexPointer(int,int,int,java.nio.Buffer) -> glMatrixIndexPointer
    void glMultMatrixx(java.nio.IntBuffer) -> glMultMatrixx
    void glMultMatrixx(int[],int) -> glMultMatrixx
    void glMultiTexCoord4x(int,int,int,int,int) -> glMultiTexCoord4x
    void glNormal3x(int,int,int) -> glNormal3x
    void glOrthox(int,int,int,int,int,int) -> glOrthox
    void glPointParameterx(int,int) -> glPointParameterx
    void glPointParameterxv(int,java.nio.IntBuffer) -> glPointParameterxv
    void glPointParameterxv(int,int[],int) -> glPointParameterxv
    void glPointSizePointerOES(int,int,java.nio.Buffer) -> glPointSizePointerOES
    void glPointSizex(int) -> glPointSizex
    void glPolygonOffsetx(int,int) -> glPolygonOffsetx
    int glQueryMatrixxOES(java.nio.IntBuffer,java.nio.IntBuffer) -> glQueryMatrixxOES
    int glQueryMatrixxOES(int[],int,int[],int) -> glQueryMatrixxOES
    void glRenderbufferStorageMultisampleAPPLE(int,int,int,int,int) -> glRenderbufferStorageMultisampleAPPLE
    void glRenderbufferStorageMultisampleIMG(int,int,int,int,int) -> glRenderbufferStorageMultisampleIMG
    void glResolveMultisampleFramebufferAPPLE() -> glResolveMultisampleFramebufferAPPLE
    void glRotatex(int,int,int,int) -> glRotatex
    void glSampleCoveragex(int,boolean) -> glSampleCoveragex
    void glScalex(int,int,int) -> glScalex
    void glSetFenceNV(int,int) -> glSetFenceNV
    void glStartTilingQCOM(int,int,int,int,int) -> glStartTilingQCOM
    boolean glTestFenceNV(int) -> glTestFenceNV
    void glTexEnvx(int,int,int) -> glTexEnvx
    void glTexEnvxv(int,int,java.nio.IntBuffer) -> glTexEnvxv
    void glTexEnvxv(int,int,int[],int) -> glTexEnvxv
    void glTexParameterx(int,int,int) -> glTexParameterx
    void glTexParameterxv(int,int,java.nio.IntBuffer) -> glTexParameterxv
    void glTexParameterxv(int,int,int[],int) -> glTexParameterxv
    void glTranslatex(int,int,int) -> glTranslatex
    void glWeightPointer(int,int,int,java.nio.Buffer) -> glWeightPointer
javax.media.opengl.GLES2 -> javax.media.opengl.GLES2:
    int GL_ETC1_RGB8_OES -> GL_ETC1_RGB8_OES
    int GL_PALETTE4_RGB8_OES -> GL_PALETTE4_RGB8_OES
    int GL_PALETTE4_RGBA8_OES -> GL_PALETTE4_RGBA8_OES
    int GL_PALETTE4_R5_G6_B5_OES -> GL_PALETTE4_R5_G6_B5_OES
    int GL_PALETTE4_RGBA4_OES -> GL_PALETTE4_RGBA4_OES
    int GL_PALETTE4_RGB5_A1_OES -> GL_PALETTE4_RGB5_A1_OES
    int GL_PALETTE8_RGB8_OES -> GL_PALETTE8_RGB8_OES
    int GL_PALETTE8_RGBA8_OES -> GL_PALETTE8_RGBA8_OES
    int GL_PALETTE8_R5_G6_B5_OES -> GL_PALETTE8_R5_G6_B5_OES
    int GL_PALETTE8_RGBA4_OES -> GL_PALETTE8_RGBA4_OES
    int GL_PALETTE8_RGB5_A1_OES -> GL_PALETTE8_RGB5_A1_OES
    int GL_TEXTURE_EXTERNAL_OES -> GL_TEXTURE_EXTERNAL_OES
    int GL_SAMPLER_EXTERNAL_OES -> GL_SAMPLER_EXTERNAL_OES
    int GL_TEXTURE_BINDING_EXTERNAL_OES -> GL_TEXTURE_BINDING_EXTERNAL_OES
    int GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES -> GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES
    int GL_LUMINANCE4_ALPHA4 -> GL_LUMINANCE4_ALPHA4
    int GL_LUMINANCE8_ALPHA8 -> GL_LUMINANCE8_ALPHA8
    int GL_LUMINANCE8 -> GL_LUMINANCE8
    int GL_FRAMEBUFFER_UNDEFINED_OES -> GL_FRAMEBUFFER_UNDEFINED_OES
    int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET -> GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET
    int GL_HALF_FLOAT_OES -> GL_HALF_FLOAT_OES
    int GL_VERTEX_ARRAY_BINDING_OES -> GL_VERTEX_ARRAY_BINDING_OES
    int GL_COMPRESSED_RGBA_ASTC_4x4_KHR -> GL_COMPRESSED_RGBA_ASTC_4x4_KHR
    int GL_COMPRESSED_RGBA_ASTC_5x4_KHR -> GL_COMPRESSED_RGBA_ASTC_5x4_KHR
    int GL_COMPRESSED_RGBA_ASTC_5x5_KHR -> GL_COMPRESSED_RGBA_ASTC_5x5_KHR
    int GL_COMPRESSED_RGBA_ASTC_6x5_KHR -> GL_COMPRESSED_RGBA_ASTC_6x5_KHR
    int GL_COMPRESSED_RGBA_ASTC_6x6_KHR -> GL_COMPRESSED_RGBA_ASTC_6x6_KHR
    int GL_COMPRESSED_RGBA_ASTC_8x5_KHR -> GL_COMPRESSED_RGBA_ASTC_8x5_KHR
    int GL_COMPRESSED_RGBA_ASTC_8x6_KHR -> GL_COMPRESSED_RGBA_ASTC_8x6_KHR
    int GL_COMPRESSED_RGBA_ASTC_8x8_KHR -> GL_COMPRESSED_RGBA_ASTC_8x8_KHR
    int GL_COMPRESSED_RGBA_ASTC_10x5_KHR -> GL_COMPRESSED_RGBA_ASTC_10x5_KHR
    int GL_COMPRESSED_RGBA_ASTC_10x6_KHR -> GL_COMPRESSED_RGBA_ASTC_10x6_KHR
    int GL_COMPRESSED_RGBA_ASTC_10x8_KHR -> GL_COMPRESSED_RGBA_ASTC_10x8_KHR
    int GL_COMPRESSED_RGBA_ASTC_10x10_KHR -> GL_COMPRESSED_RGBA_ASTC_10x10_KHR
    int GL_COMPRESSED_RGBA_ASTC_12x10_KHR -> GL_COMPRESSED_RGBA_ASTC_12x10_KHR
    int GL_COMPRESSED_RGBA_ASTC_12x12_KHR -> GL_COMPRESSED_RGBA_ASTC_12x12_KHR
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR -> GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR -> GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR -> GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR -> GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR -> GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR -> GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR -> GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR -> GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR -> GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR -> GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR -> GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR -> GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR -> GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR -> GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR
    int GL_3DC_X_AMD -> GL_3DC_X_AMD
    int GL_3DC_XY_AMD -> GL_3DC_XY_AMD
    int GL_ATC_RGB_AMD -> GL_ATC_RGB_AMD
    int GL_ATC_RGBA_EXPLICIT_ALPHA_AMD -> GL_ATC_RGBA_EXPLICIT_ALPHA_AMD
    int GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD -> GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD
    int GL_COUNTER_TYPE_AMD -> GL_COUNTER_TYPE_AMD
    int GL_COUNTER_RANGE_AMD -> GL_COUNTER_RANGE_AMD
    int GL_UNSIGNED_INT64_AMD -> GL_UNSIGNED_INT64_AMD
    int GL_PERCENTAGE_AMD -> GL_PERCENTAGE_AMD
    int GL_PERFMON_RESULT_AVAILABLE_AMD -> GL_PERFMON_RESULT_AVAILABLE_AMD
    int GL_PERFMON_RESULT_SIZE_AMD -> GL_PERFMON_RESULT_SIZE_AMD
    int GL_PERFMON_RESULT_AMD -> GL_PERFMON_RESULT_AMD
    int GL_Z400_BINARY_AMD -> GL_Z400_BINARY_AMD
    int GL_READ_FRAMEBUFFER_ANGLE -> GL_READ_FRAMEBUFFER_ANGLE
    int GL_DRAW_FRAMEBUFFER_ANGLE -> GL_DRAW_FRAMEBUFFER_ANGLE
    int GL_DRAW_FRAMEBUFFER_BINDING_ANGLE -> GL_DRAW_FRAMEBUFFER_BINDING_ANGLE
    int GL_READ_FRAMEBUFFER_BINDING_ANGLE -> GL_READ_FRAMEBUFFER_BINDING_ANGLE
    int GL_RENDERBUFFER_SAMPLES_ANGLE -> GL_RENDERBUFFER_SAMPLES_ANGLE
    int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE -> GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE
    int GL_MAX_SAMPLES_ANGLE -> GL_MAX_SAMPLES_ANGLE
    int GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE -> GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE
    int GL_PACK_REVERSE_ROW_ORDER_ANGLE -> GL_PACK_REVERSE_ROW_ORDER_ANGLE
    int GL_PROGRAM_BINARY_ANGLE -> GL_PROGRAM_BINARY_ANGLE
    int GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE -> GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
    int GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE -> GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
    int GL_TEXTURE_USAGE_ANGLE -> GL_TEXTURE_USAGE_ANGLE
    int GL_FRAMEBUFFER_ATTACHMENT_ANGLE -> GL_FRAMEBUFFER_ATTACHMENT_ANGLE
    int GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE -> GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE
    int GL_RENDERBUFFER_SAMPLES_APPLE -> GL_RENDERBUFFER_SAMPLES_APPLE
    int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE -> GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE
    int GL_MAX_SAMPLES_APPLE -> GL_MAX_SAMPLES_APPLE
    int GL_READ_FRAMEBUFFER_APPLE -> GL_READ_FRAMEBUFFER_APPLE
    int GL_DRAW_FRAMEBUFFER_APPLE -> GL_DRAW_FRAMEBUFFER_APPLE
    int GL_DRAW_FRAMEBUFFER_BINDING_APPLE -> GL_DRAW_FRAMEBUFFER_BINDING_APPLE
    int GL_READ_FRAMEBUFFER_BINDING_APPLE -> GL_READ_FRAMEBUFFER_BINDING_APPLE
    int GL_RGB_422_APPLE -> GL_RGB_422_APPLE
    int GL_UNSIGNED_SHORT_8_8_APPLE -> GL_UNSIGNED_SHORT_8_8_APPLE
    int GL_UNSIGNED_SHORT_8_8_REV_APPLE -> GL_UNSIGNED_SHORT_8_8_REV_APPLE
    int GL_TEXTURE_MAX_LEVEL_APPLE -> GL_TEXTURE_MAX_LEVEL_APPLE
    int GL_MALI_PROGRAM_BINARY_ARM -> GL_MALI_PROGRAM_BINARY_ARM
    int GL_MALI_SHADER_BINARY_ARM -> GL_MALI_SHADER_BINARY_ARM
    int GL_PROGRAM_PIPELINE_OBJECT_EXT -> GL_PROGRAM_PIPELINE_OBJECT_EXT
    int GL_PROGRAM_OBJECT_EXT -> GL_PROGRAM_OBJECT_EXT
    int GL_SHADER_OBJECT_EXT -> GL_SHADER_OBJECT_EXT
    int GL_BUFFER_OBJECT_EXT -> GL_BUFFER_OBJECT_EXT
    int GL_QUERY_OBJECT_EXT -> GL_QUERY_OBJECT_EXT
    int GL_VERTEX_ARRAY_OBJECT_EXT -> GL_VERTEX_ARRAY_OBJECT_EXT
    int GL_COLOR_EXT -> GL_COLOR_EXT
    int GL_DEPTH_EXT -> GL_DEPTH_EXT
    int GL_STENCIL_EXT -> GL_STENCIL_EXT
    int GL_QUERY_COUNTER_BITS_EXT -> GL_QUERY_COUNTER_BITS_EXT
    int GL_TIME_ELAPSED_EXT -> GL_TIME_ELAPSED_EXT
    int GL_TIMESTAMP_EXT -> GL_TIMESTAMP_EXT
    int GL_GPU_DISJOINT_EXT -> GL_GPU_DISJOINT_EXT
    int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT -> GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT
    int GL_COLOR_ATTACHMENT_EXT -> GL_COLOR_ATTACHMENT_EXT
    int GL_MULTIVIEW_EXT -> GL_MULTIVIEW_EXT
    int GL_DRAW_BUFFER_EXT -> GL_DRAW_BUFFER_EXT
    int GL_READ_BUFFER_EXT -> GL_READ_BUFFER_EXT
    int GL_MAX_MULTIVIEW_BUFFERS_EXT -> GL_MAX_MULTIVIEW_BUFFERS_EXT
    int GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT -> GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT
    int GL_LUMINANCE32F -> GL_LUMINANCE32F
    int GL_LUMINANCE_ALPHA32F -> GL_LUMINANCE_ALPHA32F
    int GL_LUMINANCE16F -> GL_LUMINANCE16F
    int GL_LUMINANCE_ALPHA16F -> GL_LUMINANCE_ALPHA16F
    int GL_GCCSO_SHADER_BINARY_FJ -> GL_GCCSO_SHADER_BINARY_FJ
    int GL_SGX_PROGRAM_BINARY_IMG -> GL_SGX_PROGRAM_BINARY_IMG
    int GL_BGRA_IMG -> GL_BGRA_IMG
    int GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG -> GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG
    int GL_SGX_BINARY_IMG -> GL_SGX_BINARY_IMG
    int GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG -> GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG
    int GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG -> GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG
    int GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG -> GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG
    int GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG -> GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG
    int GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG -> GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG
    int GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG -> GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG
    int GL_RENDERBUFFER_SAMPLES_IMG -> GL_RENDERBUFFER_SAMPLES_IMG
    int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG -> GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG
    int GL_MAX_SAMPLES_IMG -> GL_MAX_SAMPLES_IMG
    int GL_TEXTURE_SAMPLES_IMG -> GL_TEXTURE_SAMPLES_IMG
    int GL_ALL_COMPLETED_NV -> GL_ALL_COMPLETED_NV
    int GL_FENCE_STATUS_NV -> GL_FENCE_STATUS_NV
    int GL_FENCE_CONDITION_NV -> GL_FENCE_CONDITION_NV
    int GL_COVERAGE_COMPONENT_NV -> GL_COVERAGE_COMPONENT_NV
    int GL_COVERAGE_COMPONENT4_NV -> GL_COVERAGE_COMPONENT4_NV
    int GL_COVERAGE_ATTACHMENT_NV -> GL_COVERAGE_ATTACHMENT_NV
    int GL_COVERAGE_BUFFERS_NV -> GL_COVERAGE_BUFFERS_NV
    int GL_COVERAGE_SAMPLES_NV -> GL_COVERAGE_SAMPLES_NV
    int GL_COVERAGE_ALL_FRAGMENTS_NV -> GL_COVERAGE_ALL_FRAGMENTS_NV
    int GL_COVERAGE_EDGE_FRAGMENTS_NV -> GL_COVERAGE_EDGE_FRAGMENTS_NV
    int GL_COVERAGE_AUTOMATIC_NV -> GL_COVERAGE_AUTOMATIC_NV
    int GL_COVERAGE_BUFFER_BIT_NV -> GL_COVERAGE_BUFFER_BIT_NV
    int GL_DEPTH_COMPONENT16_NONLINEAR_NV -> GL_DEPTH_COMPONENT16_NONLINEAR_NV
    int GL_READ_FRAMEBUFFER_NV -> GL_READ_FRAMEBUFFER_NV
    int GL_DRAW_FRAMEBUFFER_NV -> GL_DRAW_FRAMEBUFFER_NV
    int GL_DRAW_FRAMEBUFFER_BINDING_NV -> GL_DRAW_FRAMEBUFFER_BINDING_NV
    int GL_READ_FRAMEBUFFER_BINDING_NV -> GL_READ_FRAMEBUFFER_BINDING_NV
    int GL_RENDERBUFFER_SAMPLES_NV -> GL_RENDERBUFFER_SAMPLES_NV
    int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV -> GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV
    int GL_MAX_SAMPLES_NV -> GL_MAX_SAMPLES_NV
    int GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV -> GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV
    int GL_READ_BUFFER_NV -> GL_READ_BUFFER_NV
    int GL_SAMPLER_2D_ARRAY_SHADOW_NV -> GL_SAMPLER_2D_ARRAY_SHADOW_NV
    int GL_SAMPLER_CUBE_SHADOW_NV -> GL_SAMPLER_CUBE_SHADOW_NV
    int GL_SLUMINANCE_NV -> GL_SLUMINANCE_NV
    int GL_SLUMINANCE_ALPHA_NV -> GL_SLUMINANCE_ALPHA_NV
    int GL_SRGB8_NV -> GL_SRGB8_NV
    int GL_SLUMINANCE8_NV -> GL_SLUMINANCE8_NV
    int GL_SLUMINANCE8_ALPHA8_NV -> GL_SLUMINANCE8_ALPHA8_NV
    int GL_COMPRESSED_SRGB_S3TC_DXT1_NV -> GL_COMPRESSED_SRGB_S3TC_DXT1_NV
    int GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV -> GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV
    int GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV -> GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV
    int GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV -> GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV
    int GL_ETC1_SRGB8_NV -> GL_ETC1_SRGB8_NV
    int GL_TEXTURE_BORDER_COLOR_NV -> GL_TEXTURE_BORDER_COLOR_NV
    int GL_CLAMP_TO_BORDER_NV -> GL_CLAMP_TO_BORDER_NV
    int GL_ALPHA_TEST_QCOM -> GL_ALPHA_TEST_QCOM
    int GL_ALPHA_TEST_FUNC_QCOM -> GL_ALPHA_TEST_FUNC_QCOM
    int GL_ALPHA_TEST_REF_QCOM -> GL_ALPHA_TEST_REF_QCOM
    int GL_BINNING_CONTROL_HINT_QCOM -> GL_BINNING_CONTROL_HINT_QCOM
    int GL_CPU_OPTIMIZED_QCOM -> GL_CPU_OPTIMIZED_QCOM
    int GL_GPU_OPTIMIZED_QCOM -> GL_GPU_OPTIMIZED_QCOM
    int GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM -> GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM
    int GL_TEXTURE_WIDTH_QCOM -> GL_TEXTURE_WIDTH_QCOM
    int GL_TEXTURE_HEIGHT_QCOM -> GL_TEXTURE_HEIGHT_QCOM
    int GL_TEXTURE_DEPTH_QCOM -> GL_TEXTURE_DEPTH_QCOM
    int GL_TEXTURE_INTERNAL_FORMAT_QCOM -> GL_TEXTURE_INTERNAL_FORMAT_QCOM
    int GL_TEXTURE_FORMAT_QCOM -> GL_TEXTURE_FORMAT_QCOM
    int GL_TEXTURE_TYPE_QCOM -> GL_TEXTURE_TYPE_QCOM
    int GL_TEXTURE_IMAGE_VALID_QCOM -> GL_TEXTURE_IMAGE_VALID_QCOM
    int GL_TEXTURE_NUM_LEVELS_QCOM -> GL_TEXTURE_NUM_LEVELS_QCOM
    int GL_TEXTURE_TARGET_QCOM -> GL_TEXTURE_TARGET_QCOM
    int GL_TEXTURE_OBJECT_VALID_QCOM -> GL_TEXTURE_OBJECT_VALID_QCOM
    int GL_STATE_RESTORE -> GL_STATE_RESTORE
    int GL_PERFMON_GLOBAL_MODE_QCOM -> GL_PERFMON_GLOBAL_MODE_QCOM
    int GL_WRITEONLY_RENDERING_QCOM -> GL_WRITEONLY_RENDERING_QCOM
    int GL_COLOR_BUFFER_BIT0_QCOM -> GL_COLOR_BUFFER_BIT0_QCOM
    int GL_COLOR_BUFFER_BIT1_QCOM -> GL_COLOR_BUFFER_BIT1_QCOM
    int GL_COLOR_BUFFER_BIT2_QCOM -> GL_COLOR_BUFFER_BIT2_QCOM
    int GL_COLOR_BUFFER_BIT3_QCOM -> GL_COLOR_BUFFER_BIT3_QCOM
    int GL_COLOR_BUFFER_BIT4_QCOM -> GL_COLOR_BUFFER_BIT4_QCOM
    int GL_COLOR_BUFFER_BIT5_QCOM -> GL_COLOR_BUFFER_BIT5_QCOM
    int GL_COLOR_BUFFER_BIT6_QCOM -> GL_COLOR_BUFFER_BIT6_QCOM
    int GL_COLOR_BUFFER_BIT7_QCOM -> GL_COLOR_BUFFER_BIT7_QCOM
    int GL_DEPTH_BUFFER_BIT0_QCOM -> GL_DEPTH_BUFFER_BIT0_QCOM
    int GL_DEPTH_BUFFER_BIT1_QCOM -> GL_DEPTH_BUFFER_BIT1_QCOM
    int GL_DEPTH_BUFFER_BIT2_QCOM -> GL_DEPTH_BUFFER_BIT2_QCOM
    int GL_DEPTH_BUFFER_BIT3_QCOM -> GL_DEPTH_BUFFER_BIT3_QCOM
    int GL_DEPTH_BUFFER_BIT4_QCOM -> GL_DEPTH_BUFFER_BIT4_QCOM
    int GL_DEPTH_BUFFER_BIT5_QCOM -> GL_DEPTH_BUFFER_BIT5_QCOM
    int GL_DEPTH_BUFFER_BIT6_QCOM -> GL_DEPTH_BUFFER_BIT6_QCOM
    int GL_DEPTH_BUFFER_BIT7_QCOM -> GL_DEPTH_BUFFER_BIT7_QCOM
    int GL_STENCIL_BUFFER_BIT0_QCOM -> GL_STENCIL_BUFFER_BIT0_QCOM
    int GL_STENCIL_BUFFER_BIT1_QCOM -> GL_STENCIL_BUFFER_BIT1_QCOM
    int GL_STENCIL_BUFFER_BIT2_QCOM -> GL_STENCIL_BUFFER_BIT2_QCOM
    int GL_STENCIL_BUFFER_BIT3_QCOM -> GL_STENCIL_BUFFER_BIT3_QCOM
    int GL_STENCIL_BUFFER_BIT4_QCOM -> GL_STENCIL_BUFFER_BIT4_QCOM
    int GL_STENCIL_BUFFER_BIT5_QCOM -> GL_STENCIL_BUFFER_BIT5_QCOM
    int GL_STENCIL_BUFFER_BIT6_QCOM -> GL_STENCIL_BUFFER_BIT6_QCOM
    int GL_STENCIL_BUFFER_BIT7_QCOM -> GL_STENCIL_BUFFER_BIT7_QCOM
    int GL_MULTISAMPLE_BUFFER_BIT0_QCOM -> GL_MULTISAMPLE_BUFFER_BIT0_QCOM
    int GL_MULTISAMPLE_BUFFER_BIT1_QCOM -> GL_MULTISAMPLE_BUFFER_BIT1_QCOM
    int GL_MULTISAMPLE_BUFFER_BIT2_QCOM -> GL_MULTISAMPLE_BUFFER_BIT2_QCOM
    int GL_MULTISAMPLE_BUFFER_BIT3_QCOM -> GL_MULTISAMPLE_BUFFER_BIT3_QCOM
    int GL_MULTISAMPLE_BUFFER_BIT4_QCOM -> GL_MULTISAMPLE_BUFFER_BIT4_QCOM
    int GL_MULTISAMPLE_BUFFER_BIT5_QCOM -> GL_MULTISAMPLE_BUFFER_BIT5_QCOM
    int GL_MULTISAMPLE_BUFFER_BIT6_QCOM -> GL_MULTISAMPLE_BUFFER_BIT6_QCOM
    long GL_MULTISAMPLE_BUFFER_BIT7_QCOM -> GL_MULTISAMPLE_BUFFER_BIT7_QCOM
    int GL_SHADER_BINARY_VIV -> GL_SHADER_BINARY_VIV
    int GL_NVIDIA_PLATFORM_BINARY_NV -> GL_NVIDIA_PLATFORM_BINARY_NV
    void glAlphaFuncQCOM(int,float) -> glAlphaFuncQCOM
    void glBeginPerfMonitorAMD(int) -> glBeginPerfMonitorAMD
    void glBindVertexArrayOES(int) -> glBindVertexArrayOES
    void glBlitFramebufferANGLE(int,int,int,int,int,int,int,int,int,int) -> glBlitFramebufferANGLE
    void glBlitFramebufferNV(int,int,int,int,int,int,int,int,int,int) -> glBlitFramebufferNV
    void glCopyTextureLevelsAPPLE(int,int,int,int) -> glCopyTextureLevelsAPPLE
    void glCoverageMaskNV(boolean) -> glCoverageMaskNV
    void glCoverageOperationNV(int) -> glCoverageOperationNV
    void glDeleteFencesNV(int,java.nio.IntBuffer) -> glDeleteFencesNV
    void glDeleteFencesNV(int,int[],int) -> glDeleteFencesNV
    void glDeletePerfMonitorsAMD(int,java.nio.IntBuffer) -> glDeletePerfMonitorsAMD
    void glDeletePerfMonitorsAMD(int,int[],int) -> glDeletePerfMonitorsAMD
    void glDeleteVertexArraysOES(int,java.nio.IntBuffer) -> glDeleteVertexArraysOES
    void glDeleteVertexArraysOES(int,int[],int) -> glDeleteVertexArraysOES
    void glDisableDriverControlQCOM(int) -> glDisableDriverControlQCOM
    void glDiscardFramebufferEXT(int,int,java.nio.IntBuffer) -> glDiscardFramebufferEXT
    void glDiscardFramebufferEXT(int,int,int[],int) -> glDiscardFramebufferEXT
    void glDrawArraysInstancedANGLE(int,int,int,int) -> glDrawArraysInstancedANGLE
    void glDrawArraysInstancedNV(int,int,int,int) -> glDrawArraysInstancedNV
    void glDrawBuffersIndexedEXT(int,java.nio.IntBuffer,java.nio.IntBuffer) -> glDrawBuffersIndexedEXT
    void glDrawBuffersIndexedEXT(int,int[],int,int[],int) -> glDrawBuffersIndexedEXT
    void glDrawBuffers(int,java.nio.IntBuffer) -> glDrawBuffers
    void glDrawBuffers(int,int[],int) -> glDrawBuffers
    void glDrawElementsInstancedANGLE(int,int,int,java.nio.Buffer,int) -> glDrawElementsInstancedANGLE
    void glDrawElementsInstancedNV(int,int,int,java.nio.Buffer,int) -> glDrawElementsInstancedNV
    void glEGLImageTargetRenderbufferStorageOES(int,long) -> glEGLImageTargetRenderbufferStorageOES
    void glEGLImageTargetTexture2DOES(int,long) -> glEGLImageTargetTexture2DOES
    void glEnableDriverControlQCOM(int) -> glEnableDriverControlQCOM
    void glEndPerfMonitorAMD(int) -> glEndPerfMonitorAMD
    void glEndTilingQCOM(int) -> glEndTilingQCOM
    void glExtGetBufferPointervQCOM(int,com.jogamp.common.nio.PointerBuffer) -> glExtGetBufferPointervQCOM
    void glExtGetBuffersQCOM(java.nio.IntBuffer,int,java.nio.IntBuffer) -> glExtGetBuffersQCOM
    void glExtGetBuffersQCOM(int[],int,int,int[],int) -> glExtGetBuffersQCOM
    void glExtGetFramebuffersQCOM(java.nio.IntBuffer,int,java.nio.IntBuffer) -> glExtGetFramebuffersQCOM
    void glExtGetFramebuffersQCOM(int[],int,int,int[],int) -> glExtGetFramebuffersQCOM
    void glExtGetProgramBinarySourceQCOM(int,int,java.nio.ByteBuffer,java.nio.IntBuffer) -> glExtGetProgramBinarySourceQCOM
    void glExtGetProgramBinarySourceQCOM(int,int,byte[],int,int[],int) -> glExtGetProgramBinarySourceQCOM
    void glExtGetProgramsQCOM(java.nio.IntBuffer,int,java.nio.IntBuffer) -> glExtGetProgramsQCOM
    void glExtGetProgramsQCOM(int[],int,int,int[],int) -> glExtGetProgramsQCOM
    void glExtGetRenderbuffersQCOM(java.nio.IntBuffer,int,java.nio.IntBuffer) -> glExtGetRenderbuffersQCOM
    void glExtGetRenderbuffersQCOM(int[],int,int,int[],int) -> glExtGetRenderbuffersQCOM
    void glExtGetShadersQCOM(java.nio.IntBuffer,int,java.nio.IntBuffer) -> glExtGetShadersQCOM
    void glExtGetShadersQCOM(int[],int,int,int[],int) -> glExtGetShadersQCOM
    void glExtGetTexLevelParameterivQCOM(int,int,int,int,java.nio.IntBuffer) -> glExtGetTexLevelParameterivQCOM
    void glExtGetTexLevelParameterivQCOM(int,int,int,int,int[],int) -> glExtGetTexLevelParameterivQCOM
    void glExtGetTexSubImageQCOM(int,int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> glExtGetTexSubImageQCOM
    void glExtGetTexturesQCOM(java.nio.IntBuffer,int,java.nio.IntBuffer) -> glExtGetTexturesQCOM
    void glExtGetTexturesQCOM(int[],int,int,int[],int) -> glExtGetTexturesQCOM
    boolean glExtIsProgramBinaryQCOM(int) -> glExtIsProgramBinaryQCOM
    void glExtTexObjectStateOverrideiQCOM(int,int,int) -> glExtTexObjectStateOverrideiQCOM
    void glFinishFenceNV(int) -> glFinishFenceNV
    void glFramebufferTexture2DMultisampleEXT(int,int,int,int,int,int) -> glFramebufferTexture2DMultisampleEXT
    void glFramebufferTexture2DMultisampleIMG(int,int,int,int,int,int) -> glFramebufferTexture2DMultisampleIMG
    void glGenFencesNV(int,java.nio.IntBuffer) -> glGenFencesNV
    void glGenFencesNV(int,int[],int) -> glGenFencesNV
    void glGenPerfMonitorsAMD(int,java.nio.IntBuffer) -> glGenPerfMonitorsAMD
    void glGenPerfMonitorsAMD(int,int[],int) -> glGenPerfMonitorsAMD
    void glGenVertexArraysOES(int,java.nio.IntBuffer) -> glGenVertexArraysOES
    void glGenVertexArraysOES(int,int[],int) -> glGenVertexArraysOES
    void glGetDriverControlStringQCOM(int,int,java.nio.IntBuffer,java.nio.ByteBuffer) -> glGetDriverControlStringQCOM
    void glGetDriverControlStringQCOM(int,int,int[],int,byte[],int) -> glGetDriverControlStringQCOM
    void glGetDriverControlsQCOM(java.nio.IntBuffer,int,java.nio.IntBuffer) -> glGetDriverControlsQCOM
    void glGetDriverControlsQCOM(int[],int,int,int[],int) -> glGetDriverControlsQCOM
    void glGetFenceivNV(int,int,java.nio.IntBuffer) -> glGetFenceivNV
    void glGetFenceivNV(int,int,int[],int) -> glGetFenceivNV
    void glGetIntegeri_vEXT(int,int,java.nio.IntBuffer) -> glGetIntegeri_vEXT
    void glGetIntegeri_vEXT(int,int,int[],int) -> glGetIntegeri_vEXT
    void glGetObjectLabelEXT(int,int,int,java.nio.IntBuffer,java.nio.ByteBuffer) -> glGetObjectLabelEXT
    void glGetObjectLabelEXT(int,int,int,int[],int,byte[],int) -> glGetObjectLabelEXT
    void glGetPerfMonitorCounterDataAMD(int,int,int,java.nio.IntBuffer,java.nio.IntBuffer) -> glGetPerfMonitorCounterDataAMD
    void glGetPerfMonitorCounterDataAMD(int,int,int,int[],int,int[],int) -> glGetPerfMonitorCounterDataAMD
    void glGetPerfMonitorCounterInfoAMD(int,int,int,java.nio.Buffer) -> glGetPerfMonitorCounterInfoAMD
    void glGetPerfMonitorCounterStringAMD(int,int,int,java.nio.IntBuffer,java.nio.ByteBuffer) -> glGetPerfMonitorCounterStringAMD
    void glGetPerfMonitorCounterStringAMD(int,int,int,int[],int,byte[],int) -> glGetPerfMonitorCounterStringAMD
    void glGetPerfMonitorCountersAMD(int,java.nio.IntBuffer,java.nio.IntBuffer,int,java.nio.IntBuffer) -> glGetPerfMonitorCountersAMD
    void glGetPerfMonitorCountersAMD(int,int[],int,int[],int,int,int[],int) -> glGetPerfMonitorCountersAMD
    void glGetPerfMonitorGroupStringAMD(int,int,java.nio.IntBuffer,java.nio.ByteBuffer) -> glGetPerfMonitorGroupStringAMD
    void glGetPerfMonitorGroupStringAMD(int,int,int[],int,byte[],int) -> glGetPerfMonitorGroupStringAMD
    void glGetPerfMonitorGroupsAMD(java.nio.IntBuffer,int,java.nio.IntBuffer) -> glGetPerfMonitorGroupsAMD
    void glGetPerfMonitorGroupsAMD(int[],int,int,int[],int) -> glGetPerfMonitorGroupsAMD
    void glGetQueryObjecti64vEXT(int,int,java.nio.LongBuffer) -> glGetQueryObjecti64vEXT
    void glGetQueryObjecti64vEXT(int,int,long[],int) -> glGetQueryObjecti64vEXT
    void glGetQueryObjectivEXT(int,int,java.nio.IntBuffer) -> glGetQueryObjectivEXT
    void glGetQueryObjectivEXT(int,int,int[],int) -> glGetQueryObjectivEXT
    void glGetQueryObjectui64vEXT(int,int,java.nio.LongBuffer) -> glGetQueryObjectui64vEXT
    void glGetQueryObjectui64vEXT(int,int,long[],int) -> glGetQueryObjectui64vEXT
    void glGetTranslatedShaderSourceANGLE(int,int,java.nio.IntBuffer,java.nio.ByteBuffer) -> glGetTranslatedShaderSourceANGLE
    void glGetTranslatedShaderSourceANGLE(int,int,int[],int,byte[],int) -> glGetTranslatedShaderSourceANGLE
    void glInsertEventMarkerEXT(int,java.nio.ByteBuffer) -> glInsertEventMarkerEXT
    void glInsertEventMarkerEXT(int,byte[],int) -> glInsertEventMarkerEXT
    boolean glIsFenceNV(int) -> glIsFenceNV
    boolean glIsVertexArrayOES(int) -> glIsVertexArrayOES
    void glLabelObjectEXT(int,int,int,java.nio.ByteBuffer) -> glLabelObjectEXT
    void glLabelObjectEXT(int,int,int,byte[],int) -> glLabelObjectEXT
    void glPopGroupMarkerEXT() -> glPopGroupMarkerEXT
    void glPushGroupMarkerEXT(int,java.nio.ByteBuffer) -> glPushGroupMarkerEXT
    void glPushGroupMarkerEXT(int,byte[],int) -> glPushGroupMarkerEXT
    void glQueryCounterEXT(int,int) -> glQueryCounterEXT
    void glReadBufferIndexedEXT(int,int) -> glReadBufferIndexedEXT
    void glReadBufferNV(int) -> glReadBufferNV
    void glRenderbufferStorageMultisampleANGLE(int,int,int,int,int) -> glRenderbufferStorageMultisampleANGLE
    void glRenderbufferStorageMultisampleAPPLE(int,int,int,int,int) -> glRenderbufferStorageMultisampleAPPLE
    void glRenderbufferStorageMultisampleIMG(int,int,int,int,int) -> glRenderbufferStorageMultisampleIMG
    void glRenderbufferStorageMultisampleNV(int,int,int,int,int) -> glRenderbufferStorageMultisampleNV
    void glResolveMultisampleFramebufferAPPLE() -> glResolveMultisampleFramebufferAPPLE
    void glSelectPerfMonitorCountersAMD(int,boolean,int,int,java.nio.IntBuffer) -> glSelectPerfMonitorCountersAMD
    void glSelectPerfMonitorCountersAMD(int,boolean,int,int,int[],int) -> glSelectPerfMonitorCountersAMD
    void glSetFenceNV(int,int) -> glSetFenceNV
    void glStartTilingQCOM(int,int,int,int,int) -> glStartTilingQCOM
    boolean glTestFenceNV(int) -> glTestFenceNV
    void glVertexAttribDivisorANGLE(int,int) -> glVertexAttribDivisorANGLE
    void glVertexAttribDivisorNV(int,int) -> glVertexAttribDivisorNV
    void glDrawElements(int,int,int,java.nio.Buffer) -> glDrawElements
    void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer) -> glVertexAttribPointer
javax.media.opengl.GLES3 -> javax.media.opengl.GLES3:
    void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer) -> glVertexAttribPointer
    void glDrawElementsInstanced(int,int,int,java.nio.Buffer,int) -> glDrawElementsInstanced
    void glDrawRangeElements(int,int,int,int,int,java.nio.Buffer) -> glDrawRangeElements
    void glVertexAttribIPointer(int,int,int,int,java.nio.Buffer) -> glVertexAttribIPointer
javax.media.opengl.GLEventListener -> javax.media.opengl.GLEventListener:
    void init(javax.media.opengl.GLAutoDrawable) -> init
    void dispose(javax.media.opengl.GLAutoDrawable) -> dispose
    void display(javax.media.opengl.GLAutoDrawable) -> display
    void reshape(javax.media.opengl.GLAutoDrawable,int,int,int,int) -> reshape
javax.media.opengl.GLException -> javax.media.opengl.GLException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
    void <init>(java.lang.Throwable) -> <init>
    javax.media.opengl.GLException newGLException(java.lang.Throwable) -> newGLException
    void dumpThrowable(java.lang.String,java.lang.Throwable) -> dumpThrowable
javax.media.opengl.GLFBODrawable -> javax.media.opengl.GLFBODrawable:
    int FBOMODE_USE_TEXTURE -> FBOMODE_USE_TEXTURE
    int FBOMODE_USE_DEPTH -> FBOMODE_USE_DEPTH
    int FBOMODE_DEFAULT -> FBOMODE_DEFAULT
    boolean isInitialized() -> isInitialized
    void setFBOMode(int) -> setFBOMode
    int getFBOMode() -> getFBOMode
    void resetSize(javax.media.opengl.GL) -> resetSize
    int getTextureUnit() -> getTextureUnit
    void setTextureUnit(int) -> setTextureUnit
    void setNumSamples(javax.media.opengl.GL,int) -> setNumSamples
    int getNumSamples() -> getNumSamples
    int setNumBuffers(int) -> setNumBuffers
    int getNumBuffers() -> getNumBuffers
    com.jogamp.opengl.FBObject getFBObject(int) -> getFBObject
    com.jogamp.opengl.FBObject$Colorbuffer getColorbuffer(int) -> getColorbuffer
javax.media.opengl.GLFBODrawable$Resizeable -> javax.media.opengl.GLFBODrawable$Resizeable:
javax.media.opengl.GLOffscreenAutoDrawable -> javax.media.opengl.GLOffscreenAutoDrawable:
    void setSurfaceSize(int,int) -> setSurfaceSize
    void setUpstreamWidget(java.lang.Object) -> setUpstreamWidget
javax.media.opengl.GLOffscreenAutoDrawable$FBO -> javax.media.opengl.GLOffscreenAutoDrawable$FBO:
javax.media.opengl.GLPipelineFactory -> javax.media.opengl.GLPipelineFactory:
    boolean DEBUG -> DEBUG
    void <init>() -> <init>
    javax.media.opengl.GL create(java.lang.String,java.lang.Class,javax.media.opengl.GL,java.lang.Object[]) -> create
    java.lang.String getArgsClassNameList(java.lang.Class,java.lang.Object[]) -> getArgsClassNameList
    java.lang.Class getUpstreamClazz(java.lang.Class,java.lang.String) -> getUpstreamClazz
    void <clinit>() -> <clinit>
javax.media.opengl.GLProfile -> javax.media.opengl.GLProfile:
    boolean DEBUG -> DEBUG
    boolean disableOpenGLES -> disableOpenGLES
    boolean disableOpenGLCore -> disableOpenGLCore
    boolean disableOpenGLARBContext -> disableOpenGLARBContext
    boolean enableANGLE -> enableANGLE
    java.lang.String GL4bc -> GL4bc
    java.lang.String GL4 -> GL4
    java.lang.String GL3bc -> GL3bc
    java.lang.String GL3 -> GL3
    java.lang.String GL2 -> GL2
    java.lang.String GLES1 -> GLES1
    java.lang.String GLES2 -> GLES2
    java.lang.String GLES3 -> GLES3
    java.lang.String GL2ES1 -> GL2ES1
    java.lang.String GL2ES2 -> GL2ES2
    java.lang.String GL2GL3 -> GL2GL3
    java.lang.String GL4ES3 -> GL4ES3
    java.lang.String GL_DEFAULT -> GL_DEFAULT
    java.lang.String[] GL_PROFILE_LIST_ALL -> GL_PROFILE_LIST_ALL
    java.lang.String[] GL_PROFILE_LIST_MAX -> GL_PROFILE_LIST_MAX
    java.lang.String[] GL_PROFILE_LIST_MIN -> GL_PROFILE_LIST_MIN
    java.lang.String[] GL_PROFILE_LIST_MIN_DESKTOP -> GL_PROFILE_LIST_MIN_DESKTOP
    java.lang.String[] GL_PROFILE_LIST_MAX_FIXEDFUNC -> GL_PROFILE_LIST_MAX_FIXEDFUNC
    java.lang.String[] GL_PROFILE_LIST_MAX_PROGSHADER -> GL_PROFILE_LIST_MAX_PROGSHADER
    java.lang.String[] GL_PROFILE_LIST_MAX_PROGSHADER_CORE -> GL_PROFILE_LIST_MAX_PROGSHADER_CORE
    boolean isAWTAvailable -> isAWTAvailable
    boolean hasDesktopGLFactory -> hasDesktopGLFactory
    boolean hasGL234Impl -> hasGL234Impl
    boolean hasEGLFactory -> hasEGLFactory
    boolean hasGLES3Impl -> hasGLES3Impl
    boolean hasGLES1Impl -> hasGLES1Impl
    java.lang.reflect.Constructor ctorGL234Impl -> ctorGL234Impl
    java.lang.reflect.Constructor ctorGLES3Impl -> ctorGLES3Impl
    java.lang.reflect.Constructor ctorGLES1Impl -> ctorGLES1Impl
    java.lang.reflect.Constructor ctorGL234ProcAddr -> ctorGL234ProcAddr
    java.lang.reflect.Constructor ctorGLES3ProcAddr -> ctorGLES3ProcAddr
    java.lang.reflect.Constructor ctorGLES1ProcAddr -> ctorGLES1ProcAddr
    jogamp.opengl.GLDrawableFactoryImpl eglFactory -> eglFactory
    jogamp.opengl.GLDrawableFactoryImpl desktopFactory -> desktopFactory
    javax.media.nativewindow.AbstractGraphicsDevice defaultDevice -> defaultDevice
    boolean initialized -> initialized
    com.jogamp.common.util.locks.RecursiveThreadGroupLock initLock -> initLock
    java.lang.Class[] ctorGLArgs -> ctorGLArgs
    java.lang.Class[] ctorProcArgs -> ctorProcArgs
    java.lang.String GL4bcImplClassName -> GL4bcImplClassName
    java.lang.String GL4bcProcClassName -> GL4bcProcClassName
    java.lang.String GLES1ImplClassName -> GLES1ImplClassName
    java.lang.String GLES1ProcClassName -> GLES1ProcClassName
    java.lang.String GLES3ImplClassName -> GLES3ImplClassName
    java.lang.String GLES3ProcClassName -> GLES3ProcClassName
    java.util.HashMap deviceConn2ProfileMap -> deviceConn2ProfileMap
    javax.media.opengl.GLProfile profileImpl -> profileImpl
    java.lang.String profile -> profile
    boolean isHardwareRasterizer -> isHardwareRasterizer
    boolean isCustom -> isCustom
    void initSingleton() -> initSingleton
    void initProfiles(javax.media.nativewindow.AbstractGraphicsDevice) -> initProfiles
    void shutdown() -> shutdown
    boolean isAvailable(javax.media.nativewindow.AbstractGraphicsDevice,java.lang.String) -> isAvailable
    boolean isAvailableImpl(java.util.HashMap,java.lang.String) -> isAvailableImpl
    boolean isAvailable(java.lang.String) -> isAvailable
    boolean isAnyAvailable() -> isAnyAvailable
    java.lang.String glAvailabilityToString(javax.media.nativewindow.AbstractGraphicsDevice) -> glAvailabilityToString
    java.lang.StringBuilder glAvailabilityToString(javax.media.nativewindow.AbstractGraphicsDevice,java.lang.StringBuilder) -> glAvailabilityToString
    java.lang.StringBuilder doIndent(java.lang.StringBuilder,java.lang.String,int) -> doIndent
    java.lang.StringBuilder glAvailabilityToString(javax.media.nativewindow.AbstractGraphicsDevice,java.lang.StringBuilder,java.lang.String,int) -> glAvailabilityToString
    java.lang.String glAvailabilityToString() -> glAvailabilityToString
    javax.media.opengl.GLProfile getDefault(javax.media.nativewindow.AbstractGraphicsDevice) -> getDefault
    javax.media.opengl.GLProfile getDefault() -> getDefault
    javax.media.opengl.GLProfile getMaximum(javax.media.nativewindow.AbstractGraphicsDevice,boolean) -> getMaximum
    javax.media.opengl.GLProfile getMaximum(boolean) -> getMaximum
    javax.media.opengl.GLProfile getMinimum(javax.media.nativewindow.AbstractGraphicsDevice,boolean) -> getMinimum
    javax.media.opengl.GLProfile getMinimum(boolean) -> getMinimum
    javax.media.opengl.GLProfile getMaxFixedFunc(javax.media.nativewindow.AbstractGraphicsDevice,boolean) -> getMaxFixedFunc
    javax.media.opengl.GLProfile getMaxFixedFunc(boolean) -> getMaxFixedFunc
    javax.media.opengl.GLProfile getMaxProgrammable(javax.media.nativewindow.AbstractGraphicsDevice,boolean) -> getMaxProgrammable
    javax.media.opengl.GLProfile getMaxProgrammable(boolean) -> getMaxProgrammable
    javax.media.opengl.GLProfile getMaxProgrammableCore(javax.media.nativewindow.AbstractGraphicsDevice,boolean) -> getMaxProgrammableCore
    javax.media.opengl.GLProfile getMaxProgrammableCore(boolean) -> getMaxProgrammableCore
    javax.media.opengl.GLProfile getGL2ES1(javax.media.nativewindow.AbstractGraphicsDevice) -> getGL2ES1
    javax.media.opengl.GLProfile getGL2ES1() -> getGL2ES1
    javax.media.opengl.GLProfile getGL2ES2(javax.media.nativewindow.AbstractGraphicsDevice) -> getGL2ES2
    javax.media.opengl.GLProfile getGL2ES2() -> getGL2ES2
    javax.media.opengl.GLProfile getGL4ES3(javax.media.nativewindow.AbstractGraphicsDevice) -> getGL4ES3
    javax.media.opengl.GLProfile getGL4ES3() -> getGL4ES3
    javax.media.opengl.GLProfile getGL2GL3(javax.media.nativewindow.AbstractGraphicsDevice) -> getGL2GL3
    javax.media.opengl.GLProfile getGL2GL3() -> getGL2GL3
    javax.media.opengl.GLProfile get(javax.media.nativewindow.AbstractGraphicsDevice,java.lang.String) -> get
    javax.media.opengl.GLProfile get(java.lang.String) -> get
    javax.media.opengl.GLProfile get(javax.media.nativewindow.AbstractGraphicsDevice,java.lang.String[],boolean) -> get
    javax.media.opengl.GLProfile get(java.lang.String[],boolean) -> get
    boolean usesNativeGLES1(java.lang.String) -> usesNativeGLES1
    boolean usesNativeGLES2(java.lang.String) -> usesNativeGLES2
    boolean usesNativeGLES3(java.lang.String) -> usesNativeGLES3
    boolean usesNativeGLES(java.lang.String) -> usesNativeGLES
    boolean isAWTAvailable() -> isAWTAvailable
    java.lang.String getGLTypeName(int) -> getGLTypeName
    java.lang.String getGLArrayName(int) -> getGLArrayName
    java.lang.String getGLImplBaseClassName() -> getGLImplBaseClassName
    java.lang.String getGLImplBaseClassName(java.lang.String) -> getGLImplBaseClassName
    java.lang.reflect.Constructor getGLCtor(boolean) -> getGLCtor
    java.lang.reflect.Constructor getGLCtor(java.lang.String,boolean) -> getGLCtor
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void verifyEquality(javax.media.opengl.GLProfile) -> verifyEquality
    java.lang.String getName() -> getName
    javax.media.opengl.GLProfile getImpl() -> getImpl
    boolean isHardwareRasterizer() -> isHardwareRasterizer
    java.lang.String getImplName() -> getImplName
    boolean isGL4bc() -> isGL4bc
    boolean isGL4() -> isGL4
    boolean isGL3bc() -> isGL3bc
    boolean isGL3() -> isGL3
    boolean isGL2() -> isGL2
    boolean isGLES1() -> isGLES1
    boolean isGLES2() -> isGLES2
    boolean isGLES3() -> isGLES3
    boolean isGLES() -> isGLES
    boolean isGL2ES1() -> isGL2ES1
    boolean isGL2GL3() -> isGL2GL3
    boolean isGL2ES2() -> isGL2ES2
    boolean isGL2ES3() -> isGL2ES3
    boolean isGL3ES3() -> isGL3ES3
    boolean isGL4ES3() -> isGL4ES3
    boolean hasGLSL() -> hasGLSL
    boolean usesNativeGLES1() -> usesNativeGLES1
    boolean usesNativeGLES2() -> usesNativeGLES2
    boolean usesNativeGLES3() -> usesNativeGLES3
    boolean usesNativeGLES() -> usesNativeGLES
    boolean isValidDataType(int,boolean) -> isValidDataType
    boolean isValidArrayDataType(int,int,int,boolean,boolean) -> isValidArrayDataType
    java.lang.String toString() -> toString
    java.lang.reflect.Constructor getCtor(java.lang.String,boolean,java.lang.ClassLoader) -> getCtor
    void initGLCtorImpl() -> initGLCtorImpl
    void initProfilesForDefaultDevices() -> initProfilesForDefaultDevices
    boolean initProfilesForDevice(javax.media.nativewindow.AbstractGraphicsDevice) -> initProfilesForDevice
    boolean initProfilesForDeviceCritical(javax.media.nativewindow.AbstractGraphicsDevice) -> initProfilesForDeviceCritical
    void dumpGLInfo(jogamp.opengl.GLDrawableFactoryImpl,javax.media.nativewindow.AbstractGraphicsDevice) -> dumpGLInfo
    javax.media.nativewindow.AbstractGraphicsDevice getDefaultDevice() -> getDefaultDevice
    java.lang.String array2String(java.lang.String[]) -> array2String
    void glAvailabilityToString(javax.media.nativewindow.AbstractGraphicsDevice,java.lang.StringBuilder,int,int) -> glAvailabilityToString
    boolean computeProfileMap(javax.media.nativewindow.AbstractGraphicsDevice,boolean,boolean) -> computeProfileMap
    java.lang.String computeProfileImpl(javax.media.nativewindow.AbstractGraphicsDevice,java.lang.String,boolean,boolean,boolean[]) -> computeProfileImpl
    java.util.HashMap getProfileMap(javax.media.nativewindow.AbstractGraphicsDevice,boolean) -> getProfileMap
    void setProfileMap(javax.media.nativewindow.AbstractGraphicsDevice,java.util.HashMap) -> setProfileMap
    void <init>(java.lang.String,javax.media.opengl.GLProfile,boolean,boolean) -> <init>
    javax.media.opengl.GLProfile createCustomGLProfile(java.lang.String,javax.media.opengl.GLProfile) -> createCustomGLProfile
    void access$000() -> access$000
    void <clinit>() -> <clinit>
javax.media.opengl.GLProfile$1 -> javax.media.opengl.GLProfile$1:
    void <init>() -> <init>
    java.lang.Object run() -> run
javax.media.opengl.GLRunnable -> javax.media.opengl.GLRunnable:
    boolean run(javax.media.opengl.GLAutoDrawable) -> run
javax.media.opengl.GLSharedContextSetter -> javax.media.opengl.GLSharedContextSetter:
    void setSharedContext(javax.media.opengl.GLContext) -> setSharedContext
    void setSharedAutoDrawable(javax.media.opengl.GLAutoDrawable) -> setSharedAutoDrawable
javax.media.opengl.GLUniformData -> javax.media.opengl.GLUniformData:
    java.lang.String name -> name
    int location -> location
    int rows -> rows
    int columns -> columns
    int count -> count
    java.lang.Object data -> data
    boolean isMatrix -> isMatrix
    void <init>(java.lang.String,int) -> <init>
    void <init>(java.lang.String,float) -> <init>
    void <init>(java.lang.String,int,java.nio.IntBuffer) -> <init>
    void <init>(java.lang.String,int,java.nio.FloatBuffer) -> <init>
    void <init>(int,java.lang.String) -> <init>
    javax.media.opengl.GLUniformData creatEmptyVector(java.lang.String,int) -> creatEmptyVector
    javax.media.opengl.GLUniformData creatEmptyMatrix(java.lang.String,int,int) -> creatEmptyMatrix
    void <init>(java.lang.String,int,int,java.nio.FloatBuffer) -> <init>
    javax.media.opengl.GLUniformData setData(int) -> setData
    javax.media.opengl.GLUniformData setData(float) -> setData
    javax.media.opengl.GLUniformData setData(java.nio.IntBuffer) -> setData
    javax.media.opengl.GLUniformData setData(java.nio.FloatBuffer) -> setData
    int intValue() -> intValue
    float floatValue() -> floatValue
    java.nio.IntBuffer intBufferValue() -> intBufferValue
    java.nio.FloatBuffer floatBufferValue() -> floatBufferValue
    java.lang.StringBuilder toString(java.lang.StringBuilder) -> toString
    java.lang.String toString() -> toString
    void initBuffer(java.lang.String,int,int,java.nio.Buffer) -> initBuffer
    void initScalar(java.lang.String,int,java.lang.Object) -> initScalar
    void initBuffer(java.lang.String,int,java.nio.Buffer) -> initBuffer
    void initScalar(java.lang.Object) -> initScalar
    void initBuffer(java.nio.Buffer) -> initBuffer
    java.lang.String getName() -> getName
    int getLocation() -> getLocation
    int setLocation(int) -> setLocation
    int setLocation(javax.media.opengl.GL2ES2,int) -> setLocation
    java.lang.Object getObject() -> getObject
    java.nio.Buffer getBuffer() -> getBuffer
    boolean isBuffer() -> isBuffer
    boolean isMatrix() -> isMatrix
    int count() -> count
    int components() -> components
    int rows() -> rows
    int columns() -> columns
javax.media.opengl.Threading -> javax.media.opengl.Threading:
    void <init>() -> <init>
    javax.media.opengl.Threading$Mode getMode() -> getMode
    void disableSingleThreading() -> disableSingleThreading
    boolean isSingleThreaded() -> isSingleThreaded
    boolean isToolkitThread() -> isToolkitThread
    boolean isOpenGLThread() -> isOpenGLThread
    void invokeOnOpenGLThread(boolean,java.lang.Runnable) -> invokeOnOpenGLThread
    void invoke(boolean,java.lang.Runnable,java.lang.Object) -> invoke
javax.media.opengl.Threading$Mode -> javax.media.opengl.Threading$Mode:
    javax.media.opengl.Threading$Mode MT -> MT
    javax.media.opengl.Threading$Mode ST_AWT -> ST_AWT
    javax.media.opengl.Threading$Mode ST_WORKER -> ST_WORKER
    int id -> id
    javax.media.opengl.Threading$Mode[] $VALUES -> $VALUES
    javax.media.opengl.Threading$Mode[] values() -> values
    javax.media.opengl.Threading$Mode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
javax.media.opengl.awt.AWTGLAutoDrawable -> javax.media.opengl.awt.AWTGLAutoDrawable:
javax.media.opengl.awt.GLCanvas -> javax.media.opengl.awt.GLCanvas:
    boolean DEBUG -> DEBUG
    com.jogamp.common.util.locks.RecursiveLock lock -> lock
    jogamp.opengl.GLDrawableHelper helper -> helper
    com.jogamp.nativewindow.awt.AWTGraphicsConfiguration awtConfig -> awtConfig
    jogamp.opengl.GLDrawableImpl drawable -> drawable
    com.jogamp.nativewindow.awt.JAWTWindow jawtWindow -> jawtWindow
    jogamp.opengl.GLContextImpl context -> context
    boolean sendReshape -> sendReshape
    int[] nativePixelScale -> nativePixelScale
    int[] hasPixelScale -> hasPixelScale
    int[] reqPixelScale -> reqPixelScale
    javax.media.opengl.GLCapabilitiesImmutable capsReqUser -> capsReqUser
    javax.media.opengl.GLCapabilitiesChooser chooser -> chooser
    int additionalCtxCreationFlags -> additionalCtxCreationFlags
    java.awt.GraphicsDevice device -> device
    boolean shallUseOffscreenLayer -> shallUseOffscreenLayer
    boolean isShowing -> isShowing
    java.awt.event.HierarchyListener hierarchyListener -> hierarchyListener
    com.jogamp.nativewindow.awt.AWTWindowClosingProtocol awtWindowClosingProtocol -> awtWindowClosingProtocol
    java.lang.Runnable realizeOnEDTAction -> realizeOnEDTAction
    java.lang.Runnable unrealizeOnEDTAction -> unrealizeOnEDTAction
    boolean printActive -> printActive
    javax.media.opengl.GLAnimatorControl printAnimator -> printAnimator
    javax.media.opengl.GLAutoDrawable printGLAD -> printGLAD
    jogamp.opengl.awt.AWTTilePainter printAWTTiles -> printAWTTiles
    java.lang.Runnable setupPrintOnEDT -> setupPrintOnEDT
    java.lang.Runnable releasePrintOnEDT -> releasePrintOnEDT
    java.lang.Runnable destroyOnEDTAction -> destroyOnEDTAction
    java.lang.Runnable disposeJAWTWindowAndAWTDeviceOnEDT -> disposeJAWTWindowAndAWTDeviceOnEDT
    java.lang.Runnable initAction -> initAction
    java.lang.Runnable displayAction -> displayAction
    java.lang.Runnable displayOnEDTAction -> displayOnEDTAction
    java.lang.Runnable swapBuffersOnEDTAction -> swapBuffersOnEDTAction
    boolean disableBackgroundEraseInitialized -> disableBackgroundEraseInitialized
    java.lang.reflect.Method disableBackgroundEraseMethod -> disableBackgroundEraseMethod
    void <init>() -> <init>
    void <init>(javax.media.opengl.GLCapabilitiesImmutable) -> <init>
    void <init>(javax.media.opengl.GLCapabilitiesImmutable,javax.media.opengl.GLCapabilitiesChooser,java.awt.GraphicsDevice) -> <init>
    void setSharedContext(javax.media.opengl.GLContext) -> setSharedContext
    void setSharedAutoDrawable(javax.media.opengl.GLAutoDrawable) -> setSharedAutoDrawable
    java.lang.Object getUpstreamWidget() -> getUpstreamWidget
    com.jogamp.common.util.locks.RecursiveLock getUpstreamLock() -> getUpstreamLock
    boolean isThreadGLCapable() -> isThreadGLCapable
    void setShallUseOffscreenLayer(boolean) -> setShallUseOffscreenLayer
    boolean getShallUseOffscreenLayer() -> getShallUseOffscreenLayer
    boolean isOffscreenLayerSurfaceEnabled() -> isOffscreenLayerSurfaceEnabled
    java.awt.GraphicsConfiguration getGraphicsConfiguration() -> getGraphicsConfiguration
    javax.media.opengl.GLContext createContext(javax.media.opengl.GLContext) -> createContext
    void setRealizedImpl(boolean) -> setRealizedImpl
    void setRealized(boolean) -> setRealized
    boolean isRealized() -> isRealized
    javax.media.nativewindow.WindowClosingProtocol$WindowClosingMode getDefaultCloseOperation() -> getDefaultCloseOperation
    javax.media.nativewindow.WindowClosingProtocol$WindowClosingMode setDefaultCloseOperation(javax.media.nativewindow.WindowClosingProtocol$WindowClosingMode) -> setDefaultCloseOperation
    void display() -> display
    void destroy() -> destroy
    void destroyImpl(boolean) -> destroyImpl
    void paint(java.awt.Graphics) -> paint
    void addNotify() -> addNotify
    void setSurfaceScale(int[]) -> setSurfaceScale
    int[] getRequestedSurfaceScale(int[]) -> getRequestedSurfaceScale
    int[] getCurrentSurfaceScale(int[]) -> getCurrentSurfaceScale
    int[] getNativeSurfaceScale(int[]) -> getNativeSurfaceScale
    void createJAWTDrawableAndContext() -> createJAWTDrawableAndContext
    boolean createContextImpl(javax.media.opengl.GLDrawable) -> createContextImpl
    boolean validateGLDrawable() -> validateGLDrawable
    void removeNotify() -> removeNotify
    void reshape(int,int,int,int) -> reshape
    void reshapeImpl(int,int) -> reshapeImpl
    void update(java.awt.Graphics) -> update
    void setupPrint(double,double,int,int,int) -> setupPrint
    void releasePrint() -> releasePrint
    void print(java.awt.Graphics) -> print
    void addGLEventListener(javax.media.opengl.GLEventListener) -> addGLEventListener
    void addGLEventListener(int,javax.media.opengl.GLEventListener) -> addGLEventListener
    int getGLEventListenerCount() -> getGLEventListenerCount
    javax.media.opengl.GLEventListener getGLEventListener(int) -> getGLEventListener
    boolean areAllGLEventListenerInitialized() -> areAllGLEventListenerInitialized
    boolean getGLEventListenerInitState(javax.media.opengl.GLEventListener) -> getGLEventListenerInitState
    void setGLEventListenerInitState(javax.media.opengl.GLEventListener,boolean) -> setGLEventListenerInitState
    javax.media.opengl.GLEventListener disposeGLEventListener(javax.media.opengl.GLEventListener,boolean) -> disposeGLEventListener
    javax.media.opengl.GLEventListener removeGLEventListener(javax.media.opengl.GLEventListener) -> removeGLEventListener
    void setAnimator(javax.media.opengl.GLAnimatorControl) -> setAnimator
    javax.media.opengl.GLAnimatorControl getAnimator() -> getAnimator
    java.lang.Thread setExclusiveContextThread(java.lang.Thread) -> setExclusiveContextThread
    java.lang.Thread getExclusiveContextThread() -> getExclusiveContextThread
    boolean invoke(boolean,javax.media.opengl.GLRunnable) -> invoke
    boolean invoke(boolean,java.util.List) -> invoke
    void flushGLRunnables() -> flushGLRunnables
    javax.media.opengl.GLContext setContext(javax.media.opengl.GLContext,boolean) -> setContext
    javax.media.opengl.GLDrawable getDelegatedDrawable() -> getDelegatedDrawable
    javax.media.opengl.GLContext getContext() -> getContext
    javax.media.opengl.GL getGL() -> getGL
    javax.media.opengl.GL setGL(javax.media.opengl.GL) -> setGL
    void setAutoSwapBufferMode(boolean) -> setAutoSwapBufferMode
    boolean getAutoSwapBufferMode() -> getAutoSwapBufferMode
    void swapBuffers() -> swapBuffers
    void setContextCreationFlags(int) -> setContextCreationFlags
    int getContextCreationFlags() -> getContextCreationFlags
    javax.media.opengl.GLProfile getGLProfile() -> getGLProfile
    javax.media.opengl.GLCapabilitiesImmutable getChosenGLCapabilities() -> getChosenGLCapabilities
    javax.media.opengl.GLCapabilitiesImmutable getRequestedGLCapabilities() -> getRequestedGLCapabilities
    int getSurfaceWidth() -> getSurfaceWidth
    int getSurfaceHeight() -> getSurfaceHeight
    boolean isGLOriented() -> isGLOriented
    javax.media.nativewindow.NativeSurface getNativeSurface() -> getNativeSurface
    long getHandle() -> getHandle
    javax.media.opengl.GLDrawableFactory getFactory() -> getFactory
    java.lang.String toString() -> toString
    java.lang.String getPixelScaleStr() -> getPixelScaleStr
    void disableBackgroundErase() -> disableBackgroundErase
    com.jogamp.nativewindow.awt.AWTGraphicsConfiguration chooseGraphicsConfiguration(javax.media.opengl.GLCapabilitiesImmutable,javax.media.opengl.GLCapabilitiesImmutable,javax.media.opengl.GLCapabilitiesChooser,java.awt.GraphicsDevice) -> chooseGraphicsConfiguration
    java.lang.String getThreadName() -> getThreadName
    void main(java.lang.String[]) -> main
    boolean access$002(javax.media.opengl.awt.GLCanvas,boolean) -> access$002
    void access$100(javax.media.opengl.awt.GLCanvas,boolean) -> access$100
    boolean access$200(javax.media.opengl.awt.GLCanvas) -> access$200
    boolean access$300() -> access$300
    boolean access$402(javax.media.opengl.awt.GLCanvas,boolean) -> access$402
    boolean access$502(javax.media.opengl.awt.GLCanvas,boolean) -> access$502
    javax.media.opengl.GLAnimatorControl access$602(javax.media.opengl.awt.GLCanvas,javax.media.opengl.GLAnimatorControl) -> access$602
    jogamp.opengl.GLDrawableHelper access$700(javax.media.opengl.awt.GLCanvas) -> access$700
    javax.media.opengl.GLAnimatorControl access$600(javax.media.opengl.awt.GLCanvas) -> access$600
    javax.media.opengl.GLAutoDrawable access$802(javax.media.opengl.awt.GLCanvas,javax.media.opengl.GLAutoDrawable) -> access$802
    jogamp.opengl.awt.AWTTilePainter access$900(javax.media.opengl.awt.GLCanvas) -> access$900
    javax.media.opengl.GLAutoDrawable access$800(javax.media.opengl.awt.GLCanvas) -> access$800
    jogamp.opengl.awt.AWTTilePainter access$902(javax.media.opengl.awt.GLCanvas,jogamp.opengl.awt.AWTTilePainter) -> access$902
    com.jogamp.common.util.locks.RecursiveLock access$1100(javax.media.opengl.awt.GLCanvas) -> access$1100
    jogamp.opengl.GLContextImpl access$1200(javax.media.opengl.awt.GLCanvas) -> access$1200
    jogamp.opengl.GLDrawableImpl access$1300(javax.media.opengl.awt.GLCanvas) -> access$1300
    jogamp.opengl.GLContextImpl access$1202(javax.media.opengl.awt.GLCanvas,jogamp.opengl.GLContextImpl) -> access$1202
    jogamp.opengl.GLDrawableImpl access$1302(javax.media.opengl.awt.GLCanvas,jogamp.opengl.GLDrawableImpl) -> access$1302
    com.jogamp.nativewindow.awt.JAWTWindow access$1400(javax.media.opengl.awt.GLCanvas) -> access$1400
    com.jogamp.nativewindow.awt.JAWTWindow access$1402(javax.media.opengl.awt.GLCanvas,com.jogamp.nativewindow.awt.JAWTWindow) -> access$1402
    int[] access$1500(javax.media.opengl.awt.GLCanvas) -> access$1500
    int[] access$1600(javax.media.opengl.awt.GLCanvas) -> access$1600
    com.jogamp.nativewindow.awt.AWTGraphicsConfiguration access$1700(javax.media.opengl.awt.GLCanvas) -> access$1700
    com.jogamp.nativewindow.awt.AWTGraphicsConfiguration access$1702(javax.media.opengl.awt.GLCanvas,com.jogamp.nativewindow.awt.AWTGraphicsConfiguration) -> access$1702
    boolean access$500(javax.media.opengl.awt.GLCanvas) -> access$500
    java.lang.Runnable access$1800(javax.media.opengl.awt.GLCanvas) -> access$1800
    java.lang.Runnable access$1900(javax.media.opengl.awt.GLCanvas) -> access$1900
    java.lang.reflect.Method access$2000() -> access$2000
    java.lang.reflect.Method access$2002(java.lang.reflect.Method) -> access$2002
    void <clinit>() -> <clinit>
javax.media.opengl.awt.GLCanvas$1 -> javax.media.opengl.awt.GLCanvas$1:
    javax.media.opengl.awt.GLCanvas this$0 -> this$0
    void <init>(javax.media.opengl.awt.GLCanvas) -> <init>
    void hierarchyChanged(java.awt.event.HierarchyEvent) -> hierarchyChanged
javax.media.opengl.awt.GLCanvas$10 -> javax.media.opengl.awt.GLCanvas$10:
    javax.media.opengl.awt.GLCanvas this$0 -> this$0
    void <init>(javax.media.opengl.awt.GLCanvas) -> <init>
    void run() -> run
javax.media.opengl.awt.GLCanvas$11 -> javax.media.opengl.awt.GLCanvas$11:
    javax.media.opengl.awt.GLCanvas this$0 -> this$0
    void <init>(javax.media.opengl.awt.GLCanvas) -> <init>
    void run() -> run
javax.media.opengl.awt.GLCanvas$12 -> javax.media.opengl.awt.GLCanvas$12:
    javax.media.opengl.awt.GLCanvas this$0 -> this$0
    void <init>(javax.media.opengl.awt.GLCanvas) -> <init>
    void run() -> run
javax.media.opengl.awt.GLCanvas$13 -> javax.media.opengl.awt.GLCanvas$13:
    javax.media.opengl.awt.GLCanvas this$0 -> this$0
    void <init>(javax.media.opengl.awt.GLCanvas) -> <init>
    java.lang.Object run() -> run
javax.media.opengl.awt.GLCanvas$14 -> javax.media.opengl.awt.GLCanvas$14:
    javax.media.opengl.GLCapabilitiesImmutable val$capsChosen -> val$capsChosen
    javax.media.opengl.GLCapabilitiesImmutable val$capsRequested -> val$capsRequested
    javax.media.opengl.GLCapabilitiesChooser val$chooser -> val$chooser
    javax.media.nativewindow.AbstractGraphicsScreen val$aScreen -> val$aScreen
    java.util.ArrayList val$bucket -> val$bucket
    javax.media.opengl.awt.GLCanvas this$0 -> this$0
    void <init>(javax.media.opengl.awt.GLCanvas,javax.media.opengl.GLCapabilitiesImmutable,javax.media.opengl.GLCapabilitiesImmutable,javax.media.opengl.GLCapabilitiesChooser,javax.media.nativewindow.AbstractGraphicsScreen,java.util.ArrayList) -> <init>
    void run() -> run
javax.media.opengl.awt.GLCanvas$15 -> javax.media.opengl.awt.GLCanvas$15:
    void <init>() -> <init>
    void init(javax.media.opengl.GLAutoDrawable) -> init
    void reshape(javax.media.opengl.GLAutoDrawable,int,int,int,int) -> reshape
    void display(javax.media.opengl.GLAutoDrawable) -> display
    void dispose(javax.media.opengl.GLAutoDrawable) -> dispose
javax.media.opengl.awt.GLCanvas$16 -> javax.media.opengl.awt.GLCanvas$16:
    java.awt.Frame val$frame -> val$frame
    void <init>(java.awt.Frame) -> <init>
    void run() -> run
javax.media.opengl.awt.GLCanvas$17 -> javax.media.opengl.awt.GLCanvas$17:
    java.awt.Frame val$frame -> val$frame
    void <init>(java.awt.Frame) -> <init>
    void run() -> run
javax.media.opengl.awt.GLCanvas$2 -> javax.media.opengl.awt.GLCanvas$2:
    javax.media.opengl.awt.GLCanvas this$0 -> this$0
    void <init>(javax.media.opengl.awt.GLCanvas) -> <init>
    void run() -> run
javax.media.opengl.awt.GLCanvas$3 -> javax.media.opengl.awt.GLCanvas$3:
    javax.media.opengl.awt.GLCanvas this$0 -> this$0
    void <init>(javax.media.opengl.awt.GLCanvas) -> <init>
    void run() -> run
javax.media.opengl.awt.GLCanvas$4 -> javax.media.opengl.awt.GLCanvas$4:
    javax.media.opengl.awt.GLCanvas this$0 -> this$0
    void <init>(javax.media.opengl.awt.GLCanvas) -> <init>
    void run() -> run
javax.media.opengl.awt.GLCanvas$5 -> javax.media.opengl.awt.GLCanvas$5:
    javax.media.opengl.awt.GLCanvas this$0 -> this$0
    void <init>(javax.media.opengl.awt.GLCanvas) -> <init>
    void run() -> run
javax.media.opengl.awt.GLCanvas$6 -> javax.media.opengl.awt.GLCanvas$6:
    javax.media.opengl.awt.GLCanvas this$0 -> this$0
    void <init>(javax.media.opengl.awt.GLCanvas) -> <init>
    void run() -> run
javax.media.opengl.awt.GLCanvas$7 -> javax.media.opengl.awt.GLCanvas$7:
    javax.media.opengl.awt.GLCanvas this$0 -> this$0
    void <init>(javax.media.opengl.awt.GLCanvas) -> <init>
    void run() -> run
javax.media.opengl.awt.GLCanvas$8 -> javax.media.opengl.awt.GLCanvas$8:
    javax.media.opengl.awt.GLCanvas this$0 -> this$0
    void <init>(javax.media.opengl.awt.GLCanvas) -> <init>
    void run() -> run
javax.media.opengl.awt.GLCanvas$9 -> javax.media.opengl.awt.GLCanvas$9:
    javax.media.opengl.awt.GLCanvas this$0 -> this$0
    void <init>(javax.media.opengl.awt.GLCanvas) -> <init>
    void run() -> run
javax.media.opengl.awt.GLCanvas$DisposeGLEventListenerAction -> javax.media.opengl.awt.GLCanvas$DisposeGLEventListenerAction:
    javax.media.opengl.GLEventListener listener -> listener
    boolean remove -> remove
    javax.media.opengl.awt.GLCanvas this$0 -> this$0
    void <init>(javax.media.opengl.awt.GLCanvas,javax.media.opengl.GLEventListener,boolean) -> <init>
    void run() -> run
    void <init>(javax.media.opengl.awt.GLCanvas,javax.media.opengl.GLEventListener,boolean,javax.media.opengl.awt.GLCanvas$1) -> <init>
javax.media.opengl.fixedfunc.GLMatrixFunc -> javax.media.opengl.fixedfunc.GLMatrixFunc:
    int GL_MATRIX_MODE -> GL_MATRIX_MODE
    int GL_MODELVIEW -> GL_MODELVIEW
    int GL_PROJECTION -> GL_PROJECTION
    int GL_MODELVIEW_MATRIX -> GL_MODELVIEW_MATRIX
    int GL_PROJECTION_MATRIX -> GL_PROJECTION_MATRIX
    int GL_TEXTURE_MATRIX -> GL_TEXTURE_MATRIX
    void glGetFloatv(int,java.nio.FloatBuffer) -> glGetFloatv
    void glGetFloatv(int,float[],int) -> glGetFloatv
    void glGetIntegerv(int,java.nio.IntBuffer) -> glGetIntegerv
    void glGetIntegerv(int,int[],int) -> glGetIntegerv
    void glMatrixMode(int) -> glMatrixMode
    void glPushMatrix() -> glPushMatrix
    void glPopMatrix() -> glPopMatrix
    void glLoadIdentity() -> glLoadIdentity
    void glLoadMatrixf(java.nio.FloatBuffer) -> glLoadMatrixf
    void glLoadMatrixf(float[],int) -> glLoadMatrixf
    void glMultMatrixf(java.nio.FloatBuffer) -> glMultMatrixf
    void glMultMatrixf(float[],int) -> glMultMatrixf
    void glTranslatef(float,float,float) -> glTranslatef
    void glRotatef(float,float,float,float) -> glRotatef
    void glScalef(float,float,float) -> glScalef
    void glOrthof(float,float,float,float,float,float) -> glOrthof
    void glFrustumf(float,float,float,float,float,float) -> glFrustumf
javax.media.opengl.fixedfunc.GLPointerFunc -> javax.media.opengl.fixedfunc.GLPointerFunc:
    int GL_VERTEX_ARRAY -> GL_VERTEX_ARRAY
    int GL_NORMAL_ARRAY -> GL_NORMAL_ARRAY
    int GL_COLOR_ARRAY -> GL_COLOR_ARRAY
    int GL_TEXTURE_COORD_ARRAY -> GL_TEXTURE_COORD_ARRAY
    void glEnableClientState(int) -> glEnableClientState
    void glDisableClientState(int) -> glDisableClientState
    void glVertexPointer(javax.media.opengl.GLArrayData) -> glVertexPointer
    void glVertexPointer(int,int,int,java.nio.Buffer) -> glVertexPointer
    void glVertexPointer(int,int,int,long) -> glVertexPointer
    void glColorPointer(javax.media.opengl.GLArrayData) -> glColorPointer
    void glColorPointer(int,int,int,java.nio.Buffer) -> glColorPointer
    void glColorPointer(int,int,int,long) -> glColorPointer
    void glColor4f(float,float,float,float) -> glColor4f
    void glNormalPointer(javax.media.opengl.GLArrayData) -> glNormalPointer
    void glNormalPointer(int,int,java.nio.Buffer) -> glNormalPointer
    void glNormalPointer(int,int,long) -> glNormalPointer
    void glTexCoordPointer(javax.media.opengl.GLArrayData) -> glTexCoordPointer
    void glTexCoordPointer(int,int,int,java.nio.Buffer) -> glTexCoordPointer
    void glTexCoordPointer(int,int,int,long) -> glTexCoordPointer
javax.media.opengl.fixedfunc.GLPointerFuncUtil -> javax.media.opengl.fixedfunc.GLPointerFuncUtil:
    java.lang.String mgl_Vertex -> mgl_Vertex
    java.lang.String mgl_Normal -> mgl_Normal
    java.lang.String mgl_Color -> mgl_Color
    java.lang.String mgl_MultiTexCoord -> mgl_MultiTexCoord
    java.lang.String mgl_InterleaveArray -> mgl_InterleaveArray
    void <init>() -> <init>
    java.lang.String getPredefinedArrayIndexName(int) -> getPredefinedArrayIndexName
    java.lang.String getPredefinedArrayIndexName(int,int) -> getPredefinedArrayIndexName
javax.media.opengl.glu.GLU -> javax.media.opengl.glu.GLU:
    java.lang.Class gl2Class -> gl2Class
    java.lang.Class gl2es1Class -> gl2es1Class
    boolean availableGLUtessellatorImpl -> availableGLUtessellatorImpl
    boolean checkedGLUtessellatorImpl -> checkedGLUtessellatorImpl
    int GLU_FALSE -> GLU_FALSE
    int GLU_TRUE -> GLU_TRUE
    int GLU_VERSION -> GLU_VERSION
    int GLU_EXTENSIONS -> GLU_EXTENSIONS
    java.lang.String versionString -> versionString
    java.lang.String extensionString -> extensionString
    int GLU_INVALID_ENUM -> GLU_INVALID_ENUM
    int GLU_INVALID_VALUE -> GLU_INVALID_VALUE
    int GLU_OUT_OF_MEMORY -> GLU_OUT_OF_MEMORY
    int GLU_INVALID_OPERATION -> GLU_INVALID_OPERATION
    int GLU_POINT -> GLU_POINT
    int GLU_LINE -> GLU_LINE
    int GLU_FILL -> GLU_FILL
    int GLU_SILHOUETTE -> GLU_SILHOUETTE
    int GLU_SMOOTH -> GLU_SMOOTH
    int GLU_FLAT -> GLU_FLAT
    int GLU_NONE -> GLU_NONE
    int GLU_OUTSIDE -> GLU_OUTSIDE
    int GLU_INSIDE -> GLU_INSIDE
    int GLU_ERROR -> GLU_ERROR
    int GLU_TESS_BEGIN -> GLU_TESS_BEGIN
    int GLU_BEGIN -> GLU_BEGIN
    int GLU_TESS_VERTEX -> GLU_TESS_VERTEX
    int GLU_VERTEX -> GLU_VERTEX
    int GLU_TESS_END -> GLU_TESS_END
    int GLU_END -> GLU_END
    int GLU_TESS_ERROR -> GLU_TESS_ERROR
    int GLU_TESS_EDGE_FLAG -> GLU_TESS_EDGE_FLAG
    int GLU_EDGE_FLAG -> GLU_EDGE_FLAG
    int GLU_TESS_COMBINE -> GLU_TESS_COMBINE
    int GLU_TESS_BEGIN_DATA -> GLU_TESS_BEGIN_DATA
    int GLU_TESS_VERTEX_DATA -> GLU_TESS_VERTEX_DATA
    int GLU_TESS_END_DATA -> GLU_TESS_END_DATA
    int GLU_TESS_ERROR_DATA -> GLU_TESS_ERROR_DATA
    int GLU_TESS_EDGE_FLAG_DATA -> GLU_TESS_EDGE_FLAG_DATA
    int GLU_TESS_COMBINE_DATA -> GLU_TESS_COMBINE_DATA
    int GLU_CW -> GLU_CW
    int GLU_CCW -> GLU_CCW
    int GLU_INTERIOR -> GLU_INTERIOR
    int GLU_EXTERIOR -> GLU_EXTERIOR
    int GLU_UNKNOWN -> GLU_UNKNOWN
    int GLU_TESS_WINDING_RULE -> GLU_TESS_WINDING_RULE
    int GLU_TESS_BOUNDARY_ONLY -> GLU_TESS_BOUNDARY_ONLY
    int GLU_TESS_TOLERANCE -> GLU_TESS_TOLERANCE
    int GLU_TESS_AVOID_DEGENERATE_TRIANGLES -> GLU_TESS_AVOID_DEGENERATE_TRIANGLES
    int GLU_TESS_ERROR1 -> GLU_TESS_ERROR1
    int GLU_TESS_ERROR2 -> GLU_TESS_ERROR2
    int GLU_TESS_ERROR3 -> GLU_TESS_ERROR3
    int GLU_TESS_ERROR4 -> GLU_TESS_ERROR4
    int GLU_TESS_ERROR5 -> GLU_TESS_ERROR5
    int GLU_TESS_ERROR6 -> GLU_TESS_ERROR6
    int GLU_TESS_ERROR7 -> GLU_TESS_ERROR7
    int GLU_TESS_ERROR8 -> GLU_TESS_ERROR8
    int GLU_TESS_MISSING_BEGIN_POLYGON -> GLU_TESS_MISSING_BEGIN_POLYGON
    int GLU_TESS_MISSING_BEGIN_CONTOUR -> GLU_TESS_MISSING_BEGIN_CONTOUR
    int GLU_TESS_MISSING_END_POLYGON -> GLU_TESS_MISSING_END_POLYGON
    int GLU_TESS_MISSING_END_CONTOUR -> GLU_TESS_MISSING_END_CONTOUR
    int GLU_TESS_COORD_TOO_LARGE -> GLU_TESS_COORD_TOO_LARGE
    int GLU_TESS_NEED_COMBINE_CALLBACK -> GLU_TESS_NEED_COMBINE_CALLBACK
    int GLU_TESS_WINDING_ODD -> GLU_TESS_WINDING_ODD
    int GLU_TESS_WINDING_NONZERO -> GLU_TESS_WINDING_NONZERO
    int GLU_TESS_WINDING_POSITIVE -> GLU_TESS_WINDING_POSITIVE
    int GLU_TESS_WINDING_NEGATIVE -> GLU_TESS_WINDING_NEGATIVE
    int GLU_TESS_WINDING_ABS_GEQ_TWO -> GLU_TESS_WINDING_ABS_GEQ_TWO
    double GLU_TESS_MAX_COORD -> GLU_TESS_MAX_COORD
    boolean availableGLUquadricImpl -> availableGLUquadricImpl
    boolean checkedGLUquadricImpl -> checkedGLUquadricImpl
    java.lang.Object syncObject -> syncObject
    jogamp.opengl.ProjectFloat project -> project
    boolean isFunctionAvailable(java.lang.String) -> isFunctionAvailable
    javax.media.opengl.glu.GLU createGLU() -> createGLU
    javax.media.opengl.glu.GLU createGLU(javax.media.opengl.GL) -> createGLU
    void <init>() -> <init>
    javax.media.opengl.GL getCurrentGL() -> getCurrentGL
    java.lang.String gluErrorString(int) -> gluErrorString
    boolean gluCheckExtension(java.lang.String,java.lang.String) -> gluCheckExtension
    java.lang.String gluGetString(int) -> gluGetString
    void validateGLUtessellatorImpl() -> validateGLUtessellatorImpl
    javax.media.opengl.glu.GLUtessellator gluNewTess() -> gluNewTess
    void gluDeleteTess(javax.media.opengl.glu.GLUtessellator) -> gluDeleteTess
    void gluTessProperty(javax.media.opengl.glu.GLUtessellator,int,double) -> gluTessProperty
    void gluGetTessProperty(javax.media.opengl.glu.GLUtessellator,int,double[],int) -> gluGetTessProperty
    void gluTessNormal(javax.media.opengl.glu.GLUtessellator,double,double,double) -> gluTessNormal
    void gluTessCallback(javax.media.opengl.glu.GLUtessellator,int,javax.media.opengl.glu.GLUtessellatorCallback) -> gluTessCallback
    void gluTessVertex(javax.media.opengl.glu.GLUtessellator,double[],int,java.lang.Object) -> gluTessVertex
    void gluTessBeginPolygon(javax.media.opengl.glu.GLUtessellator,java.lang.Object) -> gluTessBeginPolygon
    void gluTessBeginContour(javax.media.opengl.glu.GLUtessellator) -> gluTessBeginContour
    void gluTessEndContour(javax.media.opengl.glu.GLUtessellator) -> gluTessEndContour
    void gluTessEndPolygon(javax.media.opengl.glu.GLUtessellator) -> gluTessEndPolygon
    void gluBeginPolygon(javax.media.opengl.glu.GLUtessellator) -> gluBeginPolygon
    void gluNextContour(javax.media.opengl.glu.GLUtessellator,int) -> gluNextContour
    void gluEndPolygon(javax.media.opengl.glu.GLUtessellator) -> gluEndPolygon
    void validateGLUquadricImpl() -> validateGLUquadricImpl
    void gluCylinder(javax.media.opengl.glu.GLUquadric,double,double,double,int,int) -> gluCylinder
    void gluDeleteQuadric(javax.media.opengl.glu.GLUquadric) -> gluDeleteQuadric
    void gluDisk(javax.media.opengl.glu.GLUquadric,double,double,int,int) -> gluDisk
    javax.media.opengl.glu.GLUquadric gluNewQuadric() -> gluNewQuadric
    javax.media.opengl.glu.GLUquadric gluNewQuadric(boolean,com.jogamp.opengl.util.glsl.ShaderState) -> gluNewQuadric
    javax.media.opengl.glu.GLUquadric gluNewQuadric(boolean,int) -> gluNewQuadric
    javax.media.opengl.glu.GLUquadric gluNewQuadric(boolean,com.jogamp.opengl.util.glsl.ShaderState,int) -> gluNewQuadric
    void gluPartialDisk(javax.media.opengl.glu.GLUquadric,double,double,int,int,double,double) -> gluPartialDisk
    void gluQuadricDrawStyle(javax.media.opengl.glu.GLUquadric,int) -> gluQuadricDrawStyle
    void gluQuadricNormals(javax.media.opengl.glu.GLUquadric,int) -> gluQuadricNormals
    void gluQuadricOrientation(javax.media.opengl.glu.GLUquadric,int) -> gluQuadricOrientation
    void gluQuadricTexture(javax.media.opengl.glu.GLUquadric,boolean) -> gluQuadricTexture
    void gluSphere(javax.media.opengl.glu.GLUquadric,double,int,int) -> gluSphere
    void gluOrtho2D(float,float,float,float) -> gluOrtho2D
    void gluPerspective(float,float,float,float) -> gluPerspective
    void gluLookAt(float,float,float,float,float,float,float,float,float) -> gluLookAt
    boolean gluProject(float,float,float,float[],int,float[],int,int[],int,float[],int) -> gluProject
    boolean gluProject(float,float,float,java.nio.FloatBuffer,java.nio.FloatBuffer,java.nio.IntBuffer,java.nio.FloatBuffer) -> gluProject
    boolean gluUnProject(float,float,float,float[],int,float[],int,int[],int,float[],int) -> gluUnProject
    boolean gluUnProject(float,float,float,java.nio.FloatBuffer,java.nio.FloatBuffer,java.nio.IntBuffer,java.nio.FloatBuffer) -> gluUnProject
    boolean gluUnProject4(float,float,float,float,float[],int,float[],int,int[],int,float,float,float[],int) -> gluUnProject4
    boolean gluUnProject4(float,float,float,float,java.nio.FloatBuffer,java.nio.FloatBuffer,java.nio.IntBuffer,float,float,java.nio.FloatBuffer) -> gluUnProject4
    void gluPickMatrix(float,float,float,float,int[],int) -> gluPickMatrix
    void gluPickMatrix(float,float,float,float,java.nio.IntBuffer) -> gluPickMatrix
    void gluOrtho2D(double,double,double,double) -> gluOrtho2D
    void gluPerspective(double,double,double,double) -> gluPerspective
    void gluLookAt(double,double,double,double,double,double,double,double,double) -> gluLookAt
    boolean gluProject(double,double,double,double[],int,double[],int,int[],int,double[],int) -> gluProject
    boolean gluUnProject(double,double,double,double[],int,double[],int,int[],int,double[],int) -> gluUnProject
    boolean gluUnProject4(double,double,double,double,double[],int,double[],int,int[],int,double,double,double[],int) -> gluUnProject4
    void gluPickMatrix(double,double,double,double,int[],int) -> gluPickMatrix
    void gluPickMatrix(double,double,double,double,java.nio.IntBuffer) -> gluPickMatrix
    int gluScaleImage(int,int,int,int,java.nio.Buffer,int,int,int,java.nio.Buffer) -> gluScaleImage
    int gluBuild1DMipmapLevels(int,int,int,int,int,int,int,int,java.nio.Buffer) -> gluBuild1DMipmapLevels
    int gluBuild1DMipmaps(int,int,int,int,int,java.nio.Buffer) -> gluBuild1DMipmaps
    int gluBuild2DMipmapLevels(int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> gluBuild2DMipmapLevels
    int gluBuild2DMipmaps(int,int,int,int,int,int,java.nio.Buffer) -> gluBuild2DMipmaps
    int gluBuild3DMipmapLevels(int,int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> gluBuild3DMipmapLevels
    int gluBuild3DMipmaps(int,int,int,int,int,int,int,java.nio.Buffer) -> gluBuild3DMipmaps
    void <clinit>() -> <clinit>
javax.media.opengl.glu.GLUnurbs -> javax.media.opengl.glu.GLUnurbs:
javax.media.opengl.glu.GLUquadric -> javax.media.opengl.glu.GLUquadric:
    void enableImmModeSink(boolean) -> enableImmModeSink
    boolean isImmModeSinkEnabled() -> isImmModeSinkEnabled
    void setImmMode(boolean) -> setImmMode
    boolean getImmMode() -> getImmMode
    com.jogamp.opengl.util.ImmModeSink replaceImmModeSink() -> replaceImmModeSink
    void resetImmModeSink(javax.media.opengl.GL) -> resetImmModeSink
javax.media.opengl.glu.GLUtessellator -> javax.media.opengl.glu.GLUtessellator:
javax.media.opengl.glu.GLUtessellatorCallback -> javax.media.opengl.glu.GLUtessellatorCallback:
    void begin(int) -> begin
    void beginData(int,java.lang.Object) -> beginData
    void edgeFlag(boolean) -> edgeFlag
    void edgeFlagData(boolean,java.lang.Object) -> edgeFlagData
    void vertex(java.lang.Object) -> vertex
    void vertexData(java.lang.Object,java.lang.Object) -> vertexData
    void end() -> end
    void endData(java.lang.Object) -> endData
    void combine(double[],java.lang.Object[],float[],java.lang.Object[]) -> combine
    void combineData(double[],java.lang.Object[],float[],java.lang.Object[],java.lang.Object) -> combineData
    void error(int) -> error
    void errorData(int,java.lang.Object) -> errorData
javax.media.opengl.glu.GLUtessellatorCallbackAdapter -> javax.media.opengl.glu.GLUtessellatorCallbackAdapter:
    void <init>() -> <init>
    void begin(int) -> begin
    void edgeFlag(boolean) -> edgeFlag
    void vertex(java.lang.Object) -> vertex
    void end() -> end
    void error(int) -> error
    void combine(double[],java.lang.Object[],float[],java.lang.Object[]) -> combine
    void beginData(int,java.lang.Object) -> beginData
    void edgeFlagData(boolean,java.lang.Object) -> edgeFlagData
    void vertexData(java.lang.Object,java.lang.Object) -> vertexData
    void endData(java.lang.Object) -> endData
    void errorData(int,java.lang.Object) -> errorData
    void combineData(double[],java.lang.Object[],float[],java.lang.Object[],java.lang.Object) -> combineData
javax.media.opengl.glu.gl2.GLUgl2 -> javax.media.opengl.glu.gl2.GLUgl2:
    boolean useJavaMipmapCode -> useJavaMipmapCode
    jogamp.opengl.gl2.ProjectDouble project -> project
    javax.media.opengl.glu.gl2.GLUgl2ProcAddressTable gluProcAddressTable -> gluProcAddressTable
    int gluBuild1DMipmapLevelsC(int,int,int,int,int,int,int,int,java.nio.Buffer) -> gluBuild1DMipmapLevelsC
    int dispatch_gluBuild1DMipmapLevelsC1(int,int,int,int,int,int,int,int,java.lang.Object,int,boolean,long) -> dispatch_gluBuild1DMipmapLevelsC1
    int gluBuild1DMipmapsC(int,int,int,int,int,java.nio.Buffer) -> gluBuild1DMipmapsC
    int dispatch_gluBuild1DMipmapsC1(int,int,int,int,int,java.lang.Object,int,boolean,long) -> dispatch_gluBuild1DMipmapsC1
    int gluBuild2DMipmapLevelsC(int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> gluBuild2DMipmapLevelsC
    int dispatch_gluBuild2DMipmapLevelsC1(int,int,int,int,int,int,int,int,int,java.lang.Object,int,boolean,long) -> dispatch_gluBuild2DMipmapLevelsC1
    int gluBuild2DMipmapsC(int,int,int,int,int,int,java.nio.Buffer) -> gluBuild2DMipmapsC
    int dispatch_gluBuild2DMipmapsC1(int,int,int,int,int,int,java.lang.Object,int,boolean,long) -> dispatch_gluBuild2DMipmapsC1
    int gluBuild3DMipmapLevelsC(int,int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> gluBuild3DMipmapLevelsC
    int dispatch_gluBuild3DMipmapLevelsC1(int,int,int,int,int,int,int,int,int,int,java.lang.Object,int,boolean,long) -> dispatch_gluBuild3DMipmapLevelsC1
    int gluBuild3DMipmapsC(int,int,int,int,int,int,int,java.nio.Buffer) -> gluBuild3DMipmapsC
    int dispatch_gluBuild3DMipmapsC1(int,int,int,int,int,int,int,java.lang.Object,int,boolean,long) -> dispatch_gluBuild3DMipmapsC1
    int gluScaleImageC(int,int,int,int,java.nio.Buffer,int,int,int,java.nio.Buffer) -> gluScaleImageC
    int dispatch_gluScaleImageC1(int,int,int,int,java.lang.Object,int,boolean,int,int,int,java.lang.Object,int,boolean,long) -> dispatch_gluScaleImageC1
    void <init>() -> <init>
    javax.media.opengl.GL2 getCurrentGL2() -> getCurrentGL2
    boolean isFunctionAvailable(java.lang.String) -> isFunctionAvailable
    void gluOrtho2D(float,float,float,float) -> gluOrtho2D
    void gluOrtho2D(double,double,double,double) -> gluOrtho2D
    void gluPerspective(float,float,float,float) -> gluPerspective
    void gluPerspective(double,double,double,double) -> gluPerspective
    void gluLookAt(float,float,float,float,float,float,float,float,float) -> gluLookAt
    void gluLookAt(double,double,double,double,double,double,double,double,double) -> gluLookAt
    boolean gluProject(double,double,double,double[],int,double[],int,int[],int,double[],int) -> gluProject
    boolean gluProject(double,double,double,java.nio.DoubleBuffer,java.nio.DoubleBuffer,java.nio.IntBuffer,java.nio.DoubleBuffer) -> gluProject
    boolean gluUnProject(double,double,double,double[],int,double[],int,int[],int,double[],int) -> gluUnProject
    boolean gluUnProject(double,double,double,java.nio.DoubleBuffer,java.nio.DoubleBuffer,java.nio.IntBuffer,java.nio.DoubleBuffer) -> gluUnProject
    boolean gluUnProject4(double,double,double,double,double[],int,double[],int,int[],int,double,double,double[],int) -> gluUnProject4
    boolean gluUnProject4(double,double,double,double,java.nio.DoubleBuffer,java.nio.DoubleBuffer,java.nio.IntBuffer,double,double,java.nio.DoubleBuffer) -> gluUnProject4
    void gluPickMatrix(double,double,double,double,int[],int) -> gluPickMatrix
    void gluPickMatrix(double,double,double,double,java.nio.IntBuffer) -> gluPickMatrix
    java.nio.ByteBuffer copyToByteBuffer(java.nio.Buffer) -> copyToByteBuffer
    int gluScaleImageJava(int,int,int,int,java.nio.Buffer,int,int,int,java.nio.Buffer) -> gluScaleImageJava
    int gluBuild1DMipmapLevelsJava(int,int,int,int,int,int,int,int,java.nio.Buffer) -> gluBuild1DMipmapLevelsJava
    int gluBuild1DMipmapsJava(int,int,int,int,int,java.nio.Buffer) -> gluBuild1DMipmapsJava
    int gluBuild2DMipmapLevelsJava(int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> gluBuild2DMipmapLevelsJava
    int gluBuild2DMipmapsJava(int,int,int,int,int,int,java.nio.Buffer) -> gluBuild2DMipmapsJava
    int gluBuild3DMipmapLevelsJava(int,int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> gluBuild3DMipmapLevelsJava
    int gluBuild3DMipmapsJava(int,int,int,int,int,int,int,java.nio.Buffer) -> gluBuild3DMipmapsJava
    int gluBuild1DMipmapLevels(int,int,int,int,int,int,int,int,java.nio.Buffer) -> gluBuild1DMipmapLevels
    int gluBuild1DMipmaps(int,int,int,int,int,java.nio.Buffer) -> gluBuild1DMipmaps
    int gluBuild2DMipmapLevels(int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> gluBuild2DMipmapLevels
    int gluBuild2DMipmaps(int,int,int,int,int,int,java.nio.Buffer) -> gluBuild2DMipmaps
    int gluBuild3DMipmapLevels(int,int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> gluBuild3DMipmapLevels
    int gluBuild3DMipmaps(int,int,int,int,int,int,int,java.nio.Buffer) -> gluBuild3DMipmaps
    int gluScaleImage(int,int,int,int,java.nio.Buffer,int,int,int,java.nio.Buffer) -> gluScaleImage
    void gluNurbsProperty(javax.media.opengl.glu.GLUnurbs,int,float) -> gluNurbsProperty
    javax.media.opengl.glu.GLUnurbs gluNewNurbsRenderer() -> gluNewNurbsRenderer
    void gluBeginCurve(javax.media.opengl.glu.GLUnurbs) -> gluBeginCurve
    void gluBeginSurface(javax.media.opengl.glu.GLUnurbs) -> gluBeginSurface
    void gluEndSurface(javax.media.opengl.glu.GLUnurbs) -> gluEndSurface
    void gluNurbsSurface(javax.media.opengl.glu.GLUnurbs,int,float[],int,float[],int,int,float[],int,int,int) -> gluNurbsSurface
    void gluNurbsCurve(javax.media.opengl.glu.GLUnurbs,int,float[],int,float[],int,int) -> gluNurbsCurve
    void gluEndCurve(javax.media.opengl.glu.GLUnurbs) -> gluEndCurve
    javax.media.opengl.glu.gl2.GLUgl2ProcAddressTable getGLUProcAddressTable() -> getGLUProcAddressTable
    boolean access$002(boolean) -> access$002
    void <clinit>() -> <clinit>
javax.media.opengl.glu.gl2.GLUgl2$1 -> javax.media.opengl.glu.gl2.GLUgl2$1:
    void <init>() -> <init>
    java.lang.Object run() -> run
javax.media.opengl.glu.gl2.GLUgl2ProcAddressTable -> javax.media.opengl.glu.gl2.GLUgl2ProcAddressTable:
    long _addressof_gluBuild1DMipmapLevelsC -> _addressof_gluBuild1DMipmapLevelsC
    long _addressof_gluBuild1DMipmapsC -> _addressof_gluBuild1DMipmapsC
    long _addressof_gluBuild2DMipmapLevelsC -> _addressof_gluBuild2DMipmapLevelsC
    long _addressof_gluBuild2DMipmapsC -> _addressof_gluBuild2DMipmapsC
    long _addressof_gluBuild3DMipmapLevelsC -> _addressof_gluBuild3DMipmapLevelsC
    long _addressof_gluBuild3DMipmapsC -> _addressof_gluBuild3DMipmapsC
    long _addressof_gluScaleImageC -> _addressof_gluScaleImageC
    void <init>() -> <init>
    void <init>(com.jogamp.gluegen.runtime.FunctionAddressResolver) -> <init>
    boolean isFunctionAvailableImpl(java.lang.String) -> isFunctionAvailableImpl
    long getAddressFor(java.lang.String) -> getAddressFor
javax.media.opengl.glu.gl2.GLUgl2ProcAddressTable$1 -> javax.media.opengl.glu.gl2.GLUgl2ProcAddressTable$1:
    int val$funcNamePermNum -> val$funcNamePermNum
    java.lang.String val$addressFieldNameBase -> val$addressFieldNameBase
    javax.media.opengl.glu.gl2.GLUgl2ProcAddressTable this$0 -> this$0
    void <init>(javax.media.opengl.glu.gl2.GLUgl2ProcAddressTable,int,java.lang.String) -> <init>
    java.lang.reflect.Field run() -> run
    java.lang.Object run() -> run
javax.media.opengl.glu.gl2.GLUgl2ProcAddressTable$2 -> javax.media.opengl.glu.gl2.GLUgl2ProcAddressTable$2:
    int val$funcNamePermNum -> val$funcNamePermNum
    java.lang.String val$addressFieldNameBase -> val$addressFieldNameBase
    javax.media.opengl.glu.gl2.GLUgl2ProcAddressTable this$0 -> this$0
    void <init>(javax.media.opengl.glu.gl2.GLUgl2ProcAddressTable,int,java.lang.String) -> <init>
    java.lang.reflect.Field run() -> run
    java.lang.Object run() -> run
jogamp.common.Debug -> jogamp.common.Debug:
    boolean verbose -> verbose
    boolean debugAll -> debugAll
    void <init>() -> <init>
    void initSingleton() -> initSingleton
    boolean verbose() -> verbose
    boolean debugAll() -> debugAll
    boolean debug(java.lang.String) -> debug
    void access$000(java.lang.String) -> access$000
    void <clinit>() -> <clinit>
jogamp.common.Debug$1 -> jogamp.common.Debug$1:
    void <init>() -> <init>
    java.lang.Object run() -> run
jogamp.common.jvm.JVMUtil -> jogamp.common.jvm.JVMUtil:
    boolean DEBUG -> DEBUG
    void initSingleton() -> initSingleton
    void <init>() -> <init>
    boolean initialize(java.nio.ByteBuffer) -> initialize
    void <clinit>() -> <clinit>
jogamp.common.os.AndroidUtils -> jogamp.common.os.AndroidUtils:
    java.lang.reflect.Method androidGetPackageInfoVersionNameMethod -> androidGetPackageInfoVersionNameMethod
    java.lang.reflect.Method androidGetPackageInfoVersionCodeMethod -> androidGetPackageInfoVersionCodeMethod
    java.lang.reflect.Method androidGetTempRootMethod -> androidGetTempRootMethod
    void <init>() -> <init>
    int getPackageInfoVersionCode(java.lang.String) -> getPackageInfoVersionCode
    java.lang.String getPackageInfoVersionName(java.lang.String) -> getPackageInfoVersionName
    java.io.File getTempRoot() -> getTempRoot
    void <clinit>() -> <clinit>
jogamp.common.os.BionicDynamicLinkerImpl -> jogamp.common.os.BionicDynamicLinkerImpl:
    long RTLD_DEFAULT -> RTLD_DEFAULT
    int RTLD_LAZY -> RTLD_LAZY
    int RTLD_LOCAL -> RTLD_LOCAL
    int RTLD_GLOBAL -> RTLD_GLOBAL
    void <init>() -> <init>
    long openLibraryLocal(java.lang.String,boolean) -> openLibraryLocal
    long openLibraryGlobal(java.lang.String,boolean) -> openLibraryGlobal
    long lookupSymbolGlobal(java.lang.String) -> lookupSymbolGlobal
jogamp.common.os.DynamicLinkerImpl -> jogamp.common.os.DynamicLinkerImpl:
    com.jogamp.common.util.LongObjectHashMap libHandle2Name -> libHandle2Name
    void <init>() -> <init>
    jogamp.common.os.DynamicLinkerImpl$LibRef getLibRef(long) -> getLibRef
    jogamp.common.os.DynamicLinkerImpl$LibRef incrLibRefCount(long,java.lang.String) -> incrLibRefCount
    jogamp.common.os.DynamicLinkerImpl$LibRef decrLibRefCount(long) -> decrLibRefCount
jogamp.common.os.DynamicLinkerImpl$LibRef -> jogamp.common.os.DynamicLinkerImpl$LibRef:
    java.lang.String name -> name
    int refCount -> refCount
    void <init>(java.lang.String) -> <init>
    int incrRefCount() -> incrRefCount
    int decrRefCount() -> decrRefCount
    int getRefCount() -> getRefCount
    java.lang.String getName() -> getName
    java.lang.String toString() -> toString
jogamp.common.os.MacOSXDynamicLinkerImpl -> jogamp.common.os.MacOSXDynamicLinkerImpl:
    long RTLD_DEFAULT -> RTLD_DEFAULT
    int RTLD_LAZY -> RTLD_LAZY
    int RTLD_LOCAL -> RTLD_LOCAL
    int RTLD_GLOBAL -> RTLD_GLOBAL
    void <init>() -> <init>
    long openLibraryLocal(java.lang.String,boolean) -> openLibraryLocal
    long openLibraryGlobal(java.lang.String,boolean) -> openLibraryGlobal
    long lookupSymbolGlobal(java.lang.String) -> lookupSymbolGlobal
jogamp.common.os.MachineDescriptionRuntime -> jogamp.common.os.MachineDescriptionRuntime:
    boolean smdHardQueried -> smdHardQueried
    com.jogamp.common.os.MachineDescription$StaticConfig smdHard -> smdHard
    boolean smdSoftQueried -> smdSoftQueried
    com.jogamp.common.os.MachineDescription$StaticConfig smdSoft -> smdSoft
    boolean smdHardEnabled -> smdHardEnabled
    boolean rmdQueried -> rmdQueried
    com.jogamp.common.os.MachineDescription rmd -> rmd
    void <init>() -> <init>
    void notifyPropsInitialized() -> notifyPropsInitialized
    com.jogamp.common.os.MachineDescription$StaticConfig getStatic() -> getStatic
    boolean isCPUArch32Bit(com.jogamp.common.os.Platform$CPUType) -> isCPUArch32Bit
    com.jogamp.common.os.MachineDescription$StaticConfig get(com.jogamp.common.os.Platform$OSType,com.jogamp.common.os.Platform$CPUType,boolean) -> get
    com.jogamp.common.os.MachineDescription getRuntime() -> getRuntime
    com.jogamp.common.os.MachineDescription getRuntimeImpl() -> getRuntimeImpl
    int getPointerSizeInBytesImpl() -> getPointerSizeInBytesImpl
    long getPageSizeInBytesImpl() -> getPageSizeInBytesImpl
    int getAlignmentInt8Impl() -> getAlignmentInt8Impl
    int getAlignmentInt16Impl() -> getAlignmentInt16Impl
    int getAlignmentInt32Impl() -> getAlignmentInt32Impl
    int getAlignmentInt64Impl() -> getAlignmentInt64Impl
    int getAlignmentIntImpl() -> getAlignmentIntImpl
    int getAlignmentLongImpl() -> getAlignmentLongImpl
    int getAlignmentPointerImpl() -> getAlignmentPointerImpl
    int getAlignmentFloatImpl() -> getAlignmentFloatImpl
    int getAlignmentDoubleImpl() -> getAlignmentDoubleImpl
    int getAlignmentLongDoubleImpl() -> getAlignmentLongDoubleImpl
    int getSizeOfIntImpl() -> getSizeOfIntImpl
    int getSizeOfLongImpl() -> getSizeOfLongImpl
    int getSizeOfPointerImpl() -> getSizeOfPointerImpl
    int getSizeOfFloatImpl() -> getSizeOfFloatImpl
    int getSizeOfDoubleImpl() -> getSizeOfDoubleImpl
    int getSizeOfLongDoubleImpl() -> getSizeOfLongDoubleImpl
    void <clinit>() -> <clinit>
jogamp.common.os.MachineDescriptionRuntime$1 -> jogamp.common.os.MachineDescriptionRuntime$1:
    int[] $SwitchMap$com$jogamp$common$os$Platform$CPUType -> $SwitchMap$com$jogamp$common$os$Platform$CPUType
    void <clinit>() -> <clinit>
jogamp.common.os.PlatformPropsImpl -> jogamp.common.os.PlatformPropsImpl:
    boolean DEBUG -> DEBUG
    com.jogamp.common.util.VersionNumber Version16 -> Version16
    com.jogamp.common.util.VersionNumber Version17 -> Version17
    java.lang.String OS -> OS
    java.lang.String OS_lower -> OS_lower
    java.lang.String OS_VERSION -> OS_VERSION
    com.jogamp.common.util.VersionNumber OS_VERSION_NUMBER -> OS_VERSION_NUMBER
    java.lang.String ARCH -> ARCH
    java.lang.String ARCH_lower -> ARCH_lower
    java.lang.String JAVA_VENDOR -> JAVA_VENDOR
    java.lang.String JAVA_VENDOR_URL -> JAVA_VENDOR_URL
    java.lang.String JAVA_VERSION -> JAVA_VERSION
    com.jogamp.common.util.VersionNumber JAVA_VERSION_NUMBER -> JAVA_VERSION_NUMBER
    int JAVA_VERSION_UPDATE -> JAVA_VERSION_UPDATE
    java.lang.String JAVA_VM_NAME -> JAVA_VM_NAME
    java.lang.String JAVA_RUNTIME_NAME -> JAVA_RUNTIME_NAME
    boolean JAVA_SE -> JAVA_SE
    boolean JAVA_6 -> JAVA_6
    java.lang.String NEWLINE -> NEWLINE
    boolean LITTLE_ENDIAN -> LITTLE_ENDIAN
    com.jogamp.common.os.Platform$CPUType sCpuType -> sCpuType
    com.jogamp.common.os.Platform$CPUType CPU_ARCH -> CPU_ARCH
    com.jogamp.common.os.Platform$ABIType ABI_TYPE -> ABI_TYPE
    com.jogamp.common.os.Platform$OSType OS_TYPE -> OS_TYPE
    java.lang.String os_and_arch -> os_and_arch
    void <init>() -> <init>
    java.lang.String getJavaRuntimeNameImpl() -> getJavaRuntimeNameImpl
    boolean initIsJavaSE() -> initIsJavaSE
    boolean queryIsLittleEndianImpl() -> queryIsLittleEndianImpl
    com.jogamp.common.os.Platform$CPUType getCPUTypeImpl(java.lang.String) -> getCPUTypeImpl
    boolean contains(java.lang.String,java.lang.String[]) -> contains
    jogamp.common.os.elf.ElfHeader queryABITypeImpl(com.jogamp.common.os.Platform$OSType,com.jogamp.common.os.Platform$CPUType[],com.jogamp.common.os.Platform$ABIType[]) -> queryABITypeImpl
    jogamp.common.os.elf.ElfHeader queryABITypeImpl(java.io.File,com.jogamp.common.os.Platform$CPUType[],com.jogamp.common.os.Platform$ABIType[]) -> queryABITypeImpl
    boolean checkFileReadAccess(java.io.File) -> checkFileReadAccess
    java.io.File findSysLib(java.lang.String) -> findSysLib
    com.jogamp.common.os.Platform$OSType getOSTypeImpl(java.lang.String,boolean) -> getOSTypeImpl
    void initSingleton() -> initSingleton
    java.lang.String getOSAndArch(com.jogamp.common.os.Platform$OSType,com.jogamp.common.os.Platform$CPUType,com.jogamp.common.os.Platform$ABIType) -> getOSAndArch
    boolean access$000(java.io.File) -> access$000
    java.io.File access$100(java.lang.String) -> access$100
    jogamp.common.os.elf.ElfHeader access$200(java.io.File,com.jogamp.common.os.Platform$CPUType[],com.jogamp.common.os.Platform$ABIType[]) -> access$200
    void <clinit>() -> <clinit>
jogamp.common.os.PlatformPropsImpl$1 -> jogamp.common.os.PlatformPropsImpl$1:
    void <init>() -> <init>
    java.lang.String run() -> run
    java.lang.Object run() -> run
jogamp.common.os.PlatformPropsImpl$2 -> jogamp.common.os.PlatformPropsImpl$2:
    com.jogamp.common.os.Platform$OSType val$osType -> val$osType
    com.jogamp.common.os.Platform$CPUType[] val$cpuType -> val$cpuType
    com.jogamp.common.os.Platform$ABIType[] val$abiType -> val$abiType
    void <init>(com.jogamp.common.os.Platform$OSType,com.jogamp.common.os.Platform$CPUType[],com.jogamp.common.os.Platform$ABIType[]) -> <init>
    jogamp.common.os.elf.ElfHeader run() -> run
    java.lang.Object run() -> run
jogamp.common.os.PlatformPropsImpl$3 -> jogamp.common.os.PlatformPropsImpl$3:
    int[] $SwitchMap$com$jogamp$common$os$Platform$CPUType -> $SwitchMap$com$jogamp$common$os$Platform$CPUType
    int[] $SwitchMap$com$jogamp$common$os$Platform$OSType -> $SwitchMap$com$jogamp$common$os$Platform$OSType
    void <clinit>() -> <clinit>
jogamp.common.os.PlatformPropsImpl$OSXVersion -> jogamp.common.os.PlatformPropsImpl$OSXVersion:
    com.jogamp.common.util.VersionNumber Tiger -> Tiger
    com.jogamp.common.util.VersionNumber Lion -> Lion
    com.jogamp.common.util.VersionNumber Mavericks -> Mavericks
    void <init>() -> <init>
    void <clinit>() -> <clinit>
jogamp.common.os.PosixDynamicLinkerImpl -> jogamp.common.os.PosixDynamicLinkerImpl:
    long RTLD_DEFAULT -> RTLD_DEFAULT
    int RTLD_LAZY -> RTLD_LAZY
    int RTLD_LOCAL -> RTLD_LOCAL
    int RTLD_GLOBAL -> RTLD_GLOBAL
    void <init>() -> <init>
    long openLibraryLocal(java.lang.String,boolean) -> openLibraryLocal
    long openLibraryGlobal(java.lang.String,boolean) -> openLibraryGlobal
    long lookupSymbolGlobal(java.lang.String) -> lookupSymbolGlobal
jogamp.common.os.UnixDynamicLinkerImpl -> jogamp.common.os.UnixDynamicLinkerImpl:
    void <init>() -> <init>
    int dlclose(long) -> dlclose
    java.lang.String dlerror() -> dlerror
    long dlopen(java.lang.String,int) -> dlopen
    long dlsym(long,java.lang.String) -> dlsym
    long openLibraryImpl(java.lang.String,int,boolean) -> openLibraryImpl
    long lookupSymbolGlobalImpl(long,java.lang.String) -> lookupSymbolGlobalImpl
    long lookupSymbol(long,java.lang.String) -> lookupSymbol
    void closeLibrary(long) -> closeLibrary
    java.lang.String getLastError() -> getLastError
jogamp.common.os.WindowsDynamicLinkerImpl -> jogamp.common.os.WindowsDynamicLinkerImpl:
    void <init>() -> <init>
    int FreeLibrary(long) -> FreeLibrary
    int GetLastError() -> GetLastError
    long GetProcAddressA(long,java.lang.String) -> GetProcAddressA
    long LoadLibraryW(java.lang.String) -> LoadLibraryW
    long openLibraryLocal(java.lang.String,boolean) -> openLibraryLocal
    long openLibraryGlobal(java.lang.String,boolean) -> openLibraryGlobal
    long lookupSymbolGlobal(java.lang.String) -> lookupSymbolGlobal
    long lookupSymbol(long,java.lang.String) -> lookupSymbol
    void closeLibrary(long) -> closeLibrary
    java.lang.String getLastError() -> getLastError
jogamp.common.os.elf.Ehdr -> jogamp.common.os.elf.Ehdr:
    com.jogamp.common.nio.StructAccessor accessor -> accessor
    int mdIdx -> mdIdx
    int[] Ehdr_size -> Ehdr_size
    int[] e_ident_offset -> e_ident_offset
    int[] e_type_offset -> e_type_offset
    int[] e_machine_offset -> e_machine_offset
    int[] e_version_offset -> e_version_offset
    int[] e_entry_offset -> e_entry_offset
    int[] e_phoff_offset -> e_phoff_offset
    int[] e_shoff_offset -> e_shoff_offset
    int[] e_flags_offset -> e_flags_offset
    int[] e_ehsize_offset -> e_ehsize_offset
    int[] e_phentsize_offset -> e_phentsize_offset
    int[] e_phnum_offset -> e_phnum_offset
    int[] e_shentsize_offset -> e_shentsize_offset
    int[] e_shnum_offset -> e_shnum_offset
    int[] e_shstrndx_offset -> e_shstrndx_offset
    int size() -> size
    jogamp.common.os.elf.Ehdr create() -> create
    jogamp.common.os.elf.Ehdr create(java.nio.ByteBuffer) -> create
    void <init>(java.nio.ByteBuffer) -> <init>
    java.nio.ByteBuffer getBuffer() -> getBuffer
    jogamp.common.os.elf.Ehdr setE_ident(byte[]) -> setE_ident
    byte[] getE_ident() -> getE_ident
    jogamp.common.os.elf.Ehdr setE_type(short) -> setE_type
    short getE_type() -> getE_type
    jogamp.common.os.elf.Ehdr setE_machine(short) -> setE_machine
    short getE_machine() -> getE_machine
    jogamp.common.os.elf.Ehdr setE_version(int) -> setE_version
    int getE_version() -> getE_version
    jogamp.common.os.elf.Ehdr setE_entry(long) -> setE_entry
    long getE_entry() -> getE_entry
    jogamp.common.os.elf.Ehdr setE_phoff(long) -> setE_phoff
    long getE_phoff() -> getE_phoff
    jogamp.common.os.elf.Ehdr setE_shoff(long) -> setE_shoff
    long getE_shoff() -> getE_shoff
    jogamp.common.os.elf.Ehdr setE_flags(int) -> setE_flags
    int getE_flags() -> getE_flags
    jogamp.common.os.elf.Ehdr setE_ehsize(short) -> setE_ehsize
    short getE_ehsize() -> getE_ehsize
    jogamp.common.os.elf.Ehdr setE_phentsize(short) -> setE_phentsize
    short getE_phentsize() -> getE_phentsize
    jogamp.common.os.elf.Ehdr setE_phnum(short) -> setE_phnum
    short getE_phnum() -> getE_phnum
    jogamp.common.os.elf.Ehdr setE_shentsize(short) -> setE_shentsize
    short getE_shentsize() -> getE_shentsize
    jogamp.common.os.elf.Ehdr setE_shnum(short) -> setE_shnum
    short getE_shnum() -> getE_shnum
    jogamp.common.os.elf.Ehdr setE_shstrndx(short) -> setE_shstrndx
    short getE_shstrndx() -> getE_shstrndx
    void <clinit>() -> <clinit>
jogamp.common.os.elf.ElfHeader -> jogamp.common.os.elf.ElfHeader:
    int EI_NIDENT -> EI_NIDENT
    byte ELFMAG0 -> ELFMAG0
    byte ELFMAG1 -> ELFMAG1
    byte ELFMAG2 -> ELFMAG2
    byte ELFMAG3 -> ELFMAG3
    int EI_CLASS -> EI_CLASS
    byte ELFCLASSNONE -> ELFCLASSNONE
    byte ELFCLASS32 -> ELFCLASS32
    byte ELFCLASS64 -> ELFCLASS64
    int EI_DATA -> EI_DATA
    byte ELFDATANONE -> ELFDATANONE
    byte ELFDATA2LSB -> ELFDATA2LSB
    byte ELFDATA2MSB -> ELFDATA2MSB
    int EI_VERSION -> EI_VERSION
    byte EV_NONE -> EV_NONE
    byte EV_CURRENT -> EV_CURRENT
    int EI_OSABI -> EI_OSABI
    byte ELFOSABI_SYSV -> ELFOSABI_SYSV
    byte ELFOSABI_NONE -> ELFOSABI_NONE
    byte ELFOSABI_HPUX -> ELFOSABI_HPUX
    byte ELFOSABI_NETBSD -> ELFOSABI_NETBSD
    byte ELFOSABI_LINUX -> ELFOSABI_LINUX
    byte ELFOSABI_SOLARIS -> ELFOSABI_SOLARIS
    byte ELFOSABI_IRIX -> ELFOSABI_IRIX
    byte ELFOSABI_FREEBSD -> ELFOSABI_FREEBSD
    byte ELFOSABI_ARM -> ELFOSABI_ARM
    byte ELFOSABI_STANDALONE -> ELFOSABI_STANDALONE
    byte ELFOSABI_TRU64 -> ELFOSABI_TRU64
    byte ELFOSABI_MODESTO -> ELFOSABI_MODESTO
    byte ELFOSABI_OPENBSD -> ELFOSABI_OPENBSD
    byte ELFOSABI_OPENVMS -> ELFOSABI_OPENVMS
    byte ELFOSABI_NSK -> ELFOSABI_NSK
    byte ELFOSABI_AROS -> ELFOSABI_AROS
    byte ELFOSABI_FENIXOS -> ELFOSABI_FENIXOS
    int EI_ABIVERSION -> EI_ABIVERSION
    int EI_PAD -> EI_PAD
    int EF_ARM_ABIMASK -> EF_ARM_ABIMASK
    int EF_ARM_ABISHIFT -> EF_ARM_ABISHIFT
    int EF_ARM_ABI5 -> EF_ARM_ABI5
    int EF_ARM_BE8 -> EF_ARM_BE8
    int EF_ARM_GCCMASK -> EF_ARM_GCCMASK
    int EF_ARM_ABI_FLOAT_HARD -> EF_ARM_ABI_FLOAT_HARD
    int EF_ARM_ABI_FLOAT_SOFT -> EF_ARM_ABI_FLOAT_SOFT
    short ET_NONE -> ET_NONE
    short ET_REL -> ET_REL
    short ET_EXEC -> ET_EXEC
    short ET_DYN -> ET_DYN
    short ET_CORE -> ET_CORE
    short EM_NONE -> EM_NONE
    short EM_M32 -> EM_M32
    short EM_SPARC -> EM_SPARC
    short EM_386 -> EM_386
    short EM_68K -> EM_68K
    short EM_88K -> EM_88K
    short EM_486 -> EM_486
    short EM_860 -> EM_860
    short EM_MIPS -> EM_MIPS
    short EM_S370 -> EM_S370
    short EM_MIPS_RS3_LE -> EM_MIPS_RS3_LE
    short EM_PARISC -> EM_PARISC
    short EM_res016 -> EM_res016
    short EM_VPP550 -> EM_VPP550
    short EM_SPARC32PLUS -> EM_SPARC32PLUS
    short EM_960 -> EM_960
    short EM_PPC -> EM_PPC
    short EM_PPC64 -> EM_PPC64
    short EM_S390 -> EM_S390
    short EM_SPU -> EM_SPU
    short EM_V800 -> EM_V800
    short EM_FR20 -> EM_FR20
    short EM_RH32 -> EM_RH32
    short EM_MCORE -> EM_MCORE
    short EM_RCE -> EM_RCE
    short EM_ARM -> EM_ARM
    short EM_OLD_ALPHA -> EM_OLD_ALPHA
    short EM_SH -> EM_SH
    short EM_SPARCV9 -> EM_SPARCV9
    short EM_TRICORE -> EM_TRICORE
    short EM_ARC -> EM_ARC
    short EM_H8_300 -> EM_H8_300
    short EM_H8_300H -> EM_H8_300H
    short EM_H8S -> EM_H8S
    short EM_H8_500 -> EM_H8_500
    short EM_IA_64 -> EM_IA_64
    short EM_MIPS_X -> EM_MIPS_X
    short EM_COLDFIRE -> EM_COLDFIRE
    short EM_68HC12 -> EM_68HC12
    short EM_MMA -> EM_MMA
    short EM_PCP -> EM_PCP
    short EM_NCPU -> EM_NCPU
    short EM_NDR1 -> EM_NDR1
    short EM_STARCORE -> EM_STARCORE
    short EM_ME16 -> EM_ME16
    short EM_ST100 -> EM_ST100
    short EM_TINYJ -> EM_TINYJ
    short EM_X86_64 -> EM_X86_64
    short EM_PDSP -> EM_PDSP
    short EM_PDP10 -> EM_PDP10
    short EM_PDP11 -> EM_PDP11
    short EM_FX66 -> EM_FX66
    short EM_ST9PLUS -> EM_ST9PLUS
    short EM_ST7 -> EM_ST7
    short EM_68HC16 -> EM_68HC16
    short EM_68HC11 -> EM_68HC11
    short EM_68HC08 -> EM_68HC08
    short EM_68HC05 -> EM_68HC05
    short EM_SVX -> EM_SVX
    short EM_ST19 -> EM_ST19
    short EM_VAX -> EM_VAX
    short EM_CRIS -> EM_CRIS
    short EM_JAVELIN -> EM_JAVELIN
    short EM_FIREPATH -> EM_FIREPATH
    short EM_ZSP -> EM_ZSP
    short EM_MMIX -> EM_MMIX
    short EM_HUANY -> EM_HUANY
    short EM_PRISM -> EM_PRISM
    short EM_AVR -> EM_AVR
    short EM_FR30 -> EM_FR30
    short EM_D10V -> EM_D10V
    short EM_D30V -> EM_D30V
    short EM_V850 -> EM_V850
    short EM_M32R -> EM_M32R
    short EM_MN10300 -> EM_MN10300
    short EM_MN10200 -> EM_MN10200
    short EM_PJ -> EM_PJ
    short EM_OPENRISC -> EM_OPENRISC
    short EM_ARC_A5 -> EM_ARC_A5
    short EM_XTENSA -> EM_XTENSA
    short EM_VIDEOCORE -> EM_VIDEOCORE
    short EM_TMM_GPP -> EM_TMM_GPP
    short EM_NS32K -> EM_NS32K
    short EM_TPC -> EM_TPC
    short EM_SNP1K -> EM_SNP1K
    short EM_ST200 -> EM_ST200
    short EM_IP2K -> EM_IP2K
    short EM_MAX -> EM_MAX
    short EM_CR -> EM_CR
    short EM_F2MC16 -> EM_F2MC16
    short EM_MSP430 -> EM_MSP430
    short EM_BLACKFIN -> EM_BLACKFIN
    short EM_SE_C33 -> EM_SE_C33
    short EM_SEP -> EM_SEP
    short EM_ARCA -> EM_ARCA
    short EM_UNICORE -> EM_UNICORE
    short EM_EXCESS -> EM_EXCESS
    short EM_DXP -> EM_DXP
    short EM_ALTERA_NIOS2 -> EM_ALTERA_NIOS2
    short EM_CRX -> EM_CRX
    short EM_XGATE -> EM_XGATE
    short EM_C166 -> EM_C166
    short EM_M16C -> EM_M16C
    short EM_DSPIC30F -> EM_DSPIC30F
    short EM_CE -> EM_CE
    short EM_M32C -> EM_M32C
    short EM_TSK3000 -> EM_TSK3000
    short EM_RS08 -> EM_RS08
    short EM_res133 -> EM_res133
    short EM_ECOG2 -> EM_ECOG2
    short EM_SCORE -> EM_SCORE
    short EM_SCORE7 -> EM_SCORE7
    short EM_DSP24 -> EM_DSP24
    short EM_VIDEOCORE3 -> EM_VIDEOCORE3
    short EM_LATTICEMICO32 -> EM_LATTICEMICO32
    short EM_SE_C17 -> EM_SE_C17
    short EM_TI_C6000 -> EM_TI_C6000
    short EM_TI_C2000 -> EM_TI_C2000
    short EM_TI_C5500 -> EM_TI_C5500
    short EM_MMDSP_PLUS -> EM_MMDSP_PLUS
    short EM_CYPRESS_M8C -> EM_CYPRESS_M8C
    short EM_R32C -> EM_R32C
    short EM_TRIMEDIA -> EM_TRIMEDIA
    short EM_QDSP6 -> EM_QDSP6
    short EM_8051 -> EM_8051
    short EM_STXP7X -> EM_STXP7X
    short EM_NDS32 -> EM_NDS32
    short EM_ECOG1 -> EM_ECOG1
    short EM_ECOG1X -> EM_ECOG1X
    short EM_MAXQ30 -> EM_MAXQ30
    short EM_XIMO16 -> EM_XIMO16
    short EM_MANIK -> EM_MANIK
    short EM_CRAYNV2 -> EM_CRAYNV2
    short EM_RX -> EM_RX
    short EM_METAG -> EM_METAG
    short EM_MCST_ELBRUS -> EM_MCST_ELBRUS
    short EM_ECOG16 -> EM_ECOG16
    short EM_CR16 -> EM_CR16
    short EM_ETPU -> EM_ETPU
    short EM_SLE9X -> EM_SLE9X
    short EM_L1OM -> EM_L1OM
    short EM_INTEL181 -> EM_INTEL181
    short EM_INTEL182 -> EM_INTEL182
    short EM_res183 -> EM_res183
    short EM_res184 -> EM_res184
    short EM_AVR32 -> EM_AVR32
    short EM_STM8 -> EM_STM8
    short EM_TILE64 -> EM_TILE64
    short EM_TILEPRO -> EM_TILEPRO
    short EM_MICROBLAZE -> EM_MICROBLAZE
    short EM_CUDA -> EM_CUDA
    jogamp.common.os.elf.Ehdr d -> d
    jogamp.common.os.elf.SectionHeader[] sht -> sht
    java.lang.String string -> string
    boolean isIdentityValid(byte[]) -> isIdentityValid
    jogamp.common.os.elf.ElfHeader read(java.io.RandomAccessFile) -> read
    void <init>(java.nio.ByteBuffer,java.io.RandomAccessFile) -> <init>
    short getSize() -> getSize
    int getArchClassBits() -> getArchClassBits
    byte getDataEncodingMode() -> getDataEncodingMode
    byte getVersion() -> getVersion
    byte getOSABI() -> getOSABI
    byte getOSABIVersion() -> getOSABIVersion
    short getType() -> getType
    short getMachine() -> getMachine
    boolean isArm() -> isArm
    boolean isX86_32() -> isX86_32
    boolean isX86_64() -> isX86_64
    boolean isIA64() -> isIA64
    boolean isMips() -> isMips
    int getFlags() -> getFlags
    byte getArmABI() -> getArmABI
    int getArmLegacyGCCFlags() -> getArmLegacyGCCFlags
    byte getArmFloatMode() -> getArmFloatMode
    jogamp.common.os.elf.SectionHeader getSectionHeader(int) -> getSectionHeader
    jogamp.common.os.elf.SectionHeader getSectionHeader(java.lang.String) -> getSectionHeader
    java.lang.String toString() -> toString
    java.lang.String toStringImpl() -> toStringImpl
    jogamp.common.os.elf.SectionHeader[] readSectionHeaderTable(java.io.RandomAccessFile) -> readSectionHeaderTable
    void <clinit>() -> <clinit>
jogamp.common.os.elf.IOUtils -> jogamp.common.os.elf.IOUtils:
    long MAX_INT_VALUE -> MAX_INT_VALUE
    void <init>() -> <init>
    java.lang.String toHexString(int) -> toHexString
    java.lang.String toHexString(long) -> toHexString
    int shortToInt(short) -> shortToInt
    int long2Int(long) -> long2Int
    void readBytes(java.io.RandomAccessFile,byte[],int,int) -> readBytes
    void seek(java.io.RandomAccessFile,long) -> seek
    int readUInt32(byte[],int) -> readUInt32
    java.lang.String getString(byte[],int,int,int[]) -> getString
    int getStringCount(byte[],int,int) -> getStringCount
    java.lang.String[] getStrings(byte[],int,int) -> getStrings
jogamp.common.os.elf.Section -> jogamp.common.os.elf.Section:
    jogamp.common.os.elf.SectionHeader sh -> sh
    byte[] data -> data
    int offset -> offset
    int length -> length
    void <init>(jogamp.common.os.elf.SectionHeader,byte[],int,int) -> <init>
    java.lang.String toString() -> toString
    java.lang.String toSubString() -> toSubString
jogamp.common.os.elf.SectionArmAttributes -> jogamp.common.os.elf.SectionArmAttributes:
    byte FORMAT_VERSION_A -> FORMAT_VERSION_A
    byte ABI_VFP_ARGS_IS_BASE_VARIANT -> ABI_VFP_ARGS_IS_BASE_VARIANT
    byte ABI_VFP_ARGS_IS_VFP_VARIANT -> ABI_VFP_ARGS_IS_VFP_VARIANT
    byte ABI_VFP_ARGS_IS_CUSTOM_VARIANT -> ABI_VFP_ARGS_IS_CUSTOM_VARIANT
    byte ABI_VFP_ARGS_IS_BOTH_BASE_AND_VFP_VARIANT -> ABI_VFP_ARGS_IS_BOTH_BASE_AND_VFP_VARIANT
    java.util.List vendorAttributesList -> vendorAttributesList
    boolean abiVFPArgsAcceptsVFPVariant(byte) -> abiVFPArgsAcceptsVFPVariant
    void <init>(jogamp.common.os.elf.SectionHeader,byte[],int,int) -> <init>
    java.lang.String toString() -> toString
    jogamp.common.os.elf.SectionArmAttributes$Attribute get(jogamp.common.os.elf.SectionArmAttributes$Tag) -> get
    java.util.List get(java.lang.String) -> get
    java.util.List get(java.util.List,java.lang.String) -> get
    java.util.List parse(byte[],int,int) -> parse
    void parseSub(byte[],int,int,int[],java.util.List) -> parseSub
jogamp.common.os.elf.SectionArmAttributes$1 -> jogamp.common.os.elf.SectionArmAttributes$1:
    int[] $SwitchMap$jogamp$common$os$elf$SectionArmAttributes$Tag -> $SwitchMap$jogamp$common$os$elf$SectionArmAttributes$Tag
    int[] $SwitchMap$jogamp$common$os$elf$SectionArmAttributes$Type -> $SwitchMap$jogamp$common$os$elf$SectionArmAttributes$Type
    void <clinit>() -> <clinit>
jogamp.common.os.elf.SectionArmAttributes$Attribute -> jogamp.common.os.elf.SectionArmAttributes$Attribute:
    jogamp.common.os.elf.SectionArmAttributes$Tag tag -> tag
    java.lang.Object value -> value
    void <init>(jogamp.common.os.elf.SectionArmAttributes$Tag,java.lang.Object) -> <init>
    boolean isNTBS() -> isNTBS
    java.lang.String getNTBS() -> getNTBS
    boolean isULEB128() -> isULEB128
    byte getULEB128() -> getULEB128
    java.lang.String toString() -> toString
jogamp.common.os.elf.SectionArmAttributes$Tag -> jogamp.common.os.elf.SectionArmAttributes$Tag:
    jogamp.common.os.elf.SectionArmAttributes$Tag None -> None
    jogamp.common.os.elf.SectionArmAttributes$Tag File -> File
    jogamp.common.os.elf.SectionArmAttributes$Tag Section -> Section
    jogamp.common.os.elf.SectionArmAttributes$Tag Symbol -> Symbol
    jogamp.common.os.elf.SectionArmAttributes$Tag CPU_raw_name -> CPU_raw_name
    jogamp.common.os.elf.SectionArmAttributes$Tag CPU_name -> CPU_name
    jogamp.common.os.elf.SectionArmAttributes$Tag CPU_arch -> CPU_arch
    jogamp.common.os.elf.SectionArmAttributes$Tag CPU_arch_profile -> CPU_arch_profile
    jogamp.common.os.elf.SectionArmAttributes$Tag ARM_ISA_use -> ARM_ISA_use
    jogamp.common.os.elf.SectionArmAttributes$Tag THUMB_ISA_use -> THUMB_ISA_use
    jogamp.common.os.elf.SectionArmAttributes$Tag FP_arch -> FP_arch
    jogamp.common.os.elf.SectionArmAttributes$Tag WMMX_arch -> WMMX_arch
    jogamp.common.os.elf.SectionArmAttributes$Tag Advanced_SIMD_arch -> Advanced_SIMD_arch
    jogamp.common.os.elf.SectionArmAttributes$Tag PCS_config -> PCS_config
    jogamp.common.os.elf.SectionArmAttributes$Tag ABI_PCS_R9_use -> ABI_PCS_R9_use
    jogamp.common.os.elf.SectionArmAttributes$Tag ABI_PCS_RW_data -> ABI_PCS_RW_data
    jogamp.common.os.elf.SectionArmAttributes$Tag ABI_PCS_RO_data -> ABI_PCS_RO_data
    jogamp.common.os.elf.SectionArmAttributes$Tag ABI_PCS_GOT_use -> ABI_PCS_GOT_use
    jogamp.common.os.elf.SectionArmAttributes$Tag ABI_PCS_wchar_t -> ABI_PCS_wchar_t
    jogamp.common.os.elf.SectionArmAttributes$Tag ABI_FP_rounding -> ABI_FP_rounding
    jogamp.common.os.elf.SectionArmAttributes$Tag ABI_FP_denormal -> ABI_FP_denormal
    jogamp.common.os.elf.SectionArmAttributes$Tag ABI_FP_exceptions -> ABI_FP_exceptions
    jogamp.common.os.elf.SectionArmAttributes$Tag ABI_FP_user_exceptions -> ABI_FP_user_exceptions
    jogamp.common.os.elf.SectionArmAttributes$Tag ABI_FP_number_model -> ABI_FP_number_model
    jogamp.common.os.elf.SectionArmAttributes$Tag ABI_align_needed -> ABI_align_needed
    jogamp.common.os.elf.SectionArmAttributes$Tag ABI_align_preserved -> ABI_align_preserved
    jogamp.common.os.elf.SectionArmAttributes$Tag ABI_enum_size -> ABI_enum_size
    jogamp.common.os.elf.SectionArmAttributes$Tag ABI_HardFP_use -> ABI_HardFP_use
    jogamp.common.os.elf.SectionArmAttributes$Tag ABI_VFP_args -> ABI_VFP_args
    jogamp.common.os.elf.SectionArmAttributes$Tag ABI_WMMX_args -> ABI_WMMX_args
    jogamp.common.os.elf.SectionArmAttributes$Tag ABI_optimization_goals -> ABI_optimization_goals
    jogamp.common.os.elf.SectionArmAttributes$Tag ABI_FP_optimization_goals -> ABI_FP_optimization_goals
    jogamp.common.os.elf.SectionArmAttributes$Tag compatibility -> compatibility
    jogamp.common.os.elf.SectionArmAttributes$Tag CPU_unaligned_access -> CPU_unaligned_access
    jogamp.common.os.elf.SectionArmAttributes$Tag FP_HP_extension -> FP_HP_extension
    jogamp.common.os.elf.SectionArmAttributes$Tag ABI_FP_16bit_format -> ABI_FP_16bit_format
    jogamp.common.os.elf.SectionArmAttributes$Tag MPextension_use -> MPextension_use
    jogamp.common.os.elf.SectionArmAttributes$Tag DIV_use -> DIV_use
    jogamp.common.os.elf.SectionArmAttributes$Tag nodefaults -> nodefaults
    jogamp.common.os.elf.SectionArmAttributes$Tag also_compatible_with -> also_compatible_with
    jogamp.common.os.elf.SectionArmAttributes$Tag T2EE_use -> T2EE_use
    jogamp.common.os.elf.SectionArmAttributes$Tag conformance -> conformance
    jogamp.common.os.elf.SectionArmAttributes$Tag Virtualization_use -> Virtualization_use
    jogamp.common.os.elf.SectionArmAttributes$Tag undefined69 -> undefined69
    jogamp.common.os.elf.SectionArmAttributes$Tag MPextension_use_legacy -> MPextension_use_legacy
    int id -> id
    jogamp.common.os.elf.SectionArmAttributes$Type type -> type
    jogamp.common.os.elf.SectionArmAttributes$Tag[] $VALUES -> $VALUES
    jogamp.common.os.elf.SectionArmAttributes$Tag[] values() -> values
    jogamp.common.os.elf.SectionArmAttributes$Tag valueOf(java.lang.String) -> valueOf
    jogamp.common.os.elf.SectionArmAttributes$Tag get(int) -> get
    void <init>(java.lang.String,int,int,jogamp.common.os.elf.SectionArmAttributes$Type) -> <init>
    void <clinit>() -> <clinit>
jogamp.common.os.elf.SectionArmAttributes$Type -> jogamp.common.os.elf.SectionArmAttributes$Type:
    jogamp.common.os.elf.SectionArmAttributes$Type None -> None
    jogamp.common.os.elf.SectionArmAttributes$Type SubSection -> SubSection
    jogamp.common.os.elf.SectionArmAttributes$Type NTBS -> NTBS
    jogamp.common.os.elf.SectionArmAttributes$Type ULEB128 -> ULEB128
    jogamp.common.os.elf.SectionArmAttributes$Type[] $VALUES -> $VALUES
    jogamp.common.os.elf.SectionArmAttributes$Type[] values() -> values
    jogamp.common.os.elf.SectionArmAttributes$Type valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
jogamp.common.os.elf.SectionArmAttributes$VendorAttributes -> jogamp.common.os.elf.SectionArmAttributes$VendorAttributes:
    java.lang.String vendor -> vendor
    java.util.List attributes -> attributes
    void <init>(java.lang.String,java.util.List) -> <init>
    java.lang.String toString() -> toString
jogamp.common.os.elf.SectionHeader -> jogamp.common.os.elf.SectionHeader:
    int SHT_NULL -> SHT_NULL
    int SHT_PROGBITS -> SHT_PROGBITS
    int SHT_SYMTAB -> SHT_SYMTAB
    int SHT_STRTAB -> SHT_STRTAB
    int SHT_RELA -> SHT_RELA
    int SHT_HASH -> SHT_HASH
    int SHT_DYNAMIC -> SHT_DYNAMIC
    int SHT_NOTE -> SHT_NOTE
    int SHT_NOBITS -> SHT_NOBITS
    int SHT_REL -> SHT_REL
    int SHT_SHLIB -> SHT_SHLIB
    int SHT_DYNSYM -> SHT_DYNSYM
    int SHT_NUM -> SHT_NUM
    int SHT_LOPROC -> SHT_LOPROC
    int SHT_HIPROC -> SHT_HIPROC
    int SHT_LOUSER -> SHT_LOUSER
    int SHT_HIUSER -> SHT_HIUSER
    int SHT_ARM_EXIDX -> SHT_ARM_EXIDX
    int SHT_ARM_PREEMPTMAP -> SHT_ARM_PREEMPTMAP
    int SHT_ARM_ATTRIBUTES -> SHT_ARM_ATTRIBUTES
    int SHT_ARM_DEBUGOVERLAY -> SHT_ARM_DEBUGOVERLAY
    int SHT_ARM_OVERLAYSECTION -> SHT_ARM_OVERLAYSECTION
    short SHN_UNDEF -> SHN_UNDEF
    short SHN_LORESERVE -> SHN_LORESERVE
    short SHN_LOPROC -> SHN_LOPROC
    short SHN_HIPROC -> SHN_HIPROC
    short SHN_ABS -> SHN_ABS
    short SHN_COMMON -> SHN_COMMON
    short SHN_HIRESERVE -> SHN_HIRESERVE
    jogamp.common.os.elf.Shdr d -> d
    int idx -> idx
    java.lang.String name -> name
    void <init>(byte[],int,int,int) -> <init>
    void <init>(java.nio.ByteBuffer,int) -> <init>
    java.lang.String toString() -> toString
    void initName(jogamp.common.os.elf.Section,int) -> initName
    int getIndex() -> getIndex
    int getType() -> getType
    long getFlags() -> getFlags
    long getSize() -> getSize
    java.lang.String getName() -> getName
    jogamp.common.os.elf.Section readSection(java.io.RandomAccessFile) -> readSection
    jogamp.common.os.elf.Section readSection(java.io.RandomAccessFile,byte[],int,int) -> readSection
    jogamp.common.os.elf.Section readSectionImpl(java.io.RandomAccessFile,byte[],int,int) -> readSectionImpl
jogamp.common.os.elf.Shdr -> jogamp.common.os.elf.Shdr:
    com.jogamp.common.nio.StructAccessor accessor -> accessor
    int mdIdx -> mdIdx
    int[] Shdr_size -> Shdr_size
    int[] sh_name_offset -> sh_name_offset
    int[] sh_type_offset -> sh_type_offset
    int[] sh_flags_offset -> sh_flags_offset
    int[] sh_addr_offset -> sh_addr_offset
    int[] sh_offset_offset -> sh_offset_offset
    int[] sh_size_offset -> sh_size_offset
    int[] sh_link_offset -> sh_link_offset
    int[] sh_info_offset -> sh_info_offset
    int[] sh_addralign_offset -> sh_addralign_offset
    int[] sh_entsize_offset -> sh_entsize_offset
    int size() -> size
    jogamp.common.os.elf.Shdr create() -> create
    jogamp.common.os.elf.Shdr create(java.nio.ByteBuffer) -> create
    void <init>(java.nio.ByteBuffer) -> <init>
    java.nio.ByteBuffer getBuffer() -> getBuffer
    jogamp.common.os.elf.Shdr setSh_name(int) -> setSh_name
    int getSh_name() -> getSh_name
    jogamp.common.os.elf.Shdr setSh_type(int) -> setSh_type
    int getSh_type() -> getSh_type
    jogamp.common.os.elf.Shdr setSh_flags(long) -> setSh_flags
    long getSh_flags() -> getSh_flags
    jogamp.common.os.elf.Shdr setSh_addr(long) -> setSh_addr
    long getSh_addr() -> getSh_addr
    jogamp.common.os.elf.Shdr setSh_offset(long) -> setSh_offset
    long getSh_offset() -> getSh_offset
    jogamp.common.os.elf.Shdr setSh_size(long) -> setSh_size
    long getSh_size() -> getSh_size
    jogamp.common.os.elf.Shdr setSh_link(int) -> setSh_link
    int getSh_link() -> getSh_link
    jogamp.common.os.elf.Shdr setSh_info(int) -> setSh_info
    int getSh_info() -> getSh_info
    jogamp.common.os.elf.Shdr setSh_addralign(long) -> setSh_addralign
    long getSh_addralign() -> getSh_addralign
    jogamp.common.os.elf.Shdr setSh_entsize(long) -> setSh_entsize
    long getSh_entsize() -> getSh_entsize
    void <clinit>() -> <clinit>
jogamp.common.util.locks.LockDebugUtil -> jogamp.common.util.locks.LockDebugUtil:
    java.lang.ThreadLocal tlsLockedStacks -> tlsLockedStacks
    java.util.List dummy -> dummy
    void <init>() -> <init>
    java.util.List getRecursiveLockTrace() -> getRecursiveLockTrace
    void dumpRecursiveLockTrace(java.io.PrintStream) -> dumpRecursiveLockTrace
    void <clinit>() -> <clinit>
jogamp.common.util.locks.RecursiveLockImpl01CompleteFair -> jogamp.common.util.locks.RecursiveLockImpl01CompleteFair:
    jogamp.common.util.locks.RecursiveLockImpl01CompleteFair$Sync sync -> sync
    void <init>() -> <init>
    java.lang.Throwable getLockedStack() -> getLockedStack
    java.lang.Thread getOwner() -> getOwner
    boolean isOwner(java.lang.Thread) -> isOwner
    boolean isLocked() -> isLocked
    boolean isLockedByOtherThread() -> isLockedByOtherThread
    int getHoldCount() -> getHoldCount
    void validateLocked() -> validateLocked
    void lock() -> lock
    boolean tryLock(long) -> tryLock
    void unlock() -> unlock
    void unlock(java.lang.Runnable) -> unlock
    int getQueueLength() -> getQueueLength
    java.lang.String toString() -> toString
    java.lang.String syncName() -> syncName
    java.lang.String threadName(java.lang.Thread) -> threadName
jogamp.common.util.locks.RecursiveLockImpl01CompleteFair$1 -> jogamp.common.util.locks.RecursiveLockImpl01CompleteFair$1:
jogamp.common.util.locks.RecursiveLockImpl01CompleteFair$Sync -> jogamp.common.util.locks.RecursiveLockImpl01CompleteFair$Sync:
    int holdCount -> holdCount
    java.util.ArrayList queue -> queue
    java.lang.Throwable lockedStack -> lockedStack
    void <init>() -> <init>
    java.lang.Thread getOwner() -> getOwner
    void setOwner(java.lang.Thread) -> setOwner
    void setLockedStack(java.lang.Throwable) -> setLockedStack
    void <init>(jogamp.common.util.locks.RecursiveLockImpl01CompleteFair$1) -> <init>
    java.lang.Throwable access$100(jogamp.common.util.locks.RecursiveLockImpl01CompleteFair$Sync) -> access$100
    java.lang.Thread access$200(jogamp.common.util.locks.RecursiveLockImpl01CompleteFair$Sync) -> access$200
    int access$300(jogamp.common.util.locks.RecursiveLockImpl01CompleteFair$Sync) -> access$300
    int access$304(jogamp.common.util.locks.RecursiveLockImpl01CompleteFair$Sync) -> access$304
    void access$400(jogamp.common.util.locks.RecursiveLockImpl01CompleteFair$Sync,java.lang.Thread) -> access$400
    void access$500(jogamp.common.util.locks.RecursiveLockImpl01CompleteFair$Sync,java.lang.Throwable) -> access$500
    int access$306(jogamp.common.util.locks.RecursiveLockImpl01CompleteFair$Sync) -> access$306
jogamp.common.util.locks.RecursiveLockImpl01CompleteFair$WaitingThread -> jogamp.common.util.locks.RecursiveLockImpl01CompleteFair$WaitingThread:
    java.lang.Thread thread -> thread
    boolean signaledByUnlock -> signaledByUnlock
    void <init>(java.lang.Thread) -> <init>
jogamp.common.util.locks.RecursiveLockImpl01Unfairish -> jogamp.common.util.locks.RecursiveLockImpl01Unfairish:
    jogamp.common.util.locks.RecursiveLockImpl01Unfairish$Sync sync -> sync
    void <init>(jogamp.common.util.locks.RecursiveLockImpl01Unfairish$Sync) -> <init>
    void <init>() -> <init>
    java.lang.Throwable getLockedStack() -> getLockedStack
    java.lang.Thread getOwner() -> getOwner
    boolean isOwner(java.lang.Thread) -> isOwner
    boolean isLocked() -> isLocked
    boolean isLockedByOtherThread() -> isLockedByOtherThread
    int getHoldCount() -> getHoldCount
    void validateLocked() -> validateLocked
    void lock() -> lock
    boolean tryLock(long) -> tryLock
    void unlock() -> unlock
    void unlock(java.lang.Runnable) -> unlock
    int getQueueLength() -> getQueueLength
    java.lang.String toString() -> toString
    java.lang.String syncName() -> syncName
    java.lang.String threadName(java.lang.Thread) -> threadName
jogamp.common.util.locks.RecursiveLockImpl01Unfairish$SingleThreadSync -> jogamp.common.util.locks.RecursiveLockImpl01Unfairish$SingleThreadSync:
    int holdCount -> holdCount
    int qsz -> qsz
    java.lang.Throwable lockedStack -> lockedStack
    void <init>() -> <init>
    java.lang.Thread getOwner() -> getOwner
    boolean isOwner(java.lang.Thread) -> isOwner
    void setOwner(java.lang.Thread) -> setOwner
    java.lang.Throwable getLockedStack() -> getLockedStack
    void setLockedStack(java.lang.Throwable) -> setLockedStack
    int getHoldCount() -> getHoldCount
    void incrHoldCount(java.lang.Thread) -> incrHoldCount
    void decrHoldCount(java.lang.Thread) -> decrHoldCount
    int getQSz() -> getQSz
    void incrQSz() -> incrQSz
    void decrQSz() -> decrQSz
jogamp.common.util.locks.RecursiveLockImpl01Unfairish$Sync -> jogamp.common.util.locks.RecursiveLockImpl01Unfairish$Sync:
    java.lang.Thread getOwner() -> getOwner
    boolean isOwner(java.lang.Thread) -> isOwner
    void setOwner(java.lang.Thread) -> setOwner
    java.lang.Throwable getLockedStack() -> getLockedStack
    void setLockedStack(java.lang.Throwable) -> setLockedStack
    int getHoldCount() -> getHoldCount
    void incrHoldCount(java.lang.Thread) -> incrHoldCount
    void decrHoldCount(java.lang.Thread) -> decrHoldCount
    int getQSz() -> getQSz
    void incrQSz() -> incrQSz
    void decrQSz() -> decrQSz
jogamp.common.util.locks.RecursiveLockImplJava5 -> jogamp.common.util.locks.RecursiveLockImplJava5:
    java.lang.Thread owner -> owner
    java.util.concurrent.locks.ReentrantLock lock -> lock
    void <init>(boolean) -> <init>
    void lock() -> lock
    boolean tryLock(long) -> tryLock
    void unlock() -> unlock
    void unlock(java.lang.Runnable) -> unlock
    boolean isLocked() -> isLocked
    java.lang.Thread getOwner() -> getOwner
    boolean isLockedByOtherThread() -> isLockedByOtherThread
    boolean isOwner(java.lang.Thread) -> isOwner
    void validateLocked() -> validateLocked
    int getHoldCount() -> getHoldCount
    int getQueueLength() -> getQueueLength
    java.lang.String threadName(java.lang.Thread) -> threadName
jogamp.common.util.locks.RecursiveThreadGroupLockImpl01Unfairish -> jogamp.common.util.locks.RecursiveThreadGroupLockImpl01Unfairish:
    void <init>() -> <init>
    boolean isOriginalOwner() -> isOriginalOwner
    boolean isOriginalOwner(java.lang.Thread) -> isOriginalOwner
    void addOwner(java.lang.Thread) -> addOwner
    void unlock(java.lang.Runnable) -> unlock
    void removeOwner(java.lang.Thread) -> removeOwner
    java.lang.String toString() -> toString
jogamp.common.util.locks.RecursiveThreadGroupLockImpl01Unfairish$ThreadGroupSync -> jogamp.common.util.locks.RecursiveThreadGroupLockImpl01Unfairish$ThreadGroupSync:
    int holdCountAdditionOwner -> holdCountAdditionOwner
    java.lang.Thread[] threads -> threads
    int threadNum -> threadNum
    void <init>() -> <init>
    void incrHoldCount(java.lang.Thread) -> incrHoldCount
    void decrHoldCount(java.lang.Thread) -> decrHoldCount
    int getAdditionalOwnerHoldCount() -> getAdditionalOwnerHoldCount
    boolean isOriginalOwner(java.lang.Thread) -> isOriginalOwner
    boolean isOwner(java.lang.Thread) -> isOwner
    int getAddOwnerCount() -> getAddOwnerCount
    void addOwner(java.lang.Thread) -> addOwner
    void removeAllOwners() -> removeAllOwners
    void removeOwner(java.lang.Thread) -> removeOwner
    java.lang.String addOwnerToString() -> addOwnerToString
jogamp.nativewindow.Debug -> jogamp.nativewindow.Debug:
    boolean verbose -> verbose
    boolean debugAll -> debugAll
    void <init>() -> <init>
    void initSingleton() -> initSingleton
    boolean verbose() -> verbose
    boolean debugAll() -> debugAll
    boolean debug(java.lang.String) -> debug
    void access$000(java.lang.String) -> access$000
    void <clinit>() -> <clinit>
jogamp.nativewindow.Debug$1 -> jogamp.nativewindow.Debug$1:
    void <init>() -> <init>
    java.lang.Object run() -> run
jogamp.nativewindow.DefaultGraphicsConfigurationFactoryImpl -> jogamp.nativewindow.DefaultGraphicsConfigurationFactoryImpl:
    void <init>() -> <init>
    javax.media.nativewindow.AbstractGraphicsConfiguration chooseGraphicsConfigurationImpl(javax.media.nativewindow.CapabilitiesImmutable,javax.media.nativewindow.CapabilitiesImmutable,javax.media.nativewindow.CapabilitiesChooser,javax.media.nativewindow.AbstractGraphicsScreen,int) -> chooseGraphicsConfigurationImpl
jogamp.nativewindow.NWJNILibLoader -> jogamp.nativewindow.NWJNILibLoader:
    void <init>() -> <init>
    boolean loadNativeWindow(java.lang.String) -> loadNativeWindow
    boolean access$000(java.lang.String,boolean,java.lang.ClassLoader) -> access$000
jogamp.nativewindow.NWJNILibLoader$1 -> jogamp.nativewindow.NWJNILibLoader$1:
    java.lang.String val$ossuffix -> val$ossuffix
    void <init>(java.lang.String) -> <init>
    java.lang.Boolean run() -> run
    java.lang.Object run() -> run
jogamp.nativewindow.NativeWindowFactoryImpl -> jogamp.nativewindow.NativeWindowFactoryImpl:
    javax.media.nativewindow.ToolkitLock nullToolkitLock -> nullToolkitLock
    java.lang.reflect.Constructor nativeWindowConstructor -> nativeWindowConstructor
    void <init>() -> <init>
    javax.media.nativewindow.ToolkitLock getNullToolkitLock() -> getNullToolkitLock
    javax.media.nativewindow.NativeWindow getNativeWindowImpl(java.lang.Object,javax.media.nativewindow.AbstractGraphicsConfiguration) -> getNativeWindowImpl
    javax.media.nativewindow.NativeWindow getAWTNativeWindow(java.lang.Object,javax.media.nativewindow.AbstractGraphicsConfiguration) -> getAWTNativeWindow
    void <clinit>() -> <clinit>
jogamp.nativewindow.NullToolkitLock -> jogamp.nativewindow.NullToolkitLock:
    void <init>() -> <init>
    void lock() -> lock
    void unlock() -> unlock
    void validateLocked() -> validateLocked
    void dispose() -> dispose
    java.lang.String toString() -> toString
jogamp.nativewindow.ProxySurfaceImpl -> jogamp.nativewindow.ProxySurfaceImpl:
    jogamp.nativewindow.SurfaceUpdatedHelper surfaceUpdatedHelper -> surfaceUpdatedHelper
    javax.media.nativewindow.AbstractGraphicsConfiguration config -> config
    javax.media.nativewindow.UpstreamSurfaceHook upstream -> upstream
    long surfaceHandle_old -> surfaceHandle_old
    com.jogamp.common.util.locks.RecursiveLock surfaceLock -> surfaceLock
    int implBitfield -> implBitfield
    boolean upstreamSurfaceHookLifecycleEnabled -> upstreamSurfaceHookLifecycleEnabled
    void <init>(javax.media.nativewindow.AbstractGraphicsConfiguration,javax.media.nativewindow.UpstreamSurfaceHook,boolean) -> <init>
    javax.media.nativewindow.NativeSurface getUpstreamSurface() -> getUpstreamSurface
    javax.media.nativewindow.UpstreamSurfaceHook getUpstreamSurfaceHook() -> getUpstreamSurfaceHook
    void setUpstreamSurfaceHook(javax.media.nativewindow.UpstreamSurfaceHook) -> setUpstreamSurfaceHook
    void enableUpstreamSurfaceHookLifecycle(boolean) -> enableUpstreamSurfaceHookLifecycle
    void createNotify() -> createNotify
    void destroyNotify() -> destroyNotify
    void invalidateImpl() -> invalidateImpl
    javax.media.nativewindow.AbstractGraphicsConfiguration getGraphicsConfiguration() -> getGraphicsConfiguration
    long getDisplayHandle() -> getDisplayHandle
    void setGraphicsConfiguration(javax.media.nativewindow.AbstractGraphicsConfiguration) -> setGraphicsConfiguration
    int getScreenIndex() -> getScreenIndex
    long getSurfaceHandle() -> getSurfaceHandle
    void setSurfaceHandle(long) -> setSurfaceHandle
    int getSurfaceWidth() -> getSurfaceWidth
    int getSurfaceHeight() -> getSurfaceHeight
    boolean surfaceSwap() -> surfaceSwap
    void addSurfaceUpdatedListener(javax.media.nativewindow.SurfaceUpdatedListener) -> addSurfaceUpdatedListener
    void addSurfaceUpdatedListener(int,javax.media.nativewindow.SurfaceUpdatedListener) -> addSurfaceUpdatedListener
    void removeSurfaceUpdatedListener(javax.media.nativewindow.SurfaceUpdatedListener) -> removeSurfaceUpdatedListener
    void surfaceUpdated(java.lang.Object,javax.media.nativewindow.NativeSurface,long) -> surfaceUpdated
    int lockSurface() -> lockSurface
    void unlockSurface() -> unlockSurface
    int lockSurfaceImpl() -> lockSurfaceImpl
    void unlockSurfaceImpl() -> unlockSurfaceImpl
    void validateSurfaceLocked() -> validateSurfaceLocked
    boolean isSurfaceLockedByOtherThread() -> isSurfaceLockedByOtherThread
    java.lang.Thread getSurfaceLockOwner() -> getSurfaceLockOwner
    java.lang.StringBuilder getUpstreamOptionBits(java.lang.StringBuilder) -> getUpstreamOptionBits
    int getUpstreamOptionBits() -> getUpstreamOptionBits
    boolean containsUpstreamOptionBits(int) -> containsUpstreamOptionBits
    void addUpstreamOptionBits(int) -> addUpstreamOptionBits
    void clearUpstreamOptionBits(int) -> clearUpstreamOptionBits
    java.lang.StringBuilder toString(java.lang.StringBuilder) -> toString
    java.lang.String toString() -> toString
jogamp.nativewindow.ResourceToolkitLock -> jogamp.nativewindow.ResourceToolkitLock:
    com.jogamp.common.util.locks.RecursiveLock lock -> lock
    jogamp.nativewindow.ResourceToolkitLock create() -> create
    void <init>() -> <init>
    void lock() -> lock
    void unlock() -> unlock
    void validateLocked() -> validateLocked
    void dispose() -> dispose
    java.lang.String toString() -> toString
jogamp.nativewindow.SurfaceScaleUtils -> jogamp.nativewindow.SurfaceScaleUtils:
    int[] PlatformMaxPixelScale -> PlatformMaxPixelScale
    boolean PlatformUniformPixelScale -> PlatformUniformPixelScale
    boolean PlatformPixelScaleSupported -> PlatformPixelScaleSupported
    void <init>() -> <init>
    boolean computePixelScale(int[],int[],int[],int[],java.lang.String) -> computePixelScale
    void validateReqPixelScale(int[],int[],java.lang.String) -> validateReqPixelScale
    void replaceAutoMaxWithPlatformMax(int[]) -> replaceAutoMaxWithPlatformMax
    int[] getPlatformMaxPixelScale(int[]) -> getPlatformMaxPixelScale
    boolean isPlatformPixelScaleUniform() -> isPlatformPixelScaleUniform
    boolean isPlatformPixelScaleSupported() -> isPlatformPixelScaleSupported
    void <clinit>() -> <clinit>
jogamp.nativewindow.SurfaceUpdatedHelper -> jogamp.nativewindow.SurfaceUpdatedHelper:
    java.lang.Object surfaceUpdatedListenersLock -> surfaceUpdatedListenersLock
    java.util.ArrayList surfaceUpdatedListeners -> surfaceUpdatedListeners
    boolean isEmpty -> isEmpty
    void <init>() -> <init>
    int size() -> size
    javax.media.nativewindow.SurfaceUpdatedListener get(int) -> get
    void addSurfaceUpdatedListener(javax.media.nativewindow.SurfaceUpdatedListener) -> addSurfaceUpdatedListener
    void addSurfaceUpdatedListener(int,javax.media.nativewindow.SurfaceUpdatedListener) -> addSurfaceUpdatedListener
    boolean removeSurfaceUpdatedListener(javax.media.nativewindow.SurfaceUpdatedListener) -> removeSurfaceUpdatedListener
    void surfaceUpdated(java.lang.Object,javax.media.nativewindow.NativeSurface,long) -> surfaceUpdated
jogamp.nativewindow.WrappedSurface -> jogamp.nativewindow.WrappedSurface:
    int[] hasPixelScale -> hasPixelScale
    long surfaceHandle -> surfaceHandle
    void <init>(javax.media.nativewindow.AbstractGraphicsConfiguration,long,int,int,boolean) -> <init>
    void <init>(javax.media.nativewindow.AbstractGraphicsConfiguration,long,javax.media.nativewindow.UpstreamSurfaceHook,boolean) -> <init>
    void invalidateImpl() -> invalidateImpl
    long getSurfaceHandle() -> getSurfaceHandle
    void setSurfaceHandle(long) -> setSurfaceHandle
    int lockSurfaceImpl() -> lockSurfaceImpl
    void unlockSurfaceImpl() -> unlockSurfaceImpl
    int[] convertToWindowUnits(int[]) -> convertToWindowUnits
    int[] convertToPixelUnits(int[]) -> convertToPixelUnits
    void setSurfaceScale(int[]) -> setSurfaceScale
    int[] getRequestedSurfaceScale(int[]) -> getRequestedSurfaceScale
    int[] getCurrentSurfaceScale(int[]) -> getCurrentSurfaceScale
    int[] getNativeSurfaceScale(int[]) -> getNativeSurfaceScale
jogamp.nativewindow.WrappedWindow -> jogamp.nativewindow.WrappedWindow:
    javax.media.nativewindow.util.InsetsImmutable insets -> insets
    long windowHandle -> windowHandle
    void <init>(javax.media.nativewindow.AbstractGraphicsConfiguration,long,int,int,int,int,int,int,boolean,long) -> <init>
    void <init>(javax.media.nativewindow.AbstractGraphicsConfiguration,long,com.jogamp.nativewindow.UpstreamWindowHookMutableSizePos,boolean,long) -> <init>
    void invalidateImpl() -> invalidateImpl
    void destroy() -> destroy
    javax.media.nativewindow.NativeSurface getNativeSurface() -> getNativeSurface
    javax.media.nativewindow.NativeWindow getParent() -> getParent
    long getWindowHandle() -> getWindowHandle
    javax.media.nativewindow.util.InsetsImmutable getInsets() -> getInsets
    int getX() -> getX
    int getY() -> getY
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    javax.media.nativewindow.util.Point getLocationOnScreen(javax.media.nativewindow.util.Point) -> getLocationOnScreen
    boolean hasFocus() -> hasFocus
jogamp.nativewindow.awt.AWTMisc -> jogamp.nativewindow.awt.AWTMisc:
    java.util.HashMap cursorMap -> cursorMap
    java.awt.Cursor nulCursor -> nulCursor
    void <init>() -> <init>
    javax.swing.JFrame getJFrame(java.awt.Component) -> getJFrame
    java.awt.Frame getFrame(java.awt.Component) -> getFrame
    java.awt.Window getWindow(java.awt.Component) -> getWindow
    java.awt.Container getContainer(java.awt.Component) -> getContainer
    java.awt.Insets getInsets(java.awt.Component,boolean) -> getInsets
    int performAction(java.awt.Container,java.lang.Class,jogamp.nativewindow.awt.AWTMisc$ComponentAction) -> performAction
    java.awt.Component getNextFocus(java.awt.Component,boolean) -> getNextFocus
    void clearAWTMenus() -> clearAWTMenus
    java.awt.Cursor getNullCursor() -> getNullCursor
    java.awt.Cursor getCursor(javax.media.nativewindow.util.PixelRectangle,java.awt.Point) -> getCursor
    java.awt.Cursor createCursor(javax.media.nativewindow.util.PixelRectangle,java.awt.Point) -> createCursor
    javax.media.nativewindow.WindowClosingProtocol$WindowClosingMode AWT2NWClosingOperation(int) -> AWT2NWClosingOperation
    javax.media.nativewindow.WindowClosingProtocol$WindowClosingMode getNWClosingOperation(java.awt.Component) -> getNWClosingOperation
    void <clinit>() -> <clinit>
jogamp.nativewindow.awt.AWTMisc$1 -> jogamp.nativewindow.awt.AWTMisc$1:
    java.awt.image.BufferedImage val$img -> val$img
    int val$width -> val$width
    void <init>(java.awt.image.BufferedImage,int) -> <init>
    void store(int,int,int) -> store
    javax.media.nativewindow.util.PixelFormat getPixelformat() -> getPixelformat
    int getStride() -> getStride
    boolean isGLOriented() -> isGLOriented
jogamp.nativewindow.awt.AWTMisc$ComponentAction -> jogamp.nativewindow.awt.AWTMisc$ComponentAction:
    void run(java.awt.Component) -> run
jogamp.nativewindow.jawt.JAWT -> jogamp.nativewindow.jawt.JAWT:
    com.jogamp.common.nio.StructAccessor accessor -> accessor
    int mdIdx -> mdIdx
    int[] JAWT_size -> JAWT_size
    int[] version_offset -> version_offset
    int jawt_version_cached -> jawt_version_cached
    int size() -> size
    jogamp.nativewindow.jawt.JAWT create() -> create
    jogamp.nativewindow.jawt.JAWT create(java.nio.ByteBuffer) -> create
    void <init>(java.nio.ByteBuffer) -> <init>
    java.nio.ByteBuffer getBuffer() -> getBuffer
    jogamp.nativewindow.jawt.JAWT setVersion(int) -> setVersion
    int getVersion() -> getVersion
    jogamp.nativewindow.jawt.JAWT_DrawingSurface GetDrawingSurface(java.lang.Object) -> GetDrawingSurface
    java.nio.ByteBuffer GetDrawingSurface0(java.nio.ByteBuffer,java.lang.Object) -> GetDrawingSurface0
    void FreeDrawingSurface(jogamp.nativewindow.jawt.JAWT_DrawingSurface) -> FreeDrawingSurface
    void FreeDrawingSurface0(java.nio.ByteBuffer,java.nio.ByteBuffer) -> FreeDrawingSurface0
    void Lock() -> Lock
    void Lock0(java.nio.ByteBuffer) -> Lock0
    void Unlock() -> Unlock
    void Unlock0(java.nio.ByteBuffer) -> Unlock0
    int getCachedVersion() -> getCachedVersion
    boolean getJAWT(jogamp.nativewindow.jawt.JAWT,int) -> getJAWT
    int access$002(jogamp.nativewindow.jawt.JAWT,int) -> access$002
    void <clinit>() -> <clinit>
jogamp.nativewindow.jawt.JAWT$1 -> jogamp.nativewindow.jawt.JAWT$1:
    jogamp.nativewindow.jawt.JAWT val$jawt -> val$jawt
    int val$jawt_version_flags -> val$jawt_version_flags
    void <init>(jogamp.nativewindow.jawt.JAWT,int) -> <init>
    java.lang.Boolean run() -> run
    java.lang.Object run() -> run
jogamp.nativewindow.jawt.JAWTFactory -> jogamp.nativewindow.jawt.JAWTFactory:
    int JNI_FALSE -> JNI_FALSE
    int JNI_TRUE -> JNI_TRUE
    int JNI_OK -> JNI_OK
    int JNI_ERR -> JNI_ERR
    int JNI_EDETACHED -> JNI_EDETACHED
    int JNI_EVERSION -> JNI_EVERSION
    int JNI_ENOMEM -> JNI_ENOMEM
    int JNI_EEXIST -> JNI_EEXIST
    int JNI_EINVAL -> JNI_EINVAL
    int JNI_COMMIT -> JNI_COMMIT
    int JNI_ABORT -> JNI_ABORT
    int JAWT_LOCK_ERROR -> JAWT_LOCK_ERROR
    int JAWT_LOCK_CLIP_CHANGED -> JAWT_LOCK_CLIP_CHANGED
    int JAWT_LOCK_BOUNDS_CHANGED -> JAWT_LOCK_BOUNDS_CHANGED
    int JAWT_LOCK_SURFACE_CHANGED -> JAWT_LOCK_SURFACE_CHANGED
    int JAWT_VERSION_1_3 -> JAWT_VERSION_1_3
    int JAWT_VERSION_1_4 -> JAWT_VERSION_1_4
    void <init>() -> <init>
    boolean JAWT_GetAWT(jogamp.nativewindow.jawt.JAWT) -> JAWT_GetAWT
    boolean JAWT_GetAWT1(java.nio.ByteBuffer) -> JAWT_GetAWT1
jogamp.nativewindow.jawt.JAWTJNILibLoader -> jogamp.nativewindow.jawt.JAWTJNILibLoader:
    void <init>() -> <init>
    void initSingleton() -> initSingleton
    void access$000(java.lang.String,java.lang.String[],boolean,java.lang.ClassLoader) -> access$000
    void <clinit>() -> <clinit>
jogamp.nativewindow.jawt.JAWTJNILibLoader$1 -> jogamp.nativewindow.jawt.JAWTJNILibLoader$1:
    void <init>() -> <init>
    java.lang.Object run() -> run
jogamp.nativewindow.jawt.JAWTUtil -> jogamp.nativewindow.jawt.JAWTUtil:
    boolean DEBUG -> DEBUG
    boolean SKIP_AWT_HIDPI -> SKIP_AWT_HIDPI
    int JAWT_MACOSX_USE_CALAYER -> JAWT_MACOSX_USE_CALAYER
    com.jogamp.common.util.VersionNumber JAWT_MacOSXCALayerMinVersion -> JAWT_MacOSXCALayerMinVersion
    com.jogamp.common.util.VersionNumber JAWT_MacOSXCALayerRequiredForJavaVersion -> JAWT_MacOSXCALayerRequiredForJavaVersion
    boolean headlessMode -> headlessMode
    jogamp.nativewindow.jawt.JAWT jawtLockObject -> jawtLockObject
    java.lang.reflect.Method isQueueFlusherThread -> isQueueFlusherThread
    boolean j2dExist -> j2dExist
    java.lang.reflect.Method sunToolkitAWTLockMethod -> sunToolkitAWTLockMethod
    java.lang.reflect.Method sunToolkitAWTUnlockMethod -> sunToolkitAWTUnlockMethod
    boolean hasSunToolkitAWTLock -> hasSunToolkitAWTLock
    com.jogamp.common.util.locks.RecursiveLock jawtLock -> jawtLock
    javax.media.nativewindow.ToolkitLock jawtToolkitLock -> jawtToolkitLock
    java.lang.reflect.Method getScaleFactorMethod -> getScaleFactorMethod
    int JAWT_OSX_CALAYER_QUIRK_SIZE -> JAWT_OSX_CALAYER_QUIRK_SIZE
    int JAWT_OSX_CALAYER_QUIRK_POSITION -> JAWT_OSX_CALAYER_QUIRK_POSITION
    int JAWT_OSX_CALAYER_QUIRK_LAYOUT -> JAWT_OSX_CALAYER_QUIRK_LAYOUT
    void <init>() -> <init>
    boolean isOffscreenLayerSupported() -> isOffscreenLayerSupported
    boolean isOffscreenLayerRequired() -> isOffscreenLayerRequired
    int getOSXCALayerQuirks() -> getOSXCALayerQuirks
    jogamp.nativewindow.jawt.JAWT getJAWT(boolean) -> getJAWT
    boolean isJAWTUsingOffscreenLayer(jogamp.nativewindow.jawt.JAWT) -> isJAWTUsingOffscreenLayer
    void initSingleton() -> initSingleton
    void shutdown() -> shutdown
    boolean hasJava2D() -> hasJava2D
    boolean isJava2DQueueFlusherThread() -> isJava2DQueueFlusherThread
    boolean isHeadlessMode() -> isHeadlessMode
    void lockToolkit() -> lockToolkit
    void unlockToolkit() -> unlockToolkit
    void validateLocked() -> validateLocked
    javax.media.nativewindow.ToolkitLock getJAWTToolkitLock() -> getJAWTToolkitLock
    int getPixelScale(java.awt.GraphicsDevice) -> getPixelScale
    int getPixelScale(java.awt.GraphicsConfiguration) -> getPixelScale
    com.jogamp.common.util.locks.RecursiveLock access$000() -> access$000
    void <clinit>() -> <clinit>
jogamp.nativewindow.jawt.JAWTUtil$1 -> jogamp.nativewindow.jawt.JAWTUtil$1:
    void <init>() -> <init>
    java.lang.Object run() -> run
jogamp.nativewindow.jawt.JAWTUtil$2 -> jogamp.nativewindow.jawt.JAWTUtil$2:
    void <init>() -> <init>
    void lock() -> lock
    void unlock() -> unlock
    void validateLocked() -> validateLocked
    void dispose() -> dispose
    java.lang.String toString() -> toString
jogamp.nativewindow.jawt.JAWTUtil$3 -> jogamp.nativewindow.jawt.JAWTUtil$3:
    java.util.ArrayList val$desktophintsBucket -> val$desktophintsBucket
    void <init>(java.util.ArrayList) -> <init>
    void run() -> run
jogamp.nativewindow.jawt.JAWTUtil$PrivilegedDataBlob1 -> jogamp.nativewindow.jawt.JAWTUtil$PrivilegedDataBlob1:
    java.lang.reflect.Method sunToolkitAWTLockMethod -> sunToolkitAWTLockMethod
    java.lang.reflect.Method sunToolkitAWTUnlockMethod -> sunToolkitAWTUnlockMethod
    java.lang.reflect.Method getScaleFactorMethod -> getScaleFactorMethod
    boolean ok -> ok
    void <init>() -> <init>
jogamp.nativewindow.jawt.JAWT_DrawingSurface -> jogamp.nativewindow.jawt.JAWT_DrawingSurface:
    com.jogamp.common.nio.StructAccessor accessor -> accessor
    int mdIdx -> mdIdx
    int[] JAWT_DrawingSurface_size -> JAWT_DrawingSurface_size
    int[] env_offset -> env_offset
    int size() -> size
    jogamp.nativewindow.jawt.JAWT_DrawingSurface create() -> create
    jogamp.nativewindow.jawt.JAWT_DrawingSurface create(java.nio.ByteBuffer) -> create
    void <init>(java.nio.ByteBuffer) -> <init>
    java.nio.ByteBuffer getBuffer() -> getBuffer
    int Lock() -> Lock
    int Lock0(java.nio.ByteBuffer) -> Lock0
    jogamp.nativewindow.jawt.JAWT_DrawingSurfaceInfo GetDrawingSurfaceInfo() -> GetDrawingSurfaceInfo
    java.nio.ByteBuffer GetDrawingSurfaceInfo0(java.nio.ByteBuffer) -> GetDrawingSurfaceInfo0
    void FreeDrawingSurfaceInfo(jogamp.nativewindow.jawt.JAWT_DrawingSurfaceInfo) -> FreeDrawingSurfaceInfo
    void FreeDrawingSurfaceInfo0(java.nio.ByteBuffer,java.nio.ByteBuffer) -> FreeDrawingSurfaceInfo0
    void Unlock() -> Unlock
    void Unlock0(java.nio.ByteBuffer) -> Unlock0
    void <clinit>() -> <clinit>
jogamp.nativewindow.jawt.JAWT_DrawingSurfaceInfo -> jogamp.nativewindow.jawt.JAWT_DrawingSurfaceInfo:
    com.jogamp.common.nio.StructAccessor accessor -> accessor
    int mdIdx -> mdIdx
    int[] JAWT_DrawingSurfaceInfo_size -> JAWT_DrawingSurfaceInfo_size
    int[] ds_offset -> ds_offset
    int[] bounds_offset -> bounds_offset
    int[] bounds_size -> bounds_size
    int[] clipSize_offset -> clipSize_offset
    int[] clip_offset -> clip_offset
    java.lang.reflect.Method platformInfoFactoryMethod -> platformInfoFactoryMethod
    int size() -> size
    jogamp.nativewindow.jawt.JAWT_DrawingSurfaceInfo create() -> create
    jogamp.nativewindow.jawt.JAWT_DrawingSurfaceInfo create(java.nio.ByteBuffer) -> create
    void <init>(java.nio.ByteBuffer) -> <init>
    java.nio.ByteBuffer getBuffer() -> getBuffer
    jogamp.nativewindow.jawt.JAWT_Rectangle getBounds() -> getBounds
    jogamp.nativewindow.jawt.JAWT_DrawingSurfaceInfo setClipSize(int) -> setClipSize
    int getClipSize() -> getClipSize
    jogamp.nativewindow.jawt.JAWT_PlatformInfo platformInfo(jogamp.nativewindow.jawt.JAWT) -> platformInfo
    java.nio.ByteBuffer platformInfo0(java.nio.Buffer) -> platformInfo0
    jogamp.nativewindow.jawt.JAWT_PlatformInfo newPlatformInfo(jogamp.nativewindow.jawt.JAWT,java.nio.ByteBuffer) -> newPlatformInfo
    void <clinit>() -> <clinit>
jogamp.nativewindow.jawt.JAWT_PlatformInfo -> jogamp.nativewindow.jawt.JAWT_PlatformInfo:
jogamp.nativewindow.jawt.JAWT_Rectangle -> jogamp.nativewindow.jawt.JAWT_Rectangle:
    com.jogamp.common.nio.StructAccessor accessor -> accessor
    int mdIdx -> mdIdx
    int[] JAWT_Rectangle_size -> JAWT_Rectangle_size
    int[] x_offset -> x_offset
    int[] y_offset -> y_offset
    int[] width_offset -> width_offset
    int[] height_offset -> height_offset
    int size() -> size
    jogamp.nativewindow.jawt.JAWT_Rectangle create() -> create
    jogamp.nativewindow.jawt.JAWT_Rectangle create(java.nio.ByteBuffer) -> create
    void <init>(java.nio.ByteBuffer) -> <init>
    java.nio.ByteBuffer getBuffer() -> getBuffer
    jogamp.nativewindow.jawt.JAWT_Rectangle setX(int) -> setX
    int getX() -> getX
    jogamp.nativewindow.jawt.JAWT_Rectangle setY(int) -> setY
    int getY() -> getY
    jogamp.nativewindow.jawt.JAWT_Rectangle setWidth(int) -> setWidth
    int getWidth() -> getWidth
    jogamp.nativewindow.jawt.JAWT_Rectangle setHeight(int) -> setHeight
    int getHeight() -> getHeight
    void <clinit>() -> <clinit>
jogamp.nativewindow.jawt.macosx.JAWT_MacOSXDrawingSurfaceInfo -> jogamp.nativewindow.jawt.macosx.JAWT_MacOSXDrawingSurfaceInfo:
    com.jogamp.common.nio.StructAccessor accessor -> accessor
    int mdIdx -> mdIdx
    int[] JAWT_MacOSXDrawingSurfaceInfo_size -> JAWT_MacOSXDrawingSurfaceInfo_size
    int[] cocoaViewRef_offset -> cocoaViewRef_offset
    int size() -> size
    jogamp.nativewindow.jawt.macosx.JAWT_MacOSXDrawingSurfaceInfo create() -> create
    jogamp.nativewindow.jawt.macosx.JAWT_MacOSXDrawingSurfaceInfo create(java.nio.ByteBuffer) -> create
    void <init>(java.nio.ByteBuffer) -> <init>
    java.nio.ByteBuffer getBuffer() -> getBuffer
    jogamp.nativewindow.jawt.macosx.JAWT_MacOSXDrawingSurfaceInfo setCocoaViewRef(long) -> setCocoaViewRef
    long getCocoaViewRef() -> getCocoaViewRef
    void <clinit>() -> <clinit>
jogamp.nativewindow.jawt.windows.JAWT_Win32DrawingSurfaceInfo -> jogamp.nativewindow.jawt.windows.JAWT_Win32DrawingSurfaceInfo:
    com.jogamp.common.nio.StructAccessor accessor -> accessor
    int mdIdx -> mdIdx
    int[] JAWT_Win32DrawingSurfaceInfo_size -> JAWT_Win32DrawingSurfaceInfo_size
    int[] handle_offset -> handle_offset
    int[] hdc_offset -> hdc_offset
    int size() -> size
    jogamp.nativewindow.jawt.windows.JAWT_Win32DrawingSurfaceInfo create() -> create
    jogamp.nativewindow.jawt.windows.JAWT_Win32DrawingSurfaceInfo create(java.nio.ByteBuffer) -> create
    void <init>(java.nio.ByteBuffer) -> <init>
    java.nio.ByteBuffer getBuffer() -> getBuffer
    jogamp.nativewindow.jawt.windows.JAWT_Win32DrawingSurfaceInfo setHandle(long) -> setHandle
    long getHandle() -> getHandle
    jogamp.nativewindow.jawt.windows.JAWT_Win32DrawingSurfaceInfo setHdc(long) -> setHdc
    long getHdc() -> getHdc
    void <clinit>() -> <clinit>
jogamp.nativewindow.jawt.x11.JAWT_X11DrawingSurfaceInfo -> jogamp.nativewindow.jawt.x11.JAWT_X11DrawingSurfaceInfo:
    com.jogamp.common.nio.StructAccessor accessor -> accessor
    int mdIdx -> mdIdx
    int[] JAWT_X11DrawingSurfaceInfo_size -> JAWT_X11DrawingSurfaceInfo_size
    int[] drawable_offset -> drawable_offset
    int[] display_offset -> display_offset
    int[] visualID_offset -> visualID_offset
    int[] colormapID_offset -> colormapID_offset
    int[] depth_offset -> depth_offset
    int size() -> size
    jogamp.nativewindow.jawt.x11.JAWT_X11DrawingSurfaceInfo create() -> create
    jogamp.nativewindow.jawt.x11.JAWT_X11DrawingSurfaceInfo create(java.nio.ByteBuffer) -> create
    void <init>(java.nio.ByteBuffer) -> <init>
    java.nio.ByteBuffer getBuffer() -> getBuffer
    jogamp.nativewindow.jawt.x11.JAWT_X11DrawingSurfaceInfo setDrawable(long) -> setDrawable
    long getDrawable() -> getDrawable
    jogamp.nativewindow.jawt.x11.JAWT_X11DrawingSurfaceInfo setDisplay(long) -> setDisplay
    long getDisplay() -> getDisplay
    jogamp.nativewindow.jawt.x11.JAWT_X11DrawingSurfaceInfo setVisualID(long) -> setVisualID
    long getVisualID() -> getVisualID
    jogamp.nativewindow.jawt.x11.JAWT_X11DrawingSurfaceInfo setColormapID(long) -> setColormapID
    long getColormapID() -> getColormapID
    jogamp.nativewindow.jawt.x11.JAWT_X11DrawingSurfaceInfo setDepth(int) -> setDepth
    int getDepth() -> getDepth
    void <clinit>() -> <clinit>
jogamp.nativewindow.macosx.OSXUtil -> jogamp.nativewindow.macosx.OSXUtil:
    boolean isInit -> isInit
    boolean DEBUG -> DEBUG
    int MAX_PIXELSCALE -> MAX_PIXELSCALE
    java.lang.Runnable _nop -> _nop
    void <init>() -> <init>
    void initSingleton() -> initSingleton
    void shutdown() -> shutdown
    boolean requiresToolkitLock() -> requiresToolkitLock
    boolean hasThreadingIssues() -> hasThreadingIssues
    boolean isNSView(long) -> isNSView
    boolean isNSWindow(long) -> isNSWindow
    javax.media.nativewindow.util.Point GetLocationOnScreen(long,int,int) -> GetLocationOnScreen
    javax.media.nativewindow.util.Insets GetInsets(long) -> GetInsets
    double GetPixelScale(int) -> GetPixelScale
    double GetPixelScale(long) -> GetPixelScale
    long CreateNSWindow(int,int,int,int) -> CreateNSWindow
    void DestroyNSWindow(long) -> DestroyNSWindow
    long GetNSView(long) -> GetNSView
    long GetNSWindow(long) -> GetNSWindow
    long CreateCALayer(int,int,float) -> CreateCALayer
    void AddCASublayer(long,long,int,int,int,int,float,int) -> AddCASublayer
    void FixCALayerLayout(long,long,boolean,int,int,int,int,int) -> FixCALayerLayout
    void SetCALayerPixelScale(long,long,float) -> SetCALayerPixelScale
    void RemoveCASublayer(long,long) -> RemoveCASublayer
    void DestroyCALayer(long) -> DestroyCALayer
    void RunOnMainThread(boolean,boolean,java.lang.Runnable) -> RunOnMainThread
    void RunLater(boolean,java.lang.Runnable,int) -> RunLater
    void KickNSApp() -> KickNSApp
    void WaitUntilFinish() -> WaitUntilFinish
    java.lang.Object RunOnMainThread(boolean,boolean,com.jogamp.common.util.Function,java.lang.Object[]) -> RunOnMainThread
    boolean IsMainThread() -> IsMainThread
    int GetScreenRefreshRate(int) -> GetScreenRefreshRate
    boolean initIDs0() -> initIDs0
    boolean isNSView0(long) -> isNSView0
    boolean isNSWindow0(long) -> isNSWindow0
    java.lang.Object GetLocationOnScreen0(long,int,int) -> GetLocationOnScreen0
    java.lang.Object GetInsets0(long) -> GetInsets0
    double GetPixelScale0(int) -> GetPixelScale0
    double GetPixelScale1(long) -> GetPixelScale1
    long CreateNSWindow0(int,int,int,int) -> CreateNSWindow0
    void DestroyNSWindow0(long) -> DestroyNSWindow0
    long GetNSView0(long) -> GetNSView0
    long GetNSWindow0(long) -> GetNSWindow0
    long CreateCALayer0(int,int,float) -> CreateCALayer0
    void AddCASublayer0(long,long,int,int,int,int,float,int) -> AddCASublayer0
    void FixCALayerLayout0(long,long,boolean,int,int,int,int,int) -> FixCALayerLayout0
    void SetCALayerPixelScale0(long,long,float) -> SetCALayerPixelScale0
    void RemoveCASublayer0(long,long) -> RemoveCASublayer0
    void DestroyCALayer0(long) -> DestroyCALayer0
    void RunOnMainThread0(boolean,java.lang.Runnable) -> RunOnMainThread0
    void RunLater0(boolean,boolean,java.lang.Runnable,int) -> RunLater0
    void KickNSApp0() -> KickNSApp0
    boolean IsMainThread0() -> IsMainThread0
    int GetScreenRefreshRate0(int) -> GetScreenRefreshRate0
    void <clinit>() -> <clinit>
jogamp.nativewindow.macosx.OSXUtil$1 -> jogamp.nativewindow.macosx.OSXUtil$1:
    void <init>() -> <init>
    void run() -> run
jogamp.nativewindow.windows.BITMAPINFO -> jogamp.nativewindow.windows.BITMAPINFO:
    com.jogamp.common.nio.StructAccessor accessor -> accessor
    int mdIdx -> mdIdx
    int[] BITMAPINFO_size -> BITMAPINFO_size
    int[] bmiHeader_offset -> bmiHeader_offset
    int[] bmiHeader_size -> bmiHeader_size
    int[] bmiColors_offset -> bmiColors_offset
    int[] bmiColors_size -> bmiColors_size
    int size() -> size
    jogamp.nativewindow.windows.BITMAPINFO create() -> create
    jogamp.nativewindow.windows.BITMAPINFO create(java.nio.ByteBuffer) -> create
    void <init>(java.nio.ByteBuffer) -> <init>
    java.nio.ByteBuffer getBuffer() -> getBuffer
    jogamp.nativewindow.windows.BITMAPINFOHEADER getBmiHeader() -> getBmiHeader
    jogamp.nativewindow.windows.BITMAPINFO setBmiColors(jogamp.nativewindow.windows.RGBQUAD) -> setBmiColors
    jogamp.nativewindow.windows.RGBQUAD getBmiColors() -> getBmiColors
    void <clinit>() -> <clinit>
jogamp.nativewindow.windows.BITMAPINFOHEADER -> jogamp.nativewindow.windows.BITMAPINFOHEADER:
    com.jogamp.common.nio.StructAccessor accessor -> accessor
    int mdIdx -> mdIdx
    int[] BITMAPINFOHEADER_size -> BITMAPINFOHEADER_size
    int[] biSize_offset -> biSize_offset
    int[] biWidth_offset -> biWidth_offset
    int[] biHeight_offset -> biHeight_offset
    int[] biPlanes_offset -> biPlanes_offset
    int[] biBitCount_offset -> biBitCount_offset
    int[] biCompression_offset -> biCompression_offset
    int[] biSizeImage_offset -> biSizeImage_offset
    int[] biXPelsPerMeter_offset -> biXPelsPerMeter_offset
    int[] biYPelsPerMeter_offset -> biYPelsPerMeter_offset
    int[] biClrUsed_offset -> biClrUsed_offset
    int[] biClrImportant_offset -> biClrImportant_offset
    int size() -> size
    jogamp.nativewindow.windows.BITMAPINFOHEADER create() -> create
    jogamp.nativewindow.windows.BITMAPINFOHEADER create(java.nio.ByteBuffer) -> create
    void <init>(java.nio.ByteBuffer) -> <init>
    java.nio.ByteBuffer getBuffer() -> getBuffer
    jogamp.nativewindow.windows.BITMAPINFOHEADER setBiSize(int) -> setBiSize
    int getBiSize() -> getBiSize
    jogamp.nativewindow.windows.BITMAPINFOHEADER setBiWidth(int) -> setBiWidth
    int getBiWidth() -> getBiWidth
    jogamp.nativewindow.windows.BITMAPINFOHEADER setBiHeight(int) -> setBiHeight
    int getBiHeight() -> getBiHeight
    jogamp.nativewindow.windows.BITMAPINFOHEADER setBiPlanes(short) -> setBiPlanes
    short getBiPlanes() -> getBiPlanes
    jogamp.nativewindow.windows.BITMAPINFOHEADER setBiBitCount(short) -> setBiBitCount
    short getBiBitCount() -> getBiBitCount
    jogamp.nativewindow.windows.BITMAPINFOHEADER setBiCompression(int) -> setBiCompression
    int getBiCompression() -> getBiCompression
    jogamp.nativewindow.windows.BITMAPINFOHEADER setBiSizeImage(int) -> setBiSizeImage
    int getBiSizeImage() -> getBiSizeImage
    jogamp.nativewindow.windows.BITMAPINFOHEADER setBiXPelsPerMeter(int) -> setBiXPelsPerMeter
    int getBiXPelsPerMeter() -> getBiXPelsPerMeter
    jogamp.nativewindow.windows.BITMAPINFOHEADER setBiYPelsPerMeter(int) -> setBiYPelsPerMeter
    int getBiYPelsPerMeter() -> getBiYPelsPerMeter
    jogamp.nativewindow.windows.BITMAPINFOHEADER setBiClrUsed(int) -> setBiClrUsed
    int getBiClrUsed() -> getBiClrUsed
    jogamp.nativewindow.windows.BITMAPINFOHEADER setBiClrImportant(int) -> setBiClrImportant
    int getBiClrImportant() -> getBiClrImportant
    void <clinit>() -> <clinit>
jogamp.nativewindow.windows.DWM_BLURBEHIND -> jogamp.nativewindow.windows.DWM_BLURBEHIND:
    com.jogamp.common.nio.StructAccessor accessor -> accessor
    int mdIdx -> mdIdx
    int[] DWM_BLURBEHIND_size -> DWM_BLURBEHIND_size
    int[] dwFlags_offset -> dwFlags_offset
    int[] fEnable_offset -> fEnable_offset
    int[] hRgnBlur_offset -> hRgnBlur_offset
    int[] fTransitionOnMaximized_offset -> fTransitionOnMaximized_offset
    int size() -> size
    jogamp.nativewindow.windows.DWM_BLURBEHIND create() -> create
    jogamp.nativewindow.windows.DWM_BLURBEHIND create(java.nio.ByteBuffer) -> create
    void <init>(java.nio.ByteBuffer) -> <init>
    java.nio.ByteBuffer getBuffer() -> getBuffer
    jogamp.nativewindow.windows.DWM_BLURBEHIND setDwFlags(int) -> setDwFlags
    int getDwFlags() -> getDwFlags
    jogamp.nativewindow.windows.DWM_BLURBEHIND setFEnable(int) -> setFEnable
    int getFEnable() -> getFEnable
    jogamp.nativewindow.windows.DWM_BLURBEHIND setHRgnBlur(long) -> setHRgnBlur
    long getHRgnBlur() -> getHRgnBlur
    jogamp.nativewindow.windows.DWM_BLURBEHIND setFTransitionOnMaximized(int) -> setFTransitionOnMaximized
    int getFTransitionOnMaximized() -> getFTransitionOnMaximized
    void <clinit>() -> <clinit>
jogamp.nativewindow.windows.GDI -> jogamp.nativewindow.windows.GDI:
    int BI_RGB -> BI_RGB
    int BI_RLE8 -> BI_RLE8
    int BI_RLE4 -> BI_RLE4
    int BI_BITFIELDS -> BI_BITFIELDS
    int DIB_RGB_COLORS -> DIB_RGB_COLORS
    int DIB_PAL_COLORS -> DIB_PAL_COLORS
    int PFD_TYPE_RGBA -> PFD_TYPE_RGBA
    int PFD_TYPE_COLORINDEX -> PFD_TYPE_COLORINDEX
    int PFD_MAIN_PLANE -> PFD_MAIN_PLANE
    int PFD_OVERLAY_PLANE -> PFD_OVERLAY_PLANE
    int PFD_UNDERLAY_PLANE -> PFD_UNDERLAY_PLANE
    int PFD_DOUBLEBUFFER -> PFD_DOUBLEBUFFER
    int PFD_STEREO -> PFD_STEREO
    int PFD_DRAW_TO_WINDOW -> PFD_DRAW_TO_WINDOW
    int PFD_DRAW_TO_BITMAP -> PFD_DRAW_TO_BITMAP
    int PFD_SUPPORT_GDI -> PFD_SUPPORT_GDI
    int PFD_SUPPORT_OPENGL -> PFD_SUPPORT_OPENGL
    int PFD_GENERIC_FORMAT -> PFD_GENERIC_FORMAT
    int PFD_NEED_PALETTE -> PFD_NEED_PALETTE
    int PFD_NEED_SYSTEM_PALETTE -> PFD_NEED_SYSTEM_PALETTE
    int PFD_SWAP_EXCHANGE -> PFD_SWAP_EXCHANGE
    int PFD_SWAP_COPY -> PFD_SWAP_COPY
    int PFD_SWAP_LAYER_BUFFERS -> PFD_SWAP_LAYER_BUFFERS
    int PFD_GENERIC_ACCELERATED -> PFD_GENERIC_ACCELERATED
    int PFD_SUPPORT_DIRECTDRAW -> PFD_SUPPORT_DIRECTDRAW
    int PFD_DEPTH_DONTCARE -> PFD_DEPTH_DONTCARE
    int PFD_DOUBLEBUFFER_DONTCARE -> PFD_DOUBLEBUFFER_DONTCARE
    long PFD_STEREO_DONTCARE -> PFD_STEREO_DONTCARE
    int ERROR_SUCCESS -> ERROR_SUCCESS
    int ERROR_INVALID_PIXEL_FORMAT -> ERROR_INVALID_PIXEL_FORMAT
    int ERROR_NO_SYSTEM_RESOURCES -> ERROR_NO_SYSTEM_RESOURCES
    int ERROR_INVALID_DATA -> ERROR_INVALID_DATA
    int ERROR_PROC_NOT_FOUND -> ERROR_PROC_NOT_FOUND
    int ERROR_INVALID_WINDOW_HANDLE -> ERROR_INVALID_WINDOW_HANDLE
    int SW_HIDE -> SW_HIDE
    int SW_SHOWNORMAL -> SW_SHOWNORMAL
    int SW_NORMAL -> SW_NORMAL
    int SW_SHOWMINIMIZED -> SW_SHOWMINIMIZED
    int SW_SHOWMAXIMIZED -> SW_SHOWMAXIMIZED
    int SW_MAXIMIZE -> SW_MAXIMIZE
    int SW_SHOWNOACTIVATE -> SW_SHOWNOACTIVATE
    int SW_SHOW -> SW_SHOW
    int SW_MINIMIZE -> SW_MINIMIZE
    int SW_SHOWMINNOACTIVE -> SW_SHOWMINNOACTIVE
    int SW_SHOWNA -> SW_SHOWNA
    int SW_RESTORE -> SW_RESTORE
    int SW_SHOWDEFAULT -> SW_SHOWDEFAULT
    int SW_FORCEMINIMIZE -> SW_FORCEMINIMIZE
    int SW_MAX -> SW_MAX
    int OBJ_PEN -> OBJ_PEN
    int OBJ_BRUSH -> OBJ_BRUSH
    int OBJ_DC -> OBJ_DC
    int OBJ_METADC -> OBJ_METADC
    int OBJ_PAL -> OBJ_PAL
    int OBJ_FONT -> OBJ_FONT
    int OBJ_BITMAP -> OBJ_BITMAP
    int OBJ_REGION -> OBJ_REGION
    int OBJ_METAFILE -> OBJ_METAFILE
    int OBJ_MEMDC -> OBJ_MEMDC
    int OBJ_EXTPEN -> OBJ_EXTPEN
    int OBJ_ENHMETADC -> OBJ_ENHMETADC
    int OBJ_ENHMETAFILE -> OBJ_ENHMETAFILE
    int OBJ_COLORSPACE -> OBJ_COLORSPACE
    int DWM_BB_ENABLE -> DWM_BB_ENABLE
    int DWM_BB_BLURREGION -> DWM_BB_BLURREGION
    int DWM_BB_TRANSITIONONMAXIMIZED -> DWM_BB_TRANSITIONONMAXIMIZED
    int DWM_EC_DISABLECOMPOSITION -> DWM_EC_DISABLECOMPOSITION
    int DWM_EC_ENABLECOMPOSITION -> DWM_EC_ENABLECOMPOSITION
    void <init>() -> <init>
    int ChoosePixelFormat(long,jogamp.nativewindow.windows.PIXELFORMATDESCRIPTOR) -> ChoosePixelFormat
    int ChoosePixelFormat1(long,java.nio.ByteBuffer) -> ChoosePixelFormat1
    long CreateCompatibleDC(long) -> CreateCompatibleDC
    long CreateDIBSection(long,jogamp.nativewindow.windows.BITMAPINFO,int,com.jogamp.common.nio.PointerBuffer,long,int) -> CreateDIBSection
    long CreateDIBSection1(long,java.nio.ByteBuffer,int,java.lang.Object,int,boolean,long,int) -> CreateDIBSection1
    boolean DeleteDC(long) -> DeleteDC
    boolean DeleteObject(long) -> DeleteObject
    int DescribePixelFormat(long,int,int,jogamp.nativewindow.windows.PIXELFORMATDESCRIPTOR) -> DescribePixelFormat
    int DescribePixelFormat1(long,int,int,java.nio.ByteBuffer) -> DescribePixelFormat1
    boolean DestroyWindow(long) -> DestroyWindow
    boolean DwmEnableBlurBehindWindow(long,jogamp.nativewindow.windows.DWM_BLURBEHIND) -> DwmEnableBlurBehindWindow
    boolean DwmEnableBlurBehindWindow1(long,java.nio.ByteBuffer) -> DwmEnableBlurBehindWindow1
    boolean DwmEnableComposition(int) -> DwmEnableComposition
    boolean DwmExtendFrameIntoClientArea(long,jogamp.nativewindow.windows.MARGINS) -> DwmExtendFrameIntoClientArea
    boolean DwmExtendFrameIntoClientArea1(long,java.nio.ByteBuffer) -> DwmExtendFrameIntoClientArea1
    boolean DwmIsCompositionEnabled() -> DwmIsCompositionEnabled
    boolean DwmIsExtensionAvailable() -> DwmIsExtensionAvailable
    long GetApplicationHandle() -> GetApplicationHandle
    boolean GetClientRect(long,jogamp.nativewindow.windows.RECT) -> GetClientRect
    boolean GetClientRect1(long,java.nio.ByteBuffer) -> GetClientRect1
    long GetCurrentProcess() -> GetCurrentProcess
    long GetCurrentThread() -> GetCurrentThread
    long GetDC(long) -> GetDC
    boolean GetDeviceGammaRamp(long,java.nio.Buffer) -> GetDeviceGammaRamp
    boolean GetDeviceGammaRamp1(long,java.lang.Object,int,boolean) -> GetDeviceGammaRamp1
    int GetLastError() -> GetLastError
    int GetObjectType(long) -> GetObjectType
    long GetParent(long) -> GetParent
    int GetPixelFormat(long) -> GetPixelFormat
    boolean GetProcessAffinityMask(long,com.jogamp.common.nio.PointerBuffer,com.jogamp.common.nio.PointerBuffer) -> GetProcessAffinityMask
    boolean GetProcessAffinityMask1(long,java.lang.Object,int,boolean,java.lang.Object,int,boolean) -> GetProcessAffinityMask1
    boolean IsWindow(long) -> IsWindow
    boolean IsWindowVisible(long) -> IsWindowVisible
    int ReleaseDC(long,long) -> ReleaseDC
    long SelectObject(long,long) -> SelectObject
    boolean SetDeviceGammaRamp(long,java.nio.Buffer) -> SetDeviceGammaRamp
    boolean SetDeviceGammaRamp1(long,java.lang.Object,int,boolean) -> SetDeviceGammaRamp1
    long SetParent(long,long) -> SetParent
    boolean SetPixelFormat(long,int,jogamp.nativewindow.windows.PIXELFORMATDESCRIPTOR) -> SetPixelFormat
    boolean SetPixelFormat1(long,int,java.nio.ByteBuffer) -> SetPixelFormat1
    boolean SetProcessAffinityMask(long,long) -> SetProcessAffinityMask
    long SetThreadAffinityMask(long,long) -> SetThreadAffinityMask
    boolean ShowWindow(long,int) -> ShowWindow
    boolean SwapBuffers(long) -> SwapBuffers
    long WindowFromDC(long) -> WindowFromDC
jogamp.nativewindow.windows.GDIUtil -> jogamp.nativewindow.windows.GDIUtil:
    boolean DEBUG -> DEBUG
    java.lang.String dummyWindowClassNameBase -> dummyWindowClassNameBase
    jogamp.nativewindow.windows.RegisteredClassFactory dummyWindowClassFactory -> dummyWindowClassFactory
    boolean isInit -> isInit
    jogamp.nativewindow.windows.RegisteredClass dummyWindowClass -> dummyWindowClass
    java.lang.Object dummyWindowSync -> dummyWindowSync
    void <init>() -> <init>
    void initSingleton() -> initSingleton
    void shutdown() -> shutdown
    boolean requiresToolkitLock() -> requiresToolkitLock
    boolean hasThreadingIssues() -> hasThreadingIssues
    long CreateDummyWindow(int,int,int,int) -> CreateDummyWindow
    boolean DestroyDummyWindow(long) -> DestroyDummyWindow
    javax.media.nativewindow.util.Point GetRelativeLocation(long,long,int,int) -> GetRelativeLocation
    boolean IsUndecorated(long) -> IsUndecorated
    boolean IsChild(long) -> IsChild
    void SetProcessThreadsAffinityMask(long,boolean) -> SetProcessThreadsAffinityMask
    void dumpStack() -> dumpStack
    boolean CreateWindowClass0(long,java.lang.String,long,long,long) -> CreateWindowClass0
    boolean DestroyWindowClass0(long,java.lang.String,long) -> DestroyWindowClass0
    long CreateDummyDispatchThread0() -> CreateDummyDispatchThread0
    boolean initIDs0() -> initIDs0
    long getDummyWndProc0() -> getDummyWndProc0
    java.lang.Object GetRelativeLocation0(long,long,int,int) -> GetRelativeLocation0
    boolean IsChild0(long) -> IsChild0
    boolean IsUndecorated0(long) -> IsUndecorated0
    void SetProcessThreadsAffinityMask0(long,boolean) -> SetProcessThreadsAffinityMask0
    long CreateDummyWindow0(long,java.lang.String,long,java.lang.String,int,int,int,int) -> CreateDummyWindow0
    boolean DestroyWindow0(long,long) -> DestroyWindow0
    void <clinit>() -> <clinit>
jogamp.nativewindow.windows.MARGINS -> jogamp.nativewindow.windows.MARGINS:
    com.jogamp.common.nio.StructAccessor accessor -> accessor
    int mdIdx -> mdIdx
    int[] MARGINS_size -> MARGINS_size
    int[] cxLeftWidth_offset -> cxLeftWidth_offset
    int[] cxRightWidth_offset -> cxRightWidth_offset
    int[] cyTopHeight_offset -> cyTopHeight_offset
    int[] cyBottomHeight_offset -> cyBottomHeight_offset
    int size() -> size
    jogamp.nativewindow.windows.MARGINS create() -> create
    jogamp.nativewindow.windows.MARGINS create(java.nio.ByteBuffer) -> create
    void <init>(java.nio.ByteBuffer) -> <init>
    java.nio.ByteBuffer getBuffer() -> getBuffer
    jogamp.nativewindow.windows.MARGINS setCxLeftWidth(int) -> setCxLeftWidth
    int getCxLeftWidth() -> getCxLeftWidth
    jogamp.nativewindow.windows.MARGINS setCxRightWidth(int) -> setCxRightWidth
    int getCxRightWidth() -> getCxRightWidth
    jogamp.nativewindow.windows.MARGINS setCyTopHeight(int) -> setCyTopHeight
    int getCyTopHeight() -> getCyTopHeight
    jogamp.nativewindow.windows.MARGINS setCyBottomHeight(int) -> setCyBottomHeight
    int getCyBottomHeight() -> getCyBottomHeight
    void <clinit>() -> <clinit>
jogamp.nativewindow.windows.PIXELFORMATDESCRIPTOR -> jogamp.nativewindow.windows.PIXELFORMATDESCRIPTOR:
    com.jogamp.common.nio.StructAccessor accessor -> accessor
    int mdIdx -> mdIdx
    int[] PIXELFORMATDESCRIPTOR_size -> PIXELFORMATDESCRIPTOR_size
    int[] nSize_offset -> nSize_offset
    int[] nVersion_offset -> nVersion_offset
    int[] dwFlags_offset -> dwFlags_offset
    int[] iPixelType_offset -> iPixelType_offset
    int[] cColorBits_offset -> cColorBits_offset
    int[] cRedBits_offset -> cRedBits_offset
    int[] cRedShift_offset -> cRedShift_offset
    int[] cGreenBits_offset -> cGreenBits_offset
    int[] cGreenShift_offset -> cGreenShift_offset
    int[] cBlueBits_offset -> cBlueBits_offset
    int[] cBlueShift_offset -> cBlueShift_offset
    int[] cAlphaBits_offset -> cAlphaBits_offset
    int[] cAlphaShift_offset -> cAlphaShift_offset
    int[] cAccumBits_offset -> cAccumBits_offset
    int[] cAccumRedBits_offset -> cAccumRedBits_offset
    int[] cAccumGreenBits_offset -> cAccumGreenBits_offset
    int[] cAccumBlueBits_offset -> cAccumBlueBits_offset
    int[] cAccumAlphaBits_offset -> cAccumAlphaBits_offset
    int[] cDepthBits_offset -> cDepthBits_offset
    int[] cStencilBits_offset -> cStencilBits_offset
    int[] cAuxBuffers_offset -> cAuxBuffers_offset
    int[] iLayerType_offset -> iLayerType_offset
    int[] bReserved_offset -> bReserved_offset
    int[] dwLayerMask_offset -> dwLayerMask_offset
    int[] dwVisibleMask_offset -> dwVisibleMask_offset
    int[] dwDamageMask_offset -> dwDamageMask_offset
    int size() -> size
    jogamp.nativewindow.windows.PIXELFORMATDESCRIPTOR create() -> create
    jogamp.nativewindow.windows.PIXELFORMATDESCRIPTOR create(java.nio.ByteBuffer) -> create
    void <init>(java.nio.ByteBuffer) -> <init>
    java.nio.ByteBuffer getBuffer() -> getBuffer
    jogamp.nativewindow.windows.PIXELFORMATDESCRIPTOR setNSize(short) -> setNSize
    short getNSize() -> getNSize
    jogamp.nativewindow.windows.PIXELFORMATDESCRIPTOR setNVersion(short) -> setNVersion
    short getNVersion() -> getNVersion
    jogamp.nativewindow.windows.PIXELFORMATDESCRIPTOR setDwFlags(int) -> setDwFlags
    int getDwFlags() -> getDwFlags
    jogamp.nativewindow.windows.PIXELFORMATDESCRIPTOR setIPixelType(byte) -> setIPixelType
    byte getIPixelType() -> getIPixelType
    jogamp.nativewindow.windows.PIXELFORMATDESCRIPTOR setCColorBits(byte) -> setCColorBits
    byte getCColorBits() -> getCColorBits
    jogamp.nativewindow.windows.PIXELFORMATDESCRIPTOR setCRedBits(byte) -> setCRedBits
    byte getCRedBits() -> getCRedBits
    jogamp.nativewindow.windows.PIXELFORMATDESCRIPTOR setCRedShift(byte) -> setCRedShift
    byte getCRedShift() -> getCRedShift
    jogamp.nativewindow.windows.PIXELFORMATDESCRIPTOR setCGreenBits(byte) -> setCGreenBits
    byte getCGreenBits() -> getCGreenBits
    jogamp.nativewindow.windows.PIXELFORMATDESCRIPTOR setCGreenShift(byte) -> setCGreenShift
    byte getCGreenShift() -> getCGreenShift
    jogamp.nativewindow.windows.PIXELFORMATDESCRIPTOR setCBlueBits(byte) -> setCBlueBits
    byte getCBlueBits() -> getCBlueBits
    jogamp.nativewindow.windows.PIXELFORMATDESCRIPTOR setCBlueShift(byte) -> setCBlueShift
    byte getCBlueShift() -> getCBlueShift
    jogamp.nativewindow.windows.PIXELFORMATDESCRIPTOR setCAlphaBits(byte) -> setCAlphaBits
    byte getCAlphaBits() -> getCAlphaBits
    jogamp.nativewindow.windows.PIXELFORMATDESCRIPTOR setCAlphaShift(byte) -> setCAlphaShift
    byte getCAlphaShift() -> getCAlphaShift
    jogamp.nativewindow.windows.PIXELFORMATDESCRIPTOR setCAccumBits(byte) -> setCAccumBits
    byte getCAccumBits() -> getCAccumBits
    jogamp.nativewindow.windows.PIXELFORMATDESCRIPTOR setCAccumRedBits(byte) -> setCAccumRedBits
    byte getCAccumRedBits() -> getCAccumRedBits
    jogamp.nativewindow.windows.PIXELFORMATDESCRIPTOR setCAccumGreenBits(byte) -> setCAccumGreenBits
    byte getCAccumGreenBits() -> getCAccumGreenBits
    jogamp.nativewindow.windows.PIXELFORMATDESCRIPTOR setCAccumBlueBits(byte) -> setCAccumBlueBits
    byte getCAccumBlueBits() -> getCAccumBlueBits
    jogamp.nativewindow.windows.PIXELFORMATDESCRIPTOR setCAccumAlphaBits(byte) -> setCAccumAlphaBits
    byte getCAccumAlphaBits() -> getCAccumAlphaBits
    jogamp.nativewindow.windows.PIXELFORMATDESCRIPTOR setCDepthBits(byte) -> setCDepthBits
    byte getCDepthBits() -> getCDepthBits
    jogamp.nativewindow.windows.PIXELFORMATDESCRIPTOR setCStencilBits(byte) -> setCStencilBits
    byte getCStencilBits() -> getCStencilBits
    jogamp.nativewindow.windows.PIXELFORMATDESCRIPTOR setCAuxBuffers(byte) -> setCAuxBuffers
    byte getCAuxBuffers() -> getCAuxBuffers
    jogamp.nativewindow.windows.PIXELFORMATDESCRIPTOR setILayerType(byte) -> setILayerType
    byte getILayerType() -> getILayerType
    jogamp.nativewindow.windows.PIXELFORMATDESCRIPTOR setBReserved(byte) -> setBReserved
    byte getBReserved() -> getBReserved
    jogamp.nativewindow.windows.PIXELFORMATDESCRIPTOR setDwLayerMask(int) -> setDwLayerMask
    int getDwLayerMask() -> getDwLayerMask
    jogamp.nativewindow.windows.PIXELFORMATDESCRIPTOR setDwVisibleMask(int) -> setDwVisibleMask
    int getDwVisibleMask() -> getDwVisibleMask
    jogamp.nativewindow.windows.PIXELFORMATDESCRIPTOR setDwDamageMask(int) -> setDwDamageMask
    int getDwDamageMask() -> getDwDamageMask
    void <clinit>() -> <clinit>
jogamp.nativewindow.windows.RECT -> jogamp.nativewindow.windows.RECT:
    com.jogamp.common.nio.StructAccessor accessor -> accessor
    int mdIdx -> mdIdx
    int[] RECT_size -> RECT_size
    int[] left_offset -> left_offset
    int[] top_offset -> top_offset
    int[] right_offset -> right_offset
    int[] bottom_offset -> bottom_offset
    int size() -> size
    jogamp.nativewindow.windows.RECT create() -> create
    jogamp.nativewindow.windows.RECT create(java.nio.ByteBuffer) -> create
    void <init>(java.nio.ByteBuffer) -> <init>
    java.nio.ByteBuffer getBuffer() -> getBuffer
    jogamp.nativewindow.windows.RECT setLeft(int) -> setLeft
    int getLeft() -> getLeft
    jogamp.nativewindow.windows.RECT setTop(int) -> setTop
    int getTop() -> getTop
    jogamp.nativewindow.windows.RECT setRight(int) -> setRight
    int getRight() -> getRight
    jogamp.nativewindow.windows.RECT setBottom(int) -> setBottom
    int getBottom() -> getBottom
    void <clinit>() -> <clinit>
jogamp.nativewindow.windows.RGBQUAD -> jogamp.nativewindow.windows.RGBQUAD:
    com.jogamp.common.nio.StructAccessor accessor -> accessor
    int mdIdx -> mdIdx
    int[] RGBQUAD_size -> RGBQUAD_size
    int[] rgbBlue_offset -> rgbBlue_offset
    int[] rgbGreen_offset -> rgbGreen_offset
    int[] rgbRed_offset -> rgbRed_offset
    int[] rgbReserved_offset -> rgbReserved_offset
    int size() -> size
    jogamp.nativewindow.windows.RGBQUAD create() -> create
    jogamp.nativewindow.windows.RGBQUAD create(java.nio.ByteBuffer) -> create
    void <init>(java.nio.ByteBuffer) -> <init>
    java.nio.ByteBuffer getBuffer() -> getBuffer
    jogamp.nativewindow.windows.RGBQUAD setRgbBlue(byte) -> setRgbBlue
    byte getRgbBlue() -> getRgbBlue
    jogamp.nativewindow.windows.RGBQUAD setRgbGreen(byte) -> setRgbGreen
    byte getRgbGreen() -> getRgbGreen
    jogamp.nativewindow.windows.RGBQUAD setRgbRed(byte) -> setRgbRed
    byte getRgbRed() -> getRgbRed
    jogamp.nativewindow.windows.RGBQUAD setRgbReserved(byte) -> setRgbReserved
    byte getRgbReserved() -> getRgbReserved
    void <clinit>() -> <clinit>
jogamp.nativewindow.windows.RegisteredClass -> jogamp.nativewindow.windows.RegisteredClass:
    long hInstance -> hInstance
    java.lang.String className -> className
    long hDDTCtx -> hDDTCtx
    void <init>(long,java.lang.String,long) -> <init>
    long getHInstance() -> getHInstance
    java.lang.String getName() -> getName
    long getHDispThreadContext() -> getHDispThreadContext
    java.lang.String toString() -> toString
jogamp.nativewindow.windows.RegisteredClassFactory -> jogamp.nativewindow.windows.RegisteredClassFactory:
    boolean DEBUG -> DEBUG
    java.util.ArrayList registeredFactories -> registeredFactories
    long hInstance -> hInstance
    java.lang.String classBaseName -> classBaseName
    long wndProc -> wndProc
    boolean useDummyDispatchThread -> useDummyDispatchThread
    long iconSmallHandle -> iconSmallHandle
    long iconBigHandle -> iconBigHandle
    jogamp.nativewindow.windows.RegisteredClass sharedClass -> sharedClass
    int classIter -> classIter
    int sharedRefCount -> sharedRefCount
    java.lang.Object sync -> sync
    java.lang.String toHexString(long) -> toHexString
    java.lang.String toString() -> toString
    void shutdownSharedClasses() -> shutdownSharedClasses
    long getHInstance() -> getHInstance
    void <init>(java.lang.String,long,boolean,long,long) -> <init>
    jogamp.nativewindow.windows.RegisteredClass getSharedClass() -> getSharedClass
    void releaseSharedClass() -> releaseSharedClass
    int getSharedRefCount() -> getSharedRefCount
    void <clinit>() -> <clinit>
jogamp.nativewindow.x11.X11Lib -> jogamp.nativewindow.x11.X11Lib:
    int VisualNoMask -> VisualNoMask
    int VisualIDMask -> VisualIDMask
    int VisualScreenMask -> VisualScreenMask
    int VisualDepthMask -> VisualDepthMask
    int VisualClassMask -> VisualClassMask
    int VisualRedMaskMask -> VisualRedMaskMask
    int VisualGreenMaskMask -> VisualGreenMaskMask
    int VisualBlueMaskMask -> VisualBlueMaskMask
    int VisualColormapSizeMask -> VisualColormapSizeMask
    int VisualBitsPerRGBMask -> VisualBitsPerRGBMask
    int VisualAllMask -> VisualAllMask
    int PictFormatID -> PictFormatID
    int PictFormatType -> PictFormatType
    int PictFormatDepth -> PictFormatDepth
    int PictFormatRed -> PictFormatRed
    int PictFormatRedMask -> PictFormatRedMask
    int PictFormatGreen -> PictFormatGreen
    int PictFormatGreenMask -> PictFormatGreenMask
    int PictFormatBlue -> PictFormatBlue
    int PictFormatBlueMask -> PictFormatBlueMask
    int PictFormatAlpha -> PictFormatAlpha
    int PictFormatAlphaMask -> PictFormatAlphaMask
    int PictFormatColormap -> PictFormatColormap
    void <init>() -> <init>
    int DefaultScreen(long) -> DefaultScreen
    long RootWindow(long,int) -> RootWindow
    int ScreenCount(long) -> ScreenCount
    long XCreatePixmap(long,long,int,int,int) -> XCreatePixmap
    java.lang.String XDisplayString(long) -> XDisplayString
    boolean XF86VidModeGetGammaRamp(long,int,int,java.nio.ShortBuffer,java.nio.ShortBuffer,java.nio.ShortBuffer) -> XF86VidModeGetGammaRamp
    boolean XF86VidModeGetGammaRamp1(long,int,int,java.lang.Object,int,boolean,java.lang.Object,int,boolean,java.lang.Object,int,boolean) -> XF86VidModeGetGammaRamp1
    boolean XF86VidModeGetGammaRamp(long,int,int,short[],int,short[],int,short[],int) -> XF86VidModeGetGammaRamp
    boolean XF86VidModeGetGammaRampSize(long,int,java.nio.IntBuffer) -> XF86VidModeGetGammaRampSize
    boolean XF86VidModeGetGammaRampSize1(long,int,java.lang.Object,int,boolean) -> XF86VidModeGetGammaRampSize1
    boolean XF86VidModeGetGammaRampSize(long,int,int[],int) -> XF86VidModeGetGammaRampSize
    boolean XF86VidModeSetGammaRamp(long,int,int,java.nio.ShortBuffer,java.nio.ShortBuffer,java.nio.ShortBuffer) -> XF86VidModeSetGammaRamp
    boolean XF86VidModeSetGammaRamp1(long,int,int,java.lang.Object,int,boolean,java.lang.Object,int,boolean,java.lang.Object,int,boolean) -> XF86VidModeSetGammaRamp1
    boolean XF86VidModeSetGammaRamp(long,int,int,short[],int,short[],int,short[],int) -> XF86VidModeSetGammaRamp
    int XFlush(long) -> XFlush
    int XFree(long) -> XFree
    int XFreePixmap(long,long) -> XFreePixmap
    long XOpenDisplay(java.lang.String) -> XOpenDisplay
    jogamp.nativewindow.x11.XRenderPictFormat XRenderFindVisualFormat(long,long) -> XRenderFindVisualFormat
    java.nio.ByteBuffer XRenderFindVisualFormat1(long,long) -> XRenderFindVisualFormat1
    int XSync(long,boolean) -> XSync
    long XSynchronize(long,boolean) -> XSynchronize
    long XineramaGetLibHandle() -> XineramaGetLibHandle
    long XineramaGetQueryFunc(long) -> XineramaGetQueryFunc
    boolean XineramaIsEnabled(long,long) -> XineramaIsEnabled
    boolean XineramaReleaseLibHandle(long) -> XineramaReleaseLibHandle
    boolean XRenderFindVisualFormat(long,long,jogamp.nativewindow.x11.XRenderPictFormat) -> XRenderFindVisualFormat
    boolean XRenderFindVisualFormat1(long,long,java.nio.ByteBuffer) -> XRenderFindVisualFormat1
    jogamp.nativewindow.x11.XVisualInfo[] XGetVisualInfo(long,long,jogamp.nativewindow.x11.XVisualInfo,int[],int) -> XGetVisualInfo
    java.nio.ByteBuffer XGetVisualInfo1(long,long,java.nio.ByteBuffer,java.lang.Object,int) -> XGetVisualInfo1
    int GetVisualIDFromWindow(long,long) -> GetVisualIDFromWindow
    int DefaultVisualID(long,int) -> DefaultVisualID
    long CreateWindow(long,long,int,int,int,int,boolean,boolean) -> CreateWindow
    void DestroyWindow(long,long) -> DestroyWindow
    void SetWindowPosSize(long,long,int,int,int,int) -> SetWindowPosSize
    javax.media.nativewindow.util.Point GetRelativeLocation(long,int,long,long,int,int) -> GetRelativeLocation
    java.lang.Object GetRelativeLocation0(long,int,long,long,int,int) -> GetRelativeLocation0
    boolean QueryExtension(long,java.lang.String) -> QueryExtension
    boolean QueryExtension0(long,java.lang.String) -> QueryExtension0
    int XCloseDisplay(long) -> XCloseDisplay
    void XUnlockDisplay(long) -> XUnlockDisplay
    void XLockDisplay(long) -> XLockDisplay
    int getFirstElement(java.nio.IntBuffer) -> getFirstElement
    int getFirstElement(int[],int) -> getFirstElement
jogamp.nativewindow.x11.X11Util -> jogamp.nativewindow.x11.X11Util:
    boolean DEBUG -> DEBUG
    boolean ATI_HAS_XCLOSEDISPLAY_BUG -> ATI_HAS_XCLOSEDISPLAY_BUG
    boolean HAS_XCLOSEDISPLAY_BUG -> HAS_XCLOSEDISPLAY_BUG
    boolean ATI_HAS_MULTITHREADING_BUG -> ATI_HAS_MULTITHREADING_BUG
    boolean XSYNC_ENABLED -> XSYNC_ENABLED
    boolean XERROR_STACKDUMP -> XERROR_STACKDUMP
    boolean TRACE_DISPLAY_LIFECYCLE -> TRACE_DISPLAY_LIFECYCLE
    java.lang.String nullDisplayName -> nullDisplayName
    boolean isInit -> isInit
    boolean markAllDisplaysUnclosable -> markAllDisplaysUnclosable
    boolean hasThreadingIssues -> hasThreadingIssues
    java.lang.Object setX11ErrorHandlerLock -> setX11ErrorHandlerLock
    java.lang.String X11_EXTENSION_ATIFGLRXDRI -> X11_EXTENSION_ATIFGLRXDRI
    java.lang.String X11_EXTENSION_ATIFGLEXTENSION -> X11_EXTENSION_ATIFGLEXTENSION
    java.lang.Object globalLock -> globalLock
    com.jogamp.common.util.LongObjectHashMap openDisplayMap -> openDisplayMap
    java.util.List openDisplayList -> openDisplayList
    java.util.List reusableDisplayList -> reusableDisplayList
    java.util.List pendingDisplayList -> pendingDisplayList
    java.util.HashMap displayXineramaEnabledMap -> displayXineramaEnabledMap
    boolean XineramaFetched -> XineramaFetched
    long XineramaLibHandle -> XineramaLibHandle
    long XineramaQueryFunc -> XineramaQueryFunc
    void initSingleton() -> initSingleton
    void shutdown() -> shutdown
    boolean requiresToolkitLock() -> requiresToolkitLock
    boolean hasThreadingIssues() -> hasThreadingIssues
    void setX11ErrorHandler(boolean,boolean) -> setX11ErrorHandler
    java.lang.String getNullDisplayName() -> getNullDisplayName
    void markAllDisplaysUnclosable() -> markAllDisplaysUnclosable
    boolean getMarkAllDisplaysUnclosable() -> getMarkAllDisplaysUnclosable
    void <init>() -> <init>
    int closePendingDisplayConnections() -> closePendingDisplayConnections
    int getOpenDisplayConnectionNumber() -> getOpenDisplayConnectionNumber
    void dumpOpenDisplayConnections() -> dumpOpenDisplayConnections
    int getReusableDisplayConnectionNumber() -> getReusableDisplayConnectionNumber
    int getPendingDisplayConnectionNumber() -> getPendingDisplayConnectionNumber
    void dumpPendingDisplayConnections() -> dumpPendingDisplayConnections
    boolean markDisplayUncloseable(long) -> markDisplayUncloseable
    long openDisplay(java.lang.String) -> openDisplay
    void closeDisplay(long) -> closeDisplay
    jogamp.nativewindow.x11.X11Util$NamedDisplay getNamedDisplay(long) -> getNamedDisplay
    java.lang.String validateDisplayName(java.lang.String) -> validateDisplayName
    java.lang.String validateDisplayName(java.lang.String,long) -> validateDisplayName
    long XOpenDisplay(java.lang.String) -> XOpenDisplay
    int XCloseDisplay(long) -> XCloseDisplay
    boolean XineramaIsEnabled(com.jogamp.nativewindow.x11.X11GraphicsDevice) -> XineramaIsEnabled
    boolean XineramaIsEnabled(long) -> XineramaIsEnabled
    java.lang.String getCurrentThreadName() -> getCurrentThreadName
    void dumpStack() -> dumpStack
    boolean initialize0(boolean) -> initialize0
    void shutdown0() -> shutdown0
    void setX11ErrorHandler0(boolean,boolean) -> setX11ErrorHandler0
    void <clinit>() -> <clinit>
jogamp.nativewindow.x11.X11Util$NamedDisplay -> jogamp.nativewindow.x11.X11Util$NamedDisplay:
    java.lang.String name -> name
    long handle -> handle
    int hash32 -> hash32
    int refCount -> refCount
    boolean unCloseable -> unCloseable
    java.lang.Throwable creationStack -> creationStack
    void <init>(java.lang.String,long) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void addRef() -> addRef
    void removeRef() -> removeRef
    java.lang.String getName() -> getName
    long getHandle() -> getHandle
    int getRefCount() -> getRefCount
    void setUncloseable(boolean) -> setUncloseable
    boolean isUncloseable() -> isUncloseable
    java.lang.Throwable getCreationStack() -> getCreationStack
    java.lang.String toString() -> toString
jogamp.nativewindow.x11.XRenderDirectFormat -> jogamp.nativewindow.x11.XRenderDirectFormat:
    com.jogamp.common.nio.StructAccessor accessor -> accessor
    int mdIdx -> mdIdx
    int[] XRenderDirectFormat_size -> XRenderDirectFormat_size
    int[] red_offset -> red_offset
    int[] redMask_offset -> redMask_offset
    int[] green_offset -> green_offset
    int[] greenMask_offset -> greenMask_offset
    int[] blue_offset -> blue_offset
    int[] blueMask_offset -> blueMask_offset
    int[] alpha_offset -> alpha_offset
    int[] alphaMask_offset -> alphaMask_offset
    int size() -> size
    jogamp.nativewindow.x11.XRenderDirectFormat create() -> create
    jogamp.nativewindow.x11.XRenderDirectFormat create(java.nio.ByteBuffer) -> create
    void <init>(java.nio.ByteBuffer) -> <init>
    java.nio.ByteBuffer getBuffer() -> getBuffer
    jogamp.nativewindow.x11.XRenderDirectFormat setRed(short) -> setRed
    short getRed() -> getRed
    jogamp.nativewindow.x11.XRenderDirectFormat setRedMask(short) -> setRedMask
    short getRedMask() -> getRedMask
    jogamp.nativewindow.x11.XRenderDirectFormat setGreen(short) -> setGreen
    short getGreen() -> getGreen
    jogamp.nativewindow.x11.XRenderDirectFormat setGreenMask(short) -> setGreenMask
    short getGreenMask() -> getGreenMask
    jogamp.nativewindow.x11.XRenderDirectFormat setBlue(short) -> setBlue
    short getBlue() -> getBlue
    jogamp.nativewindow.x11.XRenderDirectFormat setBlueMask(short) -> setBlueMask
    short getBlueMask() -> getBlueMask
    jogamp.nativewindow.x11.XRenderDirectFormat setAlpha(short) -> setAlpha
    short getAlpha() -> getAlpha
    jogamp.nativewindow.x11.XRenderDirectFormat setAlphaMask(short) -> setAlphaMask
    short getAlphaMask() -> getAlphaMask
    void <clinit>() -> <clinit>
jogamp.nativewindow.x11.XRenderPictFormat -> jogamp.nativewindow.x11.XRenderPictFormat:
    com.jogamp.common.nio.StructAccessor accessor -> accessor
    int mdIdx -> mdIdx
    int[] XRenderPictFormat_size -> XRenderPictFormat_size
    int[] id_offset -> id_offset
    int[] type_offset -> type_offset
    int[] depth_offset -> depth_offset
    int[] direct_offset -> direct_offset
    int[] direct_size -> direct_size
    int[] colormap_offset -> colormap_offset
    int size() -> size
    jogamp.nativewindow.x11.XRenderPictFormat create() -> create
    jogamp.nativewindow.x11.XRenderPictFormat create(java.nio.ByteBuffer) -> create
    void <init>(java.nio.ByteBuffer) -> <init>
    java.nio.ByteBuffer getBuffer() -> getBuffer
    jogamp.nativewindow.x11.XRenderPictFormat setId(long) -> setId
    long getId() -> getId
    jogamp.nativewindow.x11.XRenderPictFormat setType(int) -> setType
    int getType() -> getType
    jogamp.nativewindow.x11.XRenderPictFormat setDepth(int) -> setDepth
    int getDepth() -> getDepth
    jogamp.nativewindow.x11.XRenderDirectFormat getDirect() -> getDirect
    jogamp.nativewindow.x11.XRenderPictFormat setColormap(long) -> setColormap
    long getColormap() -> getColormap
    void <clinit>() -> <clinit>
jogamp.nativewindow.x11.XVisualInfo -> jogamp.nativewindow.x11.XVisualInfo:
    com.jogamp.common.nio.StructAccessor accessor -> accessor
    int mdIdx -> mdIdx
    int[] XVisualInfo_size -> XVisualInfo_size
    int[] visual_offset -> visual_offset
    int[] visualid_offset -> visualid_offset
    int[] screen_offset -> screen_offset
    int[] depth_offset -> depth_offset
    int[] c_class_offset -> c_class_offset
    int[] red_mask_offset -> red_mask_offset
    int[] green_mask_offset -> green_mask_offset
    int[] blue_mask_offset -> blue_mask_offset
    int[] colormap_size_offset -> colormap_size_offset
    int[] bits_per_rgb_offset -> bits_per_rgb_offset
    int size() -> size
    jogamp.nativewindow.x11.XVisualInfo create() -> create
    jogamp.nativewindow.x11.XVisualInfo create(java.nio.ByteBuffer) -> create
    void <init>(java.nio.ByteBuffer) -> <init>
    java.nio.ByteBuffer getBuffer() -> getBuffer
    jogamp.nativewindow.x11.XVisualInfo setVisual(long) -> setVisual
    long getVisual() -> getVisual
    jogamp.nativewindow.x11.XVisualInfo setVisualid(long) -> setVisualid
    long getVisualid() -> getVisualid
    jogamp.nativewindow.x11.XVisualInfo setScreen(int) -> setScreen
    int getScreen() -> getScreen
    jogamp.nativewindow.x11.XVisualInfo setDepth(int) -> setDepth
    int getDepth() -> getDepth
    jogamp.nativewindow.x11.XVisualInfo setC_class(int) -> setC_class
    int getC_class() -> getC_class
    jogamp.nativewindow.x11.XVisualInfo setRed_mask(long) -> setRed_mask
    long getRed_mask() -> getRed_mask
    jogamp.nativewindow.x11.XVisualInfo setGreen_mask(long) -> setGreen_mask
    long getGreen_mask() -> getGreen_mask
    jogamp.nativewindow.x11.XVisualInfo setBlue_mask(long) -> setBlue_mask
    long getBlue_mask() -> getBlue_mask
    jogamp.nativewindow.x11.XVisualInfo setColormap_size(int) -> setColormap_size
    int getColormap_size() -> getColormap_size
    jogamp.nativewindow.x11.XVisualInfo setBits_per_rgb(int) -> setBits_per_rgb
    int getBits_per_rgb() -> getBits_per_rgb
    jogamp.nativewindow.x11.XVisualInfo create(jogamp.nativewindow.x11.XVisualInfo) -> create
    void <clinit>() -> <clinit>
jogamp.newt.Debug -> jogamp.newt.Debug:
    boolean verbose -> verbose
    boolean debugAll -> debugAll
    void <init>() -> <init>
    void initSingleton() -> initSingleton
    boolean verbose() -> verbose
    boolean debugAll() -> debugAll
    boolean debug(java.lang.String) -> debug
    void access$000(java.lang.String) -> access$000
    void <clinit>() -> <clinit>
jogamp.newt.Debug$1 -> jogamp.newt.Debug$1:
    void <init>() -> <init>
    java.lang.Object run() -> run
jogamp.newt.DefaultEDTUtil -> jogamp.newt.DefaultEDTUtil:
    boolean DEBUG -> DEBUG
    java.lang.Object TASK_ATTACHMENT_STOP -> TASK_ATTACHMENT_STOP
    java.lang.Object TASK_ATTACHMENT_TEST_ERROR -> TASK_ATTACHMENT_TEST_ERROR
    java.lang.Object edtLock -> edtLock
    java.lang.ThreadGroup threadGroup -> threadGroup
    java.lang.String name -> name
    java.lang.Runnable dispatchMessages -> dispatchMessages
    jogamp.newt.DefaultEDTUtil$NEDT edt -> edt
    int start_iter -> start_iter
    long pollPeriod -> pollPeriod
    java.lang.Runnable nullTask -> nullTask
    void <init>(java.lang.ThreadGroup,java.lang.String,java.lang.Runnable) -> <init>
    long getPollPeriod() -> getPollPeriod
    void setPollPeriod(long) -> setPollPeriod
    void start() -> start
    void startImpl() -> startImpl
    boolean isCurrentThreadEDT() -> isCurrentThreadEDT
    boolean isCurrentThreadNEDT() -> isCurrentThreadNEDT
    boolean isCurrentThreadEDTorNEDT() -> isCurrentThreadEDTorNEDT
    boolean isRunning() -> isRunning
    boolean invokeStop(boolean,java.lang.Runnable) -> invokeStop
    boolean invokeAndWaitError(java.lang.Runnable) -> invokeAndWaitError
    boolean invoke(boolean,java.lang.Runnable) -> invoke
    boolean invokeImpl(boolean,java.lang.Runnable,boolean,boolean) -> invokeImpl
    boolean waitUntilIdle() -> waitUntilIdle
    boolean waitUntilStopped() -> waitUntilStopped
    java.lang.Runnable access$000(jogamp.newt.DefaultEDTUtil) -> access$000
    long access$100() -> access$100
    java.lang.Object access$200() -> access$200
    java.lang.Object access$300() -> access$300
    java.lang.Object access$400(jogamp.newt.DefaultEDTUtil) -> access$400
    void <clinit>() -> <clinit>
jogamp.newt.DefaultEDTUtil$1 -> jogamp.newt.DefaultEDTUtil$1:
    void <init>() -> <init>
    void run() -> run
jogamp.newt.DefaultEDTUtil$NEDT -> jogamp.newt.DefaultEDTUtil$NEDT:
    boolean shouldStop -> shouldStop
    boolean isRunning -> isRunning
    java.util.ArrayList tasks -> tasks
    jogamp.newt.DefaultEDTUtil this$0 -> this$0
    void <init>(jogamp.newt.DefaultEDTUtil,java.lang.ThreadGroup,java.lang.String) -> <init>
    boolean isRunning() -> isRunning
    void start() -> start
    void validateNoRecursiveLocksHold() -> validateNoRecursiveLocksHold
    void run() -> run
jogamp.newt.DisplayImpl -> jogamp.newt.DisplayImpl:
    int serialno -> serialno
    boolean pngUtilAvail -> pngUtilAvail
    java.util.ArrayList pointerIconList -> pointerIconList
    java.lang.String nilString -> nilString
    java.lang.Object eventsLock -> eventsLock
    java.util.ArrayList events -> events
    boolean haveEvents -> haveEvents
    java.lang.Runnable dispatchMessagesRunnable -> dispatchMessagesRunnable
    com.jogamp.newt.util.EDTUtil edtUtil -> edtUtil
    int id -> id
    java.lang.String name -> name
    java.lang.String type -> type
    java.lang.String fqname -> fqname
    int hashCode -> hashCode
    int refCount -> refCount
    boolean exclusive -> exclusive
    javax.media.nativewindow.AbstractGraphicsDevice aDevice -> aDevice
    void <init>() -> <init>
    boolean isPNGUtilAvailable() -> isPNGUtilAvailable
    void destroyAllPointerIconFromList(long) -> destroyAllPointerIconFromList
    javax.media.nativewindow.util.PixelFormat getNativePointerIconPixelFormat() -> getNativePointerIconPixelFormat
    boolean getNativePointerIconForceDirectNIO() -> getNativePointerIconForceDirectNIO
    com.jogamp.newt.Display$PointerIcon createPointerIcon(com.jogamp.common.util.IOUtil$ClassResources,int,int) -> createPointerIcon
    com.jogamp.newt.Display$PointerIcon createPointerIcon(javax.media.nativewindow.util.PixelRectangle,int,int) -> createPointerIcon
    long createPointerIconImplChecked(javax.media.nativewindow.util.PixelFormat,int,int,java.nio.ByteBuffer,int,int) -> createPointerIconImplChecked
    long createPointerIconImpl(javax.media.nativewindow.util.PixelFormat,int,int,java.nio.ByteBuffer,int,int) -> createPointerIconImpl
    void destroyPointerIconImpl(long,long) -> destroyPointerIconImpl
    void initSingleton() -> initSingleton
    java.lang.Class getDisplayClass(java.lang.String) -> getDisplayClass
    com.jogamp.newt.Display create(java.lang.String,java.lang.String,long,boolean) -> create
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void createNative() -> createNative
    com.jogamp.newt.util.EDTUtil createEDTUtil() -> createEDTUtil
    com.jogamp.newt.util.EDTUtil setEDTUtil(com.jogamp.newt.util.EDTUtil) -> setEDTUtil
    com.jogamp.newt.util.EDTUtil getEDTUtil() -> getEDTUtil
    void stopEDT(com.jogamp.newt.util.EDTUtil,java.lang.Runnable) -> stopEDT
    void runOnEDTIfAvail(boolean,java.lang.Runnable) -> runOnEDTIfAvail
    boolean validateEDTStopped() -> validateEDTStopped
    void destroy() -> destroy
    void shutdownAll() -> shutdownAll
    int addReference() -> addReference
    int removeReference() -> removeReference
    int getReferenceCount() -> getReferenceCount
    void createNativeImpl() -> createNativeImpl
    void closeNativeImpl(javax.media.nativewindow.AbstractGraphicsDevice) -> closeNativeImpl
    int getId() -> getId
    java.lang.String getType() -> getType
    java.lang.String getName() -> getName
    java.lang.String getFQName() -> getFQName
    boolean isExclusive() -> isExclusive
    java.lang.String validateDisplayName(java.lang.String,long) -> validateDisplayName
    java.lang.String getFQName(java.lang.String,java.lang.String,int) -> getFQName
    long getHandle() -> getHandle
    javax.media.nativewindow.AbstractGraphicsDevice getGraphicsDevice() -> getGraphicsDevice
    boolean isNativeValid() -> isNativeValid
    boolean isNativeValidAsync() -> isNativeValidAsync
    boolean isEDTRunning() -> isEDTRunning
    java.lang.String toString() -> toString
    void dispatchMessagesNative() -> dispatchMessagesNative
    void dispatchMessage(com.jogamp.newt.event.NEWTEvent) -> dispatchMessage
    void dispatchMessage(jogamp.newt.event.NEWTEventTask) -> dispatchMessage
    void dispatchMessages() -> dispatchMessages
    void enqueueEvent(boolean,com.jogamp.newt.event.NEWTEvent) -> enqueueEvent
    java.lang.Object runWithLockedDevice(javax.media.nativewindow.AbstractGraphicsDevice,jogamp.newt.DisplayImpl$DisplayRunnable) -> runWithLockedDevice
    java.lang.Object runWithLockedDisplayDevice(jogamp.newt.DisplayImpl$DisplayRunnable) -> runWithLockedDisplayDevice
    boolean access$000() -> access$000
    boolean access$100() -> access$100
    void access$200(jogamp.newt.DisplayImpl,long) -> access$200
    void <clinit>() -> <clinit>
jogamp.newt.DisplayImpl$1 -> jogamp.newt.DisplayImpl$1:
    void <init>() -> <init>
    void run() -> run
jogamp.newt.DisplayImpl$2 -> jogamp.newt.DisplayImpl$2:
    com.jogamp.common.util.IOUtil$ClassResources val$pngResource -> val$pngResource
    int val$hotX -> val$hotX
    int val$hotY -> val$hotY
    jogamp.newt.PointerIconImpl[] val$res -> val$res
    jogamp.newt.DisplayImpl this$0 -> this$0
    void <init>(jogamp.newt.DisplayImpl,com.jogamp.common.util.IOUtil$ClassResources,int,int,jogamp.newt.PointerIconImpl[]) -> <init>
    void run() -> run
jogamp.newt.DisplayImpl$3 -> jogamp.newt.DisplayImpl$3:
    javax.media.nativewindow.util.PixelRectangle val$fpixelrect -> val$fpixelrect
    int val$hotX -> val$hotX
    int val$hotY -> val$hotY
    jogamp.newt.PointerIconImpl[] val$res -> val$res
    jogamp.newt.DisplayImpl this$0 -> this$0
    void <init>(jogamp.newt.DisplayImpl,javax.media.nativewindow.util.PixelRectangle,int,int,jogamp.newt.PointerIconImpl[]) -> <init>
    void run() -> run
jogamp.newt.DisplayImpl$4 -> jogamp.newt.DisplayImpl$4:
    jogamp.newt.DisplayImpl val$f_dpy -> val$f_dpy
    jogamp.newt.DisplayImpl this$0 -> this$0
    void <init>(jogamp.newt.DisplayImpl,jogamp.newt.DisplayImpl) -> <init>
    void run() -> run
jogamp.newt.DisplayImpl$5 -> jogamp.newt.DisplayImpl$5:
    javax.media.nativewindow.AbstractGraphicsDevice val$f_aDevice -> val$f_aDevice
    jogamp.newt.DisplayImpl val$f_dpy -> val$f_dpy
    jogamp.newt.DisplayImpl this$0 -> this$0
    void <init>(jogamp.newt.DisplayImpl,javax.media.nativewindow.AbstractGraphicsDevice,jogamp.newt.DisplayImpl) -> <init>
    void run() -> run
jogamp.newt.DisplayImpl$6 -> jogamp.newt.DisplayImpl$6:
    jogamp.newt.DisplayImpl val$d -> val$d
    javax.media.nativewindow.AbstractGraphicsDevice val$f_aDevice -> val$f_aDevice
    void <init>(jogamp.newt.DisplayImpl,javax.media.nativewindow.AbstractGraphicsDevice) -> <init>
    void run() -> run
jogamp.newt.DisplayImpl$7 -> jogamp.newt.DisplayImpl$7:
    jogamp.newt.DisplayImpl this$0 -> this$0
    void <init>(jogamp.newt.DisplayImpl) -> <init>
    void run() -> run
jogamp.newt.DisplayImpl$DisplayRunnable -> jogamp.newt.DisplayImpl$DisplayRunnable:
    java.lang.Object run(long) -> run
jogamp.newt.MonitorDeviceImpl -> jogamp.newt.MonitorDeviceImpl:
    void <init>(jogamp.newt.ScreenImpl,int,javax.media.nativewindow.util.DimensionImmutable,javax.media.nativewindow.util.Rectangle,javax.media.nativewindow.util.Rectangle,com.jogamp.newt.MonitorMode,com.jogamp.common.util.ArrayHashSet) -> <init>
    com.jogamp.newt.MonitorMode queryCurrentMode() -> queryCurrentMode
    boolean setCurrentMode(com.jogamp.newt.MonitorMode) -> setCurrentMode
    void setCurrentModeValue(com.jogamp.newt.MonitorMode) -> setCurrentModeValue
    javax.media.nativewindow.util.Rectangle getMutuableViewportPU() -> getMutuableViewportPU
    javax.media.nativewindow.util.Rectangle getMutuableViewportWU() -> getMutuableViewportWU
    com.jogamp.common.util.ArrayHashSet getSupportedModesImpl() -> getSupportedModesImpl
jogamp.newt.MonitorModeProps -> jogamp.newt.MonitorModeProps:
    int NUM_RESOLUTION_PROPERTIES -> NUM_RESOLUTION_PROPERTIES
    int NUM_SURFACE_SIZE_PROPERTIES -> NUM_SURFACE_SIZE_PROPERTIES
    int NUM_SIZEANDRATE_PROPERTIES -> NUM_SIZEANDRATE_PROPERTIES
    int NUM_MONITOR_MODE_PROPERTIES -> NUM_MONITOR_MODE_PROPERTIES
    int NUM_MONITOR_MODE_PROPERTIES_ALL -> NUM_MONITOR_MODE_PROPERTIES_ALL
    int IDX_MONITOR_MODE_BPP -> IDX_MONITOR_MODE_BPP
    int IDX_MONITOR_MODE_ROT -> IDX_MONITOR_MODE_ROT
    int MIN_MONITOR_DEVICE_PROPERTIES -> MIN_MONITOR_DEVICE_PROPERTIES
    int IDX_MONITOR_DEVICE_VIEWPORT -> IDX_MONITOR_DEVICE_VIEWPORT
    void <init>() -> <init>
    javax.media.nativewindow.util.DimensionImmutable streamInResolution(int[],int) -> streamInResolution
    javax.media.nativewindow.util.SurfaceSize streamInSurfaceSize(javax.media.nativewindow.util.DimensionImmutable,int[],int) -> streamInSurfaceSize
    com.jogamp.newt.MonitorMode$SizeAndRRate streamInSizeAndRRate(javax.media.nativewindow.util.SurfaceSize,int[],int) -> streamInSizeAndRRate
    com.jogamp.newt.MonitorMode streamInMonitorMode0(com.jogamp.newt.MonitorMode$SizeAndRRate,int[],int) -> streamInMonitorMode0
    com.jogamp.newt.MonitorMode streamInMonitorMode(int[],jogamp.newt.MonitorModeProps$Cache,int[],int) -> streamInMonitorMode
    int[] streamOutMonitorMode(com.jogamp.newt.MonitorMode) -> streamOutMonitorMode
    com.jogamp.newt.MonitorDevice streamInMonitorDevice(int[],jogamp.newt.MonitorModeProps$Cache,jogamp.newt.ScreenImpl,int[],int) -> streamInMonitorDevice
    com.jogamp.newt.MonitorMode getByNativeIdAndRotation(java.util.List,int,int) -> getByNativeIdAndRotation
    com.jogamp.newt.MonitorDevice streamInMonitorDevice(int[],jogamp.newt.MonitorModeProps$Cache,jogamp.newt.ScreenImpl,com.jogamp.common.util.ArrayHashSet,com.jogamp.newt.MonitorMode,int[],int) -> streamInMonitorDevice
    int[] streamOutMonitorDevice(com.jogamp.newt.MonitorDevice) -> streamOutMonitorDevice
    void swapRotatePair(int,int[],int,int) -> swapRotatePair
jogamp.newt.MonitorModeProps$Cache -> jogamp.newt.MonitorModeProps$Cache:
    com.jogamp.common.util.ArrayHashSet resolutions -> resolutions
    com.jogamp.common.util.ArrayHashSet surfaceSizes -> surfaceSizes
    com.jogamp.common.util.ArrayHashSet sizeAndRates -> sizeAndRates
    com.jogamp.common.util.ArrayHashSet monitorModes -> monitorModes
    com.jogamp.common.util.ArrayHashSet monitorDevices -> monitorDevices
    void <init>() -> <init>
jogamp.newt.OffscreenWindow -> jogamp.newt.OffscreenWindow:
    long surfaceHandle -> surfaceHandle
    long nextWindowHandle -> nextWindowHandle
    void <init>() -> <init>
    void createNativeImpl() -> createNativeImpl
    void closeNativeImpl() -> closeNativeImpl
    void destroy() -> destroy
    void setSurfaceHandle(long) -> setSurfaceHandle
    long getSurfaceHandle() -> getSurfaceHandle
    void requestFocusImpl(boolean) -> requestFocusImpl
    void setPosition(int,int) -> setPosition
    boolean setFullscreen(boolean) -> setFullscreen
    boolean setFullscreen(java.util.List) -> setFullscreen
    boolean reconfigureWindowImpl(int,int,int,int,int) -> reconfigureWindowImpl
    javax.media.nativewindow.util.Point getLocationOnScreen(javax.media.nativewindow.util.Point) -> getLocationOnScreen
    javax.media.nativewindow.util.Point getLocationOnScreenImpl(int,int) -> getLocationOnScreenImpl
    void updateInsetsImpl(javax.media.nativewindow.util.Insets) -> updateInsetsImpl
    void <clinit>() -> <clinit>
jogamp.newt.PointerIconImpl -> jogamp.newt.PointerIconImpl:
    jogamp.newt.DisplayImpl display -> display
    javax.media.nativewindow.util.PixelFormat pixelformat -> pixelformat
    javax.media.nativewindow.util.DimensionImmutable size -> size
    java.nio.ByteBuffer pixels -> pixels
    javax.media.nativewindow.util.PointImmutable hotspot -> hotspot
    long handle -> handle
    int hashCode -> hashCode
    boolean hashCodeComputed -> hashCodeComputed
    void <init>(jogamp.newt.DisplayImpl,javax.media.nativewindow.util.PixelFormat,javax.media.nativewindow.util.DimensionImmutable,java.nio.ByteBuffer,javax.media.nativewindow.util.PointImmutable,long) -> <init>
    void <init>(jogamp.newt.DisplayImpl,javax.media.nativewindow.util.PixelRectangle,javax.media.nativewindow.util.PointImmutable,long) -> <init>
    int hashCode() -> hashCode
    long getHandle() -> getHandle
    long validatedHandle() -> validatedHandle
    com.jogamp.newt.Display getDisplay() -> getDisplay
    javax.media.nativewindow.util.PixelFormat getPixelformat() -> getPixelformat
    java.nio.ByteBuffer getPixels() -> getPixels
    boolean isValid() -> isValid
    boolean validate() -> validate
    void destroy() -> destroy
    void destroyOnEDT(long) -> destroyOnEDT
    javax.media.nativewindow.util.DimensionImmutable getSize() -> getSize
    int getStride() -> getStride
    boolean isGLOriented() -> isGLOriented
    javax.media.nativewindow.util.PointImmutable getHotspot() -> getHotspot
    java.lang.String toString() -> toString
    jogamp.newt.DisplayImpl access$000(jogamp.newt.PointerIconImpl) -> access$000
jogamp.newt.PointerIconImpl$1 -> jogamp.newt.PointerIconImpl$1:
    jogamp.newt.PointerIconImpl this$0 -> this$0
    void <init>(jogamp.newt.PointerIconImpl) -> <init>
    void run() -> run
jogamp.newt.ScreenImpl -> jogamp.newt.ScreenImpl:
    boolean DEBUG_TEST_SCREENMODE_DISABLED -> DEBUG_TEST_SCREENMODE_DISABLED
    int default_sm_bpp -> default_sm_bpp
    int default_sm_widthmm -> default_sm_widthmm
    int default_sm_heightmm -> default_sm_heightmm
    int default_sm_rate -> default_sm_rate
    int default_sm_rotation -> default_sm_rotation
    jogamp.newt.DisplayImpl display -> display
    int screen_idx -> screen_idx
    java.lang.String fqname -> fqname
    int hashCode -> hashCode
    javax.media.nativewindow.AbstractGraphicsScreen aScreen -> aScreen
    int refCount -> refCount
    javax.media.nativewindow.util.Rectangle virtViewportPU -> virtViewportPU
    javax.media.nativewindow.util.Rectangle virtViewportWU -> virtViewportWU
    javax.media.nativewindow.util.Dimension usrSize -> usrSize
    boolean usrSizeQueried -> usrSizeQueried
    java.util.ArrayList refMonitorModeListener -> refMonitorModeListener
    long tCreated -> tCreated
    void <init>() -> <init>
    void initSingleton() -> initSingleton
    java.lang.Class getScreenClass(java.lang.String) -> getScreenClass
    com.jogamp.newt.Screen create(com.jogamp.newt.Display,int) -> create
    void instantiationFinished() -> instantiationFinished
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void createNative() -> createNative
    void destroy() -> destroy
    int addReference() -> addReference
    int removeReference() -> removeReference
    int getReferenceCount() -> getReferenceCount
    void createNativeImpl() -> createNativeImpl
    void closeNativeImpl() -> closeNativeImpl
    int validateScreenIndex(int) -> validateScreenIndex
    void calcVirtualScreenOriginAndSize(javax.media.nativewindow.util.Rectangle,javax.media.nativewindow.util.Rectangle) -> calcVirtualScreenOriginAndSize
    java.lang.String getFQName() -> getFQName
    void updateVirtualScreenOriginAndSize() -> updateVirtualScreenOriginAndSize
    com.jogamp.newt.Display getDisplay() -> getDisplay
    int getIndex() -> getIndex
    javax.media.nativewindow.AbstractGraphicsScreen getGraphicsScreen() -> getGraphicsScreen
    boolean isNativeValid() -> isNativeValid
    int getX() -> getX
    int getY() -> getY
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    javax.media.nativewindow.util.RectangleImmutable getViewport() -> getViewport
    javax.media.nativewindow.util.RectangleImmutable getViewportInWindowUnits() -> getViewportInWindowUnits
    java.lang.String toString() -> toString
    void collectNativeMonitorModesAndDevicesImpl(jogamp.newt.MonitorModeProps$Cache) -> collectNativeMonitorModesAndDevicesImpl
    boolean updateNativeMonitorDeviceViewportImpl(com.jogamp.newt.MonitorDevice,javax.media.nativewindow.util.Rectangle,javax.media.nativewindow.util.Rectangle) -> updateNativeMonitorDeviceViewportImpl
    com.jogamp.newt.MonitorMode queryCurrentMonitorModeImpl(com.jogamp.newt.MonitorDevice) -> queryCurrentMonitorModeImpl
    boolean setCurrentMonitorModeImpl(com.jogamp.newt.MonitorDevice,com.jogamp.newt.MonitorMode) -> setCurrentMonitorModeImpl
    java.util.List getMonitorModes() -> getMonitorModes
    java.util.List getMonitorDevices() -> getMonitorDevices
    jogamp.newt.ScreenMonitorState getScreenMonitorStatus(boolean) -> getScreenMonitorStatus
    void monitorModeChangeNotify(com.jogamp.newt.event.MonitorEvent) -> monitorModeChangeNotify
    void updateNativeMonitorDevicesViewport() -> updateNativeMonitorDevicesViewport
    void monitorModeChanged(com.jogamp.newt.event.MonitorEvent,boolean) -> monitorModeChanged
    void addMonitorModeListener(com.jogamp.newt.event.MonitorModeListener) -> addMonitorModeListener
    void removeMonitorModeListener(com.jogamp.newt.event.MonitorModeListener) -> removeMonitorModeListener
    com.jogamp.newt.MonitorMode getVirtualMonitorMode(jogamp.newt.MonitorModeProps$Cache,int) -> getVirtualMonitorMode
    com.jogamp.newt.MonitorDevice getVirtualMonitorDevice(jogamp.newt.MonitorModeProps$Cache,int,com.jogamp.newt.MonitorMode) -> getVirtualMonitorDevice
    com.jogamp.newt.MonitorMode queryCurrentMonitorModeIntern(com.jogamp.newt.MonitorDevice) -> queryCurrentMonitorModeIntern
    jogamp.newt.ScreenMonitorState initMonitorState() -> initMonitorState
    int collectNativeMonitorModes(jogamp.newt.MonitorModeProps$Cache) -> collectNativeMonitorModes
    void releaseMonitorState() -> releaseMonitorState
    void shutdown() -> shutdown
    void shutdownAll() -> shutdownAll
    void <clinit>() -> <clinit>
jogamp.newt.ScreenMonitorState -> jogamp.newt.ScreenMonitorState:
    boolean DEBUG -> DEBUG
    com.jogamp.common.util.locks.RecursiveLock lock -> lock
    com.jogamp.common.util.ArrayHashSet allMonitors -> allMonitors
    com.jogamp.common.util.ArrayHashSet allMonitorModes -> allMonitorModes
    java.util.ArrayList listener -> listener
    java.util.HashMap screenFQN2ScreenMonitorState -> screenFQN2ScreenMonitorState
    com.jogamp.common.util.locks.RecursiveLock screen2ScreenMonitorState -> screen2ScreenMonitorState
    void mapScreenMonitorState(java.lang.String,jogamp.newt.ScreenMonitorState) -> mapScreenMonitorState
    void unmapScreenMonitorState(java.lang.String) -> unmapScreenMonitorState
    void unmapScreenMonitorStateUnlocked(java.lang.String) -> unmapScreenMonitorStateUnlocked
    jogamp.newt.ScreenMonitorState getScreenMonitorState(java.lang.String) -> getScreenMonitorState
    jogamp.newt.ScreenMonitorState getScreenMonitorStateUnlocked(java.lang.String) -> getScreenMonitorStateUnlocked
    void lockScreenMonitorState() -> lockScreenMonitorState
    void unlockScreenMonitorState() -> unlockScreenMonitorState
    void <init>(com.jogamp.common.util.ArrayHashSet,com.jogamp.common.util.ArrayHashSet) -> <init>
    com.jogamp.common.util.ArrayHashSet getMonitorDevices() -> getMonitorDevices
    com.jogamp.common.util.ArrayHashSet getMonitorModes() -> getMonitorModes
    int addListener(com.jogamp.newt.event.MonitorModeListener) -> addListener
    int removeListener(com.jogamp.newt.event.MonitorModeListener) -> removeListener
    com.jogamp.newt.MonitorDevice getMonitor(com.jogamp.newt.MonitorDevice) -> getMonitor
    void validateMonitor(com.jogamp.newt.MonitorDevice) -> validateMonitor
    void fireMonitorModeChangeNotify(com.jogamp.newt.MonitorDevice,com.jogamp.newt.MonitorMode) -> fireMonitorModeChangeNotify
    void fireMonitorModeChanged(com.jogamp.newt.MonitorDevice,com.jogamp.newt.MonitorMode,boolean) -> fireMonitorModeChanged
    void lock() -> lock
    void unlock() -> unlock
    void <clinit>() -> <clinit>
jogamp.newt.WindowImpl -> jogamp.newt.WindowImpl:
    boolean DEBUG_TEST_REPARENT_INCOMPATIBLE -> DEBUG_TEST_REPARENT_INCOMPATIBLE
    java.util.ArrayList windowList -> windowList
    long QUEUED_EVENT_TO -> QUEUED_EVENT_TO
    com.jogamp.newt.event.MouseEvent$PointerType[] constMousePointerTypes -> constMousePointerTypes
    long windowHandle -> windowHandle
    boolean visible -> visible
    boolean hasFocus -> hasFocus
    int pixWidth -> pixWidth
    int pixHeight -> pixHeight
    int winWidth -> winWidth
    int winHeight -> winHeight
    int[] nativePixelScale -> nativePixelScale
    int[] hasPixelScale -> hasPixelScale
    int[] reqPixelScale -> reqPixelScale
    int x -> x
    int y -> y
    javax.media.nativewindow.util.Insets insets -> insets
    boolean blockInsetsChange -> blockInsetsChange
    com.jogamp.common.util.locks.RecursiveLock windowLock -> windowLock
    int surfaceLockCount -> surfaceLockCount
    jogamp.newt.ScreenImpl screen -> screen
    boolean screenReferenceAdded -> screenReferenceAdded
    javax.media.nativewindow.NativeWindow parentWindow -> parentWindow
    long parentWindowHandle -> parentWindowHandle
    javax.media.nativewindow.AbstractGraphicsConfiguration config -> config
    javax.media.nativewindow.CapabilitiesImmutable capsRequested -> capsRequested
    javax.media.nativewindow.CapabilitiesChooser capabilitiesChooser -> capabilitiesChooser
    boolean fullscreen -> fullscreen
    boolean brokenFocusChange -> brokenFocusChange
    java.util.List fullscreenMonitors -> fullscreenMonitors
    boolean fullscreenUseMainMonitor -> fullscreenUseMainMonitor
    boolean autoPosition -> autoPosition
    int nfs_width -> nfs_width
    int nfs_height -> nfs_height
    int nfs_x -> nfs_x
    int nfs_y -> nfs_y
    boolean nfs_alwaysOnTop -> nfs_alwaysOnTop
    javax.media.nativewindow.NativeWindow nfs_parent -> nfs_parent
    java.lang.String title -> title
    boolean undecorated -> undecorated
    boolean alwaysOnTop -> alwaysOnTop
    jogamp.newt.PointerIconImpl pointerIcon -> pointerIcon
    boolean pointerVisible -> pointerVisible
    boolean pointerConfined -> pointerConfined
    jogamp.newt.WindowImpl$LifecycleHook lifecycleHook -> lifecycleHook
    java.lang.Runnable windowDestroyNotifyAction -> windowDestroyNotifyAction
    com.jogamp.newt.Window$FocusRunnable focusAction -> focusAction
    com.jogamp.newt.event.KeyListener keyboardFocusHandler -> keyboardFocusHandler
    jogamp.nativewindow.SurfaceUpdatedHelper surfaceUpdatedHelper -> surfaceUpdatedHelper
    java.lang.Object childWindowsLock -> childWindowsLock
    java.util.ArrayList childWindows -> childWindows
    java.util.ArrayList mouseListeners -> mouseListeners
    jogamp.newt.WindowImpl$PointerState0 pState0 -> pState0
    jogamp.newt.WindowImpl$PointerState1 pState1 -> pState1
    com.jogamp.common.util.ArrayHashSet pName2pID -> pName2pID
    boolean defaultGestureHandlerEnabled -> defaultGestureHandlerEnabled
    com.jogamp.newt.event.DoubleTapScrollGesture gesture2PtrTouchScroll -> gesture2PtrTouchScroll
    java.util.ArrayList pointerGestureHandler -> pointerGestureHandler
    java.util.ArrayList gestureListeners -> gestureListeners
    java.util.ArrayList keyListeners -> keyListeners
    java.util.ArrayList windowListeners -> windowListeners
    boolean repaintQueued -> repaintQueued
    java.lang.Object closingListenerLock -> closingListenerLock
    javax.media.nativewindow.WindowClosingProtocol$WindowClosingMode defaultCloseOperation -> defaultCloseOperation
    int FLAG_CHANGE_PARENTING -> FLAG_CHANGE_PARENTING
    int FLAG_CHANGE_DECORATION -> FLAG_CHANGE_DECORATION
    int FLAG_CHANGE_FULLSCREEN -> FLAG_CHANGE_FULLSCREEN
    int FLAG_CHANGE_ALWAYSONTOP -> FLAG_CHANGE_ALWAYSONTOP
    int FLAG_CHANGE_VISIBILITY -> FLAG_CHANGE_VISIBILITY
    int FLAG_HAS_PARENT -> FLAG_HAS_PARENT
    int FLAG_IS_UNDECORATED -> FLAG_IS_UNDECORATED
    int FLAG_IS_FULLSCREEN -> FLAG_IS_FULLSCREEN
    int FLAG_IS_FULLSCREEN_SPAN -> FLAG_IS_FULLSCREEN_SPAN
    int FLAG_IS_ALWAYSONTOP -> FLAG_IS_ALWAYSONTOP
    int FLAG_IS_VISIBLE -> FLAG_IS_VISIBLE
    java.lang.Runnable destroyAction -> destroyAction
    java.lang.Runnable reparentActionRecreate -> reparentActionRecreate
    java.lang.Runnable requestFocusAction -> requestFocusAction
    java.lang.Runnable requestFocusActionForced -> requestFocusActionForced
    jogamp.newt.WindowImpl$FullScreenAction fullScreenAction -> fullScreenAction
    jogamp.newt.WindowImpl$MonitorModeListenerImpl monitorModeListenerImpl -> monitorModeListenerImpl
    int keyTrackingRange -> keyTrackingRange
    com.jogamp.common.util.IntBitfield keyPressedState -> keyPressedState
    boolean keyboardVisible -> keyboardVisible
    void <init>() -> <init>
    void shutdownAll() -> shutdownAll
    void addWindow2List(jogamp.newt.WindowImpl) -> addWindow2List
    java.lang.Class getWindowClass(java.lang.String) -> getWindowClass
    jogamp.newt.WindowImpl create(javax.media.nativewindow.NativeWindow,long,com.jogamp.newt.Screen,javax.media.nativewindow.CapabilitiesImmutable) -> create
    jogamp.newt.WindowImpl create(java.lang.Object[],com.jogamp.newt.Screen,javax.media.nativewindow.CapabilitiesImmutable) -> create
    void shutdown() -> shutdown
    void setGraphicsConfiguration(javax.media.nativewindow.AbstractGraphicsConfiguration) -> setGraphicsConfiguration
    boolean createNative() -> createNative
    void removeScreenReference() -> removeScreenReference
    boolean validateParentWindowHandle() -> validateParentWindowHandle
    long getNativeWindowHandle(javax.media.nativewindow.NativeWindow) -> getNativeWindowHandle
    int lockSurfaceImpl() -> lockSurfaceImpl
    void unlockSurfaceImpl() -> unlockSurfaceImpl
    javax.media.nativewindow.WindowClosingProtocol$WindowClosingMode getDefaultCloseOperation() -> getDefaultCloseOperation
    javax.media.nativewindow.WindowClosingProtocol$WindowClosingMode setDefaultCloseOperation(javax.media.nativewindow.WindowClosingProtocol$WindowClosingMode) -> setDefaultCloseOperation
    void instantiationFinished() -> instantiationFinished
    boolean canCreateNativeImpl() -> canCreateNativeImpl
    void createNativeImpl() -> createNativeImpl
    void closeNativeImpl() -> closeNativeImpl
    void requestFocusImpl(boolean) -> requestFocusImpl
    boolean reconfigureWindowImpl(int,int,int,int,int) -> reconfigureWindowImpl
    boolean isReconfigureFlagSupported(int) -> isReconfigureFlagSupported
    int getReconfigureFlags(int,boolean) -> getReconfigureFlags
    java.lang.String getReconfigureFlagsAsString(java.lang.StringBuilder,int) -> getReconfigureFlagsAsString
    void setTitleImpl(java.lang.String) -> setTitleImpl
    javax.media.nativewindow.util.Point getLocationOnScreenImpl(int,int) -> getLocationOnScreenImpl
    void updateInsetsImpl(javax.media.nativewindow.util.Insets) -> updateInsetsImpl
    boolean setPointerVisibleImpl(boolean) -> setPointerVisibleImpl
    boolean confinePointerImpl(boolean) -> confinePointerImpl
    void warpPointerImpl(int,int) -> warpPointerImpl
    void setPointerIconImpl(jogamp.newt.PointerIconImpl) -> setPointerIconImpl
    int lockSurface() -> lockSurface
    void unlockSurface() -> unlockSurface
    boolean isSurfaceLockedByOtherThread() -> isSurfaceLockedByOtherThread
    java.lang.Thread getSurfaceLockOwner() -> getSurfaceLockOwner
    com.jogamp.common.util.locks.RecursiveLock getLock() -> getLock
    long getSurfaceHandle() -> getSurfaceHandle
    boolean surfaceSwap() -> surfaceSwap
    void addSurfaceUpdatedListener(javax.media.nativewindow.SurfaceUpdatedListener) -> addSurfaceUpdatedListener
    void addSurfaceUpdatedListener(int,javax.media.nativewindow.SurfaceUpdatedListener) -> addSurfaceUpdatedListener
    void removeSurfaceUpdatedListener(javax.media.nativewindow.SurfaceUpdatedListener) -> removeSurfaceUpdatedListener
    void surfaceUpdated(java.lang.Object,javax.media.nativewindow.NativeSurface,long) -> surfaceUpdated
    javax.media.nativewindow.AbstractGraphicsConfiguration getGraphicsConfiguration() -> getGraphicsConfiguration
    long getDisplayHandle() -> getDisplayHandle
    int getScreenIndex() -> getScreenIndex
    javax.media.nativewindow.NativeSurface getNativeSurface() -> getNativeSurface
    javax.media.nativewindow.NativeWindow getParent() -> getParent
    long getWindowHandle() -> getWindowHandle
    javax.media.nativewindow.util.Point getLocationOnScreen(javax.media.nativewindow.util.Point) -> getLocationOnScreen
    boolean isNativeValid() -> isNativeValid
    com.jogamp.newt.Screen getScreen() -> getScreen
    void setScreen(jogamp.newt.ScreenImpl) -> setScreen
    com.jogamp.newt.MonitorDevice getMainMonitor() -> getMainMonitor
    void setVisibleImpl(boolean,int,int,int,int) -> setVisibleImpl
    void setVisibleActionImpl(boolean) -> setVisibleActionImpl
    void setVisible(boolean,boolean) -> setVisible
    void setVisible(boolean) -> setVisible
    void setSize(int,int,boolean) -> setSize
    void setSize(int,int) -> setSize
    void setSurfaceSize(int,int) -> setSurfaceSize
    void setTopLevelSize(int,int) -> setTopLevelSize
    void destroy() -> destroy
    void destroy(boolean) -> destroy
    boolean isOffscreenInstance(javax.media.nativewindow.NativeWindow,javax.media.nativewindow.NativeWindow) -> isOffscreenInstance
    com.jogamp.newt.Window$ReparentOperation reparentWindow(javax.media.nativewindow.NativeWindow,int,int,int) -> reparentWindow
    javax.media.nativewindow.CapabilitiesChooser setCapabilitiesChooser(javax.media.nativewindow.CapabilitiesChooser) -> setCapabilitiesChooser
    javax.media.nativewindow.CapabilitiesImmutable getChosenCapabilities() -> getChosenCapabilities
    javax.media.nativewindow.CapabilitiesImmutable getRequestedCapabilities() -> getRequestedCapabilities
    void setUndecorated(boolean) -> setUndecorated
    boolean isUndecorated() -> isUndecorated
    void setAlwaysOnTop(boolean) -> setAlwaysOnTop
    boolean isAlwaysOnTop() -> isAlwaysOnTop
    java.lang.String getTitle() -> getTitle
    void setTitle(java.lang.String) -> setTitle
    boolean isPointerVisible() -> isPointerVisible
    void setPointerVisible(boolean) -> setPointerVisible
    boolean setPointerVisibleIntern(boolean) -> setPointerVisibleIntern
    boolean setOffscreenPointerVisible(boolean,jogamp.newt.PointerIconImpl) -> setOffscreenPointerVisible
    com.jogamp.newt.Display$PointerIcon getPointerIcon() -> getPointerIcon
    void setPointerIcon(com.jogamp.newt.Display$PointerIcon) -> setPointerIcon
    void setPointerIconIntern(jogamp.newt.PointerIconImpl) -> setPointerIconIntern
    boolean setOffscreenPointerIcon(jogamp.newt.PointerIconImpl) -> setOffscreenPointerIcon
    boolean isPointerConfined() -> isPointerConfined
    void confinePointer(boolean) -> confinePointer
    void warpPointer(int,int) -> warpPointer
    javax.media.nativewindow.util.InsetsImmutable getInsets() -> getInsets
    int getX() -> getX
    int getY() -> getY
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    javax.media.nativewindow.util.Rectangle getBounds() -> getBounds
    int getSurfaceWidth() -> getSurfaceWidth
    int getSurfaceHeight() -> getSurfaceHeight
    int[] convertToWindowUnits(int[]) -> convertToWindowUnits
    int[] convertToPixelUnits(int[]) -> convertToPixelUnits
    javax.media.nativewindow.util.Point convertToWindowUnits(javax.media.nativewindow.util.Point) -> convertToWindowUnits
    javax.media.nativewindow.util.Point convertToPixelUnits(javax.media.nativewindow.util.Point) -> convertToPixelUnits
    int getPixelScaleX() -> getPixelScaleX
    int getPixelScaleY() -> getPixelScaleY
    void setSurfaceScale(int[]) -> setSurfaceScale
    int[] getRequestedSurfaceScale(int[]) -> getRequestedSurfaceScale
    int[] getCurrentSurfaceScale(int[]) -> getCurrentSurfaceScale
    int[] getNativeSurfaceScale(int[]) -> getNativeSurfaceScale
    float[] getPixelsPerMM(float[]) -> getPixelsPerMM
    boolean autoPosition() -> autoPosition
    void definePosition(int,int) -> definePosition
    void defineSize(int,int) -> defineSize
    boolean isVisible() -> isVisible
    boolean isFullscreen() -> isFullscreen
    com.jogamp.newt.Window getDelegatedWindow() -> getDelegatedWindow
    boolean hasDeviceChanged() -> hasDeviceChanged
    jogamp.newt.WindowImpl$LifecycleHook getLifecycleHook() -> getLifecycleHook
    jogamp.newt.WindowImpl$LifecycleHook setLifecycleHook(jogamp.newt.WindowImpl$LifecycleHook) -> setLifecycleHook
    javax.media.nativewindow.NativeSurface getWrappedSurface() -> getWrappedSurface
    void setWindowDestroyNotifyAction(java.lang.Runnable) -> setWindowDestroyNotifyAction
    long getParentWindowHandle() -> getParentWindowHandle
    java.lang.String toString() -> toString
    void setWindowHandle(long) -> setWindowHandle
    void runOnEDTIfAvail(boolean,java.lang.Runnable) -> runOnEDTIfAvail
    boolean hasFocus() -> hasFocus
    void requestFocus() -> requestFocus
    void requestFocus(boolean) -> requestFocus
    void requestFocus(boolean,boolean,boolean) -> requestFocus
    void requestFocusInt(boolean) -> requestFocusInt
    void setFocusAction(com.jogamp.newt.Window$FocusRunnable) -> setFocusAction
    boolean focusAction() -> focusAction
    void setBrokenFocusChange(boolean) -> setBrokenFocusChange
    void setKeyboardFocusHandler(com.jogamp.newt.event.KeyListener) -> setKeyboardFocusHandler
    void setPosition(int,int) -> setPosition
    void setTopLevelPosition(int,int) -> setTopLevelPosition
    boolean setFullscreen(boolean) -> setFullscreen
    boolean setFullscreen(java.util.List) -> setFullscreen
    boolean setFullscreenImpl(boolean,boolean,java.util.List) -> setFullscreenImpl
    void monitorModeChanged(com.jogamp.newt.event.MonitorEvent,boolean) -> monitorModeChanged
    boolean removeChild(javax.media.nativewindow.NativeWindow) -> removeChild
    boolean addChild(javax.media.nativewindow.NativeWindow) -> addChild
    void doEvent(boolean,boolean,com.jogamp.newt.event.NEWTEvent) -> doEvent
    void enqueueEvent(boolean,com.jogamp.newt.event.NEWTEvent) -> enqueueEvent
    boolean consumeEvent(com.jogamp.newt.event.NEWTEvent) -> consumeEvent
    void sendMouseEvent(short,int,int,int,short,float) -> sendMouseEvent
    void enqueueMouseEvent(boolean,short,int,int,int,short,float) -> enqueueMouseEvent
    void doMouseEvent(boolean,boolean,short,int,int,int,short,float) -> doMouseEvent
    void doMouseEvent(boolean,boolean,short,int,int,int,short,float[],float) -> doMouseEvent
    void doPointerEvent(boolean,boolean,com.jogamp.newt.event.MouseEvent$PointerType[],short,int,int,boolean,int[],int[],int[],float[],float,float[],float) -> doPointerEvent
    void doPointerEvent(boolean,boolean,com.jogamp.newt.event.MouseEvent$PointerType[],short,int,int,short[],short,int[],int[],float[],float,float[],float) -> doPointerEvent
    int step(int,int,int) -> step
    void consumePointerEvent(com.jogamp.newt.event.MouseEvent) -> consumePointerEvent
    void addMouseListener(com.jogamp.newt.event.MouseListener) -> addMouseListener
    void addMouseListener(int,com.jogamp.newt.event.MouseListener) -> addMouseListener
    void removeMouseListener(com.jogamp.newt.event.MouseListener) -> removeMouseListener
    com.jogamp.newt.event.MouseListener getMouseListener(int) -> getMouseListener
    com.jogamp.newt.event.MouseListener[] getMouseListeners() -> getMouseListeners
    void setDefaultGesturesEnabled(boolean) -> setDefaultGesturesEnabled
    boolean areDefaultGesturesEnabled() -> areDefaultGesturesEnabled
    void addGestureHandler(com.jogamp.newt.event.GestureHandler) -> addGestureHandler
    void addGestureHandler(int,com.jogamp.newt.event.GestureHandler) -> addGestureHandler
    void removeGestureHandler(com.jogamp.newt.event.GestureHandler) -> removeGestureHandler
    void addGestureListener(com.jogamp.newt.event.GestureHandler$GestureListener) -> addGestureListener
    void addGestureListener(int,com.jogamp.newt.event.GestureHandler$GestureListener) -> addGestureListener
    void removeGestureListener(com.jogamp.newt.event.GestureHandler$GestureListener) -> removeGestureListener
    void dispatchMouseEvent(com.jogamp.newt.event.MouseEvent) -> dispatchMouseEvent
    boolean isKeyCodeTracked(short) -> isKeyCodeTracked
    boolean setKeyPressed(short,boolean) -> setKeyPressed
    boolean isKeyPressed(short) -> isKeyPressed
    void sendKeyEvent(short,int,short,short,char) -> sendKeyEvent
    void enqueueKeyEvent(boolean,short,int,short,short,char) -> enqueueKeyEvent
    void setKeyboardVisible(boolean) -> setKeyboardVisible
    boolean isKeyboardVisible() -> isKeyboardVisible
    boolean setKeyboardVisibleImpl(boolean) -> setKeyboardVisibleImpl
    void keyboardVisibilityChanged(boolean) -> keyboardVisibilityChanged
    void addKeyListener(com.jogamp.newt.event.KeyListener) -> addKeyListener
    void addKeyListener(int,com.jogamp.newt.event.KeyListener) -> addKeyListener
    void removeKeyListener(com.jogamp.newt.event.KeyListener) -> removeKeyListener
    com.jogamp.newt.event.KeyListener getKeyListener(int) -> getKeyListener
    com.jogamp.newt.event.KeyListener[] getKeyListeners() -> getKeyListeners
    boolean propagateKeyEvent(com.jogamp.newt.event.KeyEvent,com.jogamp.newt.event.KeyListener) -> propagateKeyEvent
    void consumeKeyEvent(com.jogamp.newt.event.KeyEvent) -> consumeKeyEvent
    void sendWindowEvent(int) -> sendWindowEvent
    void enqueueWindowEvent(boolean,int) -> enqueueWindowEvent
    void addWindowListener(com.jogamp.newt.event.WindowListener) -> addWindowListener
    void addWindowListener(int,com.jogamp.newt.event.WindowListener) -> addWindowListener
    void removeWindowListener(com.jogamp.newt.event.WindowListener) -> removeWindowListener
    com.jogamp.newt.event.WindowListener getWindowListener(int) -> getWindowListener
    com.jogamp.newt.event.WindowListener[] getWindowListeners() -> getWindowListeners
    void consumeWindowEvent(com.jogamp.newt.event.WindowEvent) -> consumeWindowEvent
    void focusChanged(boolean,boolean) -> focusChanged
    void visibleChanged(boolean,boolean) -> visibleChanged
    long waitForVisible(boolean,boolean) -> waitForVisible
    long waitForVisible(boolean,boolean,long) -> waitForVisible
    void sizeChanged(boolean,int,int,boolean) -> sizeChanged
    boolean waitForSize(int,int,boolean,long) -> waitForSize
    void positionChanged(boolean,int,int) -> positionChanged
    boolean waitForPosition(boolean,int,int,long) -> waitForPosition
    void insetsChanged(boolean,int,int,int,int) -> insetsChanged
    boolean windowDestroyNotify(boolean) -> windowDestroyNotify
    void windowRepaint(int,int,int,int) -> windowRepaint
    void windowRepaint(boolean,int,int,int,int) -> windowRepaint
    java.lang.Class[] getCustomConstructorArgumentTypes(java.lang.Class) -> getCustomConstructorArgumentTypes
    int verifyConstructorArgumentTypes(java.lang.Class[],java.lang.Object[]) -> verifyConstructorArgumentTypes
    java.lang.String getArgsStrList(java.lang.Object[]) -> getArgsStrList
    java.lang.String getTypeStrList(java.lang.Class[]) -> getTypeStrList
    java.lang.String getThreadName() -> getThreadName
    java.lang.String toHexString(int) -> toHexString
    java.lang.String toHexString(long) -> toHexString
    com.jogamp.common.util.locks.RecursiveLock access$400(jogamp.newt.WindowImpl) -> access$400
    boolean access$500(jogamp.newt.WindowImpl) -> access$500
    long access$600(jogamp.newt.WindowImpl) -> access$600
    boolean access$700(jogamp.newt.WindowImpl) -> access$700
    boolean access$800(jogamp.newt.WindowImpl,int,int,boolean,long) -> access$800
    jogamp.newt.WindowImpl$LifecycleHook access$1000(jogamp.newt.WindowImpl) -> access$1000
    jogamp.newt.ScreenImpl access$1100(jogamp.newt.WindowImpl) -> access$1100
    java.lang.Object access$1200(jogamp.newt.WindowImpl) -> access$1200
    java.util.ArrayList access$1300(jogamp.newt.WindowImpl) -> access$1300
    jogamp.newt.WindowImpl$MonitorModeListenerImpl access$1400(jogamp.newt.WindowImpl) -> access$1400
    javax.media.nativewindow.AbstractGraphicsConfiguration access$1500(jogamp.newt.WindowImpl) -> access$1500
    void access$1600(jogamp.newt.WindowImpl) -> access$1600
    boolean access$702(jogamp.newt.WindowImpl,boolean) -> access$702
    boolean access$502(jogamp.newt.WindowImpl,boolean) -> access$502
    java.util.List access$1702(jogamp.newt.WindowImpl,java.util.List) -> access$1702
    boolean access$1802(jogamp.newt.WindowImpl,boolean) -> access$1802
    boolean access$1902(jogamp.newt.WindowImpl,boolean) -> access$1902
    long access$2002(jogamp.newt.WindowImpl,long) -> access$2002
    long access$2000(jogamp.newt.WindowImpl) -> access$2000
    javax.media.nativewindow.NativeWindow access$2100(jogamp.newt.WindowImpl) -> access$2100
    long access$2200(javax.media.nativewindow.NativeWindow) -> access$2200
    boolean access$2300(jogamp.newt.WindowImpl,jogamp.newt.PointerIconImpl) -> access$2300
    boolean access$2400(jogamp.newt.WindowImpl,boolean,jogamp.newt.PointerIconImpl) -> access$2400
    javax.media.nativewindow.NativeWindow access$2102(jogamp.newt.WindowImpl,javax.media.nativewindow.NativeWindow) -> access$2102
    long access$2500(jogamp.newt.WindowImpl,boolean,boolean) -> access$2500
    boolean access$2600(jogamp.newt.WindowImpl,boolean,int,int,long) -> access$2600
    void access$2700(jogamp.newt.WindowImpl,boolean) -> access$2700
    jogamp.newt.PointerIconImpl access$2800(jogamp.newt.WindowImpl) -> access$2800
    boolean access$2900(jogamp.newt.WindowImpl) -> access$2900
    java.lang.Runnable access$3000(jogamp.newt.WindowImpl) -> access$3000
    boolean access$3300(jogamp.newt.WindowImpl) -> access$3300
    boolean access$3302(jogamp.newt.WindowImpl,boolean) -> access$3302
    boolean access$3500(jogamp.newt.WindowImpl) -> access$3500
    boolean access$3502(jogamp.newt.WindowImpl,boolean) -> access$3502
    void access$3700(jogamp.newt.WindowImpl,jogamp.newt.PointerIconImpl) -> access$3700
    boolean access$1900(jogamp.newt.WindowImpl) -> access$1900
    boolean access$3902(jogamp.newt.WindowImpl,boolean) -> access$3902
    java.util.List access$1700(jogamp.newt.WindowImpl) -> access$1700
    boolean access$1800(jogamp.newt.WindowImpl) -> access$1800
    int access$4002(jogamp.newt.WindowImpl,int) -> access$4002
    int access$4102(jogamp.newt.WindowImpl,int) -> access$4102
    int access$4202(jogamp.newt.WindowImpl,int) -> access$4202
    int access$4302(jogamp.newt.WindowImpl,int) -> access$4302
    boolean access$4402(jogamp.newt.WindowImpl,boolean) -> access$4402
    boolean access$4400(jogamp.newt.WindowImpl) -> access$4400
    int access$4000(jogamp.newt.WindowImpl) -> access$4000
    int access$4100(jogamp.newt.WindowImpl) -> access$4100
    int access$4200(jogamp.newt.WindowImpl) -> access$4200
    int access$4300(jogamp.newt.WindowImpl) -> access$4300
    boolean access$4600(jogamp.newt.WindowImpl,boolean,boolean,java.util.List) -> access$4600
    void access$4700(jogamp.newt.WindowImpl,int,int,boolean) -> access$4700
    void <clinit>() -> <clinit>
jogamp.newt.WindowImpl$1 -> jogamp.newt.WindowImpl$1:
    jogamp.newt.WindowImpl this$0 -> this$0
    void <init>(jogamp.newt.WindowImpl) -> <init>
    void run() -> run
jogamp.newt.WindowImpl$2 -> jogamp.newt.WindowImpl$2:
    jogamp.newt.WindowImpl this$0 -> this$0
    void <init>(jogamp.newt.WindowImpl) -> <init>
    void run() -> run
jogamp.newt.WindowImpl$3 -> jogamp.newt.WindowImpl$3:
    jogamp.newt.PointerIconImpl val$piImpl -> val$piImpl
    jogamp.newt.WindowImpl this$0 -> this$0
    void <init>(jogamp.newt.WindowImpl,jogamp.newt.PointerIconImpl) -> <init>
    void run() -> run
jogamp.newt.WindowImpl$4 -> jogamp.newt.WindowImpl$4:
    jogamp.newt.WindowImpl this$0 -> this$0
    void <init>(jogamp.newt.WindowImpl) -> <init>
    void run() -> run
jogamp.newt.WindowImpl$5 -> jogamp.newt.WindowImpl$5:
    jogamp.newt.WindowImpl this$0 -> this$0
    void <init>(jogamp.newt.WindowImpl) -> <init>
    void run() -> run
jogamp.newt.WindowImpl$6 -> jogamp.newt.WindowImpl$6:
    int[] $SwitchMap$com$jogamp$newt$Window$ReparentOperation -> $SwitchMap$com$jogamp$newt$Window$ReparentOperation
    void <clinit>() -> <clinit>
jogamp.newt.WindowImpl$AlwaysOnTopAction -> jogamp.newt.WindowImpl$AlwaysOnTopAction:
    boolean alwaysOnTop -> alwaysOnTop
    jogamp.newt.WindowImpl this$0 -> this$0
    void <init>(jogamp.newt.WindowImpl,boolean) -> <init>
    void run() -> run
    void <init>(jogamp.newt.WindowImpl,boolean,jogamp.newt.WindowImpl$1) -> <init>
jogamp.newt.WindowImpl$DecorationAction -> jogamp.newt.WindowImpl$DecorationAction:
    boolean undecorated -> undecorated
    jogamp.newt.WindowImpl this$0 -> this$0
    void <init>(jogamp.newt.WindowImpl,boolean) -> <init>
    void run() -> run
    void <init>(jogamp.newt.WindowImpl,boolean,jogamp.newt.WindowImpl$1) -> <init>
jogamp.newt.WindowImpl$FullScreenAction -> jogamp.newt.WindowImpl$FullScreenAction:
    boolean _fullscreen -> _fullscreen
    jogamp.newt.WindowImpl this$0 -> this$0
    void <init>(jogamp.newt.WindowImpl) -> <init>
    boolean init(boolean) -> init
    boolean fsOn() -> fsOn
    void run() -> run
    boolean access$200(jogamp.newt.WindowImpl$FullScreenAction,boolean) -> access$200
    void <init>(jogamp.newt.WindowImpl,jogamp.newt.WindowImpl$1) -> <init>
jogamp.newt.WindowImpl$LifecycleHook -> jogamp.newt.WindowImpl$LifecycleHook:
    void resetCounter() -> resetCounter
    void setVisibleActionPost(boolean,boolean) -> setVisibleActionPost
    void preserveGLStateAtDestroy(boolean) -> preserveGLStateAtDestroy
    void destroyActionPreLock() -> destroyActionPreLock
    void destroyActionInLock() -> destroyActionInLock
    boolean pauseRenderingAction() -> pauseRenderingAction
    void resumeRenderingAction() -> resumeRenderingAction
    void shutdownRenderingAction() -> shutdownRenderingAction
jogamp.newt.WindowImpl$MonitorModeListenerImpl -> jogamp.newt.WindowImpl$MonitorModeListenerImpl:
    boolean animatorPaused -> animatorPaused
    boolean hidden -> hidden
    boolean hadFocus -> hadFocus
    boolean fullscreenPaused -> fullscreenPaused
    java.util.List _fullscreenMonitors -> _fullscreenMonitors
    boolean _fullscreenUseMainMonitor -> _fullscreenUseMainMonitor
    jogamp.newt.WindowImpl this$0 -> this$0
    void <init>(jogamp.newt.WindowImpl) -> <init>
    void monitorModeChangeNotify(com.jogamp.newt.event.MonitorEvent) -> monitorModeChangeNotify
    void monitorModeChanged(com.jogamp.newt.event.MonitorEvent,boolean) -> monitorModeChanged
    void <init>(jogamp.newt.WindowImpl,jogamp.newt.WindowImpl$1) -> <init>
jogamp.newt.WindowImpl$PointerState0 -> jogamp.newt.WindowImpl$PointerState0:
    boolean insideSurface -> insideSurface
    boolean exitSent -> exitSent
    long lastButtonPressTime -> lastButtonPressTime
    boolean dragging -> dragging
    void <init>() -> <init>
    void clearButton() -> clearButton
    java.lang.String toString() -> toString
    void <init>(jogamp.newt.WindowImpl$1) -> <init>
jogamp.newt.WindowImpl$PointerState1 -> jogamp.newt.WindowImpl$PointerState1:
    short buttonPressed -> buttonPressed
    int buttonPressedMask -> buttonPressedMask
    short lastButtonClickCount -> lastButtonClickCount
    javax.media.nativewindow.util.Point[] movePositions -> movePositions
    void <init>() -> <init>
    void clearButton() -> clearButton
    javax.media.nativewindow.util.Point getMovePosition(int) -> getMovePosition
    java.lang.String toString() -> toString
    void <init>(jogamp.newt.WindowImpl$1) -> <init>
jogamp.newt.WindowImpl$ReparentAction -> jogamp.newt.WindowImpl$ReparentAction:
    javax.media.nativewindow.NativeWindow newParentWindow -> newParentWindow
    int topLevelX -> topLevelX
    int topLevelY -> topLevelY
    int hints -> hints
    com.jogamp.newt.Window$ReparentOperation operation -> operation
    jogamp.newt.WindowImpl this$0 -> this$0
    void <init>(jogamp.newt.WindowImpl,javax.media.nativewindow.NativeWindow,int,int,int) -> <init>
    com.jogamp.newt.Window$ReparentOperation getOp() -> getOp
    void run() -> run
    void reparent() -> reparent
    void <init>(jogamp.newt.WindowImpl,javax.media.nativewindow.NativeWindow,int,int,int,jogamp.newt.WindowImpl$1) -> <init>
    com.jogamp.newt.Window$ReparentOperation access$3200(jogamp.newt.WindowImpl$ReparentAction) -> access$3200
jogamp.newt.WindowImpl$SetPositionAction -> jogamp.newt.WindowImpl$SetPositionAction:
    int x -> x
    int y -> y
    jogamp.newt.WindowImpl this$0 -> this$0
    void <init>(jogamp.newt.WindowImpl,int,int) -> <init>
    void run() -> run
    void <init>(jogamp.newt.WindowImpl,int,int,jogamp.newt.WindowImpl$1) -> <init>
jogamp.newt.WindowImpl$SetSizeAction -> jogamp.newt.WindowImpl$SetSizeAction:
    int width -> width
    int height -> height
    boolean force -> force
    jogamp.newt.WindowImpl this$0 -> this$0
    void <init>(jogamp.newt.WindowImpl,int,int,boolean) -> <init>
    void run() -> run
    void <init>(jogamp.newt.WindowImpl,int,int,boolean,jogamp.newt.WindowImpl$1) -> <init>
jogamp.newt.WindowImpl$VisibleAction -> jogamp.newt.WindowImpl$VisibleAction:
    boolean visible -> visible
    jogamp.newt.WindowImpl this$0 -> this$0
    void <init>(jogamp.newt.WindowImpl,boolean) -> <init>
    void run() -> run
    void <init>(jogamp.newt.WindowImpl,boolean,jogamp.newt.WindowImpl$1) -> <init>
jogamp.newt.awt.NewtFactoryAWT -> jogamp.newt.awt.NewtFactoryAWT:
    boolean DEBUG_IMPLEMENTATION -> DEBUG_IMPLEMENTATION
    void <init>() -> <init>
    com.jogamp.nativewindow.awt.JAWTWindow getNativeWindow(java.lang.Object,javax.media.nativewindow.CapabilitiesImmutable) -> getNativeWindow
    com.jogamp.nativewindow.awt.JAWTWindow getNativeWindow(java.awt.Component,javax.media.nativewindow.CapabilitiesImmutable) -> getNativeWindow
    void destroyNativeWindow(com.jogamp.nativewindow.awt.JAWTWindow) -> destroyNativeWindow
    void <clinit>() -> <clinit>
jogamp.newt.awt.event.AWTNewtEventFactory -> jogamp.newt.awt.event.AWTNewtEventFactory:
    int[] awtButtonDownMasks -> awtButtonDownMasks
    void <init>() -> <init>
    short eventTypeAWT2NEWT(int) -> eventTypeAWT2NEWT
    int getAWTButtonDownMaskImpl(int) -> getAWTButtonDownMaskImpl
    int getAWTButtonDownMask(int) -> getAWTButtonDownMask
    short awtButton2Newt(int) -> awtButton2Newt
    int awtModifiers2Newt(int,int) -> awtModifiers2Newt
    short awtKeyCode2NewtKeyCode(int) -> awtKeyCode2NewtKeyCode
    int newtKeyCode2AWTKeyCode(short) -> newtKeyCode2AWTKeyCode
    com.jogamp.newt.event.WindowEvent createWindowEvent(java.awt.event.WindowEvent,javax.media.nativewindow.NativeSurfaceHolder) -> createWindowEvent
    com.jogamp.newt.event.WindowEvent createWindowEvent(java.awt.event.ComponentEvent,javax.media.nativewindow.NativeSurfaceHolder) -> createWindowEvent
    com.jogamp.newt.event.WindowEvent createWindowEvent(java.awt.event.FocusEvent,javax.media.nativewindow.NativeSurfaceHolder) -> createWindowEvent
    com.jogamp.newt.event.MouseEvent createMouseEvent(java.awt.event.MouseEvent,javax.media.nativewindow.NativeSurfaceHolder) -> createMouseEvent
    com.jogamp.newt.event.KeyEvent createKeyEvent(java.awt.event.KeyEvent,javax.media.nativewindow.NativeSurfaceHolder) -> createKeyEvent
    com.jogamp.newt.event.KeyEvent createKeyEvent(short,java.awt.event.KeyEvent,javax.media.nativewindow.NativeSurfaceHolder) -> createKeyEvent
    void <clinit>() -> <clinit>
jogamp.newt.awt.event.AWTParentWindowAdapter -> jogamp.newt.awt.event.AWTParentWindowAdapter:
    javax.media.nativewindow.NativeWindow downstreamParent -> downstreamParent
    void <init>(javax.media.nativewindow.NativeWindow,com.jogamp.newt.Window) -> <init>
    void <init>() -> <init>
    jogamp.newt.awt.event.AWTParentWindowAdapter setDownstream(javax.media.nativewindow.NativeWindow,com.jogamp.newt.Window) -> setDownstream
    com.jogamp.newt.event.awt.AWTAdapter clear() -> clear
    com.jogamp.newt.event.awt.AWTAdapter addTo(java.awt.Component) -> addTo
    com.jogamp.newt.event.awt.AWTAdapter removeFrom(java.awt.Component) -> removeFrom
    void focusGained(java.awt.event.FocusEvent) -> focusGained
    void focusLost(java.awt.event.FocusEvent) -> focusLost
    void componentResized(java.awt.event.ComponentEvent) -> componentResized
    void componentMoved(java.awt.event.ComponentEvent) -> componentMoved
    void windowActivated(java.awt.event.WindowEvent) -> windowActivated
    void windowDeactivated(java.awt.event.WindowEvent) -> windowDeactivated
    void hierarchyChanged(java.awt.event.HierarchyEvent) -> hierarchyChanged
jogamp.newt.awt.event.AWTParentWindowAdapter$1 -> jogamp.newt.awt.event.AWTParentWindowAdapter$1:
    java.awt.Component val$comp -> val$comp
    com.jogamp.newt.Window val$newtChild -> val$newtChild
    jogamp.newt.awt.event.AWTParentWindowAdapter this$0 -> this$0
    void <init>(jogamp.newt.awt.event.AWTParentWindowAdapter,java.awt.Component,com.jogamp.newt.Window) -> <init>
    void run() -> run
jogamp.newt.awt.event.AWTParentWindowAdapter$2 -> jogamp.newt.awt.event.AWTParentWindowAdapter$2:
    com.jogamp.newt.Window val$newtChild -> val$newtChild
    boolean val$showing -> val$showing
    jogamp.newt.awt.event.AWTParentWindowAdapter this$0 -> this$0
    void <init>(jogamp.newt.awt.event.AWTParentWindowAdapter,com.jogamp.newt.Window,boolean) -> <init>
    void run() -> run
jogamp.newt.driver.DriverClearFocus -> jogamp.newt.driver.DriverClearFocus:
    void clearFocus() -> clearFocus
jogamp.newt.driver.DriverUpdatePosition -> jogamp.newt.driver.DriverUpdatePosition:
    void updatePosition(int,int) -> updatePosition
jogamp.newt.event.NEWTEventTask -> jogamp.newt.event.NEWTEventTask:
    com.jogamp.newt.event.NEWTEvent event -> event
    java.lang.Object notifyObject -> notifyObject
    java.lang.RuntimeException exception -> exception
    void <init>(com.jogamp.newt.event.NEWTEvent,java.lang.Object) -> <init>
    com.jogamp.newt.event.NEWTEvent get() -> get
    void setException(java.lang.RuntimeException) -> setException
    java.lang.RuntimeException getException() -> getException
    boolean isCallerWaiting() -> isCallerWaiting
    void notifyCaller() -> notifyCaller
jogamp.newt.swt.SWTEDTUtil -> jogamp.newt.swt.SWTEDTUtil:
    boolean DEBUG -> DEBUG
    java.lang.Object edtLock -> edtLock
    java.lang.ThreadGroup threadGroup -> threadGroup
    java.lang.String name -> name
    java.lang.Runnable dispatchMessages -> dispatchMessages
    org.eclipse.swt.widgets.Display swtDisplay -> swtDisplay
    jogamp.newt.swt.SWTEDTUtil$NEDT nedt -> nedt
    int start_iter -> start_iter
    long pollPeriod -> pollPeriod
    void <init>(com.jogamp.newt.Display,org.eclipse.swt.widgets.Display) -> <init>
    org.eclipse.swt.widgets.Display getDisplay() -> getDisplay
    long getPollPeriod() -> getPollPeriod
    void setPollPeriod(long) -> setPollPeriod
    void start() -> start
    void startImpl() -> startImpl
    boolean isCurrentThreadEDT() -> isCurrentThreadEDT
    boolean isCurrentThreadNEDT() -> isCurrentThreadNEDT
    boolean isCurrentThreadEDTorNEDT() -> isCurrentThreadEDTorNEDT
    boolean isRunning() -> isRunning
    boolean invokeStop(boolean,java.lang.Runnable) -> invokeStop
    boolean invoke(boolean,java.lang.Runnable) -> invoke
    boolean invokeImpl(boolean,java.lang.Runnable,boolean) -> invokeImpl
    boolean waitUntilIdle() -> waitUntilIdle
    boolean waitUntilStopped() -> waitUntilStopped
    org.eclipse.swt.widgets.Display access$000(jogamp.newt.swt.SWTEDTUtil) -> access$000
    java.lang.Runnable access$100(jogamp.newt.swt.SWTEDTUtil) -> access$100
    long access$200() -> access$200
    java.lang.Object access$300(jogamp.newt.swt.SWTEDTUtil) -> access$300
    void <clinit>() -> <clinit>
jogamp.newt.swt.SWTEDTUtil$1 -> jogamp.newt.swt.SWTEDTUtil$1:
    com.jogamp.newt.Display val$newtDisplay -> val$newtDisplay
    jogamp.newt.swt.SWTEDTUtil this$0 -> this$0
    void <init>(jogamp.newt.swt.SWTEDTUtil,com.jogamp.newt.Display) -> <init>
    void run() -> run
jogamp.newt.swt.SWTEDTUtil$2 -> jogamp.newt.swt.SWTEDTUtil$2:
    jogamp.newt.swt.SWTEDTUtil this$0 -> this$0
    void <init>(jogamp.newt.swt.SWTEDTUtil) -> <init>
    void run() -> run
jogamp.newt.swt.SWTEDTUtil$NEDT -> jogamp.newt.swt.SWTEDTUtil$NEDT:
    boolean shouldStop -> shouldStop
    boolean isRunning -> isRunning
    java.lang.Object sync -> sync
    jogamp.newt.swt.SWTEDTUtil this$0 -> this$0
    void <init>(jogamp.newt.swt.SWTEDTUtil,java.lang.ThreadGroup,java.lang.String) -> <init>
    boolean isRunning() -> isRunning
    void start() -> start
    void run() -> run
jogamp.opengl.Debug -> jogamp.opengl.Debug:
    boolean verbose -> verbose
    boolean debugAll -> debugAll
    void <init>() -> <init>
    void initSingleton() -> initSingleton
    boolean verbose() -> verbose
    boolean debugAll() -> debugAll
    boolean debug(java.lang.String) -> debug
    void access$000(java.lang.String) -> access$000
    void <clinit>() -> <clinit>
jogamp.opengl.Debug$1 -> jogamp.opengl.Debug$1:
    void <init>() -> <init>
    java.lang.Object run() -> run
jogamp.opengl.DesktopGLDynamicLibraryBundleInfo -> jogamp.opengl.DesktopGLDynamicLibraryBundleInfo:
    java.util.List glueLibNames -> glueLibNames
    void <init>() -> <init>
    java.util.List getGlueLibNames() -> getGlueLibNames
    boolean useToolGetProcAdressFirst(java.lang.String) -> useToolGetProcAdressFirst
    void <clinit>() -> <clinit>
jogamp.opengl.DesktopGLDynamicLookupHelper -> jogamp.opengl.DesktopGLDynamicLookupHelper:
    com.jogamp.common.os.NativeLibrary gluLib -> gluLib
    void <init>(jogamp.opengl.DesktopGLDynamicLibraryBundleInfo) -> <init>
    jogamp.opengl.DesktopGLDynamicLibraryBundleInfo getDesktopGLBundleInfo() -> getDesktopGLBundleInfo
    boolean loadGLULibrary() -> loadGLULibrary
jogamp.opengl.ExtensionAvailabilityCache -> jogamp.opengl.ExtensionAvailabilityCache:
    boolean DEBUG -> DEBUG
    boolean initialized -> initialized
    java.lang.String glExtensions -> glExtensions
    int glExtensionCount -> glExtensionCount
    java.lang.String glXExtensions -> glXExtensions
    int glXExtensionCount -> glXExtensionCount
    java.util.HashMap availableExtensionCache -> availableExtensionCache
    void <init>() -> <init>
    void flush() -> flush
    void reset(jogamp.opengl.GLContextImpl) -> reset
    boolean isInitialized() -> isInitialized
    int getTotalExtensionCount() -> getTotalExtensionCount
    boolean isExtensionAvailable(java.lang.String) -> isExtensionAvailable
    int getPlatformExtensionCount() -> getPlatformExtensionCount
    java.lang.String getPlatformExtensionsString() -> getPlatformExtensionsString
    int getGLExtensionCount() -> getGLExtensionCount
    java.lang.String getGLExtensionsString() -> getGLExtensionsString
    void validateInitialization() -> validateInitialization
    void initAvailableExtensions(jogamp.opengl.GLContextImpl) -> initAvailableExtensions
    java.lang.String getThreadName() -> getThreadName
    void <clinit>() -> <clinit>
jogamp.opengl.FPSCounterImpl -> jogamp.opengl.FPSCounterImpl:
    int fpsUpdateFramesInterval -> fpsUpdateFramesInterval
    java.io.PrintStream fpsOutputStream -> fpsOutputStream
    long fpsStartTime -> fpsStartTime
    long fpsLastUpdateTime -> fpsLastUpdateTime
    long fpsLastPeriod -> fpsLastPeriod
    long fpsTotalDuration -> fpsTotalDuration
    int fpsTotalFrames -> fpsTotalFrames
    float fpsLast -> fpsLast
    float fpsTotal -> fpsTotal
    void <init>() -> <init>
    void tickFPS() -> tickFPS
    java.lang.StringBuilder toString(java.lang.StringBuilder) -> toString
    java.lang.String toString() -> toString
    void setUpdateFPSFrames(int,java.io.PrintStream) -> setUpdateFPSFrames
    void resetFPSCounter() -> resetFPSCounter
    int getUpdateFPSFrames() -> getUpdateFPSFrames
    long getFPSStartTime() -> getFPSStartTime
    long getLastFPSUpdateTime() -> getLastFPSUpdateTime
    long getLastFPSPeriod() -> getLastFPSPeriod
    float getLastFPS() -> getLastFPS
    int getTotalFPSFrames() -> getTotalFPSFrames
    long getTotalFPSDuration() -> getTotalFPSDuration
    float getTotalFPS() -> getTotalFPS
jogamp.opengl.GLAutoDrawableBase -> jogamp.opengl.GLAutoDrawableBase:
    boolean DEBUG -> DEBUG
    jogamp.opengl.GLDrawableHelper helper -> helper
    jogamp.opengl.FPSCounterImpl fpsCounter -> fpsCounter
    jogamp.opengl.GLDrawableImpl drawable -> drawable
    jogamp.opengl.GLContextImpl context -> context
    boolean preserveGLELSAtDestroy -> preserveGLELSAtDestroy
    com.jogamp.opengl.GLEventListenerState glels -> glels
    com.jogamp.opengl.GLStateKeeper$Listener glStateKeeperListener -> glStateKeeperListener
    boolean ownsDevice -> ownsDevice
    int additionalCtxCreationFlags -> additionalCtxCreationFlags
    boolean sendReshape -> sendReshape
    boolean sendDestroy -> sendDestroy
    java.lang.Runnable defaultInitAction -> defaultInitAction
    java.lang.Runnable defaultDisplayAction -> defaultDisplayAction
    void <init>(jogamp.opengl.GLDrawableImpl,jogamp.opengl.GLContextImpl,boolean) -> <init>
    void setSharedContext(javax.media.opengl.GLContext) -> setSharedContext
    void setSharedAutoDrawable(javax.media.opengl.GLAutoDrawable) -> setSharedAutoDrawable
    com.jogamp.opengl.GLStateKeeper$Listener setGLStateKeeperListener(com.jogamp.opengl.GLStateKeeper$Listener) -> setGLStateKeeperListener
    boolean preserveGLStateAtDestroy(boolean) -> preserveGLStateAtDestroy
    boolean isGLStatePreservationSupported() -> isGLStatePreservationSupported
    com.jogamp.opengl.GLEventListenerState getPreservedGLState() -> getPreservedGLState
    com.jogamp.opengl.GLEventListenerState clearPreservedGLState() -> clearPreservedGLState
    boolean preserveGLEventListenerState() -> preserveGLEventListenerState
    boolean restoreGLEventListenerState() -> restoreGLEventListenerState
    void defaultWindowRepaintOp() -> defaultWindowRepaintOp
    void defaultWindowResizedOp(int,int) -> defaultWindowResizedOp
    void defaultWindowDestroyNotifyOp() -> defaultWindowDestroyNotifyOp
    void destroyAvoidAwareOfLocking() -> destroyAvoidAwareOfLocking
    void defaultDestroy() -> defaultDestroy
    void destroyImplInLock() -> destroyImplInLock
    void defaultSwapBuffers() -> defaultSwapBuffers
    void defaultDisplay() -> defaultDisplay
    javax.media.opengl.GLEventListener defaultDisposeGLEventListener(javax.media.opengl.GLEventListener,boolean) -> defaultDisposeGLEventListener
    javax.media.opengl.GLDrawable getDelegatedDrawable() -> getDelegatedDrawable
    javax.media.opengl.GLContext getContext() -> getContext
    javax.media.opengl.GLContext setContext(javax.media.opengl.GLContext,boolean) -> setContext
    javax.media.opengl.GL getGL() -> getGL
    javax.media.opengl.GL setGL(javax.media.opengl.GL) -> setGL
    void addGLEventListener(javax.media.opengl.GLEventListener) -> addGLEventListener
    void addGLEventListener(int,javax.media.opengl.GLEventListener) -> addGLEventListener
    int getGLEventListenerCount() -> getGLEventListenerCount
    javax.media.opengl.GLEventListener getGLEventListener(int) -> getGLEventListener
    boolean areAllGLEventListenerInitialized() -> areAllGLEventListenerInitialized
    boolean getGLEventListenerInitState(javax.media.opengl.GLEventListener) -> getGLEventListenerInitState
    void setGLEventListenerInitState(javax.media.opengl.GLEventListener,boolean) -> setGLEventListenerInitState
    javax.media.opengl.GLEventListener disposeGLEventListener(javax.media.opengl.GLEventListener,boolean) -> disposeGLEventListener
    javax.media.opengl.GLEventListener removeGLEventListener(javax.media.opengl.GLEventListener) -> removeGLEventListener
    void setAnimator(javax.media.opengl.GLAnimatorControl) -> setAnimator
    javax.media.opengl.GLAnimatorControl getAnimator() -> getAnimator
    java.lang.Thread setExclusiveContextThread(java.lang.Thread) -> setExclusiveContextThread
    java.lang.Thread getExclusiveContextThread() -> getExclusiveContextThread
    boolean invoke(boolean,javax.media.opengl.GLRunnable) -> invoke
    boolean invoke(boolean,java.util.List) -> invoke
    void flushGLRunnables() -> flushGLRunnables
    void setAutoSwapBufferMode(boolean) -> setAutoSwapBufferMode
    boolean getAutoSwapBufferMode() -> getAutoSwapBufferMode
    void setContextCreationFlags(int) -> setContextCreationFlags
    int getContextCreationFlags() -> getContextCreationFlags
    boolean isThreadGLCapable() -> isThreadGLCapable
    void setUpdateFPSFrames(int,java.io.PrintStream) -> setUpdateFPSFrames
    void resetFPSCounter() -> resetFPSCounter
    int getUpdateFPSFrames() -> getUpdateFPSFrames
    long getFPSStartTime() -> getFPSStartTime
    long getLastFPSUpdateTime() -> getLastFPSUpdateTime
    long getLastFPSPeriod() -> getLastFPSPeriod
    float getLastFPS() -> getLastFPS
    int getTotalFPSFrames() -> getTotalFPSFrames
    long getTotalFPSDuration() -> getTotalFPSDuration
    float getTotalFPS() -> getTotalFPS
    javax.media.opengl.GLContext createContext(javax.media.opengl.GLContext) -> createContext
    void setRealized(boolean) -> setRealized
    boolean isRealized() -> isRealized
    int getSurfaceWidth() -> getSurfaceWidth
    int getSurfaceHeight() -> getSurfaceHeight
    boolean isGLOriented() -> isGLOriented
    javax.media.opengl.GLCapabilitiesImmutable getChosenGLCapabilities() -> getChosenGLCapabilities
    javax.media.opengl.GLCapabilitiesImmutable getRequestedGLCapabilities() -> getRequestedGLCapabilities
    javax.media.opengl.GLProfile getGLProfile() -> getGLProfile
    javax.media.nativewindow.NativeSurface getNativeSurface() -> getNativeSurface
    long getHandle() -> getHandle
    java.lang.String getThreadName() -> getThreadName
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
jogamp.opengl.GLAutoDrawableBase$1 -> jogamp.opengl.GLAutoDrawableBase$1:
    jogamp.opengl.GLAutoDrawableBase this$0 -> this$0
    void <init>(jogamp.opengl.GLAutoDrawableBase) -> <init>
    void run() -> run
jogamp.opengl.GLAutoDrawableBase$2 -> jogamp.opengl.GLAutoDrawableBase$2:
    jogamp.opengl.GLAutoDrawableBase this$0 -> this$0
    void <init>(jogamp.opengl.GLAutoDrawableBase) -> <init>
    void run() -> run
jogamp.opengl.GLBufferObjectTracker -> jogamp.opengl.GLBufferObjectTracker:
    boolean DEBUG -> DEBUG
    com.jogamp.common.util.IntObjectHashMap bufferName2StorageMap -> bufferName2StorageMap
    java.lang.String GL_INVALID_OPERATION -> GL_INVALID_OPERATION
    java.lang.String GL_INVALID_VALUE -> GL_INVALID_VALUE
    java.lang.String warning -> warning
    java.lang.String msgClazzName -> msgClazzName
    java.lang.String msgUnmapped -> msgUnmapped
    java.lang.String msgCreateBound -> msgCreateBound
    java.lang.String msgCreateNamed -> msgCreateNamed
    java.lang.String msgMapBuffer -> msgMapBuffer
    void <init>() -> <init>
    void createBufferStorage(jogamp.opengl.GLBufferStateTracker,javax.media.opengl.GL,int,long,java.nio.Buffer,int,int,jogamp.opengl.GLBufferObjectTracker$CreateStorageDispatch,long) -> createBufferStorage
    void createBufferStorage(javax.media.opengl.GL,int,long,java.nio.Buffer,int,int,jogamp.opengl.GLBufferObjectTracker$CreateStorageDispatch,long) -> createBufferStorage
    void notifyBuffersDeleted(int,int[],int) -> notifyBuffersDeleted
    void notifyBuffersDeleted(int,java.nio.IntBuffer) -> notifyBuffersDeleted
    void notifyBufferDeleted(int,int,int) -> notifyBufferDeleted
    javax.media.opengl.GLBufferStorage mapBuffer(jogamp.opengl.GLBufferStateTracker,javax.media.opengl.GL,int,int,jogamp.opengl.GLBufferObjectTracker$MapBufferAllDispatch,long) -> mapBuffer
    javax.media.opengl.GLBufferStorage mapBuffer(jogamp.opengl.GLBufferStateTracker,javax.media.opengl.GL,int,long,long,int,jogamp.opengl.GLBufferObjectTracker$MapBufferRangeDispatch,long) -> mapBuffer
    javax.media.opengl.GLBufferStorage mapBuffer(int,int,jogamp.opengl.GLBufferObjectTracker$MapBufferAllDispatch,long) -> mapBuffer
    javax.media.opengl.GLBufferStorage mapBuffer(int,long,long,int,jogamp.opengl.GLBufferObjectTracker$MapBufferRangeDispatch,long) -> mapBuffer
    javax.media.opengl.GLBufferStorage mapBufferImpl(jogamp.opengl.GLBufferStateTracker,javax.media.opengl.GL,int,boolean,long,long,int,jogamp.opengl.GLBufferObjectTracker$MapBufferDispatch,long) -> mapBufferImpl
    javax.media.opengl.GLBufferStorage mapBufferImpl(int,int,boolean,boolean,long,long,int,jogamp.opengl.GLBufferObjectTracker$MapBufferDispatch,long) -> mapBufferImpl
    boolean unmapBuffer(jogamp.opengl.GLBufferStateTracker,javax.media.opengl.GL,int,jogamp.opengl.GLBufferObjectTracker$UnmapBufferDispatch,long) -> unmapBuffer
    boolean unmapBuffer(int,jogamp.opengl.GLBufferObjectTracker$UnmapBufferDispatch,long) -> unmapBuffer
    javax.media.opengl.GLBufferStorage getBufferStorage(int) -> getBufferStorage
    void clear() -> clear
    void <clinit>() -> <clinit>
jogamp.opengl.GLBufferObjectTracker$CreateStorageDispatch -> jogamp.opengl.GLBufferObjectTracker$CreateStorageDispatch:
    void create(int,long,java.nio.Buffer,int,long) -> create
jogamp.opengl.GLBufferObjectTracker$GLBufferStorageImpl -> jogamp.opengl.GLBufferObjectTracker$GLBufferStorageImpl:
    void <init>(int,long,int,int) -> <init>
    void reset(long,int,int) -> reset
    void setMappedBuffer(java.nio.ByteBuffer) -> setMappedBuffer
jogamp.opengl.GLBufferObjectTracker$MapBufferAllDispatch -> jogamp.opengl.GLBufferObjectTracker$MapBufferAllDispatch:
    long mapBuffer(int,int,long) -> mapBuffer
jogamp.opengl.GLBufferObjectTracker$MapBufferDispatch -> jogamp.opengl.GLBufferObjectTracker$MapBufferDispatch:
    java.nio.ByteBuffer allocNioByteBuffer(long,long) -> allocNioByteBuffer
jogamp.opengl.GLBufferObjectTracker$MapBufferRangeDispatch -> jogamp.opengl.GLBufferObjectTracker$MapBufferRangeDispatch:
    long mapBuffer(int,long,long,int,long) -> mapBuffer
jogamp.opengl.GLBufferObjectTracker$UnmapBufferDispatch -> jogamp.opengl.GLBufferObjectTracker$UnmapBufferDispatch:
    boolean unmap(int,long) -> unmap
jogamp.opengl.GLBufferStateTracker -> jogamp.opengl.GLBufferStateTracker:
    boolean DEBUG -> DEBUG
    com.jogamp.common.util.IntIntHashMap bindingMap -> bindingMap
    int bindingNotFound -> bindingNotFound
    int[] bufTmp -> bufTmp
    void <init>() -> <init>
    int getQueryName(int) -> getQueryName
    void checkTargetName(int) -> checkTargetName
    void setBoundBufferObject(int,int) -> setBoundBufferObject
    int getBoundBufferObject(int,javax.media.opengl.GL) -> getBoundBufferObject
    void clear() -> clear
    java.lang.String toHexString(int) -> toHexString
    void <clinit>() -> <clinit>
jogamp.opengl.GLContextImpl -> jogamp.opengl.GLContextImpl:
    java.lang.String contextFQN -> contextFQN
    int additionalCtxCreationFlags -> additionalCtxCreationFlags
    jogamp.opengl.ExtensionAvailabilityCache extensionAvailability -> extensionAvailability
    com.jogamp.gluegen.runtime.ProcAddressTable glProcAddressTable -> glProcAddressTable
    java.lang.String glVendor -> glVendor
    java.lang.String glRenderer -> glRenderer
    java.lang.String glRendererLowerCase -> glRendererLowerCase
    java.lang.String glVersion -> glVersion
    jogamp.opengl.GLBufferObjectTracker bufferObjectTracker -> bufferObjectTracker
    jogamp.opengl.GLBufferStateTracker bufferStateTracker -> bufferStateTracker
    jogamp.opengl.GLStateTracker glStateTracker -> glStateTracker
    jogamp.opengl.GLDebugMessageHandler glDebugHandler -> glDebugHandler
    int[] boundFBOTarget -> boundFBOTarget
    int defaultVAO -> defaultVAO
    jogamp.opengl.GLDrawableImpl drawable -> drawable
    jogamp.opengl.GLDrawableImpl drawableRead -> drawableRead
    boolean pixelDataEvaluated -> pixelDataEvaluated
    int pixelDataFormat -> pixelDataFormat
    int pixelDataType -> pixelDataType
    javax.media.opengl.GL gl -> gl
    java.lang.Object mappedContextTypeObjectLock -> mappedContextTypeObjectLock
    java.util.HashMap mappedExtensionAvailabilityCache -> mappedExtensionAvailabilityCache
    java.util.HashMap mappedGLProcAddress -> mappedGLProcAddress
    java.util.HashMap mappedGLXProcAddress -> mappedGLXProcAddress
    java.lang.Throwable lastCtxReleaseStack -> lastCtxReleaseStack
    boolean $assertionsDisabled -> $assertionsDisabled
    void shutdownImpl() -> shutdownImpl
    void <init>(jogamp.opengl.GLDrawableImpl,javax.media.opengl.GLContext) -> <init>
    void clearStates() -> clearStates
    void resetStates(boolean) -> resetStates
    javax.media.opengl.GLDrawable setGLReadDrawable(javax.media.opengl.GLDrawable) -> setGLReadDrawable
    javax.media.opengl.GLDrawable getGLReadDrawable() -> getGLReadDrawable
    javax.media.opengl.GLDrawable setGLDrawable(javax.media.opengl.GLDrawable,boolean) -> setGLDrawable
    javax.media.opengl.GLDrawable getGLDrawable() -> getGLDrawable
    jogamp.opengl.GLDrawableImpl getDrawableImpl() -> getDrawableImpl
    javax.media.opengl.GL getRootGL() -> getRootGL
    javax.media.opengl.GL getGL() -> getGL
    javax.media.opengl.GL setGL(javax.media.opengl.GL) -> setGL
    int getDefaultVAO() -> getDefaultVAO
    void drawableUpdatedNotify() -> drawableUpdatedNotify
    java.lang.Object getPlatformGLExtensions() -> getPlatformGLExtensions
    void release() -> release
    void release(boolean) -> release
    void releaseImpl() -> releaseImpl
    void destroy() -> destroy
    void destroyImpl() -> destroyImpl
    void copy(javax.media.opengl.GLContext,int) -> copy
    void copyImpl(javax.media.opengl.GLContext,int) -> copyImpl
    int makeCurrent() -> makeCurrent
    int makeCurrent(boolean) -> makeCurrent
    int makeCurrentWithinLock(int) -> makeCurrentWithinLock
    void makeCurrentImpl() -> makeCurrentImpl
    void associateDrawable(boolean) -> associateDrawable
    void contextMadeCurrent(boolean) -> contextMadeCurrent
    boolean createImpl(long) -> createImpl
    long createContextARBImpl(long,boolean,int,int,int) -> createContextARBImpl
    void destroyContextARBImpl(long) -> destroyContextARBImpl
    long createContextARB(long,boolean) -> createContextARB
    boolean mapGLVersions(javax.media.nativewindow.AbstractGraphicsDevice) -> mapGLVersions
    boolean createContextARBMapVersionsAvailable(int,int) -> createContextARBMapVersionsAvailable
    long createContextARBVersions(long,boolean,int,int,int,int,int,int[],int[]) -> createContextARBVersions
    void setContextVersion(int,int,int,com.jogamp.common.util.VersionNumberString,boolean) -> setContextVersion
    java.lang.Object createInstance(javax.media.opengl.GLProfile,boolean,java.lang.Object[]) -> createInstance
    boolean verifyInstance(javax.media.opengl.GLProfile,java.lang.String,java.lang.Object) -> verifyInstance
    javax.media.opengl.GL createGL(javax.media.opengl.GLProfile) -> createGL
    void finalizeInit(javax.media.opengl.GL) -> finalizeInit
    com.jogamp.gluegen.runtime.ProcAddressTable getGLProcAddressTable() -> getGLProcAddressTable
    com.jogamp.gluegen.runtime.ProcAddressTable getPlatformExtProcAddressTable() -> getPlatformExtProcAddressTable
    java.nio.ByteBuffer glAllocateMemoryNV(int,float,float,float) -> glAllocateMemoryNV
    void glFreeMemoryNV(java.nio.ByteBuffer) -> glFreeMemoryNV
    java.lang.String mapToRealGLFunctionName(java.lang.String) -> mapToRealGLFunctionName
    java.util.Map getFunctionNameMap() -> getFunctionNameMap
    java.lang.String mapToRealGLExtensionName(java.lang.String) -> mapToRealGLExtensionName
    java.util.Map getExtensionNameMap() -> getExtensionNameMap
    void resetProcAddressTable(com.jogamp.gluegen.runtime.ProcAddressTable) -> resetProcAddressTable
    boolean initGLRendererAndGLVersionStrings() -> initGLRendererAndGLVersionStrings
    com.jogamp.common.util.VersionNumber getGLVersionNumber(int,java.lang.String) -> getGLVersionNumber
    boolean getGLIntVersion(int[],int[]) -> getGLIntVersion
    int getCtxOptions() -> getCtxOptions
    boolean setGLFunctionAvailability(boolean,int,int,int,boolean,boolean) -> setGLFunctionAvailability
    void setRendererQuirks(javax.media.nativewindow.AbstractGraphicsDevice,jogamp.opengl.GLDrawableFactoryImpl,int,int,int,int,int,int,com.jogamp.common.util.VersionNumberString,boolean) -> setRendererQuirks
    boolean hasFBOImpl(int,int,jogamp.opengl.ExtensionAvailabilityCache) -> hasFBOImpl
    void removeCachedVersion(int,int,int) -> removeCachedVersion
    boolean isCurrentContextHardwareRasterizer() -> isCurrentContextHardwareRasterizer
    void updateGLXProcAddressTable() -> updateGLXProcAddressTable
    java.lang.StringBuilder getPlatformExtensionsStringImpl() -> getPlatformExtensionsStringImpl
    boolean isFunctionAvailable(java.lang.String) -> isFunctionAvailable
    boolean isExtensionAvailable(java.lang.String) -> isExtensionAvailable
    int getPlatformExtensionCount() -> getPlatformExtensionCount
    java.lang.String getPlatformExtensionsString() -> getPlatformExtensionsString
    int getGLExtensionCount() -> getGLExtensionCount
    java.lang.String getGLExtensionsString() -> getGLExtensionsString
    boolean isExtensionCacheInitialized() -> isExtensionCacheInitialized
    java.lang.String getContextFQN(javax.media.nativewindow.AbstractGraphicsDevice,int,int,int) -> getContextFQN
    java.lang.String getContextFQN() -> getContextFQN
    int getDefaultPixelDataType() -> getDefaultPixelDataType
    int getDefaultPixelDataFormat() -> getDefaultPixelDataFormat
    void evalPixelDataType() -> evalPixelDataType
    jogamp.opengl.GLBufferObjectTracker getBufferObjectTracker() -> getBufferObjectTracker
    jogamp.opengl.GLBufferStateTracker getBufferStateTracker() -> getBufferStateTracker
    jogamp.opengl.GLStateTracker getGLStateTracker() -> getGLStateTracker
    boolean isOwner(java.lang.Thread) -> isOwner
    boolean hasWaiters() -> hasWaiters
    int getLockCount() -> getLockCount
    void setBoundFramebuffer(int,int) -> setBoundFramebuffer
    int getBoundFramebuffer(int) -> getBoundFramebuffer
    int getDefaultDrawFramebuffer() -> getDefaultDrawFramebuffer
    int getDefaultReadFramebuffer() -> getDefaultReadFramebuffer
    int getDefaultReadBuffer() -> getDefaultReadBuffer
    java.lang.String getGLDebugMessageExtension() -> getGLDebugMessageExtension
    boolean isGLDebugMessageEnabled() -> isGLDebugMessageEnabled
    int getContextCreationFlags() -> getContextCreationFlags
    void setContextCreationFlags(int) -> setContextCreationFlags
    boolean isGLDebugSynchronous() -> isGLDebugSynchronous
    void setGLDebugSynchronous(boolean) -> setGLDebugSynchronous
    void enableGLDebugMessage(boolean) -> enableGLDebugMessage
    void addGLDebugListener(javax.media.opengl.GLDebugListener) -> addGLDebugListener
    void removeGLDebugListener(javax.media.opengl.GLDebugListener) -> removeGLDebugListener
    void glDebugMessageControl(int,int,int,int,java.nio.IntBuffer,boolean) -> glDebugMessageControl
    void glDebugMessageControl(int,int,int,int,int[],int,boolean) -> glDebugMessageControl
    void glDebugMessageInsert(int,int,int,int,java.lang.String) -> glDebugMessageInsert
    java.lang.String glGetStringInt(int,long) -> glGetStringInt
    void glGetIntegervInt(int,int[],int,long) -> glGetIntegervInt
    void <clinit>() -> <clinit>
jogamp.opengl.GLContextImpl$1 -> jogamp.opengl.GLContextImpl$1:
    com.jogamp.gluegen.runtime.ProcAddressTable val$table -> val$table
    jogamp.opengl.GLContextImpl this$0 -> this$0
    void <init>(jogamp.opengl.GLContextImpl,com.jogamp.gluegen.runtime.ProcAddressTable) -> <init>
    java.lang.Object run() -> run
jogamp.opengl.GLContextShareSet -> jogamp.opengl.GLContextShareSet:
    boolean DEBUG -> DEBUG
    java.util.Map shareMap -> shareMap
    java.lang.Object dummyValue -> dummyValue
    void <init>() -> <init>
    void registerSharing(javax.media.opengl.GLContext,javax.media.opengl.GLContext) -> registerSharing
    void unregisterSharing(javax.media.opengl.GLContext) -> unregisterSharing
    boolean isShared(javax.media.opengl.GLContext) -> isShared
    javax.media.opengl.GLContext getCreatedShare(javax.media.opengl.GLContext) -> getCreatedShare
    java.util.Set getCreatedSharesImpl(javax.media.opengl.GLContext) -> getCreatedSharesImpl
    java.util.Set getDestroyedSharesImpl(javax.media.opengl.GLContext) -> getDestroyedSharesImpl
    boolean hasCreatedSharedLeft(javax.media.opengl.GLContext) -> hasCreatedSharedLeft
    java.util.ArrayList getCreatedShares(javax.media.opengl.GLContext) -> getCreatedShares
    java.util.ArrayList getDestroyedShares(javax.media.opengl.GLContext) -> getDestroyedShares
    boolean contextCreated(javax.media.opengl.GLContext) -> contextCreated
    boolean contextDestroyed(javax.media.opengl.GLContext) -> contextDestroyed
    jogamp.opengl.GLContextShareSet$ShareSet entryFor(javax.media.opengl.GLContext) -> entryFor
    void addEntry(javax.media.opengl.GLContext,jogamp.opengl.GLContextShareSet$ShareSet) -> addEntry
    jogamp.opengl.GLContextShareSet$ShareSet removeEntry(javax.media.opengl.GLContext) -> removeEntry
    java.lang.String toHexString(long) -> toHexString
    java.lang.Object access$000() -> access$000
    void <clinit>() -> <clinit>
jogamp.opengl.GLContextShareSet$1 -> jogamp.opengl.GLContextShareSet$1:
jogamp.opengl.GLContextShareSet$ShareSet -> jogamp.opengl.GLContextShareSet$ShareSet:
    java.util.Map allShares -> allShares
    java.util.Map createdShares -> createdShares
    java.util.Map destroyedShares -> destroyedShares
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    void add(javax.media.opengl.GLContext) -> add
    java.util.Set getCreatedShares() -> getCreatedShares
    java.util.Set getDestroyedShares() -> getDestroyedShares
    javax.media.opengl.GLContext getCreatedShare(javax.media.opengl.GLContext) -> getCreatedShare
    void contextCreated(javax.media.opengl.GLContext) -> contextCreated
    void contextDestroyed(javax.media.opengl.GLContext) -> contextDestroyed
    void <init>(jogamp.opengl.GLContextShareSet$1) -> <init>
    void <clinit>() -> <clinit>
jogamp.opengl.GLDebugMessageHandler -> jogamp.opengl.GLDebugMessageHandler:
    boolean DEBUG -> DEBUG
    int EXT_ARB -> EXT_ARB
    int EXT_AMD -> EXT_AMD
    jogamp.opengl.GLContextImpl ctx -> ctx
    jogamp.opengl.ListenerSyncedImplStub listenerImpl -> listenerImpl
    java.lang.String extName -> extName
    int extType -> extType
    long glDebugMessageCallbackProcAddress -> glDebugMessageCallbackProcAddress
    boolean extAvailable -> extAvailable
    boolean synchronous -> synchronous
    long handle -> handle
    void <init>(jogamp.opengl.GLContextImpl) -> <init>
    void init(boolean) -> init
    long getAddressFor(com.jogamp.gluegen.runtime.ProcAddressTable,java.lang.String) -> getAddressFor
    void init() -> init
    boolean isAvailable() -> isAvailable
    java.lang.String getExtension() -> getExtension
    boolean isExtensionARB() -> isExtensionARB
    boolean isExtensionAMD() -> isExtensionAMD
    boolean isSynchronous() -> isSynchronous
    void setSynchronous(boolean) -> setSynchronous
    void setSynchronousImpl() -> setSynchronousImpl
    void enable(boolean) -> enable
    void enableImpl(boolean) -> enableImpl
    boolean isEnabled() -> isEnabled
    int listenerSize() -> listenerSize
    void addListener(javax.media.opengl.GLDebugListener) -> addListener
    void addListener(int,javax.media.opengl.GLDebugListener) -> addListener
    void removeListener(javax.media.opengl.GLDebugListener) -> removeListener
    void sendMessage(javax.media.opengl.GLDebugMessage) -> sendMessage
    void glDebugMessageARB(int,int,int,int,java.lang.String) -> glDebugMessageARB
    void glDebugMessageAMD(int,int,int,java.lang.String) -> glDebugMessageAMD
    boolean initIDs0() -> initIDs0
    long register0(long,int) -> register0
    void unregister0(long,long) -> unregister0
    void <clinit>() -> <clinit>
jogamp.opengl.GLDebugMessageHandler$1 -> jogamp.opengl.GLDebugMessageHandler$1:
    com.jogamp.gluegen.runtime.ProcAddressTable val$table -> val$table
    java.lang.String val$functionName -> val$functionName
    jogamp.opengl.GLDebugMessageHandler this$0 -> this$0
    void <init>(jogamp.opengl.GLDebugMessageHandler,com.jogamp.gluegen.runtime.ProcAddressTable,java.lang.String) -> <init>
    java.lang.Long run() -> run
    java.lang.Object run() -> run
jogamp.opengl.GLDebugMessageHandler$StdErrGLDebugListener -> jogamp.opengl.GLDebugMessageHandler$StdErrGLDebugListener:
    boolean threadDump -> threadDump
    void <init>(boolean) -> <init>
    void messageSent(javax.media.opengl.GLDebugMessage) -> messageSent
jogamp.opengl.GLDrawableFactoryImpl -> jogamp.opengl.GLDrawableFactoryImpl:
    boolean DEBUG -> DEBUG
    java.util.Map screen2OrigGammaRamp -> screen2OrigGammaRamp
    void <init>() -> <init>
    jogamp.opengl.SharedResourceRunner$Resource getOrCreateSharedResource(javax.media.nativewindow.AbstractGraphicsDevice) -> getOrCreateSharedResource
    jogamp.opengl.SharedResourceRunner$Resource getOrCreateSharedResourceImpl(javax.media.nativewindow.AbstractGraphicsDevice) -> getOrCreateSharedResourceImpl
    javax.media.opengl.GLContext getOrCreateSharedContext(javax.media.nativewindow.AbstractGraphicsDevice) -> getOrCreateSharedContext
    boolean createSharedResourceImpl(javax.media.nativewindow.AbstractGraphicsDevice) -> createSharedResourceImpl
    com.jogamp.opengl.GLRendererQuirks getRendererQuirks(javax.media.nativewindow.AbstractGraphicsDevice) -> getRendererQuirks
    javax.media.nativewindow.AbstractGraphicsDevice getOrCreateSharedDevice(javax.media.nativewindow.AbstractGraphicsDevice) -> getOrCreateSharedDevice
    jogamp.opengl.GLDynamicLookupHelper getGLDynamicLookupHelper(int) -> getGLDynamicLookupHelper
    javax.media.opengl.GLDrawable createGLDrawable(javax.media.nativewindow.NativeSurface) -> createGLDrawable
    jogamp.opengl.GLDrawableImpl createOnscreenDrawableImpl(javax.media.nativewindow.NativeSurface) -> createOnscreenDrawableImpl
    boolean canCreateGLPbuffer(javax.media.nativewindow.AbstractGraphicsDevice,javax.media.opengl.GLProfile) -> canCreateGLPbuffer
    boolean canCreateFBO(javax.media.nativewindow.AbstractGraphicsDevice,javax.media.opengl.GLProfile) -> canCreateFBO
    javax.media.opengl.GLOffscreenAutoDrawable createOffscreenAutoDrawable(javax.media.nativewindow.AbstractGraphicsDevice,javax.media.opengl.GLCapabilitiesImmutable,javax.media.opengl.GLCapabilitiesChooser,int,int) -> createOffscreenAutoDrawable
    javax.media.opengl.GLAutoDrawable createDummyAutoDrawable(javax.media.nativewindow.AbstractGraphicsDevice,boolean,javax.media.opengl.GLCapabilitiesImmutable,javax.media.opengl.GLCapabilitiesChooser) -> createDummyAutoDrawable
    javax.media.opengl.GLDrawable createOffscreenDrawable(javax.media.nativewindow.AbstractGraphicsDevice,javax.media.opengl.GLCapabilitiesImmutable,javax.media.opengl.GLCapabilitiesChooser,int,int) -> createOffscreenDrawable
    javax.media.opengl.GLDrawable createDummyDrawable(javax.media.nativewindow.AbstractGraphicsDevice,boolean,javax.media.opengl.GLCapabilitiesImmutable,javax.media.opengl.GLCapabilitiesChooser) -> createDummyDrawable
    javax.media.opengl.GLFBODrawable createFBODrawableImpl(javax.media.nativewindow.NativeSurface,javax.media.opengl.GLCapabilitiesImmutable,int) -> createFBODrawableImpl
    jogamp.opengl.GLDrawableImpl createOffscreenDrawableImpl(javax.media.nativewindow.NativeSurface) -> createOffscreenDrawableImpl
    javax.media.nativewindow.ProxySurface createMutableSurfaceImpl(javax.media.nativewindow.AbstractGraphicsDevice,boolean,javax.media.opengl.GLCapabilitiesImmutable,javax.media.opengl.GLCapabilitiesImmutable,javax.media.opengl.GLCapabilitiesChooser,javax.media.nativewindow.UpstreamSurfaceHook) -> createMutableSurfaceImpl
    javax.media.nativewindow.ProxySurface createDummySurface(javax.media.nativewindow.AbstractGraphicsDevice,javax.media.opengl.GLCapabilitiesImmutable,javax.media.opengl.GLCapabilitiesChooser,int,int) -> createDummySurface
    javax.media.nativewindow.ProxySurface createDummySurfaceImpl(javax.media.nativewindow.AbstractGraphicsDevice,boolean,javax.media.opengl.GLCapabilitiesImmutable,javax.media.opengl.GLCapabilitiesImmutable,javax.media.opengl.GLCapabilitiesChooser,int,int) -> createDummySurfaceImpl
    javax.media.nativewindow.ProxySurface createProxySurface(javax.media.nativewindow.AbstractGraphicsDevice,int,long,javax.media.opengl.GLCapabilitiesImmutable,javax.media.opengl.GLCapabilitiesChooser,javax.media.nativewindow.UpstreamSurfaceHook) -> createProxySurface
    javax.media.nativewindow.ProxySurface createProxySurfaceImpl(javax.media.nativewindow.AbstractGraphicsDevice,int,long,javax.media.opengl.GLCapabilitiesImmutable,javax.media.opengl.GLCapabilitiesChooser,javax.media.nativewindow.UpstreamSurfaceHook) -> createProxySurfaceImpl
    javax.media.opengl.GLContext createExternalGLContextImpl() -> createExternalGLContextImpl
    javax.media.opengl.GLContext createExternalGLContext() -> createExternalGLContext
    javax.media.opengl.GLDrawable createExternalGLDrawableImpl() -> createExternalGLDrawableImpl
    javax.media.opengl.GLDrawable createExternalGLDrawable() -> createExternalGLDrawable
    jogamp.opengl.GLDrawableFactoryImpl getFactoryImpl(javax.media.opengl.GLProfile) -> getFactoryImpl
    boolean setDisplayGamma(javax.media.nativewindow.NativeSurface,float,float,float) -> setDisplayGamma
    void resetDisplayGamma(javax.media.nativewindow.NativeSurface) -> resetDisplayGamma
    void resetAllDisplayGamma() -> resetAllDisplayGamma
    void resetAllDisplayGammaNoSync() -> resetAllDisplayGammaNoSync
    void dumpGammaStore() -> dumpGammaStore
    int getGammaRampLength(javax.media.nativewindow.NativeSurface) -> getGammaRampLength
    boolean setGammaRamp(javax.media.nativewindow.NativeSurface,float[]) -> setGammaRamp
    java.nio.Buffer getGammaRamp(javax.media.nativewindow.NativeSurface) -> getGammaRamp
    void resetGammaRamp(javax.media.nativewindow.NativeSurface,java.nio.Buffer) -> resetGammaRamp
    void resetGammaRamp(jogamp.opengl.GLDrawableFactoryImpl$DeviceScreenID,java.nio.Buffer) -> resetGammaRamp
    void <clinit>() -> <clinit>
jogamp.opengl.GLDrawableFactoryImpl$1 -> jogamp.opengl.GLDrawableFactoryImpl$1:
    jogamp.opengl.GLDrawableFactoryImpl this$0 -> this$0
    void <init>(jogamp.opengl.GLDrawableFactoryImpl,javax.media.opengl.GLDrawable,javax.media.opengl.GLContext,java.lang.Object,boolean,com.jogamp.common.util.locks.RecursiveLock) -> <init>
jogamp.opengl.GLDrawableFactoryImpl$DeviceScreenID -> jogamp.opengl.GLDrawableFactoryImpl$DeviceScreenID:
    java.lang.String deviceConnection -> deviceConnection
    int screenIdx -> screenIdx
    jogamp.opengl.GLDrawableFactoryImpl this$0 -> this$0
    void <init>(jogamp.opengl.GLDrawableFactoryImpl,java.lang.String,int) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
jogamp.opengl.GLDrawableHelper -> jogamp.opengl.GLDrawableHelper:
    boolean PERF_STATS -> PERF_STATS
    boolean DEBUG -> DEBUG
    java.lang.Object listenersLock -> listenersLock
    java.util.ArrayList listeners -> listeners
    java.util.HashSet listenersToBeInit -> listenersToBeInit
    java.lang.Object glRunnablesLock -> glRunnablesLock
    java.util.ArrayList glRunnables -> glRunnables
    boolean autoSwapBufferMode -> autoSwapBufferMode
    java.lang.Thread exclusiveContextThread -> exclusiveContextThread
    int exclusiveContextSwitch -> exclusiveContextSwitch
    javax.media.opengl.GLAnimatorControl animatorCtrl -> animatorCtrl
    java.lang.Runnable nop -> nop
    javax.media.opengl.GLContext sharedContext -> sharedContext
    javax.media.opengl.GLAutoDrawable sharedAutoDrawable -> sharedAutoDrawable
    int MAX_RELEASE_ITER -> MAX_RELEASE_ITER
    java.lang.ThreadLocal perThreadInitAction -> perThreadInitAction
    void <init>() -> <init>
    void reset() -> reset
    void setSharedContext(javax.media.opengl.GLContext,javax.media.opengl.GLContext) -> setSharedContext
    void setSharedAutoDrawable(javax.media.opengl.GLAutoDrawable,javax.media.opengl.GLAutoDrawable) -> setSharedAutoDrawable
    boolean isSharedGLContextPending(javax.media.opengl.GLContext[]) -> isSharedGLContextPending
    java.lang.String toString() -> toString
    void forceNativeRelease(javax.media.opengl.GLContext) -> forceNativeRelease
    void switchContext(javax.media.opengl.GLDrawable,javax.media.opengl.GLContext,boolean,javax.media.opengl.GLContext,int) -> switchContext
    jogamp.opengl.GLDrawableImpl recreateGLDrawable(jogamp.opengl.GLDrawableImpl,javax.media.opengl.GLContext) -> recreateGLDrawable
    jogamp.opengl.GLDrawableImpl resizeOffscreenDrawable(jogamp.opengl.GLDrawableImpl,javax.media.opengl.GLContext,int,int) -> resizeOffscreenDrawable
    void addGLEventListener(javax.media.opengl.GLEventListener) -> addGLEventListener
    void addGLEventListener(int,javax.media.opengl.GLEventListener) -> addGLEventListener
    javax.media.opengl.GLEventListener removeGLEventListener(javax.media.opengl.GLEventListener) -> removeGLEventListener
    javax.media.opengl.GLEventListener removeGLEventListener(int) -> removeGLEventListener
    int getGLEventListenerCount() -> getGLEventListenerCount
    javax.media.opengl.GLEventListener getGLEventListener(int) -> getGLEventListener
    boolean areAllGLEventListenerInitialized() -> areAllGLEventListenerInitialized
    boolean getGLEventListenerInitState(javax.media.opengl.GLEventListener) -> getGLEventListenerInitState
    void setGLEventListenerInitState(javax.media.opengl.GLEventListener,boolean) -> setGLEventListenerInitState
    javax.media.opengl.GLEventListener disposeGLEventListener(javax.media.opengl.GLAutoDrawable,javax.media.opengl.GLEventListener,boolean) -> disposeGLEventListener
    int disposeAllGLEventListener(javax.media.opengl.GLAutoDrawable,boolean) -> disposeAllGLEventListener
    javax.media.opengl.GLEventListener disposeGLEventListener(javax.media.opengl.GLAutoDrawable,javax.media.opengl.GLDrawable,javax.media.opengl.GLContext,javax.media.opengl.GLEventListener,boolean) -> disposeGLEventListener
    void disposeAllGLEventListener(javax.media.opengl.GLAutoDrawable,javax.media.opengl.GLDrawable,javax.media.opengl.GLContext,boolean) -> disposeAllGLEventListener
    void init(javax.media.opengl.GLEventListener,javax.media.opengl.GLAutoDrawable,boolean,boolean) -> init
    void init(javax.media.opengl.GLAutoDrawable,boolean) -> init
    void display(javax.media.opengl.GLAutoDrawable) -> display
    void displayImpl(javax.media.opengl.GLAutoDrawable) -> displayImpl
    void runForAllGLEventListener(javax.media.opengl.GLAutoDrawable,jogamp.opengl.GLDrawableHelper$GLEventListenerAction) -> runForAllGLEventListener
    void reshape(javax.media.opengl.GLEventListener,javax.media.opengl.GLAutoDrawable,int,int,int,int,boolean,boolean) -> reshape
    void reshape(javax.media.opengl.GLAutoDrawable,int,int,int,int) -> reshape
    boolean execGLRunnables(javax.media.opengl.GLAutoDrawable) -> execGLRunnables
    void flushGLRunnables() -> flushGLRunnables
    void setAnimator(javax.media.opengl.GLAnimatorControl) -> setAnimator
    javax.media.opengl.GLAnimatorControl getAnimator() -> getAnimator
    boolean isAnimatorStartedOnOtherThread() -> isAnimatorStartedOnOtherThread
    boolean isAnimatorStarted() -> isAnimatorStarted
    boolean isAnimatorAnimatingOnOtherThread() -> isAnimatorAnimatingOnOtherThread
    boolean isAnimatorAnimating() -> isAnimatorAnimating
    boolean isLockedByOtherThread(javax.media.opengl.GLAutoDrawable) -> isLockedByOtherThread
    boolean isLockedByThisThread(javax.media.opengl.GLAutoDrawable) -> isLockedByThisThread
    boolean invoke(javax.media.opengl.GLAutoDrawable,boolean,javax.media.opengl.GLRunnable) -> invoke
    boolean invoke(javax.media.opengl.GLAutoDrawable,boolean,java.util.List) -> invoke
    void enqueue(javax.media.opengl.GLRunnable) -> enqueue
    void setAutoSwapBufferMode(boolean) -> setAutoSwapBufferMode
    boolean getAutoSwapBufferMode() -> getAutoSwapBufferMode
    java.lang.String getExclusiveContextSwitchString() -> getExclusiveContextSwitchString
    java.lang.Thread setExclusiveContextThread(java.lang.Thread,javax.media.opengl.GLContext) -> setExclusiveContextThread
    java.lang.Thread getExclusiveContextThread() -> getExclusiveContextThread
    java.lang.Runnable getLastInitAction() -> getLastInitAction
    void setLastInitAction(java.lang.Runnable) -> setLastInitAction
    void invokeGL(javax.media.opengl.GLDrawable,javax.media.opengl.GLContext,java.lang.Runnable,java.lang.Runnable) -> invokeGL
    void disposeGL(javax.media.opengl.GLAutoDrawable,javax.media.opengl.GLContext,boolean) -> disposeGL
    void invokeGLImpl(javax.media.opengl.GLDrawable,javax.media.opengl.GLContext,java.lang.Runnable,java.lang.Runnable) -> invokeGLImpl
    void invokeGLImplStats(javax.media.opengl.GLDrawable,javax.media.opengl.GLContext,java.lang.Runnable,java.lang.Runnable) -> invokeGLImplStats
    java.lang.String getThreadName() -> getThreadName
    void <clinit>() -> <clinit>
jogamp.opengl.GLDrawableHelper$1 -> jogamp.opengl.GLDrawableHelper$1:
    void <init>() -> <init>
    void run() -> run
jogamp.opengl.GLDrawableHelper$2 -> jogamp.opengl.GLDrawableHelper$2:
    javax.media.opengl.GLEventListener[] val$res -> val$res
    javax.media.opengl.GLAutoDrawable val$autoDrawable -> val$autoDrawable
    javax.media.opengl.GLEventListener val$listener -> val$listener
    boolean val$remove -> val$remove
    jogamp.opengl.GLDrawableHelper this$0 -> this$0
    void <init>(jogamp.opengl.GLDrawableHelper,javax.media.opengl.GLEventListener[],javax.media.opengl.GLAutoDrawable,javax.media.opengl.GLEventListener,boolean) -> <init>
    void run() -> run
jogamp.opengl.GLDrawableHelper$3 -> jogamp.opengl.GLDrawableHelper$3:
    javax.media.opengl.GLAutoDrawable val$autoDrawable -> val$autoDrawable
    boolean val$remove -> val$remove
    jogamp.opengl.GLDrawableHelper this$0 -> this$0
    void <init>(jogamp.opengl.GLDrawableHelper,javax.media.opengl.GLAutoDrawable,boolean) -> <init>
    void run() -> run
jogamp.opengl.GLDrawableHelper$GLEventListenerAction -> jogamp.opengl.GLDrawableHelper$GLEventListenerAction:
    void run(javax.media.opengl.GLAutoDrawable,javax.media.opengl.GLEventListener) -> run
jogamp.opengl.GLDrawableImpl -> jogamp.opengl.GLDrawableImpl:
    boolean DEBUG -> DEBUG
    javax.media.opengl.GLDrawableFactory factory -> factory
    javax.media.nativewindow.NativeSurface surface -> surface
    javax.media.opengl.GLCapabilitiesImmutable requestedCapabilities -> requestedCapabilities
    boolean realized -> realized
    void <init>(javax.media.opengl.GLDrawableFactory,javax.media.nativewindow.NativeSurface,boolean) -> <init>
    void <init>(javax.media.opengl.GLDrawableFactory,javax.media.nativewindow.NativeSurface,javax.media.opengl.GLCapabilitiesImmutable,boolean) -> <init>
    jogamp.opengl.GLDynamicLookupHelper getGLDynamicLookupHelper() -> getGLDynamicLookupHelper
    jogamp.opengl.GLDrawableFactoryImpl getFactoryImpl() -> getFactoryImpl
    void swapBuffers() -> swapBuffers
    void swapBuffersImpl(boolean) -> swapBuffersImpl
    java.lang.String toHexString(long) -> toHexString
    javax.media.opengl.GLProfile getGLProfile() -> getGLProfile
    javax.media.opengl.GLCapabilitiesImmutable getChosenGLCapabilities() -> getChosenGLCapabilities
    javax.media.opengl.GLCapabilitiesImmutable getRequestedGLCapabilities() -> getRequestedGLCapabilities
    javax.media.nativewindow.NativeSurface getNativeSurface() -> getNativeSurface
    void destroyHandle() -> destroyHandle
    void createHandle() -> createHandle
    long getHandle() -> getHandle
    javax.media.opengl.GLDrawableFactory getFactory() -> getFactory
    void setRealized(boolean) -> setRealized
    void setRealizedImpl() -> setRealizedImpl
    void associateContext(javax.media.opengl.GLContext,boolean) -> associateContext
    void contextMadeCurrent(javax.media.opengl.GLContext,boolean) -> contextMadeCurrent
    int getDefaultDrawFramebuffer() -> getDefaultDrawFramebuffer
    int getDefaultReadFramebuffer() -> getDefaultReadFramebuffer
    int getDefaultReadBuffer(javax.media.opengl.GL,boolean) -> getDefaultReadBuffer
    boolean isRealized() -> isRealized
    int getSurfaceWidth() -> getSurfaceWidth
    int getSurfaceHeight() -> getSurfaceHeight
    boolean isGLOriented() -> isGLOriented
    int lockSurface() -> lockSurface
    void unlockSurface() -> unlockSurface
    java.lang.String toString() -> toString
    java.lang.String getThreadName() -> getThreadName
    void <clinit>() -> <clinit>
jogamp.opengl.GLDynamicLibraryBundleInfo -> jogamp.opengl.GLDynamicLibraryBundleInfo:
    void <init>() -> <init>
    boolean shallLinkGlobal() -> shallLinkGlobal
    boolean shallLookupGlobal() -> shallLookupGlobal
    com.jogamp.common.util.RunnableExecutor getLibLoaderExecutor() -> getLibLoaderExecutor
jogamp.opengl.GLDynamicLookupHelper -> jogamp.opengl.GLDynamicLookupHelper:
    void <init>(jogamp.opengl.GLDynamicLibraryBundleInfo) -> <init>
    jogamp.opengl.GLDynamicLibraryBundleInfo getGLBundleInfo() -> getGLBundleInfo
    boolean loadGLULibrary() -> loadGLULibrary
jogamp.opengl.GLFBODrawableImpl -> jogamp.opengl.GLFBODrawableImpl:
    boolean DEBUG -> DEBUG
    boolean DEBUG_SWAP -> DEBUG_SWAP
    jogamp.opengl.GLDrawableImpl parent -> parent
    javax.media.opengl.GLCapabilitiesImmutable origParentChosenCaps -> origParentChosenCaps
    boolean initialized -> initialized
    int fboModeBits -> fboModeBits
    int texUnit -> texUnit
    int samples -> samples
    boolean fboResetQuirk -> fboResetQuirk
    com.jogamp.opengl.FBObject[] fbos -> fbos
    int fboIBack -> fboIBack
    int fboIFront -> fboIFront
    int pendingFBOReset -> pendingFBOReset
    boolean fboBound -> fboBound
    boolean fboSwapped -> fboSwapped
    boolean resetQuirkInfoDumped -> resetQuirkInfoDumped
    int bufferCount -> bufferCount
    jogamp.opengl.GLFBODrawableImpl$SwapBufferContext swapBufferContext -> swapBufferContext
    java.lang.String illegalBufferName -> illegalBufferName
    void <init>(jogamp.opengl.GLDrawableFactoryImpl,jogamp.opengl.GLDrawableImpl,javax.media.nativewindow.NativeSurface,javax.media.opengl.GLCapabilitiesImmutable,int) -> <init>
    void initialize(boolean,javax.media.opengl.GL) -> initialize
    void setSwapBufferContext(jogamp.opengl.GLFBODrawableImpl$SwapBufferContext) -> setSwapBufferContext
    void reset(javax.media.opengl.GL,int,int,int,int,int,int) -> reset
    void reset(javax.media.opengl.GL,int) -> reset
    javax.media.opengl.GLContext createContext(javax.media.opengl.GLContext) -> createContext
    jogamp.opengl.GLDynamicLookupHelper getGLDynamicLookupHelper() -> getGLDynamicLookupHelper
    int getDefaultDrawFramebuffer() -> getDefaultDrawFramebuffer
    int getDefaultReadFramebuffer() -> getDefaultReadFramebuffer
    int getDefaultReadBuffer(javax.media.opengl.GL,boolean) -> getDefaultReadBuffer
    void setRealizedImpl() -> setRealizedImpl
    void associateContext(javax.media.opengl.GLContext,boolean) -> associateContext
    void contextMadeCurrent(javax.media.opengl.GLContext,boolean) -> contextMadeCurrent
    void swapBuffersImpl(boolean) -> swapBuffersImpl
    void swapFBOImplPost(javax.media.opengl.GLContext) -> swapFBOImplPost
    void swapFBOImpl(javax.media.opengl.GLContext) -> swapFBOImpl
    boolean isInitialized() -> isInitialized
    void setFBOMode(int) -> setFBOMode
    int getFBOMode() -> getFBOMode
    void resetSize(javax.media.opengl.GL) -> resetSize
    int getTextureUnit() -> getTextureUnit
    void setTextureUnit(int) -> setTextureUnit
    int getNumSamples() -> getNumSamples
    void setNumSamples(javax.media.opengl.GL,int) -> setNumSamples
    int setNumBuffers(int) -> setNumBuffers
    int getNumBuffers() -> getNumBuffers
    com.jogamp.opengl.FBObject getFBObject(int) -> getFBObject
    com.jogamp.opengl.FBObject$Colorbuffer getColorbuffer(int) -> getColorbuffer
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
jogamp.opengl.GLFBODrawableImpl$ResizeableImpl -> jogamp.opengl.GLFBODrawableImpl$ResizeableImpl:
    void <init>(jogamp.opengl.GLDrawableFactoryImpl,jogamp.opengl.GLDrawableImpl,javax.media.nativewindow.ProxySurface,javax.media.opengl.GLCapabilitiesImmutable,int) -> <init>
    void setSurfaceSize(javax.media.opengl.GLContext,int,int) -> setSurfaceSize
jogamp.opengl.GLFBODrawableImpl$SwapBufferContext -> jogamp.opengl.GLFBODrawableImpl$SwapBufferContext:
    void swapBuffers(boolean) -> swapBuffers
jogamp.opengl.GLGraphicsConfigurationUtil -> jogamp.opengl.GLGraphicsConfigurationUtil:
    java.lang.String NV_coverage_sample -> NV_coverage_sample
    int WINDOW_BIT -> WINDOW_BIT
    int BITMAP_BIT -> BITMAP_BIT
    int PBUFFER_BIT -> PBUFFER_BIT
    int FBO_BIT -> FBO_BIT
    int ALL_BITS -> ALL_BITS
    void <init>() -> <init>
    java.lang.StringBuilder winAttributeBits2String(java.lang.StringBuilder,int) -> winAttributeBits2String
    int getExclusiveWinAttributeBits(boolean,boolean,boolean,boolean) -> getExclusiveWinAttributeBits
    int getExclusiveWinAttributeBits(javax.media.opengl.GLCapabilitiesImmutable) -> getExclusiveWinAttributeBits
    javax.media.opengl.GLCapabilities fixWinAttribBitsAndHwAccel(javax.media.nativewindow.AbstractGraphicsDevice,int,javax.media.opengl.GLCapabilities) -> fixWinAttribBitsAndHwAccel
    javax.media.opengl.GLCapabilitiesImmutable fixGLCapabilities(javax.media.opengl.GLCapabilitiesImmutable,javax.media.opengl.GLDrawableFactory,javax.media.nativewindow.AbstractGraphicsDevice) -> fixGLCapabilities
    javax.media.opengl.GLCapabilitiesImmutable fixOnscreenGLCapabilities(javax.media.opengl.GLCapabilitiesImmutable) -> fixOnscreenGLCapabilities
    javax.media.opengl.GLCapabilitiesImmutable fixOffscreenBitOnly(javax.media.opengl.GLCapabilitiesImmutable) -> fixOffscreenBitOnly
    javax.media.opengl.GLCapabilitiesImmutable fixOffscreenGLCapabilities(javax.media.opengl.GLCapabilitiesImmutable,javax.media.opengl.GLDrawableFactory,javax.media.nativewindow.AbstractGraphicsDevice) -> fixOffscreenGLCapabilities
    javax.media.opengl.GLCapabilitiesImmutable fixGLPBufferGLCapabilities(javax.media.opengl.GLCapabilitiesImmutable) -> fixGLPBufferGLCapabilities
    javax.media.opengl.GLCapabilities fixOpaqueGLCapabilities(javax.media.opengl.GLCapabilities,boolean) -> fixOpaqueGLCapabilities
    javax.media.opengl.GLCapabilitiesImmutable fixDoubleBufferedGLCapabilities(javax.media.opengl.GLCapabilitiesImmutable,boolean) -> fixDoubleBufferedGLCapabilities
    javax.media.opengl.GLCapabilitiesImmutable clipRGBAGLCapabilities(javax.media.opengl.GLCapabilitiesImmutable,boolean,boolean) -> clipRGBAGLCapabilities
    int clipColor(int,boolean) -> clipColor
    javax.media.opengl.GLCapabilitiesImmutable fixGLProfile(javax.media.opengl.GLCapabilitiesImmutable,javax.media.opengl.GLProfile) -> fixGLProfile
jogamp.opengl.GLOffscreenAutoDrawableImpl -> jogamp.opengl.GLOffscreenAutoDrawableImpl:
    void <init>(javax.media.opengl.GLDrawable,javax.media.opengl.GLContext,java.lang.Object,com.jogamp.common.util.locks.RecursiveLock) -> <init>
    void setSurfaceSize(int,int) -> setSurfaceSize
jogamp.opengl.GLOffscreenAutoDrawableImpl$FBOImpl -> jogamp.opengl.GLOffscreenAutoDrawableImpl$FBOImpl:
    void <init>(jogamp.opengl.GLFBODrawableImpl,javax.media.opengl.GLContext,java.lang.Object,com.jogamp.common.util.locks.RecursiveLock) -> <init>
    boolean isInitialized() -> isInitialized
    int getTextureUnit() -> getTextureUnit
    void setTextureUnit(int) -> setTextureUnit
    int getNumSamples() -> getNumSamples
    void setNumSamples(javax.media.opengl.GL,int) -> setNumSamples
    int setNumBuffers(int) -> setNumBuffers
    int getNumBuffers() -> getNumBuffers
    com.jogamp.opengl.FBObject getFBObject(int) -> getFBObject
    com.jogamp.opengl.FBObject$Colorbuffer getColorbuffer(int) -> getColorbuffer
    void resetSize(javax.media.opengl.GL) -> resetSize
    void setFBOMode(int) -> setFBOMode
    int getFBOMode() -> getFBOMode
jogamp.opengl.GLRunnableTask -> jogamp.opengl.GLRunnableTask:
    javax.media.opengl.GLRunnable runnable -> runnable
    java.lang.Object notifyObject -> notifyObject
    boolean catchExceptions -> catchExceptions
    boolean isExecuted -> isExecuted
    boolean isFlushed -> isFlushed
    java.lang.Throwable runnableException -> runnableException
    void <init>(javax.media.opengl.GLRunnable,java.lang.Object,boolean) -> <init>
    boolean run(javax.media.opengl.GLAutoDrawable) -> run
    void flush() -> flush
    boolean isInQueue() -> isInQueue
    boolean isExecuted() -> isExecuted
    boolean isFlushed() -> isFlushed
    java.lang.Throwable getThrowable() -> getThrowable
jogamp.opengl.GLStateTracker -> jogamp.opengl.GLStateTracker:
    int MIN_CLIENT_ATTRIB_STACK_DEPTH -> MIN_CLIENT_ATTRIB_STACK_DEPTH
    int PIXEL_STATE_MAP_CAPACITY -> PIXEL_STATE_MAP_CAPACITY
    boolean enabled -> enabled
    com.jogamp.common.util.IntIntHashMap pixelStateMap -> pixelStateMap
    java.util.ArrayList stack -> stack
    void <init>() -> <init>
    void clearStates() -> clearStates
    void setEnabled(boolean) -> setEnabled
    boolean isEnabled() -> isEnabled
    boolean getInt(int,int[],int) -> getInt
    boolean getInt(int,java.nio.IntBuffer,int) -> getInt
    void setInt(int,int) -> setInt
    void pushAttrib(int) -> pushAttrib
    void popAttrib() -> popAttrib
    void resetStates() -> resetStates
jogamp.opengl.GLStateTracker$1 -> jogamp.opengl.GLStateTracker$1:
jogamp.opengl.GLStateTracker$SavedState -> jogamp.opengl.GLStateTracker$SavedState:
    com.jogamp.common.util.IntIntHashMap pixelStateMap -> pixelStateMap
    void <init>() -> <init>
    void setPixelStateMap(com.jogamp.common.util.IntIntHashMap) -> setPixelStateMap
    com.jogamp.common.util.IntIntHashMap getPixelStateMap() -> getPixelStateMap
    void <init>(jogamp.opengl.GLStateTracker$1) -> <init>
    void access$100(jogamp.opengl.GLStateTracker$SavedState,com.jogamp.common.util.IntIntHashMap) -> access$100
    com.jogamp.common.util.IntIntHashMap access$200(jogamp.opengl.GLStateTracker$SavedState) -> access$200
jogamp.opengl.GLVersionNumber -> jogamp.opengl.GLVersionNumber:
    boolean valid -> valid
    java.util.regex.Pattern _Pattern -> _Pattern
    void <init>(int[],int,short,java.lang.String,boolean) -> <init>
    java.util.regex.Pattern getUnderscorePattern() -> getUnderscorePattern
    jogamp.opengl.GLVersionNumber create(java.lang.String) -> create
    boolean isValid() -> isValid
    com.jogamp.common.util.VersionNumberString createVendorVersion(java.lang.String) -> createVendorVersion
    void <clinit>() -> <clinit>
jogamp.opengl.GLWorkerThread -> jogamp.opengl.GLWorkerThread:
    boolean started -> started
    java.lang.Thread thread -> thread
    java.lang.Object lock -> lock
    boolean shouldTerminate -> shouldTerminate
    java.lang.Throwable exception -> exception
    java.lang.Runnable work -> work
    java.util.List queue -> queue
    void <init>() -> <init>
    void start() -> start
    void invoke(boolean,java.lang.Runnable) -> invoke
    void invokeAndWait(java.lang.Runnable) -> invokeAndWait
    void invokeLater(java.lang.Runnable) -> invokeLater
    boolean isStarted() -> isStarted
    boolean isWorkerThread() -> isWorkerThread
    java.lang.String getThreadName() -> getThreadName
    java.lang.Object access$000() -> access$000
    boolean access$100() -> access$100
    java.lang.Runnable access$200() -> access$200
    java.util.List access$300() -> access$300
    java.lang.Thread access$402(java.lang.Thread) -> access$402
    java.lang.Object access$002(java.lang.Object) -> access$002
    java.lang.Throwable access$502(java.lang.Throwable) -> access$502
    java.lang.Runnable access$202(java.lang.Runnable) -> access$202
    void <clinit>() -> <clinit>
jogamp.opengl.GLWorkerThread$WorkerRunnable -> jogamp.opengl.GLWorkerThread$WorkerRunnable:
    void <init>() -> <init>
    void run() -> run
jogamp.opengl.ListenerSyncedImplStub -> jogamp.opengl.ListenerSyncedImplStub:
    java.util.ArrayList listeners -> listeners
    void <init>() -> <init>
    void reset() -> reset
    void destroy() -> destroy
    int size() -> size
    void addListener(java.lang.Object) -> addListener
    void addListener(int,java.lang.Object) -> addListener
    void removeListener(java.lang.Object) -> removeListener
    java.util.ArrayList getListeners() -> getListeners
jogamp.opengl.ProjectFloat -> jogamp.opengl.ProjectFloat:
    float[] mat4Tmp1 -> mat4Tmp1
    float[] mat4Tmp2 -> mat4Tmp2
    float[] mat4Tmp3 -> mat4Tmp3
    int getRequiredFloatBufferSize() -> getRequiredFloatBufferSize
    void <init>() -> <init>
    void gluOrtho2D(javax.media.opengl.fixedfunc.GLMatrixFunc,float,float,float,float) -> gluOrtho2D
    void gluPerspective(javax.media.opengl.fixedfunc.GLMatrixFunc,float,float,float,float) -> gluPerspective
    void gluLookAt(javax.media.opengl.fixedfunc.GLMatrixFunc,float,float,float,float,float,float,float,float,float) -> gluLookAt
    boolean gluProject(float,float,float,float[],int,float[],int,int[],int,float[],int) -> gluProject
    boolean gluProject(float,float,float,java.nio.FloatBuffer,java.nio.FloatBuffer,int[],int,float[],int) -> gluProject
    boolean gluProject(float,float,float,java.nio.FloatBuffer,java.nio.FloatBuffer,java.nio.IntBuffer,java.nio.FloatBuffer) -> gluProject
    boolean gluUnProject(float,float,float,float[],int,float[],int,int[],int,float[],int) -> gluUnProject
    boolean gluUnProject(float,float,float,java.nio.FloatBuffer,java.nio.FloatBuffer,int[],int,float[],int) -> gluUnProject
    boolean gluUnProject(float,float,float,java.nio.FloatBuffer,java.nio.FloatBuffer,java.nio.IntBuffer,java.nio.FloatBuffer) -> gluUnProject
    boolean gluUnProject4(float,float,float,float,float[],int,float[],int,int[],int,float,float,float[],int) -> gluUnProject4
    boolean gluUnProject4(float,float,float,float,java.nio.FloatBuffer,java.nio.FloatBuffer,java.nio.IntBuffer,float,float,java.nio.FloatBuffer) -> gluUnProject4
    void gluPickMatrix(javax.media.opengl.fixedfunc.GLMatrixFunc,float,float,float,float,java.nio.IntBuffer) -> gluPickMatrix
    void gluPickMatrix(javax.media.opengl.fixedfunc.GLMatrixFunc,float,float,float,float,int[],int) -> gluPickMatrix
jogamp.opengl.SharedResourceRunner -> jogamp.opengl.SharedResourceRunner:
    boolean DEBUG -> DEBUG
    java.util.HashSet devicesTried -> devicesTried
    jogamp.opengl.SharedResourceRunner$Implementation impl -> impl
    java.lang.Thread thread -> thread
    boolean running -> running
    boolean ready -> ready
    boolean shouldRelease -> shouldRelease
    java.lang.String initConnection -> initConnection
    java.lang.String releaseConnection -> releaseConnection
    boolean getDeviceTried(java.lang.String) -> getDeviceTried
    void addDeviceTried(java.lang.String) -> addDeviceTried
    void removeDeviceTried(java.lang.String) -> removeDeviceTried
    void <init>(jogamp.opengl.SharedResourceRunner$Implementation) -> <init>
    void resetState() -> resetState
    java.lang.Thread start() -> start
    void stop() -> stop
    jogamp.opengl.SharedResourceRunner$Resource getOrCreateShared(javax.media.nativewindow.AbstractGraphicsDevice) -> getOrCreateShared
    jogamp.opengl.SharedResourceRunner$Resource releaseShared(javax.media.nativewindow.AbstractGraphicsDevice) -> releaseShared
    void doAndWait(java.lang.String,java.lang.String) -> doAndWait
    void run() -> run
    void releaseSharedResources() -> releaseSharedResources
    java.lang.String getThreadName() -> getThreadName
    void <clinit>() -> <clinit>
jogamp.opengl.SharedResourceRunner$Implementation -> jogamp.opengl.SharedResourceRunner$Implementation:
    boolean isDeviceSupported(java.lang.String) -> isDeviceSupported
    jogamp.opengl.SharedResourceRunner$Resource createSharedResource(java.lang.String) -> createSharedResource
    void releaseSharedResource(jogamp.opengl.SharedResourceRunner$Resource) -> releaseSharedResource
    void clear() -> clear
    jogamp.opengl.SharedResourceRunner$Resource mapPut(java.lang.String,jogamp.opengl.SharedResourceRunner$Resource) -> mapPut
    jogamp.opengl.SharedResourceRunner$Resource mapGet(java.lang.String) -> mapGet
    java.util.Collection mapValues() -> mapValues
jogamp.opengl.SharedResourceRunner$Resource -> jogamp.opengl.SharedResourceRunner$Resource:
    boolean isValid() -> isValid
    javax.media.nativewindow.AbstractGraphicsDevice getDevice() -> getDevice
    javax.media.nativewindow.AbstractGraphicsScreen getScreen() -> getScreen
    jogamp.opengl.GLDrawableImpl getDrawable() -> getDrawable
    jogamp.opengl.GLContextImpl getContext() -> getContext
    com.jogamp.opengl.GLRendererQuirks getRendererQuirks() -> getRendererQuirks
jogamp.opengl.ThreadingImpl -> jogamp.opengl.ThreadingImpl:
    boolean DEBUG -> DEBUG
    boolean singleThreaded -> singleThreaded
    javax.media.opengl.Threading$Mode mode -> mode
    boolean hasAWT -> hasAWT
    boolean _isX11 -> _isX11
    jogamp.opengl.ToolkitThreadingPlugin threadingPlugin -> threadingPlugin
    void <init>() -> <init>
    boolean isX11() -> isX11
    javax.media.opengl.Threading$Mode getMode() -> getMode
    void disableSingleThreading() -> disableSingleThreading
    boolean isSingleThreaded() -> isSingleThreaded
    boolean isOpenGLThread() -> isOpenGLThread
    boolean isToolkitThread() -> isToolkitThread
    void invokeOnOpenGLThread(boolean,java.lang.Runnable) -> invokeOnOpenGLThread
    void invokeOnWorkerThread(boolean,java.lang.Runnable) -> invokeOnWorkerThread
    boolean access$002(boolean) -> access$002
    boolean access$102(boolean) -> access$102
    javax.media.opengl.Threading$Mode access$202(javax.media.opengl.Threading$Mode) -> access$202
    boolean access$000() -> access$000
    boolean access$302(boolean) -> access$302
    javax.media.opengl.Threading$Mode access$200() -> access$200
    boolean access$300() -> access$300
    void <clinit>() -> <clinit>
jogamp.opengl.ThreadingImpl$1 -> jogamp.opengl.ThreadingImpl$1:
    void <init>() -> <init>
    jogamp.opengl.ToolkitThreadingPlugin run() -> run
    java.lang.Object run() -> run
jogamp.opengl.ThreadingImpl$2 -> jogamp.opengl.ThreadingImpl$2:
    int[] $SwitchMap$javax$media$opengl$Threading$Mode -> $SwitchMap$javax$media$opengl$Threading$Mode
    void <clinit>() -> <clinit>
jogamp.opengl.ToolkitThreadingPlugin -> jogamp.opengl.ToolkitThreadingPlugin:
    boolean isToolkitThread() -> isToolkitThread
    boolean isOpenGLThread() -> isOpenGLThread
    void invokeOnOpenGLThread(boolean,java.lang.Runnable) -> invokeOnOpenGLThread
jogamp.opengl.awt.AWTTilePainter -> jogamp.opengl.awt.AWTTilePainter:
    boolean DEBUG_TILES -> DEBUG_TILES
    com.jogamp.opengl.util.TileRenderer renderer -> renderer
    int componentCount -> componentCount
    double scaleMatX -> scaleMatX
    double scaleMatY -> scaleMatY
    int customTileWidth -> customTileWidth
    int customTileHeight -> customTileHeight
    int customNumSamples -> customNumSamples
    boolean verbose -> verbose
    boolean flipVertical -> flipVertical
    boolean originBottomLeft -> originBottomLeft
    com.jogamp.opengl.util.awt.AWTGLPixelBuffer tBuffer -> tBuffer
    java.awt.image.BufferedImage vFlipImage -> vFlipImage
    java.awt.Graphics2D g2d -> g2d
    java.awt.geom.AffineTransform saveAT -> saveAT
    int scaledYOffset -> scaledYOffset
    javax.media.opengl.GLEventListener preTileGLEL -> preTileGLEL
    int _counter -> _counter
    javax.media.opengl.GLEventListener postTileGLEL -> postTileGLEL
    void dumpHintsAndScale(java.awt.Graphics2D) -> dumpHintsAndScale
    int getNumSamples(javax.media.opengl.GLCapabilitiesImmutable) -> getNumSamples
    void <init>(com.jogamp.opengl.util.TileRenderer,int,double,double,int,int,int,boolean) -> <init>
    java.lang.String toString() -> toString
    void setGLOrientation(boolean,boolean) -> setGLOrientation
    java.awt.geom.Rectangle2D getClipBounds2D(java.awt.Graphics2D) -> getClipBounds2D
    java.awt.geom.Rectangle2D clipNegative(java.awt.geom.Rectangle2D) -> clipNegative
    void setupGraphics2DAndClipBounds(java.awt.Graphics2D,int,int) -> setupGraphics2DAndClipBounds
    void resetGraphics2D() -> resetGraphics2D
    void dispose() -> dispose
    com.jogamp.opengl.util.awt.AWTGLPixelBuffer access$000(jogamp.opengl.awt.AWTTilePainter) -> access$000
    com.jogamp.opengl.util.awt.AWTGLPixelBuffer access$002(jogamp.opengl.awt.AWTTilePainter,com.jogamp.opengl.util.awt.AWTGLPixelBuffer) -> access$002
    java.awt.image.BufferedImage access$102(jogamp.opengl.awt.AWTTilePainter,java.awt.image.BufferedImage) -> access$102
    int access$200(jogamp.opengl.awt.AWTTilePainter) -> access$200
    boolean access$300() -> access$300
    java.awt.image.BufferedImage access$100(jogamp.opengl.awt.AWTTilePainter) -> access$100
    java.awt.Graphics2D access$400(jogamp.opengl.awt.AWTTilePainter) -> access$400
    void <clinit>() -> <clinit>
jogamp.opengl.awt.AWTTilePainter$1 -> jogamp.opengl.awt.AWTTilePainter$1:
    jogamp.opengl.awt.AWTTilePainter this$0 -> this$0
    void <init>(jogamp.opengl.awt.AWTTilePainter) -> <init>
    void init(javax.media.opengl.GLAutoDrawable) -> init
    void dispose(javax.media.opengl.GLAutoDrawable) -> dispose
    void display(javax.media.opengl.GLAutoDrawable) -> display
    void reshape(javax.media.opengl.GLAutoDrawable,int,int,int,int) -> reshape
jogamp.opengl.awt.AWTTilePainter$2 -> jogamp.opengl.awt.AWTTilePainter$2:
    jogamp.opengl.awt.AWTTilePainter this$0 -> this$0
    void <init>(jogamp.opengl.awt.AWTTilePainter) -> <init>
    void init(javax.media.opengl.GLAutoDrawable) -> init
    void dispose(javax.media.opengl.GLAutoDrawable) -> dispose
    void display(javax.media.opengl.GLAutoDrawable) -> display
    void reshape(javax.media.opengl.GLAutoDrawable,int,int,int,int) -> reshape
jogamp.opengl.awt.AWTUtil -> jogamp.opengl.awt.AWTUtil:
    boolean headlessMode -> headlessMode
    java.lang.reflect.Method isOGLPipelineActive -> isOGLPipelineActive
    java.lang.reflect.Method isQueueFlusherThread -> isQueueFlusherThread
    boolean j2dOk -> j2dOk
    boolean lockedToolkit -> lockedToolkit
    void <init>() -> <init>
    void lockToolkit() -> lockToolkit
    void unlockToolkit() -> unlockToolkit
    void <clinit>() -> <clinit>
jogamp.opengl.awt.Java2D -> jogamp.opengl.awt.Java2D:
    boolean DEBUG -> DEBUG
    boolean isHeadless -> isHeadless
    boolean isOGLPipelineActive -> isOGLPipelineActive
    boolean isOGLPipelineResourceCompatible -> isOGLPipelineResourceCompatible
    java.lang.reflect.Method invokeWithOGLContextCurrentMethod -> invokeWithOGLContextCurrentMethod
    java.lang.reflect.Method isQueueFlusherThreadMethod -> isQueueFlusherThreadMethod
    java.lang.reflect.Method getOGLViewportMethod -> getOGLViewportMethod
    java.lang.reflect.Method getOGLScissorBoxMethod -> getOGLScissorBoxMethod
    java.lang.reflect.Method getOGLSurfaceIdentifierMethod -> getOGLSurfaceIdentifierMethod
    java.lang.reflect.Method getOGLTextureTypeMethod -> getOGLTextureTypeMethod
    boolean fbObjectSupportInitialized -> fbObjectSupportInitialized
    java.lang.reflect.Method invokeWithOGLSharedContextCurrentMethod -> invokeWithOGLSharedContextCurrentMethod
    java.lang.reflect.Method getOGLSurfaceTypeMethod -> getOGLSurfaceTypeMethod
    int UNDEFINED -> UNDEFINED
    int WINDOW -> WINDOW
    int PBUFFER -> PBUFFER
    int TEXTURE -> TEXTURE
    int FLIP_BACKBUFFER -> FLIP_BACKBUFFER
    int FBOBJECT -> FBOBJECT
    boolean initializedJ2DFBOShareContext -> initializedJ2DFBOShareContext
    javax.media.opengl.GLContext j2dFBOShareContext -> j2dFBOShareContext
    java.lang.reflect.Method createOGLContextOnSurfaceMethod -> createOGLContextOnSurfaceMethod
    java.lang.reflect.Method makeOGLContextCurrentOnSurfaceMethod -> makeOGLContextCurrentOnSurfaceMethod
    java.lang.reflect.Method destroyOGLContextMethod -> destroyOGLContextMethod
    void <init>() -> <init>
    boolean isOGLPipelineActive() -> isOGLPipelineActive
    boolean isOGLPipelineResourceCompatible() -> isOGLPipelineResourceCompatible
    boolean isFBOEnabled() -> isFBOEnabled
    boolean isQueueFlusherThread() -> isQueueFlusherThread
    void invokeWithOGLContextCurrent(java.awt.Graphics,java.lang.Runnable) -> invokeWithOGLContextCurrent
    boolean invokeWithOGLSharedContextCurrent(java.awt.GraphicsConfiguration,java.lang.Runnable) -> invokeWithOGLSharedContextCurrent
    java.awt.Rectangle getOGLViewport(java.awt.Graphics,int,int) -> getOGLViewport
    java.awt.Rectangle getOGLScissorBox(java.awt.Graphics) -> getOGLScissorBox
    java.lang.Object getOGLSurfaceIdentifier(java.awt.Graphics) -> getOGLSurfaceIdentifier
    int getOGLSurfaceType(java.awt.Graphics) -> getOGLSurfaceType
    int getOGLTextureType(java.awt.Graphics) -> getOGLTextureType
    javax.media.opengl.GLContext filterShareContext(javax.media.opengl.GLContext) -> filterShareContext
    javax.media.opengl.GLContext getShareContext(java.awt.GraphicsDevice) -> getShareContext
    long createOGLContextOnSurface(java.awt.Graphics,long) -> createOGLContextOnSurface
    boolean makeOGLContextCurrentOnSurface(java.awt.Graphics,long) -> makeOGLContextCurrentOnSurface
    void destroyOGLContext(long) -> destroyOGLContext
    void checkActive() -> checkActive
    void checkCompatible() -> checkCompatible
    int getOGLUtilitiesIntField(java.lang.String) -> getOGLUtilitiesIntField
    void initFBOShareContext(java.awt.GraphicsDevice) -> initFBOShareContext
    boolean access$000() -> access$000
    boolean access$102(boolean) -> access$102
    boolean access$202(boolean) -> access$202
    boolean access$302(boolean) -> access$302
    boolean access$200() -> access$200
    java.lang.reflect.Method access$402(java.lang.reflect.Method) -> access$402
    java.lang.reflect.Method access$400() -> access$400
    java.lang.reflect.Method access$502(java.lang.reflect.Method) -> access$502
    java.lang.reflect.Method access$500() -> access$500
    boolean access$300() -> access$300
    java.lang.reflect.Method access$602(java.lang.reflect.Method) -> access$602
    java.lang.reflect.Method access$600() -> access$600
    java.lang.reflect.Method access$702(java.lang.reflect.Method) -> access$702
    java.lang.reflect.Method access$700() -> access$700
    java.lang.reflect.Method access$802(java.lang.reflect.Method) -> access$802
    java.lang.reflect.Method access$800() -> access$800
    boolean access$902(boolean) -> access$902
    java.lang.reflect.Method access$1002(java.lang.reflect.Method) -> access$1002
    java.lang.reflect.Method access$1000() -> access$1000
    java.lang.reflect.Method access$1102(java.lang.reflect.Method) -> access$1102
    java.lang.reflect.Method access$1100() -> access$1100
    java.lang.reflect.Method access$1202(java.lang.reflect.Method) -> access$1202
    java.lang.reflect.Method access$1200() -> access$1200
    java.lang.reflect.Method access$1302(java.lang.reflect.Method) -> access$1302
    java.lang.reflect.Method access$1300() -> access$1300
    java.lang.reflect.Method access$1402(java.lang.reflect.Method) -> access$1402
    java.lang.reflect.Method access$1400() -> access$1400
    java.lang.reflect.Method access$1502(java.lang.reflect.Method) -> access$1502
    java.lang.reflect.Method access$1500() -> access$1500
    javax.media.opengl.GLContext access$1602(javax.media.opengl.GLContext) -> access$1602
    void <clinit>() -> <clinit>
jogamp.opengl.awt.Java2D$1 -> jogamp.opengl.awt.Java2D$1:
    void <init>() -> <init>
    java.lang.Object run() -> run
jogamp.opengl.awt.Java2D$2 -> jogamp.opengl.awt.Java2D$2:
    java.lang.String val$name -> val$name
    void <init>(java.lang.String) -> <init>
    java.lang.Integer run() -> run
    java.lang.Object run() -> run
jogamp.opengl.awt.Java2D$3 -> jogamp.opengl.awt.Java2D$3:
    void <init>() -> <init>
    void run() -> run
jogamp.opengl.gl2.ProjectDouble -> jogamp.opengl.gl2.ProjectDouble:
    double[] IDENTITY_MATRIX -> IDENTITY_MATRIX
    double[] matrix -> matrix
    double[][] tempMatrix -> tempMatrix
    double[] in -> in
    double[] out -> out
    java.nio.DoubleBuffer matrixBuf -> matrixBuf
    java.nio.DoubleBuffer tempMatrixBuf -> tempMatrixBuf
    java.nio.DoubleBuffer inBuf -> inBuf
    java.nio.DoubleBuffer outBuf -> outBuf
    java.nio.DoubleBuffer forwardBuf -> forwardBuf
    java.nio.DoubleBuffer sideBuf -> sideBuf
    java.nio.DoubleBuffer upBuf -> upBuf
    void <init>() -> <init>
    java.nio.DoubleBuffer slice(java.nio.DoubleBuffer,int,int) -> slice
    void __gluMakeIdentityd(java.nio.DoubleBuffer) -> __gluMakeIdentityd
    void __gluMakeIdentityd(double[]) -> __gluMakeIdentityd
    void __gluMultMatrixVecd(double[],int,double[],double[]) -> __gluMultMatrixVecd
    void __gluMultMatrixVecd(java.nio.DoubleBuffer,java.nio.DoubleBuffer,java.nio.DoubleBuffer) -> __gluMultMatrixVecd
    boolean __gluInvertMatrixd(double[],double[]) -> __gluInvertMatrixd
    boolean __gluInvertMatrixd(java.nio.DoubleBuffer,java.nio.DoubleBuffer) -> __gluInvertMatrixd
    void __gluMultMatricesd(double[],int,double[],int,double[]) -> __gluMultMatricesd
    void __gluMultMatricesd(java.nio.DoubleBuffer,java.nio.DoubleBuffer,java.nio.DoubleBuffer) -> __gluMultMatricesd
    void normalize(java.nio.DoubleBuffer) -> normalize
    void cross(java.nio.DoubleBuffer,java.nio.DoubleBuffer,java.nio.DoubleBuffer) -> cross
    void gluOrtho2D(javax.media.opengl.GL2,double,double,double,double) -> gluOrtho2D
    void gluPerspective(javax.media.opengl.GL2,double,double,double,double) -> gluPerspective
    void gluLookAt(javax.media.opengl.GL2,double,double,double,double,double,double,double,double,double) -> gluLookAt
    boolean gluProject(double,double,double,double[],int,double[],int,int[],int,double[],int) -> gluProject
    boolean gluProject(double,double,double,java.nio.DoubleBuffer,java.nio.DoubleBuffer,java.nio.IntBuffer,java.nio.DoubleBuffer) -> gluProject
    boolean gluUnProject(double,double,double,double[],int,double[],int,int[],int,double[],int) -> gluUnProject
    boolean gluUnProject(double,double,double,java.nio.DoubleBuffer,java.nio.DoubleBuffer,java.nio.IntBuffer,java.nio.DoubleBuffer) -> gluUnProject
    boolean gluUnProject4(double,double,double,double,double[],int,double[],int,int[],int,double,double,double[],int) -> gluUnProject4
    boolean gluUnProject4(double,double,double,double,java.nio.DoubleBuffer,java.nio.DoubleBuffer,java.nio.IntBuffer,double,double,java.nio.DoubleBuffer) -> gluUnProject4
    void gluPickMatrix(javax.media.opengl.GL2,double,double,double,double,java.nio.IntBuffer) -> gluPickMatrix
    void gluPickMatrix(javax.media.opengl.GL2,double,double,double,double,int[],int) -> gluPickMatrix
    void <clinit>() -> <clinit>
jogamp.opengl.glu.GLUquadricImpl -> jogamp.opengl.glu.GLUquadricImpl:
    boolean useGLSL -> useGLSL
    int drawStyle -> drawStyle
    int orientation -> orientation
    boolean textureFlag -> textureFlag
    int normals -> normals
    boolean immModeSinkEnabled -> immModeSinkEnabled
    boolean immModeSinkImmediate -> immModeSinkImmediate
    int normalType -> normalType
    javax.media.opengl.GL gl -> gl
    com.jogamp.opengl.util.glsl.ShaderState shaderState -> shaderState
    int shaderProgram -> shaderProgram
    boolean USE_NORM -> USE_NORM
    boolean USE_TEXT -> USE_TEXT
    com.jogamp.opengl.util.ImmModeSink immModeSink -> immModeSink
    float PI -> PI
    float PI_2 -> PI_2
    int CACHE_SIZE -> CACHE_SIZE
    void <init>(javax.media.opengl.GL,boolean,com.jogamp.opengl.util.glsl.ShaderState,int) -> <init>
    void enableImmModeSink(boolean) -> enableImmModeSink
    boolean isImmModeSinkEnabled() -> isImmModeSinkEnabled
    void setImmMode(boolean) -> setImmMode
    boolean getImmMode() -> getImmMode
    com.jogamp.opengl.util.ImmModeSink replaceImmModeSink() -> replaceImmModeSink
    void resetImmModeSink(javax.media.opengl.GL) -> resetImmModeSink
    void setDrawStyle(int) -> setDrawStyle
    void setNormals(int) -> setNormals
    void setOrientation(int) -> setOrientation
    void setTextureFlag(boolean) -> setTextureFlag
    int getDrawStyle() -> getDrawStyle
    int getNormals() -> getNormals
    int getOrientation() -> getOrientation
    boolean getTextureFlag() -> getTextureFlag
    void drawCylinder(javax.media.opengl.GL,float,float,float,int,int) -> drawCylinder
    void drawDisk(javax.media.opengl.GL,float,float,int,int) -> drawDisk
    void drawPartialDisk(javax.media.opengl.GL,float,float,int,int,float,float) -> drawPartialDisk
    void drawSphere(javax.media.opengl.GL,float,int,int) -> drawSphere
    void glBegin(javax.media.opengl.GL,int) -> glBegin
    void glEnd(javax.media.opengl.GL) -> glEnd
    void glVertex2f(javax.media.opengl.GL,float,float) -> glVertex2f
    void glVertex3f(javax.media.opengl.GL,float,float,float) -> glVertex3f
    void glNormal3f_s(javax.media.opengl.GL,float,float,float) -> glNormal3f_s
    void glNormal3f_b(javax.media.opengl.GL,float,float,float) -> glNormal3f_b
    void glNormal3f(javax.media.opengl.GL,float,float,float) -> glNormal3f
    void glTexCoord2f(javax.media.opengl.GL,float,float) -> glTexCoord2f
    void normal3f(javax.media.opengl.GL,float,float,float) -> normal3f
    void TXTR_COORD(javax.media.opengl.GL,float,float) -> TXTR_COORD
    float sin(float) -> sin
    float cos(float) -> cos
jogamp.opengl.glu.Glue -> jogamp.opengl.glu.Glue:
    java.lang.String[] __gluNurbsErrors -> __gluNurbsErrors
    java.lang.String[] __gluTessErrors -> __gluTessErrors
    void <init>() -> <init>
    java.lang.String __gluNURBSErrorString(int) -> __gluNURBSErrorString
    java.lang.String __gluTessErrorString(int) -> __gluTessErrorString
    void <clinit>() -> <clinit>
jogamp.opengl.glu.error.Error -> jogamp.opengl.glu.error.Error:
    java.lang.String[] glErrorStrings -> glErrorStrings
    java.lang.String[] gluErrorStrings -> gluErrorStrings
    void <init>() -> <init>
    java.lang.String gluErrorString(int) -> gluErrorString
    void <clinit>() -> <clinit>
jogamp.opengl.glu.gl2.nurbs.GL2Backend -> jogamp.opengl.glu.gl2.nurbs.GL2Backend:
    void <init>() -> <init>
jogamp.opengl.glu.gl2.nurbs.GL2CurveEvaluator -> jogamp.opengl.glu.gl2.nurbs.GL2CurveEvaluator:
    boolean output_triangles -> output_triangles
    javax.media.opengl.GL2 gl -> gl
    int vertex_flag -> vertex_flag
    int normal_flag -> normal_flag
    int color_flag -> color_flag
    int texcoord_flag -> texcoord_flag
    int poradi -> poradi
    void <init>() -> <init>
    void bgnmap1f() -> bgnmap1f
    void endmap1f() -> endmap1f
    void map1f(int,float,float,int,int,jogamp.opengl.glu.nurbs.CArrayOfFloats) -> map1f
    void enable(int) -> enable
    void mapgrid1f(int,float,float) -> mapgrid1f
    void mapmesh1f(int,int,int) -> mapmesh1f
jogamp.opengl.glu.gl2.nurbs.GL2SurfaceEvaluator -> jogamp.opengl.glu.gl2.nurbs.GL2SurfaceEvaluator:
    javax.media.opengl.GL2 gl -> gl
    boolean output_triangles -> output_triangles
    int poradi -> poradi
    void <init>() -> <init>
    void bgnmap2f() -> bgnmap2f
    void polymode(int) -> polymode
    void endmap2f() -> endmap2f
    void domain2f(float,float,float,float) -> domain2f
    void mapgrid2f(int,float,float,int,float,float) -> mapgrid2f
    void mapmesh2f(int,int,int,int,int) -> mapmesh2f
    void map2f(int,float,float,int,int,float,float,int,int,jogamp.opengl.glu.nurbs.CArrayOfFloats) -> map2f
    void enable(int) -> enable
jogamp.opengl.glu.gl2.nurbs.GLUgl2nurbsImpl -> jogamp.opengl.glu.gl2.nurbs.GLUgl2nurbsImpl:
    int CT_NONE -> CT_NONE
    int CT_NURBSCURVE -> CT_NURBSCURVE
    int CT_NPWLCURVE -> CT_NPWLCURVE
    boolean autoloadmode -> autoloadmode
    jogamp.opengl.glu.nurbs.Maplist maplist -> maplist
    int isDataValid -> isDataValid
    int inCurve -> inCurve
    jogamp.opengl.glu.nurbs.O_curve currentCurve -> currentCurve
    boolean inTrim -> inTrim
    boolean playBack -> playBack
    jogamp.opengl.glu.nurbs.O_curve nextCurve -> nextCurve
    jogamp.opengl.glu.nurbs.Renderhints renderhints -> renderhints
    jogamp.opengl.glu.nurbs.Subdivider subdivider -> subdivider
    jogamp.opengl.glu.nurbs.O_nurbscurve nextNurbscurve -> nextNurbscurve
    int inSurface -> inSurface
    int numTrims -> numTrims
    jogamp.opengl.glu.nurbs.O_surface currentSurface -> currentSurface
    jogamp.opengl.glu.nurbs.O_trim nextTrim -> nextTrim
    void <init>() -> <init>
    void set_domain_distance_u_rate(double) -> set_domain_distance_u_rate
    void set_domain_distance_v_rate(double) -> set_domain_distance_v_rate
    void bgncurve() -> bgncurve
    void thread(java.lang.String,java.lang.Object) -> thread
    void thread2(java.lang.String) -> thread2
    void do_bgncurve(jogamp.opengl.glu.nurbs.O_curve) -> do_bgncurve
    void do_bgnsurface(jogamp.opengl.glu.nurbs.O_surface) -> do_bgnsurface
    void endcurve() -> endcurve
    void do_endsurface() -> do_endsurface
    void do_endcurve() -> do_endcurve
    void do_nurbserror(int) -> do_nurbserror
    void bgnrender() -> bgnrender
    void loadGLMatrices() -> loadGLMatrices
    void endrender() -> endrender
    void nurbscurve(int,float[],int,float[],int,int) -> nurbscurve
    boolean do_check_knots(jogamp.opengl.glu.nurbs.Knotvector,java.lang.String) -> do_check_knots
    void do_nurbscurve(jogamp.opengl.glu.nurbs.O_nurbscurve) -> do_nurbscurve
    void do_nurbssurface(jogamp.opengl.glu.nurbs.O_nurbssurface) -> do_nurbssurface
    void redefineMaps() -> redefineMaps
    void defineMap(int,int,int) -> defineMap
    void setnurbsproperty(int,int,float) -> setnurbsproperty
    void do_setnurbsproperty2(jogamp.opengl.glu.nurbs.Property) -> do_setnurbsproperty2
    void do_setnurbsproperty(jogamp.opengl.glu.nurbs.Property) -> do_setnurbsproperty
    void set_is_domain_distance_sampling(int) -> set_is_domain_distance_sampling
    void bgnsurface() -> bgnsurface
    void endsurface() -> endsurface
    void endtrim() -> endtrim
    void nurbssurface(int,float[],int,float[],int,int,float[],int,int,int) -> nurbssurface
jogamp.opengl.glu.mipmap.BuildMipmap -> jogamp.opengl.glu.mipmap.BuildMipmap:
    boolean DEBUG -> DEBUG
    boolean VERBOSE -> VERBOSE
    int TARGA_HEADER_SIZE -> TARGA_HEADER_SIZE
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    int gluBuild1DMipmapLevelsCore(javax.media.opengl.GL,int,int,int,int,int,int,int,int,int,java.nio.ByteBuffer) -> gluBuild1DMipmapLevelsCore
    int bitmapBuild2DMipmaps(javax.media.opengl.GL,int,int,int,int,int,int,java.nio.ByteBuffer) -> bitmapBuild2DMipmaps
    int gluBuild2DMipmapLevelsCore(javax.media.opengl.GL,int,int,int,int,int,int,int,int,int,int,int,java.nio.ByteBuffer) -> gluBuild2DMipmapLevelsCore
    int fastBuild2DMipmaps(javax.media.opengl.GL,jogamp.opengl.glu.mipmap.PixelStorageModes,int,int,int,int,int,int,java.nio.ByteBuffer) -> fastBuild2DMipmaps
    int gluBuild3DMipmapLevelsCore(javax.media.opengl.GL,int,int,int,int,int,int,int,int,int,int,int,int,int,java.nio.ByteBuffer) -> gluBuild3DMipmapLevelsCore
    void writeTargaFile(java.lang.String,java.nio.ByteBuffer,int,int) -> writeTargaFile
    void <clinit>() -> <clinit>
jogamp.opengl.glu.mipmap.Extract -> jogamp.opengl.glu.mipmap.Extract:
    void extract(boolean,java.nio.ByteBuffer,float[]) -> extract
    void shove(float[],int,java.nio.ByteBuffer) -> shove
jogamp.opengl.glu.mipmap.Extract1010102 -> jogamp.opengl.glu.mipmap.Extract1010102:
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    void extract(boolean,java.nio.ByteBuffer,float[]) -> extract
    void shove(float[],int,java.nio.ByteBuffer) -> shove
    void <clinit>() -> <clinit>
jogamp.opengl.glu.mipmap.Extract1555rev -> jogamp.opengl.glu.mipmap.Extract1555rev:
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    void extract(boolean,java.nio.ByteBuffer,float[]) -> extract
    void shove(float[],int,java.nio.ByteBuffer) -> shove
    void <clinit>() -> <clinit>
jogamp.opengl.glu.mipmap.Extract2101010rev -> jogamp.opengl.glu.mipmap.Extract2101010rev:
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    void extract(boolean,java.nio.ByteBuffer,float[]) -> extract
    void shove(float[],int,java.nio.ByteBuffer) -> shove
    void <clinit>() -> <clinit>
jogamp.opengl.glu.mipmap.Extract233rev -> jogamp.opengl.glu.mipmap.Extract233rev:
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    void extract(boolean,java.nio.ByteBuffer,float[]) -> extract
    void shove(float[],int,java.nio.ByteBuffer) -> shove
    void <clinit>() -> <clinit>
jogamp.opengl.glu.mipmap.Extract332 -> jogamp.opengl.glu.mipmap.Extract332:
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    void extract(boolean,java.nio.ByteBuffer,float[]) -> extract
    void shove(float[],int,java.nio.ByteBuffer) -> shove
    void <clinit>() -> <clinit>
jogamp.opengl.glu.mipmap.Extract4444 -> jogamp.opengl.glu.mipmap.Extract4444:
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    void extract(boolean,java.nio.ByteBuffer,float[]) -> extract
    void shove(float[],int,java.nio.ByteBuffer) -> shove
    void <clinit>() -> <clinit>
jogamp.opengl.glu.mipmap.Extract4444rev -> jogamp.opengl.glu.mipmap.Extract4444rev:
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    void extract(boolean,java.nio.ByteBuffer,float[]) -> extract
    void shove(float[],int,java.nio.ByteBuffer) -> shove
    void <clinit>() -> <clinit>
jogamp.opengl.glu.mipmap.Extract5551 -> jogamp.opengl.glu.mipmap.Extract5551:
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    void extract(boolean,java.nio.ByteBuffer,float[]) -> extract
    void shove(float[],int,java.nio.ByteBuffer) -> shove
    void <clinit>() -> <clinit>
jogamp.opengl.glu.mipmap.Extract565 -> jogamp.opengl.glu.mipmap.Extract565:
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    void extract(boolean,java.nio.ByteBuffer,float[]) -> extract
    void shove(float[],int,java.nio.ByteBuffer) -> shove
    void <clinit>() -> <clinit>
jogamp.opengl.glu.mipmap.Extract565rev -> jogamp.opengl.glu.mipmap.Extract565rev:
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    void extract(boolean,java.nio.ByteBuffer,float[]) -> extract
    void shove(float[],int,java.nio.ByteBuffer) -> shove
    void <clinit>() -> <clinit>
jogamp.opengl.glu.mipmap.Extract8888 -> jogamp.opengl.glu.mipmap.Extract8888:
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    void extract(boolean,java.nio.ByteBuffer,float[]) -> extract
    void shove(float[],int,java.nio.ByteBuffer) -> shove
    void <clinit>() -> <clinit>
jogamp.opengl.glu.mipmap.Extract8888rev -> jogamp.opengl.glu.mipmap.Extract8888rev:
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    void extract(boolean,java.nio.ByteBuffer,float[]) -> extract
    void shove(float[],int,java.nio.ByteBuffer) -> shove
    void <clinit>() -> <clinit>
jogamp.opengl.glu.mipmap.ExtractFloat -> jogamp.opengl.glu.mipmap.ExtractFloat:
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    double extract(boolean,java.nio.ByteBuffer) -> extract
    void shove(double,int,java.nio.ByteBuffer) -> shove
    void <clinit>() -> <clinit>
jogamp.opengl.glu.mipmap.ExtractPrimitive -> jogamp.opengl.glu.mipmap.ExtractPrimitive:
    double extract(boolean,java.nio.ByteBuffer) -> extract
    void shove(double,int,java.nio.ByteBuffer) -> shove
jogamp.opengl.glu.mipmap.ExtractSByte -> jogamp.opengl.glu.mipmap.ExtractSByte:
    void <init>() -> <init>
    double extract(boolean,java.nio.ByteBuffer) -> extract
    void shove(double,int,java.nio.ByteBuffer) -> shove
jogamp.opengl.glu.mipmap.ExtractSInt -> jogamp.opengl.glu.mipmap.ExtractSInt:
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    double extract(boolean,java.nio.ByteBuffer) -> extract
    void shove(double,int,java.nio.ByteBuffer) -> shove
    void <clinit>() -> <clinit>
jogamp.opengl.glu.mipmap.ExtractSShort -> jogamp.opengl.glu.mipmap.ExtractSShort:
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    double extract(boolean,java.nio.ByteBuffer) -> extract
    void shove(double,int,java.nio.ByteBuffer) -> shove
    void <clinit>() -> <clinit>
jogamp.opengl.glu.mipmap.ExtractUByte -> jogamp.opengl.glu.mipmap.ExtractUByte:
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    double extract(boolean,java.nio.ByteBuffer) -> extract
    void shove(double,int,java.nio.ByteBuffer) -> shove
    void <clinit>() -> <clinit>
jogamp.opengl.glu.mipmap.ExtractUInt -> jogamp.opengl.glu.mipmap.ExtractUInt:
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    double extract(boolean,java.nio.ByteBuffer) -> extract
    void shove(double,int,java.nio.ByteBuffer) -> shove
    void <clinit>() -> <clinit>
jogamp.opengl.glu.mipmap.ExtractUShort -> jogamp.opengl.glu.mipmap.ExtractUShort:
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    double extract(boolean,java.nio.ByteBuffer) -> extract
    void shove(double,int,java.nio.ByteBuffer) -> shove
    void <clinit>() -> <clinit>
jogamp.opengl.glu.mipmap.HalveImage -> jogamp.opengl.glu.mipmap.HalveImage:
    int BOX2 -> BOX2
    int BOX4 -> BOX4
    int BOX8 -> BOX8
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    void halveImage(int,int,int,java.nio.ShortBuffer,java.nio.ShortBuffer) -> halveImage
    void halveImage_ubyte(int,int,int,java.nio.ByteBuffer,java.nio.ByteBuffer,int,int,int) -> halveImage_ubyte
    void halve1Dimage_ubyte(int,int,int,java.nio.ByteBuffer,java.nio.ByteBuffer,int,int,int) -> halve1Dimage_ubyte
    void halveImage_byte(int,int,int,java.nio.ByteBuffer,java.nio.ByteBuffer,int,int,int) -> halveImage_byte
    void halve1Dimage_byte(int,int,int,java.nio.ByteBuffer,java.nio.ByteBuffer,int,int,int) -> halve1Dimage_byte
    void halveImage_ushort(int,int,int,java.nio.ByteBuffer,java.nio.ShortBuffer,int,int,int,boolean) -> halveImage_ushort
    void halve1Dimage_ushort(int,int,int,java.nio.ByteBuffer,java.nio.ShortBuffer,int,int,int,boolean) -> halve1Dimage_ushort
    void halveImage_short(int,int,int,java.nio.ByteBuffer,java.nio.ShortBuffer,int,int,int,boolean) -> halveImage_short
    void halve1Dimage_short(int,int,int,java.nio.ByteBuffer,java.nio.ShortBuffer,int,int,int,boolean) -> halve1Dimage_short
    void halveImage_uint(int,int,int,java.nio.ByteBuffer,java.nio.IntBuffer,int,int,int,boolean) -> halveImage_uint
    void halve1Dimage_uint(int,int,int,java.nio.ByteBuffer,java.nio.IntBuffer,int,int,int,boolean) -> halve1Dimage_uint
    void halveImage_int(int,int,int,java.nio.ByteBuffer,java.nio.IntBuffer,int,int,int,boolean) -> halveImage_int
    void halve1Dimage_int(int,int,int,java.nio.ByteBuffer,java.nio.IntBuffer,int,int,int,boolean) -> halve1Dimage_int
    void halveImage_float(int,int,int,java.nio.ByteBuffer,java.nio.FloatBuffer,int,int,int,boolean) -> halveImage_float
    void halve1Dimage_float(int,int,int,java.nio.ByteBuffer,java.nio.FloatBuffer,int,int,int,boolean) -> halve1Dimage_float
    void halveImagePackedPixel(int,jogamp.opengl.glu.mipmap.Extract,int,int,java.nio.ByteBuffer,java.nio.ByteBuffer,int,int,boolean) -> halveImagePackedPixel
    void halve1DimagePackedPixel(int,jogamp.opengl.glu.mipmap.Extract,int,int,java.nio.ByteBuffer,java.nio.ByteBuffer,int,int,boolean) -> halve1DimagePackedPixel
    void halveImagePackedPixelSlice(int,jogamp.opengl.glu.mipmap.Extract,int,int,int,java.nio.ByteBuffer,java.nio.ByteBuffer,int,int,int,boolean) -> halveImagePackedPixelSlice
    void halveImageSlice(int,jogamp.opengl.glu.mipmap.ExtractPrimitive,int,int,int,java.nio.ByteBuffer,java.nio.ByteBuffer,int,int,int,int,boolean) -> halveImageSlice
    void halveImage3D(int,jogamp.opengl.glu.mipmap.ExtractPrimitive,int,int,int,java.nio.ByteBuffer,java.nio.ByteBuffer,int,int,int,int,boolean) -> halveImage3D
    void halveImagePackedPixel3D(int,jogamp.opengl.glu.mipmap.Extract,int,int,int,java.nio.ByteBuffer,java.nio.ByteBuffer,int,int,int,boolean) -> halveImagePackedPixel3D
    void <clinit>() -> <clinit>
jogamp.opengl.glu.mipmap.Image -> jogamp.opengl.glu.mipmap.Image:
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    short getShortFromByteArray(byte[],int) -> getShortFromByteArray
    int getIntFromByteArray(byte[],int) -> getIntFromByteArray
    float getFloatFromByteArray(byte[],int) -> getFloatFromByteArray
    void fill_image(jogamp.opengl.glu.mipmap.PixelStorageModes,int,int,int,int,boolean,java.nio.ByteBuffer,java.nio.ShortBuffer) -> fill_image
    void empty_image(jogamp.opengl.glu.mipmap.PixelStorageModes,int,int,int,int,boolean,java.nio.ShortBuffer,java.nio.ByteBuffer) -> empty_image
    void fillImage3D(jogamp.opengl.glu.mipmap.PixelStorageModes,int,int,int,int,int,boolean,java.nio.ByteBuffer,java.nio.ShortBuffer) -> fillImage3D
    void emptyImage3D(jogamp.opengl.glu.mipmap.PixelStorageModes,int,int,int,int,int,boolean,java.nio.ShortBuffer,java.nio.ByteBuffer) -> emptyImage3D
    void <clinit>() -> <clinit>
jogamp.opengl.glu.mipmap.Mipmap -> jogamp.opengl.glu.mipmap.Mipmap:
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    int computeLog(int) -> computeLog
    int nearestPower(int) -> nearestPower
    short GLU_SWAP_2_BYTES(short) -> GLU_SWAP_2_BYTES
    int GLU_SWAP_4_BYTES(int) -> GLU_SWAP_4_BYTES
    float GLU_SWAP_4_BYTES(float) -> GLU_SWAP_4_BYTES
    int checkMipmapArgs(int,int,int) -> checkMipmapArgs
    boolean legalFormat(int) -> legalFormat
    boolean legalType(int) -> legalType
    boolean isTypePackedPixel(int) -> isTypePackedPixel
    boolean isLegalFormatForPackedPixelType(int,int) -> isLegalFormatForPackedPixelType
    boolean isLegalLevels(int,int,int,int) -> isLegalLevels
    void closestFit(javax.media.opengl.GL,int,int,int,int,int,int,int[],int[]) -> closestFit
    void closestFit3D(javax.media.opengl.GL,int,int,int,int,int,int,int,int[],int[],int[]) -> closestFit3D
    int elements_per_group(int,int) -> elements_per_group
    int bytes_per_element(int) -> bytes_per_element
    boolean is_index(int) -> is_index
    int image_size(int,int,int,int) -> image_size
    int imageSize3D(int,int,int,int,int) -> imageSize3D
    void retrieveStoreModes(javax.media.opengl.GL,jogamp.opengl.glu.mipmap.PixelStorageModes) -> retrieveStoreModes
    void retrieveStoreModes3D(javax.media.opengl.GL,jogamp.opengl.glu.mipmap.PixelStorageModes) -> retrieveStoreModes3D
    int gluScaleImage(javax.media.opengl.GL,int,int,int,int,java.nio.ByteBuffer,int,int,int,java.nio.ByteBuffer) -> gluScaleImage
    int gluBuild1DMipmapLevels(javax.media.opengl.GL,int,int,int,int,int,int,int,int,java.nio.ByteBuffer) -> gluBuild1DMipmapLevels
    int gluBuild1DMipmaps(javax.media.opengl.GL,int,int,int,int,int,java.nio.ByteBuffer) -> gluBuild1DMipmaps
    int gluBuild2DMipmapLevels(javax.media.opengl.GL,int,int,int,int,int,int,int,int,int,java.lang.Object) -> gluBuild2DMipmapLevels
    int gluBuild2DMipmaps(javax.media.opengl.GL,int,int,int,int,int,int,java.lang.Object) -> gluBuild2DMipmaps
    int gluBuild3DMipmaps(javax.media.opengl.GL,int,int,int,int,int,int,int,java.nio.ByteBuffer) -> gluBuild3DMipmaps
    int gluBuild3DMipmapLevels(javax.media.opengl.GL,int,int,int,int,int,int,int,int,int,int,java.nio.ByteBuffer) -> gluBuild3DMipmapLevels
    void <clinit>() -> <clinit>
jogamp.opengl.glu.mipmap.PixelStorageModes -> jogamp.opengl.glu.mipmap.PixelStorageModes:
    int packAlignment -> packAlignment
    int packRowLength -> packRowLength
    int packSkipRows -> packSkipRows
    int packSkipPixels -> packSkipPixels
    boolean packLsbFirst -> packLsbFirst
    boolean packSwapBytes -> packSwapBytes
    int packSkipImages -> packSkipImages
    int packImageHeight -> packImageHeight
    int unpackAlignment -> unpackAlignment
    int unpackRowLength -> unpackRowLength
    int unpackSkipRows -> unpackSkipRows
    int unpackSkipPixels -> unpackSkipPixels
    boolean unpackLsbFirst -> unpackLsbFirst
    boolean unpackSwapBytes -> unpackSwapBytes
    int unpackSkipImages -> unpackSkipImages
    int unpackImageHeight -> unpackImageHeight
    void <init>() -> <init>
    int getPackAlignment() -> getPackAlignment
    void setPackAlignment(int) -> setPackAlignment
    int getPackRowLength() -> getPackRowLength
    void setPackRowLength(int) -> setPackRowLength
    int getPackSkipRows() -> getPackSkipRows
    void setPackSkipRows(int) -> setPackSkipRows
    int getPackSkipPixels() -> getPackSkipPixels
    void setPackSkipPixels(int) -> setPackSkipPixels
    boolean getPackLsbFirst() -> getPackLsbFirst
    void setPackLsbFirst(boolean) -> setPackLsbFirst
    boolean getPackSwapBytes() -> getPackSwapBytes
    void setPackSwapBytes(boolean) -> setPackSwapBytes
    int getPackSkipImages() -> getPackSkipImages
    void setPackSkipImages(int) -> setPackSkipImages
    int getPackImageHeight() -> getPackImageHeight
    void setPackImageHeight(int) -> setPackImageHeight
    int getUnpackAlignment() -> getUnpackAlignment
    void setUnpackAlignment(int) -> setUnpackAlignment
    int getUnpackRowLength() -> getUnpackRowLength
    void setUnpackRowLength(int) -> setUnpackRowLength
    int getUnpackSkipRows() -> getUnpackSkipRows
    void setUnpackSkipRows(int) -> setUnpackSkipRows
    int getUnpackSkipPixels() -> getUnpackSkipPixels
    void setUnpackSkipPixels(int) -> setUnpackSkipPixels
    boolean getUnpackLsbFirst() -> getUnpackLsbFirst
    void setUnpackLsbFirst(boolean) -> setUnpackLsbFirst
    boolean getUnpackSwapBytes() -> getUnpackSwapBytes
    void setUnpackSwapBytes(boolean) -> setUnpackSwapBytes
    int getUnpackSkipImages() -> getUnpackSkipImages
    void setUnpackSkipImages(int) -> setUnpackSkipImages
    int getUnpackImageHeight() -> getUnpackImageHeight
    void setUnpackImageHeight(int) -> setUnpackImageHeight
jogamp.opengl.glu.mipmap.ScaleInternal -> jogamp.opengl.glu.mipmap.ScaleInternal:
    float UINT_MAX -> UINT_MAX
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    void scale_internal(int,int,int,java.nio.ShortBuffer,int,int,java.nio.ShortBuffer) -> scale_internal
    void scale_internal_ubyte(int,int,int,java.nio.ByteBuffer,int,int,java.nio.ByteBuffer,int,int,int) -> scale_internal_ubyte
    void scale_internal_byte(int,int,int,java.nio.ByteBuffer,int,int,java.nio.ByteBuffer,int,int,int) -> scale_internal_byte
    void scale_internal_ushort(int,int,int,java.nio.ByteBuffer,int,int,java.nio.ShortBuffer,int,int,int,boolean) -> scale_internal_ushort
    void scale_internal_short(int,int,int,java.nio.ByteBuffer,int,int,java.nio.ShortBuffer,int,int,int,boolean) -> scale_internal_short
    void scale_internal_uint(int,int,int,java.nio.ByteBuffer,int,int,java.nio.IntBuffer,int,int,int,boolean) -> scale_internal_uint
    void scale_internal_int(int,int,int,java.nio.ByteBuffer,int,int,java.nio.IntBuffer,int,int,int,boolean) -> scale_internal_int
    void scale_internal_float(int,int,int,java.nio.ByteBuffer,int,int,java.nio.FloatBuffer,int,int,int,boolean) -> scale_internal_float
    void scaleInternalPackedPixel(int,jogamp.opengl.glu.mipmap.Extract,int,int,java.nio.ByteBuffer,int,int,java.nio.ByteBuffer,int,int,boolean) -> scaleInternalPackedPixel
    void scaleInternal3D(int,int,int,int,java.nio.ShortBuffer,int,int,int,java.nio.ShortBuffer) -> scaleInternal3D
    int gluScaleImage3D(javax.media.opengl.GL,int,int,int,int,int,java.nio.ByteBuffer,int,int,int,int,java.nio.ByteBuffer) -> gluScaleImage3D
    void <clinit>() -> <clinit>
jogamp.opengl.glu.mipmap.Type_Widget -> jogamp.opengl.glu.mipmap.Type_Widget:
    java.nio.ByteBuffer buffer -> buffer
    void <init>() -> <init>
    void setUB0(byte) -> setUB0
    byte getUB0() -> getUB0
    void setUB1(byte) -> setUB1
    byte getUB1() -> getUB1
    void setUB2(byte) -> setUB2
    byte getUB2() -> getUB2
    void setUB3(byte) -> setUB3
    byte getUB3() -> getUB3
    void setUS0(short) -> setUS0
    short getUS0() -> getUS0
    void setUS1(short) -> setUS1
    short getUS1() -> getUS1
    void setUI(int) -> setUI
    int getUI() -> getUI
    void setB0(byte) -> setB0
    byte getB0() -> getB0
    void setB1(byte) -> setB1
    byte getB1() -> getB1
    void setB2(byte) -> setB2
    byte getB2() -> getB2
    void setB3(byte) -> setB3
    byte getB3() -> getB3
    void setS0(short) -> setS0
    short getS0() -> getS0
    void setS1(short) -> setS1
    short getS1() -> getS1
    void setI(int) -> setI
    int getI() -> getI
    void setF(float) -> setF
    float getF() -> getF
    java.nio.ByteBuffer getBuffer() -> getBuffer
    void main(java.lang.String[]) -> main
jogamp.opengl.glu.nurbs.Arc -> jogamp.opengl.glu.nurbs.Arc:
    jogamp.opengl.glu.nurbs.PwlArc pwlArc -> pwlArc
    long type -> type
    jogamp.opengl.glu.nurbs.Arc link -> link
    jogamp.opengl.glu.nurbs.Arc prev -> prev
    jogamp.opengl.glu.nurbs.Arc next -> next
    jogamp.opengl.glu.nurbs.BezierArc bezierArc -> bezierArc
    int ARC_NONE -> ARC_NONE
    int ARC_RIGHT -> ARC_RIGHT
    int ARC_TOP -> ARC_TOP
    int ARC_LEFT -> ARC_LEFT
    int ARC_BOTTOM -> ARC_BOTTOM
    long BEZIER_TAG -> BEZIER_TAG
    long ARC_TAG -> ARC_TAG
    long TAIL_TAG -> TAIL_TAG
    void <init>(int) -> <init>
    void setside(int) -> setside
    void clearside() -> clearside
    jogamp.opengl.glu.nurbs.Arc append(jogamp.opengl.glu.nurbs.Arc) -> append
    boolean check() -> check
    void setbezier() -> setbezier
    float[] tail() -> tail
    float[] head() -> head
    boolean ismarked() -> ismarked
    void clearmark() -> clearmark
    void setmark() -> setmark
    void setitail() -> setitail
    boolean getitail() -> getitail
    void clearitail() -> clearitail
jogamp.opengl.glu.nurbs.ArcSdirSorter -> jogamp.opengl.glu.nurbs.ArcSdirSorter:
    void <init>(jogamp.opengl.glu.nurbs.Subdivider) -> <init>
    void qsort(jogamp.opengl.glu.nurbs.CArrayOfArcs,int) -> qsort
jogamp.opengl.glu.nurbs.ArcTdirSorter -> jogamp.opengl.glu.nurbs.ArcTdirSorter:
    void <init>(jogamp.opengl.glu.nurbs.Subdivider) -> <init>
    void qsort(jogamp.opengl.glu.nurbs.CArrayOfArcs,int) -> qsort
jogamp.opengl.glu.nurbs.ArcTesselator -> jogamp.opengl.glu.nurbs.ArcTesselator:
    void <init>() -> <init>
    void bezier(jogamp.opengl.glu.nurbs.Arc,float,float,float,float) -> bezier
    void pwl_right(jogamp.opengl.glu.nurbs.Arc,float,float,float,float) -> pwl_right
    void pwl_left(jogamp.opengl.glu.nurbs.Arc,float,float,float,float) -> pwl_left
jogamp.opengl.glu.nurbs.Backend -> jogamp.opengl.glu.nurbs.Backend:
    int N_MESHFILL -> N_MESHFILL
    int N_MESHLINE -> N_MESHLINE
    int N_MESHPOINT -> N_MESHPOINT
    jogamp.opengl.glu.nurbs.CurveEvaluator curveEvaluator -> curveEvaluator
    jogamp.opengl.glu.nurbs.SurfaceEvaluator surfaceEvaluator -> surfaceEvaluator
    void <init>() -> <init>
    void bgncurv() -> bgncurv
    void endcurv() -> endcurv
    void curvpts(int,jogamp.opengl.glu.nurbs.CArrayOfFloats,int,int,float,float) -> curvpts
    void curvgrid(float,float,int) -> curvgrid
    void curvmesh(int,int) -> curvmesh
    void bgnsurf(int,int) -> bgnsurf
    void endsurf() -> endsurf
    void patch(float,float,float,float) -> patch
    void surfgrid(float,float,int,float,float,int) -> surfgrid
    void surfmesh(int,int,int,int) -> surfmesh
    void surfpts(int,jogamp.opengl.glu.nurbs.CArrayOfFloats,int,int,int,int,float,float,float,float) -> surfpts
jogamp.opengl.glu.nurbs.BezierArc -> jogamp.opengl.glu.nurbs.BezierArc:
    void <init>() -> <init>
jogamp.opengl.glu.nurbs.Bin -> jogamp.opengl.glu.nurbs.Bin:
    jogamp.opengl.glu.nurbs.Arc head -> head
    jogamp.opengl.glu.nurbs.Arc current -> current
    void <init>() -> <init>
    boolean isnonempty() -> isnonempty
    void addarc(jogamp.opengl.glu.nurbs.Arc) -> addarc
    int numarcs() -> numarcs
    jogamp.opengl.glu.nurbs.Arc removearc() -> removearc
    void adopt() -> adopt
    void markall() -> markall
    jogamp.opengl.glu.nurbs.Arc firstarc() -> firstarc
    jogamp.opengl.glu.nurbs.Arc nextarc() -> nextarc
jogamp.opengl.glu.nurbs.Breakpt -> jogamp.opengl.glu.nurbs.Breakpt:
    int multi -> multi
    float value -> value
    int def -> def
    void <init>() -> <init>
jogamp.opengl.glu.nurbs.CArrayOfArcs -> jogamp.opengl.glu.nurbs.CArrayOfArcs:
    jogamp.opengl.glu.nurbs.Arc[] array -> array
    int pointer -> pointer
    boolean noCheck -> noCheck
    void <init>(jogamp.opengl.glu.nurbs.Arc[],int) -> <init>
    void <init>(jogamp.opengl.glu.nurbs.CArrayOfArcs) -> <init>
    void <init>(jogamp.opengl.glu.nurbs.Arc[]) -> <init>
    jogamp.opengl.glu.nurbs.Arc get() -> get
    void pp() -> pp
    void set(jogamp.opengl.glu.nurbs.Arc) -> set
    jogamp.opengl.glu.nurbs.Arc get(int) -> get
    jogamp.opengl.glu.nurbs.Arc getRelative(int) -> getRelative
    void setRelative(int,jogamp.opengl.glu.nurbs.Arc) -> setRelative
    void lessenPointerBy(int) -> lessenPointerBy
    int getPointer() -> getPointer
    void setPointer(int) -> setPointer
    void raisePointerBy(int) -> raisePointerBy
    void mm() -> mm
    jogamp.opengl.glu.nurbs.Arc[] getArray() -> getArray
    void setArray(jogamp.opengl.glu.nurbs.Arc[]) -> setArray
jogamp.opengl.glu.nurbs.CArrayOfBreakpts -> jogamp.opengl.glu.nurbs.CArrayOfBreakpts:
    jogamp.opengl.glu.nurbs.Breakpt[] pole -> pole
    int pointer -> pointer
    void <init>(jogamp.opengl.glu.nurbs.Breakpt[],int) -> <init>
    void <init>(jogamp.opengl.glu.nurbs.CArrayOfBreakpts) -> <init>
    jogamp.opengl.glu.nurbs.Breakpt get() -> get
    void pp() -> pp
    void set(jogamp.opengl.glu.nurbs.Breakpt) -> set
    jogamp.opengl.glu.nurbs.Breakpt get(int) -> get
    void lessenPointerBy(int) -> lessenPointerBy
    int getPointer() -> getPointer
    void setPointer(int) -> setPointer
    void raisePointerBy(int) -> raisePointerBy
    void mm() -> mm
jogamp.opengl.glu.nurbs.CArrayOfFloats -> jogamp.opengl.glu.nurbs.CArrayOfFloats:
    float[] array -> array
    int pointer -> pointer
    boolean noCheck -> noCheck
    void <init>(float[],int) -> <init>
    void <init>(jogamp.opengl.glu.nurbs.CArrayOfFloats) -> <init>
    void <init>(float[]) -> <init>
    float get() -> get
    void pp() -> pp
    void set(float) -> set
    float get(int) -> get
    float getRelative(int) -> getRelative
    void setRelative(int,float) -> setRelative
    void lessenPointerBy(int) -> lessenPointerBy
    int getPointer() -> getPointer
    void setPointer(int) -> setPointer
    void raisePointerBy(int) -> raisePointerBy
    void mm() -> mm
    float[] getArray() -> getArray
    void setArray(float[]) -> setArray
jogamp.opengl.glu.nurbs.CArrayOfQuiltspecs -> jogamp.opengl.glu.nurbs.CArrayOfQuiltspecs:
    jogamp.opengl.glu.nurbs.Quiltspec[] array -> array
    int pointer -> pointer
    void <init>(jogamp.opengl.glu.nurbs.Quiltspec[],int) -> <init>
    void <init>(jogamp.opengl.glu.nurbs.CArrayOfQuiltspecs) -> <init>
    void <init>(jogamp.opengl.glu.nurbs.Quiltspec[]) -> <init>
    jogamp.opengl.glu.nurbs.Quiltspec get() -> get
    void pp() -> pp
    void set(jogamp.opengl.glu.nurbs.Quiltspec) -> set
    jogamp.opengl.glu.nurbs.Quiltspec get(int) -> get
    void lessenPointerBy(int) -> lessenPointerBy
    int getPointer() -> getPointer
    void setPointer(int) -> setPointer
    void raisePointerBy(int) -> raisePointerBy
    void mm() -> mm
    jogamp.opengl.glu.nurbs.Quiltspec[] getArray() -> getArray
    void setArray(jogamp.opengl.glu.nurbs.Quiltspec[]) -> setArray
jogamp.opengl.glu.nurbs.Curve -> jogamp.opengl.glu.nurbs.Curve:
    int MAXCOORDS -> MAXCOORDS
    int MAXORDER -> MAXORDER
    jogamp.opengl.glu.nurbs.Curve next -> next
    jogamp.opengl.glu.nurbs.Mapdesc mapdesc -> mapdesc
    boolean needsSampling -> needsSampling
    int cullval -> cullval
    int stride -> stride
    int order -> order
    float[] range -> range
    float stepsize -> stepsize
    float minstepsize -> minstepsize
    float[] spts -> spts
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(jogamp.opengl.glu.nurbs.Quilt,float[],float[],jogamp.opengl.glu.nurbs.Curve) -> <init>
    int cullCheck() -> cullCheck
    void getStepSize() -> getStepSize
    void setstepsize(float) -> setstepsize
    void clamp() -> clamp
    boolean needsSamplingSubdivision() -> needsSamplingSubdivision
    void <clinit>() -> <clinit>
jogamp.opengl.glu.nurbs.CurveEvaluator -> jogamp.opengl.glu.nurbs.CurveEvaluator:
    void bgnmap1f() -> bgnmap1f
    void endmap1f() -> endmap1f
    void map1f(int,float,float,int,int,jogamp.opengl.glu.nurbs.CArrayOfFloats) -> map1f
    void enable(int) -> enable
    void mapgrid1f(int,float,float) -> mapgrid1f
    void mapmesh1f(int,int,int) -> mapmesh1f
jogamp.opengl.glu.nurbs.Curvelist -> jogamp.opengl.glu.nurbs.Curvelist:
    jogamp.opengl.glu.nurbs.Curve curve -> curve
    float[] range -> range
    float stepsize -> stepsize
    boolean needsSubdivision -> needsSubdivision
    void <init>(jogamp.opengl.glu.nurbs.Quilt,float[],float[]) -> <init>
    void getstepsize() -> getstepsize
    boolean needsSamplingSubdivision() -> needsSamplingSubdivision
    int cullCheck() -> cullCheck
jogamp.opengl.glu.nurbs.Flist -> jogamp.opengl.glu.nurbs.Flist:
    int end -> end
    int start -> start
    float[] pts -> pts
    int npts -> npts
    void <init>() -> <init>
    void grow(int) -> grow
    void filter() -> filter
    void taper(float,float) -> taper
    void add(float) -> add
jogamp.opengl.glu.nurbs.Knotspec -> jogamp.opengl.glu.nurbs.Knotspec:
    jogamp.opengl.glu.nurbs.CArrayOfFloats inkbegin -> inkbegin
    jogamp.opengl.glu.nurbs.CArrayOfFloats inkend -> inkend
    int prestride -> prestride
    int order -> order
    jogamp.opengl.glu.nurbs.Knotspec next -> next
    jogamp.opengl.glu.nurbs.CArrayOfFloats klast -> klast
    jogamp.opengl.glu.nurbs.CArrayOfFloats kfirst -> kfirst
    jogamp.opengl.glu.nurbs.CArrayOfBreakpts bbegin -> bbegin
    jogamp.opengl.glu.nurbs.CArrayOfBreakpts bend -> bend
    jogamp.opengl.glu.nurbs.CArrayOfFloats kleft -> kleft
    jogamp.opengl.glu.nurbs.CArrayOfFloats kright -> kright
    int preoffset -> preoffset
    int postwidth -> postwidth
    jogamp.opengl.glu.nurbs.CArrayOfFloats sbegin -> sbegin
    jogamp.opengl.glu.nurbs.CArrayOfFloats outkbegin -> outkbegin
    jogamp.opengl.glu.nurbs.CArrayOfFloats outkend -> outkend
    int prewidth -> prewidth
    int postoffset -> postoffset
    int poststride -> poststride
    int ncoords -> ncoords
    boolean istransformed -> istransformed
    jogamp.opengl.glu.nurbs.Knotspec kspectotrans -> kspectotrans
    void <init>() -> <init>
    void preselect() -> preselect
    void select() -> select
    void factors() -> factors
    void knots() -> knots
    void breakpoints() -> breakpoints
    void copy(jogamp.opengl.glu.nurbs.CArrayOfFloats,jogamp.opengl.glu.nurbs.CArrayOfFloats) -> copy
    void pt_io_copy(jogamp.opengl.glu.nurbs.CArrayOfFloats,jogamp.opengl.glu.nurbs.CArrayOfFloats) -> pt_io_copy
    void transform(jogamp.opengl.glu.nurbs.CArrayOfFloats) -> transform
    void insert(jogamp.opengl.glu.nurbs.CArrayOfFloats) -> insert
    void pt_oo_copy(jogamp.opengl.glu.nurbs.CArrayOfFloats,jogamp.opengl.glu.nurbs.CArrayOfFloats) -> pt_oo_copy
    void pt_oo_sum(jogamp.opengl.glu.nurbs.CArrayOfFloats,jogamp.opengl.glu.nurbs.CArrayOfFloats,jogamp.opengl.glu.nurbs.CArrayOfFloats,float,double) -> pt_oo_sum
jogamp.opengl.glu.nurbs.Knotvector -> jogamp.opengl.glu.nurbs.Knotvector:
    float TOLERANCE -> TOLERANCE
    int MAXORDER -> MAXORDER
    int knotcount -> knotcount
    int stride -> stride
    int order -> order
    float[] knotlist -> knotlist
    void <init>(int,int,int,float[]) -> <init>
    void init(int,int,int,float[]) -> init
    int validate() -> validate
    void show(java.lang.String) -> show
    boolean identical(float,float) -> identical
jogamp.opengl.glu.nurbs.Mapdesc -> jogamp.opengl.glu.nurbs.Mapdesc:
    int MAXCOORDS -> MAXCOORDS
    jogamp.opengl.glu.nurbs.Mapdesc next -> next
    int isrational -> isrational
    int ncoords -> ncoords
    int type -> type
    int hcoords -> hcoords
    int inhcoords -> inhcoords
    int mask -> mask
    float pixel_tolerance -> pixel_tolerance
    float error_tolerance -> error_tolerance
    float bbox_subdividing -> bbox_subdividing
    float culling_method -> culling_method
    float sampling_method -> sampling_method
    float clampfactor -> clampfactor
    float minsavings -> minsavings
    float s_steps -> s_steps
    float t_steps -> t_steps
    float maxrate -> maxrate
    float maxsrate -> maxsrate
    float maxtrate -> maxtrate
    float[][] bmat -> bmat
    float[][] smat -> smat
    float[][] cmat -> cmat
    float[] bboxsize -> bboxsize
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(int,int,int) -> <init>
    void identify(float[][]) -> identify
    boolean isProperty(int) -> isProperty
    int getNCoords() -> getNCoords
    int getType() -> getType
    boolean isRangeSampling() -> isRangeSampling
    boolean isObjectSpacePathSampling() -> isObjectSpacePathSampling
    boolean isObjectSpaceParaSampling() -> isObjectSpaceParaSampling
    boolean isSurfaceAreaSampling() -> isSurfaceAreaSampling
    boolean isPathLengthSampling() -> isPathLengthSampling
    boolean isParametricDistanceSampling() -> isParametricDistanceSampling
    boolean isCulling() -> isCulling
    boolean isConstantSampling() -> isConstantSampling
    boolean isDomainSampling() -> isDomainSampling
    float getProperty(int) -> getProperty
    void setProperty(int,float) -> setProperty
    void xformSampling(jogamp.opengl.glu.nurbs.CArrayOfFloats,int,int,float[],int) -> xformSampling
    void xFormMat(float[][],jogamp.opengl.glu.nurbs.CArrayOfFloats,int,int,float[],int) -> xFormMat
    void <clinit>() -> <clinit>
jogamp.opengl.glu.nurbs.Maplist -> jogamp.opengl.glu.nurbs.Maplist:
    jogamp.opengl.glu.nurbs.Mapdesc maps -> maps
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    void initialize() -> initialize
    void define(int,int,int) -> define
    void add(int,int,int) -> add
    jogamp.opengl.glu.nurbs.Mapdesc locate(int) -> locate
    jogamp.opengl.glu.nurbs.Mapdesc find(int) -> find
    void <clinit>() -> <clinit>
jogamp.opengl.glu.nurbs.O_curve -> jogamp.opengl.glu.nurbs.O_curve:
    int curvetype -> curvetype
    jogamp.opengl.glu.nurbs.O_curve next -> next
    jogamp.opengl.glu.nurbs.O_pwlcurve o_pwlcurve -> o_pwlcurve
    jogamp.opengl.glu.nurbs.O_nurbscurve o_nurbscurve -> o_nurbscurve
    void <init>() -> <init>
jogamp.opengl.glu.nurbs.O_nurbscurve -> jogamp.opengl.glu.nurbs.O_nurbscurve:
    jogamp.opengl.glu.nurbs.Quilt bezier_curves -> bezier_curves
    int type -> type
    boolean used -> used
    jogamp.opengl.glu.nurbs.O_curve owner -> owner
    jogamp.opengl.glu.nurbs.O_nurbscurve next -> next
    void <init>(int) -> <init>
jogamp.opengl.glu.nurbs.O_nurbssurface -> jogamp.opengl.glu.nurbs.O_nurbssurface:
    jogamp.opengl.glu.nurbs.Quilt bezier_patches -> bezier_patches
    boolean used -> used
    jogamp.opengl.glu.nurbs.O_surface owner -> owner
    jogamp.opengl.glu.nurbs.O_nurbssurface next -> next
    int type -> type
    void <init>(int) -> <init>
jogamp.opengl.glu.nurbs.O_pwlcurve -> jogamp.opengl.glu.nurbs.O_pwlcurve:
    void <init>() -> <init>
jogamp.opengl.glu.nurbs.O_surface -> jogamp.opengl.glu.nurbs.O_surface:
    jogamp.opengl.glu.nurbs.O_nurbssurface o_nurbssurface -> o_nurbssurface
    jogamp.opengl.glu.nurbs.O_trim o_trim -> o_trim
    void <init>() -> <init>
jogamp.opengl.glu.nurbs.O_trim -> jogamp.opengl.glu.nurbs.O_trim:
    void <init>() -> <init>
jogamp.opengl.glu.nurbs.Patch -> jogamp.opengl.glu.nurbs.Patch:
    void <init>(jogamp.opengl.glu.nurbs.Quilt,float[],float[],jogamp.opengl.glu.nurbs.Patch) -> <init>
jogamp.opengl.glu.nurbs.Patchlist -> jogamp.opengl.glu.nurbs.Patchlist:
    jogamp.opengl.glu.nurbs.Pspec[] pspec -> pspec
    jogamp.opengl.glu.nurbs.Patch patch -> patch
    void <init>(jogamp.opengl.glu.nurbs.Quilt,float[],float[]) -> <init>
    void <init>(jogamp.opengl.glu.nurbs.Patchlist,int,float) -> <init>
    int cullCheck() -> cullCheck
    void getstepsize() -> getstepsize
    boolean needsSamplingSubdivision() -> needsSamplingSubdivision
    boolean needsSubdivision(int) -> needsSubdivision
    boolean needsNonSamplingSubdivision() -> needsNonSamplingSubdivision
    void bbox() -> bbox
jogamp.opengl.glu.nurbs.Property -> jogamp.opengl.glu.nurbs.Property:
    int type -> type
    int tag -> tag
    float value -> value
    void <init>(int,int,float) -> <init>
jogamp.opengl.glu.nurbs.Pspec -> jogamp.opengl.glu.nurbs.Pspec:
    float[] range -> range
    void <init>() -> <init>
jogamp.opengl.glu.nurbs.PwlArc -> jogamp.opengl.glu.nurbs.PwlArc:
    int npts -> npts
    jogamp.opengl.glu.nurbs.TrimVertex[] pts -> pts
    int type -> type
    void <init>(int,jogamp.opengl.glu.nurbs.TrimVertex[]) -> <init>
jogamp.opengl.glu.nurbs.Quilt -> jogamp.opengl.glu.nurbs.Quilt:
    int MAXDIM -> MAXDIM
    jogamp.opengl.glu.nurbs.Mapdesc mapdesc -> mapdesc
    jogamp.opengl.glu.nurbs.CArrayOfQuiltspecs qspec -> qspec
    jogamp.opengl.glu.nurbs.CArrayOfQuiltspecs eqspec -> eqspec
    jogamp.opengl.glu.nurbs.CArrayOfFloats cpts -> cpts
    jogamp.opengl.glu.nurbs.Quilt next -> next
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(jogamp.opengl.glu.nurbs.Mapdesc) -> <init>
    void toBezier(jogamp.opengl.glu.nurbs.Knotvector,jogamp.opengl.glu.nurbs.Knotvector,jogamp.opengl.glu.nurbs.CArrayOfFloats,int) -> toBezier
    void toBezier(jogamp.opengl.glu.nurbs.Knotvector,jogamp.opengl.glu.nurbs.CArrayOfFloats,int) -> toBezier
    void downloadAll(float[],float[],jogamp.opengl.glu.nurbs.Backend) -> downloadAll
    void download(jogamp.opengl.glu.nurbs.Backend) -> download
    int getDimension() -> getDimension
    void select(float[],float[]) -> select
    void getRange(float[],float[],jogamp.opengl.glu.nurbs.Flist) -> getRange
    void getRange(float[],float[],int,jogamp.opengl.glu.nurbs.Flist) -> getRange
    int isCulled() -> isCulled
    void getRange(float[],float[],jogamp.opengl.glu.nurbs.Flist,jogamp.opengl.glu.nurbs.Flist) -> getRange
    void findRates(jogamp.opengl.glu.nurbs.Flist,jogamp.opengl.glu.nurbs.Flist,float[]) -> findRates
    void <clinit>() -> <clinit>
jogamp.opengl.glu.nurbs.Quiltspec -> jogamp.opengl.glu.nurbs.Quiltspec:
    int stride -> stride
    int width -> width
    int order -> order
    int offset -> offset
    int index -> index
    int[] bdry -> bdry
    float[] breakpoints -> breakpoints
    void <init>() -> <init>
jogamp.opengl.glu.nurbs.Renderhints -> jogamp.opengl.glu.nurbs.Renderhints:
    int errorchecking -> errorchecking
    int maxsubdivisions -> maxsubdivisions
    int subdivisions -> subdivisions
    int display_method -> display_method
    int wiretris -> wiretris
    int wirequads -> wirequads
    void <init>() -> <init>
    void setProperty(jogamp.opengl.glu.nurbs.Property) -> setProperty
    void init() -> init
jogamp.opengl.glu.nurbs.Splinespec -> jogamp.opengl.glu.nurbs.Splinespec:
    int dim -> dim
    jogamp.opengl.glu.nurbs.Knotspec kspec -> kspec
    jogamp.opengl.glu.nurbs.CArrayOfFloats outcpts -> outcpts
    void <init>(int) -> <init>
    void kspecinit(jogamp.opengl.glu.nurbs.Knotvector) -> kspecinit
    void kspecinit(jogamp.opengl.glu.nurbs.Knotvector,jogamp.opengl.glu.nurbs.Knotvector) -> kspecinit
    void select() -> select
    void layout(int) -> layout
    void setupquilt(jogamp.opengl.glu.nurbs.Quilt) -> setupquilt
    void copy(jogamp.opengl.glu.nurbs.CArrayOfFloats) -> copy
    void transform() -> transform
jogamp.opengl.glu.nurbs.Subdivider -> jogamp.opengl.glu.nurbs.Subdivider:
    int CULL_TRIVIAL_REJECT -> CULL_TRIVIAL_REJECT
    int CULL_ACCEPT -> CULL_ACCEPT
    int MAXARCS -> MAXARCS
    jogamp.opengl.glu.nurbs.Quilt qlist -> qlist
    jogamp.opengl.glu.nurbs.Renderhints renderhints -> renderhints
    jogamp.opengl.glu.nurbs.Backend backend -> backend
    int subdivisions -> subdivisions
    float domain_distance_u_rate -> domain_distance_u_rate
    int is_domain_distance_sampling -> is_domain_distance_sampling
    jogamp.opengl.glu.nurbs.Bin initialbin -> initialbin
    boolean showDegenerate -> showDegenerate
    boolean isArcTypeBezier -> isArcTypeBezier
    jogamp.opengl.glu.nurbs.Flist tpbrkpts -> tpbrkpts
    jogamp.opengl.glu.nurbs.Flist spbrkpts -> spbrkpts
    int s_index -> s_index
    jogamp.opengl.glu.nurbs.Arc pjarc -> pjarc
    jogamp.opengl.glu.nurbs.ArcTesselator arctesselator -> arctesselator
    int t_index -> t_index
    jogamp.opengl.glu.nurbs.Flist smbrkpts -> smbrkpts
    float domain_distance_v_rate -> domain_distance_v_rate
    void <init>() -> <init>
    void beginQuilts(jogamp.opengl.glu.nurbs.Backend) -> beginQuilts
    void addQuilt(jogamp.opengl.glu.nurbs.Quilt) -> addQuilt
    void endQuilts() -> endQuilts
    void drawSurfaces() -> drawSurfaces
    void freejarcs(jogamp.opengl.glu.nurbs.Bin) -> freejarcs
    void subdivideInS(jogamp.opengl.glu.nurbs.Bin) -> subdivideInS
    void splitInS(jogamp.opengl.glu.nurbs.Bin,int,int) -> splitInS
    void splitInT(jogamp.opengl.glu.nurbs.Bin,int,int) -> splitInT
    void samplingSplit(jogamp.opengl.glu.nurbs.Bin,jogamp.opengl.glu.nurbs.Patchlist,int,int) -> samplingSplit
    void nonSamplingSplit(jogamp.opengl.glu.nurbs.Bin,jogamp.opengl.glu.nurbs.Patchlist,int,int) -> nonSamplingSplit
    void monosplitInS(jogamp.opengl.glu.nurbs.Bin,int,int) -> monosplitInS
    void findIrregularS(jogamp.opengl.glu.nurbs.Bin) -> findIrregularS
    void setArcTypePwl() -> setArcTypePwl
    void tesselation(jogamp.opengl.glu.nurbs.Bin,jogamp.opengl.glu.nurbs.Patchlist) -> tesselation
    void setDegenerate() -> setDegenerate
    void split(jogamp.opengl.glu.nurbs.Bin,jogamp.opengl.glu.nurbs.Bin,jogamp.opengl.glu.nurbs.Bin,int,float) -> split
    void join_t(jogamp.opengl.glu.nurbs.Bin,jogamp.opengl.glu.nurbs.Bin,jogamp.opengl.glu.nurbs.Arc,jogamp.opengl.glu.nurbs.Arc) -> join_t
    void check_t(jogamp.opengl.glu.nurbs.Arc,jogamp.opengl.glu.nurbs.Arc) -> check_t
    void join_s(jogamp.opengl.glu.nurbs.Bin,jogamp.opengl.glu.nurbs.Bin,jogamp.opengl.glu.nurbs.Arc,jogamp.opengl.glu.nurbs.Arc) -> join_s
    void link(jogamp.opengl.glu.nurbs.Arc,jogamp.opengl.glu.nurbs.Arc,jogamp.opengl.glu.nurbs.Arc,jogamp.opengl.glu.nurbs.Arc) -> link
    boolean isBezierArcType() -> isBezierArcType
    void simplelink(jogamp.opengl.glu.nurbs.Arc,jogamp.opengl.glu.nurbs.Arc) -> simplelink
    void check_s(jogamp.opengl.glu.nurbs.Arc,jogamp.opengl.glu.nurbs.Arc) -> check_s
    void partition(jogamp.opengl.glu.nurbs.Bin,jogamp.opengl.glu.nurbs.Bin,jogamp.opengl.glu.nurbs.Bin,jogamp.opengl.glu.nurbs.Bin,jogamp.opengl.glu.nurbs.Bin,int,float) -> partition
    void classify_tailonright_t(jogamp.opengl.glu.nurbs.Bin,jogamp.opengl.glu.nurbs.Bin,jogamp.opengl.glu.nurbs.Bin,float) -> classify_tailonright_t
    void classify_tailonleft_s(jogamp.opengl.glu.nurbs.Bin,jogamp.opengl.glu.nurbs.Bin,jogamp.opengl.glu.nurbs.Bin,float) -> classify_tailonleft_s
    void classify_headonright_s(jogamp.opengl.glu.nurbs.Bin,jogamp.opengl.glu.nurbs.Bin,jogamp.opengl.glu.nurbs.Bin,float) -> classify_headonright_s
    boolean ccwTurn_sr(jogamp.opengl.glu.nurbs.Arc,jogamp.opengl.glu.nurbs.Arc) -> ccwTurn_sr
    void classify_headonright_t(jogamp.opengl.glu.nurbs.Bin,jogamp.opengl.glu.nurbs.Bin,jogamp.opengl.glu.nurbs.Bin,float) -> classify_headonright_t
    void classify_tailonleft_t(jogamp.opengl.glu.nurbs.Bin,jogamp.opengl.glu.nurbs.Bin,jogamp.opengl.glu.nurbs.Bin,float) -> classify_tailonleft_t
    void classify_headonleft_t(jogamp.opengl.glu.nurbs.Bin,jogamp.opengl.glu.nurbs.Bin,jogamp.opengl.glu.nurbs.Bin,float) -> classify_headonleft_t
    boolean ccwTurn_tl(jogamp.opengl.glu.nurbs.Arc,jogamp.opengl.glu.nurbs.Arc) -> ccwTurn_tl
    void classify_tailonright_s(jogamp.opengl.glu.nurbs.Bin,jogamp.opengl.glu.nurbs.Bin,jogamp.opengl.glu.nurbs.Bin,float) -> classify_tailonright_s
    void classify_headonleft_s(jogamp.opengl.glu.nurbs.Bin,jogamp.opengl.glu.nurbs.Bin,jogamp.opengl.glu.nurbs.Bin,float) -> classify_headonleft_s
    boolean ccwTurn_sl(jogamp.opengl.glu.nurbs.Arc,jogamp.opengl.glu.nurbs.Arc) -> ccwTurn_sl
    int arc_split(jogamp.opengl.glu.nurbs.Arc,int,float,int) -> arc_split
    void setNonDegenerate() -> setNonDegenerate
    void setArcTypeBezier() -> setArcTypeBezier
    void outline(jogamp.opengl.glu.nurbs.Bin) -> outline
    void makeBorderTrim(float[],float[]) -> makeBorderTrim
    void drawCurves() -> drawCurves
    void samplingSplit(jogamp.opengl.glu.nurbs.Curvelist,int) -> samplingSplit
    void set_domain_distance_u_rate(double) -> set_domain_distance_u_rate
    void set_domain_distance_v_rate(double) -> set_domain_distance_v_rate
    void set_is_domain_distance_sampling(int) -> set_is_domain_distance_sampling
jogamp.opengl.glu.nurbs.SurfaceEvaluator -> jogamp.opengl.glu.nurbs.SurfaceEvaluator:
    void bgnmap2f() -> bgnmap2f
    void polymode(int) -> polymode
    void endmap2f() -> endmap2f
    void domain2f(float,float,float,float) -> domain2f
    void mapgrid2f(int,float,float,int,float,float) -> mapgrid2f
    void mapmesh2f(int,int,int,int,int) -> mapmesh2f
    void map2f(int,float,float,int,int,float,float,int,int,jogamp.opengl.glu.nurbs.CArrayOfFloats) -> map2f
    void enable(int) -> enable
jogamp.opengl.glu.nurbs.TrimVertex -> jogamp.opengl.glu.nurbs.TrimVertex:
    float[] param -> param
    void <init>() -> <init>
jogamp.opengl.glu.registry.Registry -> jogamp.opengl.glu.registry.Registry:
    void <init>() -> <init>
    java.lang.String gluGetString(int) -> gluGetString
    boolean gluCheckExtension(java.lang.String,java.lang.String) -> gluCheckExtension
jogamp.opengl.glu.tessellator.ActiveRegion -> jogamp.opengl.glu.tessellator.ActiveRegion:
    jogamp.opengl.glu.tessellator.GLUhalfEdge eUp -> eUp
    jogamp.opengl.glu.tessellator.DictNode nodeUp -> nodeUp
    int windingNumber -> windingNumber
    boolean inside -> inside
    boolean sentinel -> sentinel
    boolean dirty -> dirty
    boolean fixUpperEdge -> fixUpperEdge
    void <init>() -> <init>
jogamp.opengl.glu.tessellator.CachedVertex -> jogamp.opengl.glu.tessellator.CachedVertex:
    double[] coords -> coords
    java.lang.Object data -> data
    void <init>() -> <init>
jogamp.opengl.glu.tessellator.Dict -> jogamp.opengl.glu.tessellator.Dict:
    jogamp.opengl.glu.tessellator.DictNode head -> head
    java.lang.Object frame -> frame
    jogamp.opengl.glu.tessellator.Dict$DictLeq leq -> leq
    void <init>() -> <init>
    jogamp.opengl.glu.tessellator.Dict dictNewDict(java.lang.Object,jogamp.opengl.glu.tessellator.Dict$DictLeq) -> dictNewDict
    void dictDeleteDict(jogamp.opengl.glu.tessellator.Dict) -> dictDeleteDict
    jogamp.opengl.glu.tessellator.DictNode dictInsert(jogamp.opengl.glu.tessellator.Dict,java.lang.Object) -> dictInsert
    jogamp.opengl.glu.tessellator.DictNode dictInsertBefore(jogamp.opengl.glu.tessellator.Dict,jogamp.opengl.glu.tessellator.DictNode,java.lang.Object) -> dictInsertBefore
    java.lang.Object dictKey(jogamp.opengl.glu.tessellator.DictNode) -> dictKey
    jogamp.opengl.glu.tessellator.DictNode dictSucc(jogamp.opengl.glu.tessellator.DictNode) -> dictSucc
    jogamp.opengl.glu.tessellator.DictNode dictPred(jogamp.opengl.glu.tessellator.DictNode) -> dictPred
    jogamp.opengl.glu.tessellator.DictNode dictMin(jogamp.opengl.glu.tessellator.Dict) -> dictMin
    jogamp.opengl.glu.tessellator.DictNode dictMax(jogamp.opengl.glu.tessellator.Dict) -> dictMax
    void dictDelete(jogamp.opengl.glu.tessellator.Dict,jogamp.opengl.glu.tessellator.DictNode) -> dictDelete
    jogamp.opengl.glu.tessellator.DictNode dictSearch(jogamp.opengl.glu.tessellator.Dict,java.lang.Object) -> dictSearch
jogamp.opengl.glu.tessellator.Dict$DictLeq -> jogamp.opengl.glu.tessellator.Dict$DictLeq:
    boolean leq(java.lang.Object,java.lang.Object,java.lang.Object) -> leq
jogamp.opengl.glu.tessellator.DictNode -> jogamp.opengl.glu.tessellator.DictNode:
    java.lang.Object key -> key
    jogamp.opengl.glu.tessellator.DictNode next -> next
    jogamp.opengl.glu.tessellator.DictNode prev -> prev
    void <init>() -> <init>
jogamp.opengl.glu.tessellator.GLUface -> jogamp.opengl.glu.tessellator.GLUface:
    jogamp.opengl.glu.tessellator.GLUface next -> next
    jogamp.opengl.glu.tessellator.GLUface prev -> prev
    jogamp.opengl.glu.tessellator.GLUhalfEdge anEdge -> anEdge
    java.lang.Object data -> data
    jogamp.opengl.glu.tessellator.GLUface trail -> trail
    boolean marked -> marked
    boolean inside -> inside
    void <init>() -> <init>
jogamp.opengl.glu.tessellator.GLUhalfEdge -> jogamp.opengl.glu.tessellator.GLUhalfEdge:
    jogamp.opengl.glu.tessellator.GLUhalfEdge next -> next
    jogamp.opengl.glu.tessellator.GLUhalfEdge Sym -> Sym
    jogamp.opengl.glu.tessellator.GLUhalfEdge Onext -> Onext
    jogamp.opengl.glu.tessellator.GLUhalfEdge Lnext -> Lnext
    jogamp.opengl.glu.tessellator.GLUvertex Org -> Org
    jogamp.opengl.glu.tessellator.GLUface Lface -> Lface
    jogamp.opengl.glu.tessellator.ActiveRegion activeRegion -> activeRegion
    int winding -> winding
    boolean first -> first
    void <init>(boolean) -> <init>
jogamp.opengl.glu.tessellator.GLUmesh -> jogamp.opengl.glu.tessellator.GLUmesh:
    jogamp.opengl.glu.tessellator.GLUvertex vHead -> vHead
    jogamp.opengl.glu.tessellator.GLUface fHead -> fHead
    jogamp.opengl.glu.tessellator.GLUhalfEdge eHead -> eHead
    jogamp.opengl.glu.tessellator.GLUhalfEdge eHeadSym -> eHeadSym
    void <init>() -> <init>
jogamp.opengl.glu.tessellator.GLUtessellatorImpl -> jogamp.opengl.glu.tessellator.GLUtessellatorImpl:
    int TESS_MAX_CACHE -> TESS_MAX_CACHE
    int state -> state
    jogamp.opengl.glu.tessellator.GLUhalfEdge lastEdge -> lastEdge
    jogamp.opengl.glu.tessellator.GLUmesh mesh -> mesh
    double[] normal -> normal
    double[] sUnit -> sUnit
    double[] tUnit -> tUnit
    double relTolerance -> relTolerance
    int windingRule -> windingRule
    boolean fatalError -> fatalError
    jogamp.opengl.glu.tessellator.Dict dict -> dict
    jogamp.opengl.glu.tessellator.PriorityQ pq -> pq
    jogamp.opengl.glu.tessellator.GLUvertex event -> event
    boolean flagBoundary -> flagBoundary
    boolean boundaryOnly -> boundaryOnly
    boolean avoidDegenerateTris -> avoidDegenerateTris
    jogamp.opengl.glu.tessellator.GLUface lonelyTriList -> lonelyTriList
    boolean flushCacheOnNextVertex -> flushCacheOnNextVertex
    int cacheCount -> cacheCount
    jogamp.opengl.glu.tessellator.CachedVertex[] cache -> cache
    java.lang.Object polygonData -> polygonData
    javax.media.opengl.glu.GLUtessellatorCallback callBegin -> callBegin
    javax.media.opengl.glu.GLUtessellatorCallback callEdgeFlag -> callEdgeFlag
    javax.media.opengl.glu.GLUtessellatorCallback callVertex -> callVertex
    javax.media.opengl.glu.GLUtessellatorCallback callEnd -> callEnd
    javax.media.opengl.glu.GLUtessellatorCallback callError -> callError
    javax.media.opengl.glu.GLUtessellatorCallback callCombine -> callCombine
    javax.media.opengl.glu.GLUtessellatorCallback callBeginData -> callBeginData
    javax.media.opengl.glu.GLUtessellatorCallback callEdgeFlagData -> callEdgeFlagData
    javax.media.opengl.glu.GLUtessellatorCallback callVertexData -> callVertexData
    javax.media.opengl.glu.GLUtessellatorCallback callEndData -> callEndData
    javax.media.opengl.glu.GLUtessellatorCallback callErrorData -> callErrorData
    javax.media.opengl.glu.GLUtessellatorCallback callCombineData -> callCombineData
    double GLU_TESS_DEFAULT_TOLERANCE -> GLU_TESS_DEFAULT_TOLERANCE
    javax.media.opengl.glu.GLUtessellatorCallback NULL_CB -> NULL_CB
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    javax.media.opengl.glu.GLUtessellator gluNewTess() -> gluNewTess
    void makeDormant() -> makeDormant
    void requireState(int) -> requireState
    void gotoState(int) -> gotoState
    void gluDeleteTess() -> gluDeleteTess
    void gluTessProperty(int,double) -> gluTessProperty
    void gluGetTessProperty(int,double[],int) -> gluGetTessProperty
    void gluTessNormal(double,double,double) -> gluTessNormal
    void gluTessCallback(int,javax.media.opengl.glu.GLUtessellatorCallback) -> gluTessCallback
    boolean addVertex(double[],java.lang.Object) -> addVertex
    void cacheVertex(double[],java.lang.Object) -> cacheVertex
    boolean flushCache() -> flushCache
    void gluTessVertex(double[],int,java.lang.Object) -> gluTessVertex
    void gluTessBeginPolygon(java.lang.Object) -> gluTessBeginPolygon
    void gluTessBeginContour() -> gluTessBeginContour
    void gluTessEndContour() -> gluTessEndContour
    void gluTessEndPolygon() -> gluTessEndPolygon
    void gluBeginPolygon() -> gluBeginPolygon
    void gluNextContour(int) -> gluNextContour
    void gluEndPolygon() -> gluEndPolygon
    void callBeginOrBeginData(int) -> callBeginOrBeginData
    void callVertexOrVertexData(java.lang.Object) -> callVertexOrVertexData
    void callEdgeFlagOrEdgeFlagData(boolean) -> callEdgeFlagOrEdgeFlagData
    void callEndOrEndData() -> callEndOrEndData
    void callCombineOrCombineData(double[],java.lang.Object[],float[],java.lang.Object[]) -> callCombineOrCombineData
    void callErrorOrErrorData(int) -> callErrorOrErrorData
    void <clinit>() -> <clinit>
jogamp.opengl.glu.tessellator.GLUvertex -> jogamp.opengl.glu.tessellator.GLUvertex:
    jogamp.opengl.glu.tessellator.GLUvertex next -> next
    jogamp.opengl.glu.tessellator.GLUvertex prev -> prev
    jogamp.opengl.glu.tessellator.GLUhalfEdge anEdge -> anEdge
    java.lang.Object data -> data
    double[] coords -> coords
    double s -> s
    double t -> t
    int pqHandle -> pqHandle
    void <init>() -> <init>
jogamp.opengl.glu.tessellator.Geom -> jogamp.opengl.glu.tessellator.Geom:
    double EPSILON -> EPSILON
    double ONE_MINUS_EPSILON -> ONE_MINUS_EPSILON
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    double EdgeEval(jogamp.opengl.glu.tessellator.GLUvertex,jogamp.opengl.glu.tessellator.GLUvertex,jogamp.opengl.glu.tessellator.GLUvertex) -> EdgeEval
    double EdgeSign(jogamp.opengl.glu.tessellator.GLUvertex,jogamp.opengl.glu.tessellator.GLUvertex,jogamp.opengl.glu.tessellator.GLUvertex) -> EdgeSign
    double TransEval(jogamp.opengl.glu.tessellator.GLUvertex,jogamp.opengl.glu.tessellator.GLUvertex,jogamp.opengl.glu.tessellator.GLUvertex) -> TransEval
    double TransSign(jogamp.opengl.glu.tessellator.GLUvertex,jogamp.opengl.glu.tessellator.GLUvertex,jogamp.opengl.glu.tessellator.GLUvertex) -> TransSign
    boolean VertCCW(jogamp.opengl.glu.tessellator.GLUvertex,jogamp.opengl.glu.tessellator.GLUvertex,jogamp.opengl.glu.tessellator.GLUvertex) -> VertCCW
    double Interpolate(double,double,double,double) -> Interpolate
    void EdgeIntersect(jogamp.opengl.glu.tessellator.GLUvertex,jogamp.opengl.glu.tessellator.GLUvertex,jogamp.opengl.glu.tessellator.GLUvertex,jogamp.opengl.glu.tessellator.GLUvertex,jogamp.opengl.glu.tessellator.GLUvertex) -> EdgeIntersect
    boolean VertEq(jogamp.opengl.glu.tessellator.GLUvertex,jogamp.opengl.glu.tessellator.GLUvertex) -> VertEq
    boolean VertLeq(jogamp.opengl.glu.tessellator.GLUvertex,jogamp.opengl.glu.tessellator.GLUvertex) -> VertLeq
    boolean TransLeq(jogamp.opengl.glu.tessellator.GLUvertex,jogamp.opengl.glu.tessellator.GLUvertex) -> TransLeq
    boolean EdgeGoesLeft(jogamp.opengl.glu.tessellator.GLUhalfEdge) -> EdgeGoesLeft
    boolean EdgeGoesRight(jogamp.opengl.glu.tessellator.GLUhalfEdge) -> EdgeGoesRight
    double VertL1dist(jogamp.opengl.glu.tessellator.GLUvertex,jogamp.opengl.glu.tessellator.GLUvertex) -> VertL1dist
    double EdgeCos(jogamp.opengl.glu.tessellator.GLUvertex,jogamp.opengl.glu.tessellator.GLUvertex,jogamp.opengl.glu.tessellator.GLUvertex) -> EdgeCos
    void <clinit>() -> <clinit>
jogamp.opengl.glu.tessellator.Mesh -> jogamp.opengl.glu.tessellator.Mesh:
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    jogamp.opengl.glu.tessellator.GLUhalfEdge MakeEdge(jogamp.opengl.glu.tessellator.GLUhalfEdge) -> MakeEdge
    void Splice(jogamp.opengl.glu.tessellator.GLUhalfEdge,jogamp.opengl.glu.tessellator.GLUhalfEdge) -> Splice
    void MakeVertex(jogamp.opengl.glu.tessellator.GLUvertex,jogamp.opengl.glu.tessellator.GLUhalfEdge,jogamp.opengl.glu.tessellator.GLUvertex) -> MakeVertex
    void MakeFace(jogamp.opengl.glu.tessellator.GLUface,jogamp.opengl.glu.tessellator.GLUhalfEdge,jogamp.opengl.glu.tessellator.GLUface) -> MakeFace
    void KillEdge(jogamp.opengl.glu.tessellator.GLUhalfEdge) -> KillEdge
    void KillVertex(jogamp.opengl.glu.tessellator.GLUvertex,jogamp.opengl.glu.tessellator.GLUvertex) -> KillVertex
    void KillFace(jogamp.opengl.glu.tessellator.GLUface,jogamp.opengl.glu.tessellator.GLUface) -> KillFace
    jogamp.opengl.glu.tessellator.GLUhalfEdge __gl_meshMakeEdge(jogamp.opengl.glu.tessellator.GLUmesh) -> __gl_meshMakeEdge
    boolean __gl_meshSplice(jogamp.opengl.glu.tessellator.GLUhalfEdge,jogamp.opengl.glu.tessellator.GLUhalfEdge) -> __gl_meshSplice
    boolean __gl_meshDelete(jogamp.opengl.glu.tessellator.GLUhalfEdge) -> __gl_meshDelete
    jogamp.opengl.glu.tessellator.GLUhalfEdge __gl_meshAddEdgeVertex(jogamp.opengl.glu.tessellator.GLUhalfEdge) -> __gl_meshAddEdgeVertex
    jogamp.opengl.glu.tessellator.GLUhalfEdge __gl_meshSplitEdge(jogamp.opengl.glu.tessellator.GLUhalfEdge) -> __gl_meshSplitEdge
    jogamp.opengl.glu.tessellator.GLUhalfEdge __gl_meshConnect(jogamp.opengl.glu.tessellator.GLUhalfEdge,jogamp.opengl.glu.tessellator.GLUhalfEdge) -> __gl_meshConnect
    void __gl_meshZapFace(jogamp.opengl.glu.tessellator.GLUface) -> __gl_meshZapFace
    jogamp.opengl.glu.tessellator.GLUmesh __gl_meshNewMesh() -> __gl_meshNewMesh
    jogamp.opengl.glu.tessellator.GLUmesh __gl_meshUnion(jogamp.opengl.glu.tessellator.GLUmesh,jogamp.opengl.glu.tessellator.GLUmesh) -> __gl_meshUnion
    void __gl_meshDeleteMeshZap(jogamp.opengl.glu.tessellator.GLUmesh) -> __gl_meshDeleteMeshZap
    void __gl_meshDeleteMesh(jogamp.opengl.glu.tessellator.GLUmesh) -> __gl_meshDeleteMesh
    void __gl_meshCheckMesh(jogamp.opengl.glu.tessellator.GLUmesh) -> __gl_meshCheckMesh
    void <clinit>() -> <clinit>
jogamp.opengl.glu.tessellator.Normal -> jogamp.opengl.glu.tessellator.Normal:
    boolean SLANTED_SWEEP -> SLANTED_SWEEP
    double S_UNIT_X -> S_UNIT_X
    double S_UNIT_Y -> S_UNIT_Y
    boolean TRUE_PROJECT -> TRUE_PROJECT
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    double Dot(double[],double[]) -> Dot
    void Normalize(double[]) -> Normalize
    int LongAxis(double[]) -> LongAxis
    void ComputeNormal(jogamp.opengl.glu.tessellator.GLUtessellatorImpl,double[]) -> ComputeNormal
    void CheckOrientation(jogamp.opengl.glu.tessellator.GLUtessellatorImpl) -> CheckOrientation
    void __gl_projectPolygon(jogamp.opengl.glu.tessellator.GLUtessellatorImpl) -> __gl_projectPolygon
    void <clinit>() -> <clinit>
jogamp.opengl.glu.tessellator.PriorityQ -> jogamp.opengl.glu.tessellator.PriorityQ:
    int INIT_SIZE -> INIT_SIZE
    void <init>() -> <init>
    boolean LEQ(jogamp.opengl.glu.tessellator.PriorityQ$Leq,java.lang.Object,java.lang.Object) -> LEQ
    jogamp.opengl.glu.tessellator.PriorityQ pqNewPriorityQ(jogamp.opengl.glu.tessellator.PriorityQ$Leq) -> pqNewPriorityQ
    void pqDeletePriorityQ() -> pqDeletePriorityQ
    boolean pqInit() -> pqInit
    int pqInsert(java.lang.Object) -> pqInsert
    java.lang.Object pqExtractMin() -> pqExtractMin
    void pqDelete(int) -> pqDelete
    java.lang.Object pqMinimum() -> pqMinimum
    boolean pqIsEmpty() -> pqIsEmpty
jogamp.opengl.glu.tessellator.PriorityQ$Leq -> jogamp.opengl.glu.tessellator.PriorityQ$Leq:
    boolean leq(java.lang.Object,java.lang.Object) -> leq
jogamp.opengl.glu.tessellator.PriorityQ$PQhandleElem -> jogamp.opengl.glu.tessellator.PriorityQ$PQhandleElem:
    java.lang.Object key -> key
    int node -> node
    void <init>() -> <init>
jogamp.opengl.glu.tessellator.PriorityQ$PQnode -> jogamp.opengl.glu.tessellator.PriorityQ$PQnode:
    int handle -> handle
    void <init>() -> <init>
jogamp.opengl.glu.tessellator.PriorityQHeap -> jogamp.opengl.glu.tessellator.PriorityQHeap:
    jogamp.opengl.glu.tessellator.PriorityQ$PQnode[] nodes -> nodes
    jogamp.opengl.glu.tessellator.PriorityQ$PQhandleElem[] handles -> handles
    int size -> size
    int max -> max
    int freeList -> freeList
    boolean initialized -> initialized
    jogamp.opengl.glu.tessellator.PriorityQ$Leq leq -> leq
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(jogamp.opengl.glu.tessellator.PriorityQ$Leq) -> <init>
    void pqDeletePriorityQ() -> pqDeletePriorityQ
    void FloatDown(int) -> FloatDown
    void FloatUp(int) -> FloatUp
    boolean pqInit() -> pqInit
    int pqInsert(java.lang.Object) -> pqInsert
    java.lang.Object pqExtractMin() -> pqExtractMin
    void pqDelete(int) -> pqDelete
    java.lang.Object pqMinimum() -> pqMinimum
    boolean pqIsEmpty() -> pqIsEmpty
    void <clinit>() -> <clinit>
jogamp.opengl.glu.tessellator.PriorityQSort -> jogamp.opengl.glu.tessellator.PriorityQSort:
    jogamp.opengl.glu.tessellator.PriorityQHeap heap -> heap
    java.lang.Object[] keys -> keys
    int[] order -> order
    int size -> size
    int max -> max
    boolean initialized -> initialized
    jogamp.opengl.glu.tessellator.PriorityQ$Leq leq -> leq
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(jogamp.opengl.glu.tessellator.PriorityQ$Leq) -> <init>
    void pqDeletePriorityQ() -> pqDeletePriorityQ
    boolean LT(jogamp.opengl.glu.tessellator.PriorityQ$Leq,java.lang.Object,java.lang.Object) -> LT
    boolean GT(jogamp.opengl.glu.tessellator.PriorityQ$Leq,java.lang.Object,java.lang.Object) -> GT
    void Swap(int[],int,int) -> Swap
    boolean pqInit() -> pqInit
    int pqInsert(java.lang.Object) -> pqInsert
    java.lang.Object pqExtractMin() -> pqExtractMin
    java.lang.Object pqMinimum() -> pqMinimum
    boolean pqIsEmpty() -> pqIsEmpty
    void pqDelete(int) -> pqDelete
    void <clinit>() -> <clinit>
jogamp.opengl.glu.tessellator.PriorityQSort$1 -> jogamp.opengl.glu.tessellator.PriorityQSort$1:
jogamp.opengl.glu.tessellator.PriorityQSort$Stack -> jogamp.opengl.glu.tessellator.PriorityQSort$Stack:
    int p -> p
    int r -> r
    void <init>() -> <init>
    void <init>(jogamp.opengl.glu.tessellator.PriorityQSort$1) -> <init>
jogamp.opengl.glu.tessellator.Render -> jogamp.opengl.glu.tessellator.Render:
    boolean USE_OPTIMIZED_CODE_PATH -> USE_OPTIMIZED_CODE_PATH
    jogamp.opengl.glu.tessellator.Render$RenderFan renderFan -> renderFan
    jogamp.opengl.glu.tessellator.Render$RenderStrip renderStrip -> renderStrip
    jogamp.opengl.glu.tessellator.Render$RenderTriangle renderTriangle -> renderTriangle
    int SIGN_INCONSISTENT -> SIGN_INCONSISTENT
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    void __gl_renderMesh(jogamp.opengl.glu.tessellator.GLUtessellatorImpl,jogamp.opengl.glu.tessellator.GLUmesh) -> __gl_renderMesh
    void RenderMaximumFaceGroup(jogamp.opengl.glu.tessellator.GLUtessellatorImpl,jogamp.opengl.glu.tessellator.GLUface) -> RenderMaximumFaceGroup
    boolean Marked(jogamp.opengl.glu.tessellator.GLUface) -> Marked
    jogamp.opengl.glu.tessellator.GLUface AddToTrail(jogamp.opengl.glu.tessellator.GLUface,jogamp.opengl.glu.tessellator.GLUface) -> AddToTrail
    void FreeTrail(jogamp.opengl.glu.tessellator.GLUface) -> FreeTrail
    jogamp.opengl.glu.tessellator.Render$FaceCount MaximumFan(jogamp.opengl.glu.tessellator.GLUhalfEdge) -> MaximumFan
    boolean IsEven(long) -> IsEven
    jogamp.opengl.glu.tessellator.Render$FaceCount MaximumStrip(jogamp.opengl.glu.tessellator.GLUhalfEdge) -> MaximumStrip
    void RenderLonelyTriangles(jogamp.opengl.glu.tessellator.GLUtessellatorImpl,jogamp.opengl.glu.tessellator.GLUface) -> RenderLonelyTriangles
    void __gl_renderBoundary(jogamp.opengl.glu.tessellator.GLUtessellatorImpl,jogamp.opengl.glu.tessellator.GLUmesh) -> __gl_renderBoundary
    int ComputeNormal(jogamp.opengl.glu.tessellator.GLUtessellatorImpl,double[],boolean) -> ComputeNormal
    boolean __gl_renderCache(jogamp.opengl.glu.tessellator.GLUtessellatorImpl) -> __gl_renderCache
    jogamp.opengl.glu.tessellator.GLUface access$300(jogamp.opengl.glu.tessellator.GLUface,jogamp.opengl.glu.tessellator.GLUface) -> access$300
    boolean access$400(jogamp.opengl.glu.tessellator.GLUface) -> access$400
    void <clinit>() -> <clinit>
jogamp.opengl.glu.tessellator.Render$1 -> jogamp.opengl.glu.tessellator.Render$1:
jogamp.opengl.glu.tessellator.Render$FaceCount -> jogamp.opengl.glu.tessellator.Render$FaceCount:
    long size -> size
    jogamp.opengl.glu.tessellator.GLUhalfEdge eStart -> eStart
    jogamp.opengl.glu.tessellator.Render$renderCallBack render -> render
    void <init>() -> <init>
    void <init>(long,jogamp.opengl.glu.tessellator.GLUhalfEdge,jogamp.opengl.glu.tessellator.Render$renderCallBack) -> <init>
jogamp.opengl.glu.tessellator.Render$RenderFan -> jogamp.opengl.glu.tessellator.Render$RenderFan:
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    void render(jogamp.opengl.glu.tessellator.GLUtessellatorImpl,jogamp.opengl.glu.tessellator.GLUhalfEdge,long) -> render
    void <init>(jogamp.opengl.glu.tessellator.Render$1) -> <init>
    void <clinit>() -> <clinit>
jogamp.opengl.glu.tessellator.Render$RenderStrip -> jogamp.opengl.glu.tessellator.Render$RenderStrip:
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    void render(jogamp.opengl.glu.tessellator.GLUtessellatorImpl,jogamp.opengl.glu.tessellator.GLUhalfEdge,long) -> render
    void <init>(jogamp.opengl.glu.tessellator.Render$1) -> <init>
    void <clinit>() -> <clinit>
jogamp.opengl.glu.tessellator.Render$RenderTriangle -> jogamp.opengl.glu.tessellator.Render$RenderTriangle:
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    void render(jogamp.opengl.glu.tessellator.GLUtessellatorImpl,jogamp.opengl.glu.tessellator.GLUhalfEdge,long) -> render
    void <init>(jogamp.opengl.glu.tessellator.Render$1) -> <init>
    void <clinit>() -> <clinit>
jogamp.opengl.glu.tessellator.Render$renderCallBack -> jogamp.opengl.glu.tessellator.Render$renderCallBack:
    void render(jogamp.opengl.glu.tessellator.GLUtessellatorImpl,jogamp.opengl.glu.tessellator.GLUhalfEdge,long) -> render
jogamp.opengl.glu.tessellator.Sweep -> jogamp.opengl.glu.tessellator.Sweep:
    boolean TOLERANCE_NONZERO -> TOLERANCE_NONZERO
    double SENTINEL_COORD -> SENTINEL_COORD
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    void DebugEvent(jogamp.opengl.glu.tessellator.GLUtessellatorImpl) -> DebugEvent
    void AddWinding(jogamp.opengl.glu.tessellator.GLUhalfEdge,jogamp.opengl.glu.tessellator.GLUhalfEdge) -> AddWinding
    jogamp.opengl.glu.tessellator.ActiveRegion RegionBelow(jogamp.opengl.glu.tessellator.ActiveRegion) -> RegionBelow
    jogamp.opengl.glu.tessellator.ActiveRegion RegionAbove(jogamp.opengl.glu.tessellator.ActiveRegion) -> RegionAbove
    boolean EdgeLeq(jogamp.opengl.glu.tessellator.GLUtessellatorImpl,jogamp.opengl.glu.tessellator.ActiveRegion,jogamp.opengl.glu.tessellator.ActiveRegion) -> EdgeLeq
    void DeleteRegion(jogamp.opengl.glu.tessellator.GLUtessellatorImpl,jogamp.opengl.glu.tessellator.ActiveRegion) -> DeleteRegion
    boolean FixUpperEdge(jogamp.opengl.glu.tessellator.ActiveRegion,jogamp.opengl.glu.tessellator.GLUhalfEdge) -> FixUpperEdge
    jogamp.opengl.glu.tessellator.ActiveRegion TopLeftRegion(jogamp.opengl.glu.tessellator.ActiveRegion) -> TopLeftRegion
    jogamp.opengl.glu.tessellator.ActiveRegion TopRightRegion(jogamp.opengl.glu.tessellator.ActiveRegion) -> TopRightRegion
    jogamp.opengl.glu.tessellator.ActiveRegion AddRegionBelow(jogamp.opengl.glu.tessellator.GLUtessellatorImpl,jogamp.opengl.glu.tessellator.ActiveRegion,jogamp.opengl.glu.tessellator.GLUhalfEdge) -> AddRegionBelow
    boolean IsWindingInside(jogamp.opengl.glu.tessellator.GLUtessellatorImpl,int) -> IsWindingInside
    void ComputeWinding(jogamp.opengl.glu.tessellator.GLUtessellatorImpl,jogamp.opengl.glu.tessellator.ActiveRegion) -> ComputeWinding
    void FinishRegion(jogamp.opengl.glu.tessellator.GLUtessellatorImpl,jogamp.opengl.glu.tessellator.ActiveRegion) -> FinishRegion
    jogamp.opengl.glu.tessellator.GLUhalfEdge FinishLeftRegions(jogamp.opengl.glu.tessellator.GLUtessellatorImpl,jogamp.opengl.glu.tessellator.ActiveRegion,jogamp.opengl.glu.tessellator.ActiveRegion) -> FinishLeftRegions
    void AddRightEdges(jogamp.opengl.glu.tessellator.GLUtessellatorImpl,jogamp.opengl.glu.tessellator.ActiveRegion,jogamp.opengl.glu.tessellator.GLUhalfEdge,jogamp.opengl.glu.tessellator.GLUhalfEdge,jogamp.opengl.glu.tessellator.GLUhalfEdge,boolean) -> AddRightEdges
    void CallCombine(jogamp.opengl.glu.tessellator.GLUtessellatorImpl,jogamp.opengl.glu.tessellator.GLUvertex,java.lang.Object[],float[],boolean) -> CallCombine
    void SpliceMergeVertices(jogamp.opengl.glu.tessellator.GLUtessellatorImpl,jogamp.opengl.glu.tessellator.GLUhalfEdge,jogamp.opengl.glu.tessellator.GLUhalfEdge) -> SpliceMergeVertices
    void VertexWeights(jogamp.opengl.glu.tessellator.GLUvertex,jogamp.opengl.glu.tessellator.GLUvertex,jogamp.opengl.glu.tessellator.GLUvertex,float[]) -> VertexWeights
    void GetIntersectData(jogamp.opengl.glu.tessellator.GLUtessellatorImpl,jogamp.opengl.glu.tessellator.GLUvertex,jogamp.opengl.glu.tessellator.GLUvertex,jogamp.opengl.glu.tessellator.GLUvertex,jogamp.opengl.glu.tessellator.GLUvertex,jogamp.opengl.glu.tessellator.GLUvertex) -> GetIntersectData
    boolean CheckForRightSplice(jogamp.opengl.glu.tessellator.GLUtessellatorImpl,jogamp.opengl.glu.tessellator.ActiveRegion) -> CheckForRightSplice
    boolean CheckForLeftSplice(jogamp.opengl.glu.tessellator.GLUtessellatorImpl,jogamp.opengl.glu.tessellator.ActiveRegion) -> CheckForLeftSplice
    boolean CheckForIntersect(jogamp.opengl.glu.tessellator.GLUtessellatorImpl,jogamp.opengl.glu.tessellator.ActiveRegion) -> CheckForIntersect
    void WalkDirtyRegions(jogamp.opengl.glu.tessellator.GLUtessellatorImpl,jogamp.opengl.glu.tessellator.ActiveRegion) -> WalkDirtyRegions
    void ConnectRightVertex(jogamp.opengl.glu.tessellator.GLUtessellatorImpl,jogamp.opengl.glu.tessellator.ActiveRegion,jogamp.opengl.glu.tessellator.GLUhalfEdge) -> ConnectRightVertex
    void ConnectLeftDegenerate(jogamp.opengl.glu.tessellator.GLUtessellatorImpl,jogamp.opengl.glu.tessellator.ActiveRegion,jogamp.opengl.glu.tessellator.GLUvertex) -> ConnectLeftDegenerate
    void ConnectLeftVertex(jogamp.opengl.glu.tessellator.GLUtessellatorImpl,jogamp.opengl.glu.tessellator.GLUvertex) -> ConnectLeftVertex
    void SweepEvent(jogamp.opengl.glu.tessellator.GLUtessellatorImpl,jogamp.opengl.glu.tessellator.GLUvertex) -> SweepEvent
    void AddSentinel(jogamp.opengl.glu.tessellator.GLUtessellatorImpl,double) -> AddSentinel
    void InitEdgeDict(jogamp.opengl.glu.tessellator.GLUtessellatorImpl) -> InitEdgeDict
    void DoneEdgeDict(jogamp.opengl.glu.tessellator.GLUtessellatorImpl) -> DoneEdgeDict
    void RemoveDegenerateEdges(jogamp.opengl.glu.tessellator.GLUtessellatorImpl) -> RemoveDegenerateEdges
    boolean InitPriorityQ(jogamp.opengl.glu.tessellator.GLUtessellatorImpl) -> InitPriorityQ
    void DonePriorityQ(jogamp.opengl.glu.tessellator.GLUtessellatorImpl) -> DonePriorityQ
    boolean RemoveDegenerateFaces(jogamp.opengl.glu.tessellator.GLUmesh) -> RemoveDegenerateFaces
    boolean __gl_computeInterior(jogamp.opengl.glu.tessellator.GLUtessellatorImpl) -> __gl_computeInterior
    void <clinit>() -> <clinit>
jogamp.opengl.glu.tessellator.Sweep$1 -> jogamp.opengl.glu.tessellator.Sweep$1:
    jogamp.opengl.glu.tessellator.GLUtessellatorImpl val$tess -> val$tess
    void <init>(jogamp.opengl.glu.tessellator.GLUtessellatorImpl) -> <init>
    boolean leq(java.lang.Object,java.lang.Object,java.lang.Object) -> leq
jogamp.opengl.glu.tessellator.Sweep$2 -> jogamp.opengl.glu.tessellator.Sweep$2:
    void <init>() -> <init>
    boolean leq(java.lang.Object,java.lang.Object) -> leq
jogamp.opengl.glu.tessellator.TessMono -> jogamp.opengl.glu.tessellator.TessMono:
    int MARKED_FOR_DELETION -> MARKED_FOR_DELETION
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    boolean __gl_meshTessellateMonoRegion(jogamp.opengl.glu.tessellator.GLUface,boolean) -> __gl_meshTessellateMonoRegion
    boolean __gl_meshTessellateInterior(jogamp.opengl.glu.tessellator.GLUmesh,boolean) -> __gl_meshTessellateInterior
    void __gl_meshDiscardExterior(jogamp.opengl.glu.tessellator.GLUmesh) -> __gl_meshDiscardExterior
    boolean __gl_meshSetWindingNumber(jogamp.opengl.glu.tessellator.GLUmesh,int,boolean) -> __gl_meshSetWindingNumber
    void <clinit>() -> <clinit>
jogamp.opengl.util.jpeg.JPEGDecoder -> jogamp.opengl.util.jpeg.JPEGDecoder:
    boolean DEBUG -> DEBUG
    boolean DEBUG_IN -> DEBUG_IN
    int M_SOI -> M_SOI
    int M_EOI -> M_EOI
    int M_SOF0 -> M_SOF0
    int M_SOF2 -> M_SOF2
    int M_DHT -> M_DHT
    int M_SOS -> M_SOS
    int M_QTT -> M_QTT
    int M_DRI -> M_DRI
    int M_APP00 -> M_APP00
    int M_APP01 -> M_APP01
    int M_APP02 -> M_APP02
    int M_APP03 -> M_APP03
    int M_APP04 -> M_APP04
    int M_APP05 -> M_APP05
    int M_APP06 -> M_APP06
    int M_APP07 -> M_APP07
    int M_APP08 -> M_APP08
    int M_APP09 -> M_APP09
    int M_APP10 -> M_APP10
    int M_APP11 -> M_APP11
    int M_APP12 -> M_APP12
    int M_APP13 -> M_APP13
    int M_APP14 -> M_APP14
    int M_APP15 -> M_APP15
    int M_ANO -> M_ANO
    int[] dctZigZag -> dctZigZag
    int dctCos1 -> dctCos1
    int dctSin1 -> dctSin1
    int dctCos3 -> dctCos3
    int dctSin3 -> dctSin3
    int dctCos6 -> dctCos6
    int dctSin6 -> dctSin6
    int dctSqrt2 -> dctSqrt2
    int dctSqrt1d2 -> dctSqrt1d2
    com.jogamp.common.util.Bitstream bstream -> bstream
    int width -> width
    int height -> height
    jogamp.opengl.util.jpeg.JPEGDecoder$JFIF jfif -> jfif
    jogamp.opengl.util.jpeg.JPEGDecoder$EXIF exif -> exif
    jogamp.opengl.util.jpeg.JPEGDecoder$Adobe adobe -> adobe
    jogamp.opengl.util.jpeg.JPEGDecoder$ComponentOut[] components -> components
    jogamp.opengl.util.jpeg.JPEGDecoder$Output output -> output
    jogamp.opengl.util.jpeg.JPEGDecoder$Decoder decoder -> decoder
    void <init>() -> <init>
    java.lang.String toString() -> toString
    jogamp.opengl.util.jpeg.JPEGDecoder$JFIF getJFIFHeader() -> getJFIFHeader
    jogamp.opengl.util.jpeg.JPEGDecoder$EXIF getEXIFHeader() -> getEXIFHeader
    jogamp.opengl.util.jpeg.JPEGDecoder$Adobe getAdobeHeader() -> getAdobeHeader
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    void setStream(java.io.InputStream) -> setStream
    int readUInt8() -> readUInt8
    int readUInt16() -> readUInt16
    int readNumber() -> readNumber
    byte[] readDataBlock() -> readDataBlock
    void dumpData(byte[],int,int) -> dumpData
    void clear(java.io.InputStream) -> clear
    jogamp.opengl.util.jpeg.JPEGDecoder parse(java.io.InputStream) -> parse
    void prepareComponents(jogamp.opengl.util.jpeg.JPEGDecoder$Frame) -> prepareComponents
    jogamp.opengl.util.jpeg.JPEGDecoder$BinObj buildHuffmanTable(int[],byte[]) -> buildHuffmanTable
    void getPixel(jogamp.opengl.util.jpeg.JPEGDecoder$ColorSink,int,int) -> getPixel
    byte clampTo8bit(float) -> clampTo8bit
    java.lang.String toHexString(int) -> toHexString
    java.lang.String access$000(int) -> access$000
    com.jogamp.common.util.Bitstream access$300(jogamp.opengl.util.jpeg.JPEGDecoder) -> access$300
    boolean access$400() -> access$400
    int access$500(jogamp.opengl.util.jpeg.JPEGDecoder) -> access$500
    void <clinit>() -> <clinit>
jogamp.opengl.util.jpeg.JPEGDecoder$Adobe -> jogamp.opengl.util.jpeg.JPEGDecoder$Adobe:
    short version -> version
    short flags0 -> flags0
    short flags1 -> flags1
    short colorCode -> colorCode
    com.jogamp.opengl.util.texture.TextureData$ColorSpace colorSpace -> colorSpace
    void <init>(byte[]) -> <init>
    jogamp.opengl.util.jpeg.JPEGDecoder$Adobe get(byte[]) -> get
    java.lang.String toString() -> toString
jogamp.opengl.util.jpeg.JPEGDecoder$BinObj -> jogamp.opengl.util.jpeg.JPEGDecoder$BinObj:
    boolean isValue -> isValue
    jogamp.opengl.util.jpeg.JPEGDecoder$BinObj[] tree -> tree
    byte b -> b
    void <init>(byte) -> <init>
    void <init>() -> <init>
    byte getValue() -> getValue
    jogamp.opengl.util.jpeg.JPEGDecoder$BinObj get(int) -> get
    void set(byte,byte) -> set
    void set(byte,jogamp.opengl.util.jpeg.JPEGDecoder$BinObj) -> set
jogamp.opengl.util.jpeg.JPEGDecoder$BinObjIdxed -> jogamp.opengl.util.jpeg.JPEGDecoder$BinObjIdxed:
    jogamp.opengl.util.jpeg.JPEGDecoder$BinObj children -> children
    byte index -> index
    void <init>() -> <init>
jogamp.opengl.util.jpeg.JPEGDecoder$CodecException -> jogamp.opengl.util.jpeg.JPEGDecoder$CodecException:
    void <init>(java.lang.String) -> <init>
jogamp.opengl.util.jpeg.JPEGDecoder$ColorSink -> jogamp.opengl.util.jpeg.JPEGDecoder$ColorSink:
    com.jogamp.opengl.util.texture.TextureData$ColorSpace allocate(int,int,com.jogamp.opengl.util.texture.TextureData$ColorSpace,int) -> allocate
    void store2(int,int,byte,byte) -> store2
    void storeRGB(int,int,byte,byte,byte) -> storeRGB
    void storeYCbCr(int,int,byte,byte,byte) -> storeYCbCr
jogamp.opengl.util.jpeg.JPEGDecoder$ComponentIn -> jogamp.opengl.util.jpeg.JPEGDecoder$ComponentIn:
    int h -> h
    int v -> v
    int qttIdx -> qttIdx
    int blocksPerColumn -> blocksPerColumn
    int blocksPerColumnForMcu -> blocksPerColumnForMcu
    int blocksPerLine -> blocksPerLine
    int blocksPerLineForMcu -> blocksPerLineForMcu
    int[][][] blocks -> blocks
    int pred -> pred
    jogamp.opengl.util.jpeg.JPEGDecoder$BinObj huffmanTableAC -> huffmanTableAC
    jogamp.opengl.util.jpeg.JPEGDecoder$BinObj huffmanTableDC -> huffmanTableDC
    void <init>(int,int,int) -> <init>
    void allocateBlocks(int,int,int,int) -> allocateBlocks
    int[] getBlock(int,int) -> getBlock
    java.lang.String toString() -> toString
jogamp.opengl.util.jpeg.JPEGDecoder$ComponentOut -> jogamp.opengl.util.jpeg.JPEGDecoder$ComponentOut:
    java.util.ArrayList lines -> lines
    float scaleX -> scaleX
    float scaleY -> scaleY
    void <init>(java.util.ArrayList,float,float) -> <init>
    byte[] getLine(int) -> getLine
    java.lang.String toString() -> toString
jogamp.opengl.util.jpeg.JPEGDecoder$Decoder -> jogamp.opengl.util.jpeg.JPEGDecoder$Decoder:
    int mcusPerLine -> mcusPerLine
    boolean progressive -> progressive
    int spectralStart -> spectralStart
    int spectralEnd -> spectralEnd
    int successive -> successive
    int eobrun -> eobrun
    int successiveACState -> successiveACState
    int successiveACNextValue -> successiveACNextValue
    jogamp.opengl.util.jpeg.JPEGDecoder$DecoderFunction decodeBaseline -> decodeBaseline
    jogamp.opengl.util.jpeg.JPEGDecoder$DecoderFunction decodeDCFirst -> decodeDCFirst
    jogamp.opengl.util.jpeg.JPEGDecoder$DecoderFunction decodeDCSuccessive -> decodeDCSuccessive
    jogamp.opengl.util.jpeg.JPEGDecoder$DecoderFunction decodeACFirst -> decodeACFirst
    jogamp.opengl.util.jpeg.JPEGDecoder$DecoderFunction decodeACSuccessive -> decodeACSuccessive
    jogamp.opengl.util.jpeg.JPEGDecoder this$0 -> this$0
    void <init>(jogamp.opengl.util.jpeg.JPEGDecoder) -> <init>
    int decodeScan(jogamp.opengl.util.jpeg.JPEGDecoder$Frame,java.util.ArrayList,int,int,int,int,int) -> decodeScan
    int readBit() -> readBit
    int decodeHuffman(jogamp.opengl.util.jpeg.JPEGDecoder$BinObj) -> decodeHuffman
    int receive(int) -> receive
    int receiveAndExtend(int) -> receiveAndExtend
    void decodeMcu(jogamp.opengl.util.jpeg.JPEGDecoder$ComponentIn,jogamp.opengl.util.jpeg.JPEGDecoder$DecoderFunction,int,int,int) -> decodeMcu
    void decodeBlock(jogamp.opengl.util.jpeg.JPEGDecoder$ComponentIn,jogamp.opengl.util.jpeg.JPEGDecoder$DecoderFunction,int) -> decodeBlock
    int access$100(jogamp.opengl.util.jpeg.JPEGDecoder$Decoder,jogamp.opengl.util.jpeg.JPEGDecoder$Frame,java.util.ArrayList,int,int,int,int,int) -> access$100
    int access$600(jogamp.opengl.util.jpeg.JPEGDecoder$Decoder,jogamp.opengl.util.jpeg.JPEGDecoder$BinObj) -> access$600
    int access$700(jogamp.opengl.util.jpeg.JPEGDecoder$Decoder,int) -> access$700
    int access$800(jogamp.opengl.util.jpeg.JPEGDecoder$Decoder) -> access$800
    int access$900(jogamp.opengl.util.jpeg.JPEGDecoder$Decoder) -> access$900
    int access$1000(jogamp.opengl.util.jpeg.JPEGDecoder$Decoder) -> access$1000
    int access$1010(jogamp.opengl.util.jpeg.JPEGDecoder$Decoder) -> access$1010
    int access$1100(jogamp.opengl.util.jpeg.JPEGDecoder$Decoder) -> access$1100
    int access$1200(jogamp.opengl.util.jpeg.JPEGDecoder$Decoder) -> access$1200
    int access$1002(jogamp.opengl.util.jpeg.JPEGDecoder$Decoder,int) -> access$1002
    int access$1300(jogamp.opengl.util.jpeg.JPEGDecoder$Decoder,int) -> access$1300
    int access$1400(jogamp.opengl.util.jpeg.JPEGDecoder$Decoder) -> access$1400
    int access$1402(jogamp.opengl.util.jpeg.JPEGDecoder$Decoder,int) -> access$1402
    int access$1502(jogamp.opengl.util.jpeg.JPEGDecoder$Decoder,int) -> access$1502
    int access$1500(jogamp.opengl.util.jpeg.JPEGDecoder$Decoder) -> access$1500
jogamp.opengl.util.jpeg.JPEGDecoder$Decoder$ACFirstDecoder -> jogamp.opengl.util.jpeg.JPEGDecoder$Decoder$ACFirstDecoder:
    jogamp.opengl.util.jpeg.JPEGDecoder$Decoder this$1 -> this$1
    void <init>(jogamp.opengl.util.jpeg.JPEGDecoder$Decoder) -> <init>
    void decode(jogamp.opengl.util.jpeg.JPEGDecoder$ComponentIn,int[]) -> decode
jogamp.opengl.util.jpeg.JPEGDecoder$Decoder$ACSuccessiveDecoder -> jogamp.opengl.util.jpeg.JPEGDecoder$Decoder$ACSuccessiveDecoder:
    jogamp.opengl.util.jpeg.JPEGDecoder$Decoder this$1 -> this$1
    void <init>(jogamp.opengl.util.jpeg.JPEGDecoder$Decoder) -> <init>
    void decode(jogamp.opengl.util.jpeg.JPEGDecoder$ComponentIn,int[]) -> decode
jogamp.opengl.util.jpeg.JPEGDecoder$Decoder$BaselineDecoder -> jogamp.opengl.util.jpeg.JPEGDecoder$Decoder$BaselineDecoder:
    jogamp.opengl.util.jpeg.JPEGDecoder$Decoder this$1 -> this$1
    void <init>(jogamp.opengl.util.jpeg.JPEGDecoder$Decoder) -> <init>
    void decode(jogamp.opengl.util.jpeg.JPEGDecoder$ComponentIn,int[]) -> decode
jogamp.opengl.util.jpeg.JPEGDecoder$Decoder$DCFirstDecoder -> jogamp.opengl.util.jpeg.JPEGDecoder$Decoder$DCFirstDecoder:
    jogamp.opengl.util.jpeg.JPEGDecoder$Decoder this$1 -> this$1
    void <init>(jogamp.opengl.util.jpeg.JPEGDecoder$Decoder) -> <init>
    void decode(jogamp.opengl.util.jpeg.JPEGDecoder$ComponentIn,int[]) -> decode
jogamp.opengl.util.jpeg.JPEGDecoder$Decoder$DCSuccessiveDecoder -> jogamp.opengl.util.jpeg.JPEGDecoder$Decoder$DCSuccessiveDecoder:
    jogamp.opengl.util.jpeg.JPEGDecoder$Decoder this$1 -> this$1
    void <init>(jogamp.opengl.util.jpeg.JPEGDecoder$Decoder) -> <init>
    void decode(jogamp.opengl.util.jpeg.JPEGDecoder$ComponentIn,int[]) -> decode
jogamp.opengl.util.jpeg.JPEGDecoder$DecoderFunction -> jogamp.opengl.util.jpeg.JPEGDecoder$DecoderFunction:
    void decode(jogamp.opengl.util.jpeg.JPEGDecoder$ComponentIn,int[]) -> decode
jogamp.opengl.util.jpeg.JPEGDecoder$EXIF -> jogamp.opengl.util.jpeg.JPEGDecoder$EXIF:
    void <init>(byte[]) -> <init>
    jogamp.opengl.util.jpeg.JPEGDecoder$EXIF get(byte[]) -> get
    java.lang.String toString() -> toString
jogamp.opengl.util.jpeg.JPEGDecoder$Frame -> jogamp.opengl.util.jpeg.JPEGDecoder$Frame:
    boolean progressive -> progressive
    int precision -> precision
    int scanLines -> scanLines
    int samplesPerLine -> samplesPerLine
    com.jogamp.common.util.ArrayHashSet compIDs -> compIDs
    jogamp.opengl.util.jpeg.JPEGDecoder$ComponentIn[] comps -> comps
    int compCount -> compCount
    int[][] qtt -> qtt
    int maxCompID -> maxCompID
    int maxH -> maxH
    int maxV -> maxV
    int mcusPerLine -> mcusPerLine
    int mcusPerColumn -> mcusPerColumn
    void <init>(boolean,int,int,int,int,int[][]) -> <init>
    void checkBounds(int) -> checkBounds
    void validateComponents() -> validateComponents
    int getCompCount() -> getCompCount
    int getMaxCompID() -> getMaxCompID
    void putOrdered(int,jogamp.opengl.util.jpeg.JPEGDecoder$ComponentIn) -> putOrdered
    jogamp.opengl.util.jpeg.JPEGDecoder$ComponentIn getCompByIndex(int) -> getCompByIndex
    jogamp.opengl.util.jpeg.JPEGDecoder$ComponentIn getCompByID(int) -> getCompByID
    int getCompID(int) -> getCompID
    boolean hasCompID(int) -> hasCompID
    java.lang.String toString() -> toString
jogamp.opengl.util.jpeg.JPEGDecoder$JFIF -> jogamp.opengl.util.jpeg.JPEGDecoder$JFIF:
    com.jogamp.common.util.VersionNumber version -> version
    int densityUnits -> densityUnits
    int xDensity -> xDensity
    int yDensity -> yDensity
    int thumbWidth -> thumbWidth
    int thumbHeight -> thumbHeight
    byte[] thumbData -> thumbData
    void <init>(byte[]) -> <init>
    jogamp.opengl.util.jpeg.JPEGDecoder$JFIF get(byte[]) -> get
    java.lang.String toString() -> toString
jogamp.opengl.util.jpeg.JPEGDecoder$MarkerException -> jogamp.opengl.util.jpeg.JPEGDecoder$MarkerException:
    int marker -> marker
    void <init>(int,java.lang.String) -> <init>
    int getMarker() -> getMarker
jogamp.opengl.util.jpeg.JPEGDecoder$Output -> jogamp.opengl.util.jpeg.JPEGDecoder$Output:
    int blocksPerLine -> blocksPerLine
    int blocksPerColumn -> blocksPerColumn
    int samplesPerLine -> samplesPerLine
    void <init>() -> <init>
    java.util.ArrayList buildComponentData(jogamp.opengl.util.jpeg.JPEGDecoder$Frame,jogamp.opengl.util.jpeg.JPEGDecoder$ComponentIn) -> buildComponentData
    void quantizeAndInverse(int[],byte[],int[],int[]) -> quantizeAndInverse
    java.util.ArrayList access$200(jogamp.opengl.util.jpeg.JPEGDecoder$Output,jogamp.opengl.util.jpeg.JPEGDecoder$Frame,jogamp.opengl.util.jpeg.JPEGDecoder$ComponentIn) -> access$200
jogamp.opengl.util.pngj.FilterType -> jogamp.opengl.util.pngj.FilterType:
    jogamp.opengl.util.pngj.FilterType FILTER_NONE -> FILTER_NONE
    jogamp.opengl.util.pngj.FilterType FILTER_SUB -> FILTER_SUB
    jogamp.opengl.util.pngj.FilterType FILTER_UP -> FILTER_UP
    jogamp.opengl.util.pngj.FilterType FILTER_AVERAGE -> FILTER_AVERAGE
    jogamp.opengl.util.pngj.FilterType FILTER_PAETH -> FILTER_PAETH
    jogamp.opengl.util.pngj.FilterType FILTER_DEFAULT -> FILTER_DEFAULT
    jogamp.opengl.util.pngj.FilterType FILTER_AGGRESSIVE -> FILTER_AGGRESSIVE
    jogamp.opengl.util.pngj.FilterType FILTER_VERYAGGRESSIVE -> FILTER_VERYAGGRESSIVE
    jogamp.opengl.util.pngj.FilterType FILTER_CYCLIC -> FILTER_CYCLIC
    jogamp.opengl.util.pngj.FilterType FILTER_UNKNOWN -> FILTER_UNKNOWN
    int val -> val
    java.util.HashMap byVal -> byVal
    jogamp.opengl.util.pngj.FilterType[] $VALUES -> $VALUES
    jogamp.opengl.util.pngj.FilterType[] values() -> values
    jogamp.opengl.util.pngj.FilterType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    jogamp.opengl.util.pngj.FilterType getByVal(int) -> getByVal
    void <clinit>() -> <clinit>
jogamp.opengl.util.pngj.FilterWriteStrategy -> jogamp.opengl.util.pngj.FilterWriteStrategy:
    int COMPUTE_STATS_EVERY_N_LINES -> COMPUTE_STATS_EVERY_N_LINES
    jogamp.opengl.util.pngj.ImageInfo imgInfo -> imgInfo
    jogamp.opengl.util.pngj.FilterType configuredType -> configuredType
    jogamp.opengl.util.pngj.FilterType currentType -> currentType
    int lastRowTested -> lastRowTested
    double[] lastSums -> lastSums
    double[] lastEntropies -> lastEntropies
    double[] preference -> preference
    int discoverEachLines -> discoverEachLines
    double[] histogram1 -> histogram1
    void <init>(jogamp.opengl.util.pngj.ImageInfo,jogamp.opengl.util.pngj.FilterType) -> <init>
    boolean shouldTestAll(int) -> shouldTestAll
    void setPreference(double,double,double,double,double) -> setPreference
    boolean computesStatistics() -> computesStatistics
    void fillResultsForFilter(int,jogamp.opengl.util.pngj.FilterType,double,int[],boolean) -> fillResultsForFilter
    jogamp.opengl.util.pngj.FilterType gimmeFilterType(int,boolean) -> gimmeFilterType
jogamp.opengl.util.pngj.ImageInfo -> jogamp.opengl.util.pngj.ImageInfo:
    int MAX_COLS_ROWS_VAL -> MAX_COLS_ROWS_VAL
    int cols -> cols
    int rows -> rows
    int bitDepth -> bitDepth
    int channels -> channels
    boolean alpha -> alpha
    boolean greyscale -> greyscale
    boolean indexed -> indexed
    boolean packed -> packed
    int bitspPixel -> bitspPixel
    int bytesPixel -> bytesPixel
    int bytesPerRow -> bytesPerRow
    int samplesPerRow -> samplesPerRow
    int samplesPerRowPacked -> samplesPerRowPacked
    void <init>(int,int,int,boolean) -> <init>
    void <init>(int,int,int,boolean,boolean,boolean) -> <init>
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
jogamp.opengl.util.pngj.ImageLine -> jogamp.opengl.util.pngj.ImageLine:
    jogamp.opengl.util.pngj.ImageInfo imgInfo -> imgInfo
    int rown -> rown
    int[] scanline -> scanline
    byte[] scanlineb -> scanlineb
    jogamp.opengl.util.pngj.FilterType filterUsed -> filterUsed
    int channels -> channels
    int bitDepth -> bitDepth
    int elementsPerRow -> elementsPerRow
    jogamp.opengl.util.pngj.ImageLine$SampleType sampleType -> sampleType
    boolean samplesUnpacked -> samplesUnpacked
    void <init>(jogamp.opengl.util.pngj.ImageInfo) -> <init>
    void <init>(jogamp.opengl.util.pngj.ImageInfo,jogamp.opengl.util.pngj.ImageLine$SampleType,boolean) -> <init>
    void <init>(jogamp.opengl.util.pngj.ImageInfo,jogamp.opengl.util.pngj.ImageLine$SampleType,boolean,int[],byte[]) -> <init>
    int getRown() -> getRown
    void setRown(int) -> setRown
    void unpackInplaceInt(jogamp.opengl.util.pngj.ImageInfo,int[],int[],boolean) -> unpackInplaceInt
    void packInplaceInt(jogamp.opengl.util.pngj.ImageInfo,int[],int[],boolean) -> packInplaceInt
    void unpackInplaceByte(jogamp.opengl.util.pngj.ImageInfo,byte[],byte[],boolean) -> unpackInplaceByte
    void packInplaceByte(jogamp.opengl.util.pngj.ImageInfo,byte[],byte[],boolean) -> packInplaceByte
    jogamp.opengl.util.pngj.ImageLine unpackToNewImageLine() -> unpackToNewImageLine
    jogamp.opengl.util.pngj.ImageLine packToNewImageLine() -> packToNewImageLine
    jogamp.opengl.util.pngj.FilterType getFilterUsed() -> getFilterUsed
    void setFilterUsed(jogamp.opengl.util.pngj.FilterType) -> setFilterUsed
    int[] getScanlineInt() -> getScanlineInt
    byte[] getScanlineByte() -> getScanlineByte
    java.lang.String toString() -> toString
    void showLineInfo(jogamp.opengl.util.pngj.ImageLine) -> showLineInfo
jogamp.opengl.util.pngj.ImageLine$SampleType -> jogamp.opengl.util.pngj.ImageLine$SampleType:
    jogamp.opengl.util.pngj.ImageLine$SampleType INT -> INT
    jogamp.opengl.util.pngj.ImageLine$SampleType BYTE -> BYTE
    jogamp.opengl.util.pngj.ImageLine$SampleType[] $VALUES -> $VALUES
    jogamp.opengl.util.pngj.ImageLine$SampleType[] values() -> values
    jogamp.opengl.util.pngj.ImageLine$SampleType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
jogamp.opengl.util.pngj.ImageLineHelper -> jogamp.opengl.util.pngj.ImageLineHelper:
    double BIG_VALUE -> BIG_VALUE
    double BIG_VALUE_NEG -> BIG_VALUE_NEG
    void <init>() -> <init>
    int[] palette2rgb(jogamp.opengl.util.pngj.ImageLine,jogamp.opengl.util.pngj.chunks.PngChunkPLTE,jogamp.opengl.util.pngj.chunks.PngChunkTRNS,int[]) -> palette2rgb
    int[] palette2rgb(jogamp.opengl.util.pngj.ImageLine,jogamp.opengl.util.pngj.chunks.PngChunkPLTE,int[]) -> palette2rgb
    java.lang.String infoFirstLastPixels(jogamp.opengl.util.pngj.ImageLine) -> infoFirstLastPixels
    java.lang.String infoFull(jogamp.opengl.util.pngj.ImageLine) -> infoFull
    int getPixelRGB8(jogamp.opengl.util.pngj.ImageLine,int) -> getPixelRGB8
    int getPixelARGB8(jogamp.opengl.util.pngj.ImageLine,int) -> getPixelARGB8
    void setPixelsRGB8(jogamp.opengl.util.pngj.ImageLine,int[]) -> setPixelsRGB8
    void setPixelRGB8(jogamp.opengl.util.pngj.ImageLine,int,int,int,int) -> setPixelRGB8
    void setPixelRGB8(jogamp.opengl.util.pngj.ImageLine,int,int) -> setPixelRGB8
    void setPixelsRGBA8(jogamp.opengl.util.pngj.ImageLine,int[]) -> setPixelsRGBA8
    void setPixelRGBA8(jogamp.opengl.util.pngj.ImageLine,int,int,int,int,int) -> setPixelRGBA8
    void setPixelRGBA8(jogamp.opengl.util.pngj.ImageLine,int,int) -> setPixelRGBA8
    void setValD(jogamp.opengl.util.pngj.ImageLine,int,double) -> setValD
    int interpol(int,int,int,int,double,double) -> interpol
    double int2double(jogamp.opengl.util.pngj.ImageLine,int) -> int2double
    double int2doubleClamped(jogamp.opengl.util.pngj.ImageLine,int) -> int2doubleClamped
    int double2int(jogamp.opengl.util.pngj.ImageLine,double) -> double2int
    int double2intClamped(jogamp.opengl.util.pngj.ImageLine,double) -> double2intClamped
    int clampTo_0_255(int) -> clampTo_0_255
    int clampTo_0_65535(int) -> clampTo_0_65535
    int clampTo_128_127(int) -> clampTo_128_127
    int[] unpack(jogamp.opengl.util.pngj.ImageInfo,int[],int[],boolean) -> unpack
    byte[] unpack(jogamp.opengl.util.pngj.ImageInfo,byte[],byte[],boolean) -> unpack
    int[] pack(jogamp.opengl.util.pngj.ImageInfo,int[],int[],boolean) -> pack
    byte[] pack(jogamp.opengl.util.pngj.ImageInfo,byte[],byte[],boolean) -> pack
    int getMaskForPackedFormats(int) -> getMaskForPackedFormats
    int getMaskForPackedFormatsLs(int) -> getMaskForPackedFormatsLs
jogamp.opengl.util.pngj.ImageLineHelper$ImageLineStats -> jogamp.opengl.util.pngj.ImageLineHelper$ImageLineStats:
    double[] prom -> prom
    double[] maxv -> maxv
    double[] minv -> minv
    double promlum -> promlum
    double maxlum -> maxlum
    double minlum -> minlum
    double[] maxdif -> maxdif
    int channels -> channels
    java.lang.String toString() -> toString
    void <init>(jogamp.opengl.util.pngj.ImageLine) -> <init>
jogamp.opengl.util.pngj.ImageLines -> jogamp.opengl.util.pngj.ImageLines:
    jogamp.opengl.util.pngj.ImageInfo imgInfo -> imgInfo
    int channels -> channels
    int bitDepth -> bitDepth
    jogamp.opengl.util.pngj.ImageLine$SampleType sampleType -> sampleType
    boolean samplesUnpacked -> samplesUnpacked
    int elementsPerRow -> elementsPerRow
    int rowOffset -> rowOffset
    int nRows -> nRows
    int rowStep -> rowStep
    int[][] scanlines -> scanlines
    byte[][] scanlinesb -> scanlinesb
    void <init>(jogamp.opengl.util.pngj.ImageInfo,jogamp.opengl.util.pngj.ImageLine$SampleType,boolean,int,int,int) -> <init>
    int imageRowToMatrixRow(int) -> imageRowToMatrixRow
    int imageRowToMatrixRowStrict(int) -> imageRowToMatrixRowStrict
    int matrixRowToImageRow(int) -> matrixRowToImageRow
    jogamp.opengl.util.pngj.ImageLine getImageLineAtMatrixRow(int) -> getImageLineAtMatrixRow
jogamp.opengl.util.pngj.PngDeinterlacer -> jogamp.opengl.util.pngj.PngDeinterlacer:
    jogamp.opengl.util.pngj.ImageInfo imi -> imi
    int pass -> pass
    int rows -> rows
    int cols -> cols
    int dY -> dY
    int dX -> dX
    int oY -> oY
    int oX -> oX
    int oXsamples -> oXsamples
    int dXsamples -> dXsamples
    int currRowSubimg -> currRowSubimg
    int currRowReal -> currRowReal
    int packedValsPerPixel -> packedValsPerPixel
    int packedMask -> packedMask
    int packedShift -> packedShift
    int[][] imageInt -> imageInt
    short[][] imageShort -> imageShort
    byte[][] imageByte -> imageByte
    void <init>(jogamp.opengl.util.pngj.ImageInfo) -> <init>
    void setRow(int) -> setRow
    void setPass(int) -> setPass
    void deinterlaceInt(int[],int[],boolean) -> deinterlaceInt
    void deinterlaceIntPacked(int[],int[]) -> deinterlaceIntPacked
    void deinterlaceByte(byte[],byte[],boolean) -> deinterlaceByte
    void deinterlacePackedByte(byte[],byte[]) -> deinterlacePackedByte
    boolean isAtLastRow() -> isAtLastRow
    int getCurrRowSubimg() -> getCurrRowSubimg
    int getCurrRowReal() -> getCurrRowReal
    int getPass() -> getPass
    int getRows() -> getRows
    int getCols() -> getCols
    int getPixelsToRead() -> getPixelsToRead
    int[][] getImageInt() -> getImageInt
    void setImageInt(int[][]) -> setImageInt
    short[][] getImageShort() -> getImageShort
    void setImageShort(short[][]) -> setImageShort
    byte[][] getImageByte() -> getImageByte
    void setImageByte(byte[][]) -> setImageByte
    void test() -> test
    void main(java.lang.String[]) -> main
jogamp.opengl.util.pngj.PngHelperInternal -> jogamp.opengl.util.pngj.PngHelperInternal:
    java.nio.charset.Charset charsetLatin1 -> charsetLatin1
    java.nio.charset.Charset charsetUTF8 -> charsetUTF8
    boolean DEBUG -> DEBUG
    java.lang.ThreadLocal crcProvider -> crcProvider
    void <init>() -> <init>
    byte[] getPngIdSignature() -> getPngIdSignature
    int doubleToInt100000(double) -> doubleToInt100000
    double intToDouble100000(int) -> intToDouble100000
    int readByte(java.io.InputStream) -> readByte
    int readInt2(java.io.InputStream) -> readInt2
    int readInt4(java.io.InputStream) -> readInt4
    int readInt1fromByte(byte[],int) -> readInt1fromByte
    int readInt2fromBytes(byte[],int) -> readInt2fromBytes
    int readInt4fromBytes(byte[],int) -> readInt4fromBytes
    void writeByte(java.io.OutputStream,byte) -> writeByte
    void writeInt2(java.io.OutputStream,int) -> writeInt2
    void writeInt4(java.io.OutputStream,int) -> writeInt4
    void writeInt2tobytes(int,byte[],int) -> writeInt2tobytes
    void writeInt4tobytes(int,byte[],int) -> writeInt4tobytes
    void readBytes(java.io.InputStream,byte[],int,int) -> readBytes
    void skipBytes(java.io.InputStream,long) -> skipBytes
    void writeBytes(java.io.OutputStream,byte[]) -> writeBytes
    void writeBytes(java.io.OutputStream,byte[],int,int) -> writeBytes
    void logdebug(java.lang.String) -> logdebug
    java.util.zip.CRC32 getCRC() -> getCRC
    int filterRowNone(int) -> filterRowNone
    int filterRowSub(int,int) -> filterRowSub
    int filterRowUp(int,int) -> filterRowUp
    int filterRowAverage(int,int,int) -> filterRowAverage
    int filterRowPaeth(int,int,int,int) -> filterRowPaeth
    int unfilterRowNone(int) -> unfilterRowNone
    int unfilterRowSub(int,int) -> unfilterRowSub
    int unfilterRowUp(int,int) -> unfilterRowUp
    int unfilterRowAverage(int,int,int) -> unfilterRowAverage
    int unfilterRowPaeth(int,int,int,int) -> unfilterRowPaeth
    int filterPaethPredictor(int,int,int) -> filterPaethPredictor
    void initCrcForTests(jogamp.opengl.util.pngj.PngReader) -> initCrcForTests
    long getCrctestVal(jogamp.opengl.util.pngj.PngReader) -> getCrctestVal
    void <clinit>() -> <clinit>
jogamp.opengl.util.pngj.PngHelperInternal$1 -> jogamp.opengl.util.pngj.PngHelperInternal$1:
    void <init>() -> <init>
    java.util.zip.CRC32 initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
jogamp.opengl.util.pngj.PngIDatChunkInputStream -> jogamp.opengl.util.pngj.PngIDatChunkInputStream:
    java.io.InputStream inputStream -> inputStream
    java.util.zip.CRC32 crcEngine -> crcEngine
    boolean checkCrc -> checkCrc
    int lenLastChunk -> lenLastChunk
    byte[] idLastChunk -> idLastChunk
    int toReadThisChunk -> toReadThisChunk
    boolean ended -> ended
    long offset -> offset
    java.util.List foundChunksInfo -> foundChunksInfo
    void <init>(java.io.InputStream,int,long) -> <init>
    void close() -> close
    void endChunkGoForNext() -> endChunkGoForNext
    void forceChunkEnd() -> forceChunkEnd
    int read(byte[],int,int) -> read
    int read(byte[]) -> read
    int read() -> read
    int getLenLastChunk() -> getLenLastChunk
    byte[] getIdLastChunk() -> getIdLastChunk
    long getOffset() -> getOffset
    boolean isEnded() -> isEnded
    void disableCrcCheck() -> disableCrcCheck
jogamp.opengl.util.pngj.PngIDatChunkInputStream$1 -> jogamp.opengl.util.pngj.PngIDatChunkInputStream$1:
jogamp.opengl.util.pngj.PngIDatChunkInputStream$IdatChunkInfo -> jogamp.opengl.util.pngj.PngIDatChunkInputStream$IdatChunkInfo:
    int len -> len
    long offset -> offset
    void <init>(int,long) -> <init>
    void <init>(int,long,jogamp.opengl.util.pngj.PngIDatChunkInputStream$1) -> <init>
jogamp.opengl.util.pngj.PngIDatChunkOutputStream -> jogamp.opengl.util.pngj.PngIDatChunkOutputStream:
    int SIZE_DEFAULT -> SIZE_DEFAULT
    java.io.OutputStream outputStream -> outputStream
    void <init>(java.io.OutputStream) -> <init>
    void <init>(java.io.OutputStream,int) -> <init>
    void flushBuffer(byte[],int) -> flushBuffer
jogamp.opengl.util.pngj.PngReader -> jogamp.opengl.util.pngj.PngReader:
    jogamp.opengl.util.pngj.ImageInfo imgInfo -> imgInfo
    java.lang.String filename -> filename
    jogamp.opengl.util.pngj.chunks.ChunkLoadBehaviour chunkLoadBehaviour -> chunkLoadBehaviour
    boolean shouldCloseStream -> shouldCloseStream
    long maxTotalBytesRead -> maxTotalBytesRead
    int maxBytesMetadata -> maxBytesMetadata
    int skipChunkMaxSize -> skipChunkMaxSize
    java.lang.String[] skipChunkIds -> skipChunkIds
    java.util.HashSet skipChunkIdsSet -> skipChunkIdsSet
    jogamp.opengl.util.pngj.chunks.PngMetadata metadata -> metadata
    jogamp.opengl.util.pngj.chunks.ChunksList chunksList -> chunksList
    jogamp.opengl.util.pngj.ImageLine imgLine -> imgLine
    int buffersLen -> buffersLen
    byte[] rowb -> rowb
    byte[] rowbprev -> rowbprev
    byte[] rowbfilter -> rowbfilter
    boolean interlaced -> interlaced
    jogamp.opengl.util.pngj.PngDeinterlacer deinterlacer -> deinterlacer
    boolean crcEnabled -> crcEnabled
    boolean unpackedMode -> unpackedMode
    java.util.zip.Inflater inflater -> inflater
    int currentChunkGroup -> currentChunkGroup
    int rowNum -> rowNum
    long offset -> offset
    int bytesChunksLoaded -> bytesChunksLoaded
    java.io.InputStream inputStream -> inputStream
    java.util.zip.InflaterInputStream idatIstream -> idatIstream
    jogamp.opengl.util.pngj.PngIDatChunkInputStream iIdatCstream -> iIdatCstream
    java.util.zip.CRC32 crctest -> crctest
    void <init>(java.io.InputStream,java.lang.String) -> <init>
    boolean firstChunksNotYetRead() -> firstChunksNotYetRead
    void allocateBuffers() -> allocateBuffers
    void readLastAndClose() -> readLastAndClose
    void close() -> close
    void unfilterRow(int) -> unfilterRow
    void unfilterRowAverage(int) -> unfilterRowAverage
    void unfilterRowNone(int) -> unfilterRowNone
    void unfilterRowPaeth(int) -> unfilterRowPaeth
    void unfilterRowSub(int) -> unfilterRowSub
    void unfilterRowUp(int) -> unfilterRowUp
    void readFirstChunks() -> readFirstChunks
    void readLastChunks() -> readLastChunks
    jogamp.opengl.util.pngj.chunks.PngChunk readChunk(byte[],int,boolean) -> readChunk
    void logWarn(java.lang.String) -> logWarn
    jogamp.opengl.util.pngj.chunks.ChunkLoadBehaviour getChunkLoadBehaviour() -> getChunkLoadBehaviour
    void setChunkLoadBehaviour(jogamp.opengl.util.pngj.chunks.ChunkLoadBehaviour) -> setChunkLoadBehaviour
    jogamp.opengl.util.pngj.chunks.ChunksList getChunksList() -> getChunksList
    int getCurrentChunkGroup() -> getCurrentChunkGroup
    jogamp.opengl.util.pngj.chunks.PngMetadata getMetadata() -> getMetadata
    jogamp.opengl.util.pngj.ImageLine readRow(int) -> readRow
    jogamp.opengl.util.pngj.ImageLine readRowInt(int) -> readRowInt
    jogamp.opengl.util.pngj.ImageLine readRowByte(int) -> readRowByte
    int[] readRow(int[],int) -> readRow
    int[] readRowInt(int[],int) -> readRowInt
    byte[] readRowByte(byte[],int) -> readRowByte
    jogamp.opengl.util.pngj.ImageLine getRow(int) -> getRow
    void decodeLastReadRowToInt(int[],int) -> decodeLastReadRowToInt
    void decodeLastReadRowToByte(byte[],int) -> decodeLastReadRowToByte
    jogamp.opengl.util.pngj.ImageLines readRowsInt(int,int,int) -> readRowsInt
    jogamp.opengl.util.pngj.ImageLines readRowsInt() -> readRowsInt
    jogamp.opengl.util.pngj.ImageLines readRowsByte(int,int,int) -> readRowsByte
    jogamp.opengl.util.pngj.ImageLines readRowsByte() -> readRowsByte
    int readRowRaw(int) -> readRowRaw
    void readSkippingAllRows() -> readSkippingAllRows
    void setMaxTotalBytesRead(long) -> setMaxTotalBytesRead
    long getMaxTotalBytesRead() -> getMaxTotalBytesRead
    void setMaxBytesMetadata(int) -> setMaxBytesMetadata
    int getMaxBytesMetadata() -> getMaxBytesMetadata
    void setSkipChunkMaxSize(int) -> setSkipChunkMaxSize
    int getSkipChunkMaxSize() -> getSkipChunkMaxSize
    void setSkipChunkIds(java.lang.String[]) -> setSkipChunkIds
    java.lang.String[] getSkipChunkIds() -> getSkipChunkIds
    void setShouldCloseStream(boolean) -> setShouldCloseStream
    void end() -> end
    boolean isInterlaced() -> isInterlaced
    void setUnpackedMode(boolean) -> setUnpackedMode
    boolean isUnpackedMode() -> isUnpackedMode
    void reuseBuffersFrom(jogamp.opengl.util.pngj.PngReader) -> reuseBuffersFrom
    void setCrcCheckDisabled() -> setCrcCheckDisabled
    long getCrctestVal() -> getCrctestVal
    void initCrctest() -> initCrctest
    java.lang.String toString() -> toString
jogamp.opengl.util.pngj.PngReader$1 -> jogamp.opengl.util.pngj.PngReader$1:
    int[] $SwitchMap$jogamp$opengl$util$pngj$FilterType -> $SwitchMap$jogamp$opengl$util$pngj$FilterType
    void <clinit>() -> <clinit>
jogamp.opengl.util.pngj.PngWriter -> jogamp.opengl.util.pngj.PngWriter:
    jogamp.opengl.util.pngj.ImageInfo imgInfo -> imgInfo
    java.lang.String filename -> filename
    int rowNum -> rowNum
    jogamp.opengl.util.pngj.chunks.ChunksListForWrite chunksList -> chunksList
    jogamp.opengl.util.pngj.chunks.PngMetadata metadata -> metadata
    int currentChunkGroup -> currentChunkGroup
    jogamp.opengl.util.pngj.FilterWriteStrategy filterStrat -> filterStrat
    int compLevel -> compLevel
    boolean shouldCloseStream -> shouldCloseStream
    jogamp.opengl.util.pngj.PngIDatChunkOutputStream datStream -> datStream
    java.util.zip.DeflaterOutputStream datStreamDeflated -> datStreamDeflated
    int deflaterStrategy -> deflaterStrategy
    int[] histox -> histox
    int idatMaxSize -> idatMaxSize
    java.io.OutputStream os -> os
    byte[] rowb -> rowb
    byte[] rowbfilter -> rowbfilter
    byte[] rowbprev -> rowbprev
    boolean unpackedMode -> unpackedMode
    void <init>(java.io.OutputStream,jogamp.opengl.util.pngj.ImageInfo) -> <init>
    void <init>(java.io.OutputStream,jogamp.opengl.util.pngj.ImageInfo,java.lang.String) -> <init>
    void init() -> init
    void reportResultsForFilter(int,jogamp.opengl.util.pngj.FilterType,boolean) -> reportResultsForFilter
    void writeEndChunk() -> writeEndChunk
    void writeFirstChunks() -> writeFirstChunks
    void writeLastChunks() -> writeLastChunks
    void writeSignatureAndIHDR() -> writeSignatureAndIHDR
    void encodeRowFromByte(byte[]) -> encodeRowFromByte
    void encodeRowFromInt(int[]) -> encodeRowFromInt
    void filterRow(int) -> filterRow
    void prepareEncodeRow(int) -> prepareEncodeRow
    void filterAndSend(int) -> filterAndSend
    void filterRowAverage() -> filterRowAverage
    void filterRowNone() -> filterRowNone
    void filterRowPaeth() -> filterRowPaeth
    void filterRowSub() -> filterRowSub
    void filterRowUp() -> filterRowUp
    int sumRowbfilter() -> sumRowbfilter
    void copyChunks(jogamp.opengl.util.pngj.PngReader,int,boolean) -> copyChunks
    void copyChunksFirst(jogamp.opengl.util.pngj.PngReader,int) -> copyChunksFirst
    void copyChunksLast(jogamp.opengl.util.pngj.PngReader,int) -> copyChunksLast
    double computeCompressionRatio() -> computeCompressionRatio
    void end() -> end
    jogamp.opengl.util.pngj.chunks.ChunksListForWrite getChunksList() -> getChunksList
    java.lang.String getFilename() -> getFilename
    jogamp.opengl.util.pngj.chunks.PngMetadata getMetadata() -> getMetadata
    void setCompLevel(int) -> setCompLevel
    void setFilterType(jogamp.opengl.util.pngj.FilterType) -> setFilterType
    void setIdatMaxSize(int) -> setIdatMaxSize
    void setShouldCloseStream(boolean) -> setShouldCloseStream
    void setDeflaterStrategy(int) -> setDeflaterStrategy
    void writeRow(jogamp.opengl.util.pngj.ImageLine) -> writeRow
    void writeRow(jogamp.opengl.util.pngj.ImageLine,int) -> writeRow
    void writeRow(int[]) -> writeRow
    void writeRow(int[],int) -> writeRow
    void writeRowInt(int[],int) -> writeRowInt
    void writeRowByte(byte[],int) -> writeRowByte
    void writeRowsInt(int[][]) -> writeRowsInt
    void writeRowsByte(byte[][]) -> writeRowsByte
    boolean isUnpackedMode() -> isUnpackedMode
    void setUseUnPackedMode(boolean) -> setUseUnPackedMode
jogamp.opengl.util.pngj.PngWriter$1 -> jogamp.opengl.util.pngj.PngWriter$1:
    int[] $SwitchMap$jogamp$opengl$util$pngj$FilterType -> $SwitchMap$jogamp$opengl$util$pngj$FilterType
    void <clinit>() -> <clinit>
jogamp.opengl.util.pngj.PngjBadCrcException -> jogamp.opengl.util.pngj.PngjBadCrcException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Throwable) -> <init>
jogamp.opengl.util.pngj.PngjException -> jogamp.opengl.util.pngj.PngjException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Throwable) -> <init>
jogamp.opengl.util.pngj.PngjExceptionInternal -> jogamp.opengl.util.pngj.PngjExceptionInternal:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Throwable) -> <init>
jogamp.opengl.util.pngj.PngjInputException -> jogamp.opengl.util.pngj.PngjInputException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Throwable) -> <init>
jogamp.opengl.util.pngj.PngjOutputException -> jogamp.opengl.util.pngj.PngjOutputException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Throwable) -> <init>
jogamp.opengl.util.pngj.PngjUnsupportedException -> jogamp.opengl.util.pngj.PngjUnsupportedException:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Throwable) -> <init>
jogamp.opengl.util.pngj.ProgressiveOutputStream -> jogamp.opengl.util.pngj.ProgressiveOutputStream:
    int size -> size
    long countFlushed -> countFlushed
    void <init>(int) -> <init>
    void close() -> close
    void flush() -> flush
    void write(byte[],int,int) -> write
    void write(byte[]) -> write
    void write(int) -> write
    void reset() -> reset
    void checkFlushBuffer(boolean) -> checkFlushBuffer
    void flushBuffer(byte[],int) -> flushBuffer
    long getCountFlushed() -> getCountFlushed
jogamp.opengl.util.pngj.chunks.ChunkHelper -> jogamp.opengl.util.pngj.chunks.ChunkHelper:
    java.lang.String IHDR -> IHDR
    java.lang.String PLTE -> PLTE
    java.lang.String IDAT -> IDAT
    java.lang.String IEND -> IEND
    byte[] b_IHDR -> b_IHDR
    byte[] b_PLTE -> b_PLTE
    byte[] b_IDAT -> b_IDAT
    byte[] b_IEND -> b_IEND
    java.lang.String cHRM -> cHRM
    java.lang.String gAMA -> gAMA
    java.lang.String iCCP -> iCCP
    java.lang.String sBIT -> sBIT
    java.lang.String sRGB -> sRGB
    java.lang.String bKGD -> bKGD
    java.lang.String hIST -> hIST
    java.lang.String tRNS -> tRNS
    java.lang.String pHYs -> pHYs
    java.lang.String sPLT -> sPLT
    java.lang.String tIME -> tIME
    java.lang.String iTXt -> iTXt
    java.lang.String tEXt -> tEXt
    java.lang.String zTXt -> zTXt
    java.lang.ThreadLocal inflaterProvider -> inflaterProvider
    java.lang.ThreadLocal deflaterProvider -> deflaterProvider
    byte[] tmpbuffer -> tmpbuffer
    void <init>() -> <init>
    byte[] toBytes(java.lang.String) -> toBytes
    java.lang.String toString(byte[]) -> toString
    java.lang.String toString(byte[],int,int) -> toString
    byte[] toBytesUTF8(java.lang.String) -> toBytesUTF8
    java.lang.String toStringUTF8(byte[]) -> toStringUTF8
    java.lang.String toStringUTF8(byte[],int,int) -> toStringUTF8
    boolean isCritical(java.lang.String) -> isCritical
    boolean isPublic(java.lang.String) -> isPublic
    boolean isSafeToCopy(java.lang.String) -> isSafeToCopy
    boolean isUnknown(jogamp.opengl.util.pngj.chunks.PngChunk) -> isUnknown
    int posNullByte(byte[]) -> posNullByte
    boolean shouldLoad(java.lang.String,jogamp.opengl.util.pngj.chunks.ChunkLoadBehaviour) -> shouldLoad
    byte[] compressBytes(byte[],boolean) -> compressBytes
    byte[] compressBytes(byte[],int,int,boolean) -> compressBytes
    void shovelInToOut(java.io.InputStream,java.io.OutputStream) -> shovelInToOut
    boolean maskMatch(int,int) -> maskMatch
    java.util.List filterList(java.util.List,jogamp.opengl.util.pngj.chunks.ChunkPredicate) -> filterList
    int trimList(java.util.List,jogamp.opengl.util.pngj.chunks.ChunkPredicate) -> trimList
    boolean equivalent(jogamp.opengl.util.pngj.chunks.PngChunk,jogamp.opengl.util.pngj.chunks.PngChunk) -> equivalent
    boolean isText(jogamp.opengl.util.pngj.chunks.PngChunk) -> isText
    java.util.zip.Inflater getInflater() -> getInflater
    java.util.zip.Deflater getDeflater() -> getDeflater
    void <clinit>() -> <clinit>
jogamp.opengl.util.pngj.chunks.ChunkHelper$1 -> jogamp.opengl.util.pngj.chunks.ChunkHelper$1:
    void <init>() -> <init>
    java.util.zip.Inflater initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
jogamp.opengl.util.pngj.chunks.ChunkHelper$2 -> jogamp.opengl.util.pngj.chunks.ChunkHelper$2:
    void <init>() -> <init>
    java.util.zip.Deflater initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
jogamp.opengl.util.pngj.chunks.ChunkHelper$3 -> jogamp.opengl.util.pngj.chunks.ChunkHelper$3:
    int[] $SwitchMap$jogamp$opengl$util$pngj$chunks$ChunkLoadBehaviour -> $SwitchMap$jogamp$opengl$util$pngj$chunks$ChunkLoadBehaviour
    void <clinit>() -> <clinit>
jogamp.opengl.util.pngj.chunks.ChunkLoadBehaviour -> jogamp.opengl.util.pngj.chunks.ChunkLoadBehaviour:
    jogamp.opengl.util.pngj.chunks.ChunkLoadBehaviour LOAD_CHUNK_NEVER -> LOAD_CHUNK_NEVER
    jogamp.opengl.util.pngj.chunks.ChunkLoadBehaviour LOAD_CHUNK_KNOWN -> LOAD_CHUNK_KNOWN
    jogamp.opengl.util.pngj.chunks.ChunkLoadBehaviour LOAD_CHUNK_IF_SAFE -> LOAD_CHUNK_IF_SAFE
    jogamp.opengl.util.pngj.chunks.ChunkLoadBehaviour LOAD_CHUNK_ALWAYS -> LOAD_CHUNK_ALWAYS
    jogamp.opengl.util.pngj.chunks.ChunkLoadBehaviour[] $VALUES -> $VALUES
    jogamp.opengl.util.pngj.chunks.ChunkLoadBehaviour[] values() -> values
    jogamp.opengl.util.pngj.chunks.ChunkLoadBehaviour valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
jogamp.opengl.util.pngj.chunks.ChunkPredicate -> jogamp.opengl.util.pngj.chunks.ChunkPredicate:
    boolean match(jogamp.opengl.util.pngj.chunks.PngChunk) -> match
jogamp.opengl.util.pngj.chunks.ChunkRaw -> jogamp.opengl.util.pngj.chunks.ChunkRaw:
    int len -> len
    byte[] idbytes -> idbytes
    byte[] data -> data
    int crcval -> crcval
    void <init>(int,byte[],boolean) -> <init>
    void allocData() -> allocData
    int computeCrc() -> computeCrc
    void writeChunk(java.io.OutputStream) -> writeChunk
    int readChunkData(java.io.InputStream,boolean) -> readChunkData
    java.io.ByteArrayInputStream getAsByteStream() -> getAsByteStream
    java.lang.String toString() -> toString
jogamp.opengl.util.pngj.chunks.ChunksList -> jogamp.opengl.util.pngj.chunks.ChunksList:
    int CHUNK_GROUP_0_IDHR -> CHUNK_GROUP_0_IDHR
    int CHUNK_GROUP_1_AFTERIDHR -> CHUNK_GROUP_1_AFTERIDHR
    int CHUNK_GROUP_2_PLTE -> CHUNK_GROUP_2_PLTE
    int CHUNK_GROUP_3_AFTERPLTE -> CHUNK_GROUP_3_AFTERPLTE
    int CHUNK_GROUP_4_IDAT -> CHUNK_GROUP_4_IDAT
    int CHUNK_GROUP_5_AFTERIDAT -> CHUNK_GROUP_5_AFTERIDAT
    int CHUNK_GROUP_6_END -> CHUNK_GROUP_6_END
    java.util.List chunks -> chunks
    jogamp.opengl.util.pngj.ImageInfo imageInfo -> imageInfo
    void <init>(jogamp.opengl.util.pngj.ImageInfo) -> <init>
    java.util.HashMap getChunksKeys() -> getChunksKeys
    java.util.ArrayList getChunks() -> getChunks
    java.util.List getXById(java.util.List,java.lang.String,java.lang.String) -> getXById
    void appendReadChunk(jogamp.opengl.util.pngj.chunks.PngChunk,int) -> appendReadChunk
    java.util.List getById(java.lang.String) -> getById
    java.util.List getById(java.lang.String,java.lang.String) -> getById
    jogamp.opengl.util.pngj.chunks.PngChunk getById1(java.lang.String) -> getById1
    jogamp.opengl.util.pngj.chunks.PngChunk getById1(java.lang.String,boolean) -> getById1
    jogamp.opengl.util.pngj.chunks.PngChunk getById1(java.lang.String,java.lang.String,boolean) -> getById1
    java.util.List getEquivalent(jogamp.opengl.util.pngj.chunks.PngChunk) -> getEquivalent
    java.lang.String toString() -> toString
    java.lang.String toStringFull() -> toStringFull
jogamp.opengl.util.pngj.chunks.ChunksList$1 -> jogamp.opengl.util.pngj.chunks.ChunksList$1:
    java.lang.String val$id -> val$id
    void <init>(java.lang.String) -> <init>
    boolean match(jogamp.opengl.util.pngj.chunks.PngChunk) -> match
jogamp.opengl.util.pngj.chunks.ChunksList$2 -> jogamp.opengl.util.pngj.chunks.ChunksList$2:
    java.lang.String val$id -> val$id
    java.lang.String val$innerid -> val$innerid
    void <init>(java.lang.String,java.lang.String) -> <init>
    boolean match(jogamp.opengl.util.pngj.chunks.PngChunk) -> match
jogamp.opengl.util.pngj.chunks.ChunksList$3 -> jogamp.opengl.util.pngj.chunks.ChunksList$3:
    jogamp.opengl.util.pngj.chunks.PngChunk val$c2 -> val$c2
    jogamp.opengl.util.pngj.chunks.ChunksList this$0 -> this$0
    void <init>(jogamp.opengl.util.pngj.chunks.ChunksList,jogamp.opengl.util.pngj.chunks.PngChunk) -> <init>
    boolean match(jogamp.opengl.util.pngj.chunks.PngChunk) -> match
jogamp.opengl.util.pngj.chunks.ChunksListForWrite -> jogamp.opengl.util.pngj.chunks.ChunksListForWrite:
    java.util.List queuedChunks -> queuedChunks
    java.util.HashMap alreadyWrittenKeys -> alreadyWrittenKeys
    void <init>(jogamp.opengl.util.pngj.ImageInfo) -> <init>
    java.util.List getQueuedById(java.lang.String) -> getQueuedById
    java.util.List getQueuedById(java.lang.String,java.lang.String) -> getQueuedById
    jogamp.opengl.util.pngj.chunks.PngChunk getQueuedById1(java.lang.String,java.lang.String,boolean) -> getQueuedById1
    jogamp.opengl.util.pngj.chunks.PngChunk getQueuedById1(java.lang.String,boolean) -> getQueuedById1
    jogamp.opengl.util.pngj.chunks.PngChunk getQueuedById1(java.lang.String) -> getQueuedById1
    boolean removeChunk(jogamp.opengl.util.pngj.chunks.PngChunk) -> removeChunk
    boolean queue(jogamp.opengl.util.pngj.chunks.PngChunk) -> queue
    boolean shouldWrite(jogamp.opengl.util.pngj.chunks.PngChunk,int) -> shouldWrite
    int writeChunks(java.io.OutputStream,int) -> writeChunks
    java.util.List getQueuedChunks() -> getQueuedChunks
    java.lang.String toString() -> toString
    java.lang.String toStringFull() -> toStringFull
jogamp.opengl.util.pngj.chunks.PngChunk -> jogamp.opengl.util.pngj.chunks.PngChunk:
    java.lang.String id -> id
    boolean crit -> crit
    boolean pub -> pub
    boolean safe -> safe
    jogamp.opengl.util.pngj.ImageInfo imgInfo -> imgInfo
    boolean priority -> priority
    int chunkGroup -> chunkGroup
    int length -> length
    long offset -> offset
    java.util.Map factoryMap -> factoryMap
    void factoryRegister(java.lang.String,java.lang.Class) -> factoryRegister
    boolean isKnown(java.lang.String) -> isKnown
    void <init>(java.lang.String,jogamp.opengl.util.pngj.ImageInfo) -> <init>
    jogamp.opengl.util.pngj.chunks.PngChunk factory(jogamp.opengl.util.pngj.chunks.ChunkRaw,jogamp.opengl.util.pngj.ImageInfo) -> factory
    jogamp.opengl.util.pngj.chunks.PngChunk factoryFromId(java.lang.String,jogamp.opengl.util.pngj.ImageInfo) -> factoryFromId
    jogamp.opengl.util.pngj.chunks.ChunkRaw createEmptyChunk(int,boolean) -> createEmptyChunk
    jogamp.opengl.util.pngj.chunks.PngChunk cloneChunk(jogamp.opengl.util.pngj.chunks.PngChunk,jogamp.opengl.util.pngj.ImageInfo) -> cloneChunk
    int getChunkGroup() -> getChunkGroup
    void setChunkGroup(int) -> setChunkGroup
    boolean hasPriority() -> hasPriority
    void setPriority(boolean) -> setPriority
    void write(java.io.OutputStream) -> write
    int getLength() -> getLength
    long getOffset() -> getOffset
    void setOffset(long) -> setOffset
    jogamp.opengl.util.pngj.chunks.ChunkRaw createRawChunk() -> createRawChunk
    void parseFromRaw(jogamp.opengl.util.pngj.chunks.ChunkRaw) -> parseFromRaw
    void cloneDataFromRead(jogamp.opengl.util.pngj.chunks.PngChunk) -> cloneDataFromRead
    boolean allowsMultiple() -> allowsMultiple
    jogamp.opengl.util.pngj.chunks.PngChunk$ChunkOrderingConstraint getOrderingConstraint() -> getOrderingConstraint
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
jogamp.opengl.util.pngj.chunks.PngChunk$ChunkOrderingConstraint -> jogamp.opengl.util.pngj.chunks.PngChunk$ChunkOrderingConstraint:
    jogamp.opengl.util.pngj.chunks.PngChunk$ChunkOrderingConstraint NONE -> NONE
    jogamp.opengl.util.pngj.chunks.PngChunk$ChunkOrderingConstraint BEFORE_PLTE_AND_IDAT -> BEFORE_PLTE_AND_IDAT
    jogamp.opengl.util.pngj.chunks.PngChunk$ChunkOrderingConstraint AFTER_PLTE_BEFORE_IDAT -> AFTER_PLTE_BEFORE_IDAT
    jogamp.opengl.util.pngj.chunks.PngChunk$ChunkOrderingConstraint BEFORE_IDAT -> BEFORE_IDAT
    jogamp.opengl.util.pngj.chunks.PngChunk$ChunkOrderingConstraint NA -> NA
    jogamp.opengl.util.pngj.chunks.PngChunk$ChunkOrderingConstraint[] $VALUES -> $VALUES
    jogamp.opengl.util.pngj.chunks.PngChunk$ChunkOrderingConstraint[] values() -> values
    jogamp.opengl.util.pngj.chunks.PngChunk$ChunkOrderingConstraint valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean mustGoBeforePLTE() -> mustGoBeforePLTE
    boolean mustGoBeforeIDAT() -> mustGoBeforeIDAT
    boolean mustGoAfterPLTE() -> mustGoAfterPLTE
    void <clinit>() -> <clinit>
jogamp.opengl.util.pngj.chunks.PngChunkBKGD -> jogamp.opengl.util.pngj.chunks.PngChunkBKGD:
    java.lang.String ID -> ID
    int gray -> gray
    int red -> red
    int green -> green
    int blue -> blue
    int paletteIndex -> paletteIndex
    void <init>(jogamp.opengl.util.pngj.ImageInfo) -> <init>
    jogamp.opengl.util.pngj.chunks.PngChunk$ChunkOrderingConstraint getOrderingConstraint() -> getOrderingConstraint
    jogamp.opengl.util.pngj.chunks.ChunkRaw createRawChunk() -> createRawChunk
    void parseFromRaw(jogamp.opengl.util.pngj.chunks.ChunkRaw) -> parseFromRaw
    void cloneDataFromRead(jogamp.opengl.util.pngj.chunks.PngChunk) -> cloneDataFromRead
    void setGray(int) -> setGray
    int getGray() -> getGray
    void setPaletteIndex(int) -> setPaletteIndex
    int getPaletteIndex() -> getPaletteIndex
    void setRGB(int,int,int) -> setRGB
    int[] getRGB() -> getRGB
jogamp.opengl.util.pngj.chunks.PngChunkCHRM -> jogamp.opengl.util.pngj.chunks.PngChunkCHRM:
    java.lang.String ID -> ID
    double whitex -> whitex
    double whitey -> whitey
    double redx -> redx
    double redy -> redy
    double greenx -> greenx
    double greeny -> greeny
    double bluex -> bluex
    double bluey -> bluey
    void <init>(jogamp.opengl.util.pngj.ImageInfo) -> <init>
    jogamp.opengl.util.pngj.chunks.PngChunk$ChunkOrderingConstraint getOrderingConstraint() -> getOrderingConstraint
    jogamp.opengl.util.pngj.chunks.ChunkRaw createRawChunk() -> createRawChunk
    void parseFromRaw(jogamp.opengl.util.pngj.chunks.ChunkRaw) -> parseFromRaw
    void cloneDataFromRead(jogamp.opengl.util.pngj.chunks.PngChunk) -> cloneDataFromRead
    void setChromaticities(double,double,double,double,double,double,double,double) -> setChromaticities
    double[] getChromaticities() -> getChromaticities
jogamp.opengl.util.pngj.chunks.PngChunkGAMA -> jogamp.opengl.util.pngj.chunks.PngChunkGAMA:
    java.lang.String ID -> ID
    double gamma -> gamma
    void <init>(jogamp.opengl.util.pngj.ImageInfo) -> <init>
    jogamp.opengl.util.pngj.chunks.PngChunk$ChunkOrderingConstraint getOrderingConstraint() -> getOrderingConstraint
    jogamp.opengl.util.pngj.chunks.ChunkRaw createRawChunk() -> createRawChunk
    void parseFromRaw(jogamp.opengl.util.pngj.chunks.ChunkRaw) -> parseFromRaw
    void cloneDataFromRead(jogamp.opengl.util.pngj.chunks.PngChunk) -> cloneDataFromRead
    double getGamma() -> getGamma
    void setGamma(double) -> setGamma
jogamp.opengl.util.pngj.chunks.PngChunkHIST -> jogamp.opengl.util.pngj.chunks.PngChunkHIST:
    java.lang.String ID -> ID
    int[] hist -> hist
    void <init>(jogamp.opengl.util.pngj.ImageInfo) -> <init>
    jogamp.opengl.util.pngj.chunks.PngChunk$ChunkOrderingConstraint getOrderingConstraint() -> getOrderingConstraint
    void parseFromRaw(jogamp.opengl.util.pngj.chunks.ChunkRaw) -> parseFromRaw
    jogamp.opengl.util.pngj.chunks.ChunkRaw createRawChunk() -> createRawChunk
    void cloneDataFromRead(jogamp.opengl.util.pngj.chunks.PngChunk) -> cloneDataFromRead
    int[] getHist() -> getHist
    void setHist(int[]) -> setHist
jogamp.opengl.util.pngj.chunks.PngChunkICCP -> jogamp.opengl.util.pngj.chunks.PngChunkICCP:
    java.lang.String ID -> ID
    java.lang.String profileName -> profileName
    byte[] compressedProfile -> compressedProfile
    void <init>(jogamp.opengl.util.pngj.ImageInfo) -> <init>
    jogamp.opengl.util.pngj.chunks.PngChunk$ChunkOrderingConstraint getOrderingConstraint() -> getOrderingConstraint
    jogamp.opengl.util.pngj.chunks.ChunkRaw createRawChunk() -> createRawChunk
    void parseFromRaw(jogamp.opengl.util.pngj.chunks.ChunkRaw) -> parseFromRaw
    void cloneDataFromRead(jogamp.opengl.util.pngj.chunks.PngChunk) -> cloneDataFromRead
    void setProfileNameAndContent(java.lang.String,byte[]) -> setProfileNameAndContent
    void setProfileNameAndContent(java.lang.String,java.lang.String) -> setProfileNameAndContent
    java.lang.String getProfileName() -> getProfileName
    byte[] getProfile() -> getProfile
    java.lang.String getProfileAsString() -> getProfileAsString
jogamp.opengl.util.pngj.chunks.PngChunkIDAT -> jogamp.opengl.util.pngj.chunks.PngChunkIDAT:
    java.lang.String ID -> ID
    void <init>(jogamp.opengl.util.pngj.ImageInfo,int,long) -> <init>
    jogamp.opengl.util.pngj.chunks.PngChunk$ChunkOrderingConstraint getOrderingConstraint() -> getOrderingConstraint
    jogamp.opengl.util.pngj.chunks.ChunkRaw createRawChunk() -> createRawChunk
    void parseFromRaw(jogamp.opengl.util.pngj.chunks.ChunkRaw) -> parseFromRaw
    void cloneDataFromRead(jogamp.opengl.util.pngj.chunks.PngChunk) -> cloneDataFromRead
jogamp.opengl.util.pngj.chunks.PngChunkIEND -> jogamp.opengl.util.pngj.chunks.PngChunkIEND:
    java.lang.String ID -> ID
    void <init>(jogamp.opengl.util.pngj.ImageInfo) -> <init>
    jogamp.opengl.util.pngj.chunks.PngChunk$ChunkOrderingConstraint getOrderingConstraint() -> getOrderingConstraint
    jogamp.opengl.util.pngj.chunks.ChunkRaw createRawChunk() -> createRawChunk
    void parseFromRaw(jogamp.opengl.util.pngj.chunks.ChunkRaw) -> parseFromRaw
    void cloneDataFromRead(jogamp.opengl.util.pngj.chunks.PngChunk) -> cloneDataFromRead
jogamp.opengl.util.pngj.chunks.PngChunkIHDR -> jogamp.opengl.util.pngj.chunks.PngChunkIHDR:
    java.lang.String ID -> ID
    int cols -> cols
    int rows -> rows
    int bitspc -> bitspc
    int colormodel -> colormodel
    int compmeth -> compmeth
    int filmeth -> filmeth
    int interlaced -> interlaced
    void <init>(jogamp.opengl.util.pngj.ImageInfo) -> <init>
    jogamp.opengl.util.pngj.chunks.PngChunk$ChunkOrderingConstraint getOrderingConstraint() -> getOrderingConstraint
    jogamp.opengl.util.pngj.chunks.ChunkRaw createRawChunk() -> createRawChunk
    void parseFromRaw(jogamp.opengl.util.pngj.chunks.ChunkRaw) -> parseFromRaw
    void cloneDataFromRead(jogamp.opengl.util.pngj.chunks.PngChunk) -> cloneDataFromRead
    int getCols() -> getCols
    void setCols(int) -> setCols
    int getRows() -> getRows
    void setRows(int) -> setRows
    int getBitspc() -> getBitspc
    void setBitspc(int) -> setBitspc
    int getColormodel() -> getColormodel
    void setColormodel(int) -> setColormodel
    int getCompmeth() -> getCompmeth
    void setCompmeth(int) -> setCompmeth
    int getFilmeth() -> getFilmeth
    void setFilmeth(int) -> setFilmeth
    int getInterlaced() -> getInterlaced
    void setInterlaced(int) -> setInterlaced
jogamp.opengl.util.pngj.chunks.PngChunkITXT -> jogamp.opengl.util.pngj.chunks.PngChunkITXT:
    java.lang.String ID -> ID
    boolean compressed -> compressed
    java.lang.String langTag -> langTag
    java.lang.String translatedTag -> translatedTag
    void <init>(jogamp.opengl.util.pngj.ImageInfo) -> <init>
    jogamp.opengl.util.pngj.chunks.ChunkRaw createRawChunk() -> createRawChunk
    void parseFromRaw(jogamp.opengl.util.pngj.chunks.ChunkRaw) -> parseFromRaw
    void cloneDataFromRead(jogamp.opengl.util.pngj.chunks.PngChunk) -> cloneDataFromRead
    boolean isCompressed() -> isCompressed
    void setCompressed(boolean) -> setCompressed
    java.lang.String getLangtag() -> getLangtag
    void setLangtag(java.lang.String) -> setLangtag
    java.lang.String getTranslatedTag() -> getTranslatedTag
    void setTranslatedTag(java.lang.String) -> setTranslatedTag
jogamp.opengl.util.pngj.chunks.PngChunkMultiple -> jogamp.opengl.util.pngj.chunks.PngChunkMultiple:
    void <init>(java.lang.String,jogamp.opengl.util.pngj.ImageInfo) -> <init>
    boolean allowsMultiple() -> allowsMultiple
jogamp.opengl.util.pngj.chunks.PngChunkOFFS -> jogamp.opengl.util.pngj.chunks.PngChunkOFFS:
    java.lang.String ID -> ID
    long posX -> posX
    long posY -> posY
    int units -> units
    void <init>(jogamp.opengl.util.pngj.ImageInfo) -> <init>
    jogamp.opengl.util.pngj.chunks.PngChunk$ChunkOrderingConstraint getOrderingConstraint() -> getOrderingConstraint
    jogamp.opengl.util.pngj.chunks.ChunkRaw createRawChunk() -> createRawChunk
    void parseFromRaw(jogamp.opengl.util.pngj.chunks.ChunkRaw) -> parseFromRaw
    void cloneDataFromRead(jogamp.opengl.util.pngj.chunks.PngChunk) -> cloneDataFromRead
    int getUnits() -> getUnits
    void setUnits(int) -> setUnits
    long getPosX() -> getPosX
    void setPosX(long) -> setPosX
    long getPosY() -> getPosY
    void setPosY(long) -> setPosY
jogamp.opengl.util.pngj.chunks.PngChunkPHYS -> jogamp.opengl.util.pngj.chunks.PngChunkPHYS:
    java.lang.String ID -> ID
    long pixelsxUnitX -> pixelsxUnitX
    long pixelsxUnitY -> pixelsxUnitY
    int units -> units
    void <init>(jogamp.opengl.util.pngj.ImageInfo) -> <init>
    jogamp.opengl.util.pngj.chunks.PngChunk$ChunkOrderingConstraint getOrderingConstraint() -> getOrderingConstraint
    jogamp.opengl.util.pngj.chunks.ChunkRaw createRawChunk() -> createRawChunk
    void parseFromRaw(jogamp.opengl.util.pngj.chunks.ChunkRaw) -> parseFromRaw
    void cloneDataFromRead(jogamp.opengl.util.pngj.chunks.PngChunk) -> cloneDataFromRead
    long getPixelsxUnitX() -> getPixelsxUnitX
    void setPixelsxUnitX(long) -> setPixelsxUnitX
    long getPixelsxUnitY() -> getPixelsxUnitY
    void setPixelsxUnitY(long) -> setPixelsxUnitY
    int getUnits() -> getUnits
    void setUnits(int) -> setUnits
    double getAsDpi() -> getAsDpi
    double[] getAsDpi2() -> getAsDpi2
    void setAsDpi(double) -> setAsDpi
    void setAsDpi2(double,double) -> setAsDpi2
jogamp.opengl.util.pngj.chunks.PngChunkPLTE -> jogamp.opengl.util.pngj.chunks.PngChunkPLTE:
    java.lang.String ID -> ID
    int nentries -> nentries
    int[] entries -> entries
    void <init>(jogamp.opengl.util.pngj.ImageInfo) -> <init>
    jogamp.opengl.util.pngj.chunks.PngChunk$ChunkOrderingConstraint getOrderingConstraint() -> getOrderingConstraint
    jogamp.opengl.util.pngj.chunks.ChunkRaw createRawChunk() -> createRawChunk
    void parseFromRaw(jogamp.opengl.util.pngj.chunks.ChunkRaw) -> parseFromRaw
    void cloneDataFromRead(jogamp.opengl.util.pngj.chunks.PngChunk) -> cloneDataFromRead
    void setNentries(int) -> setNentries
    int getNentries() -> getNentries
    void setEntry(int,int,int,int) -> setEntry
    int getEntry(int) -> getEntry
    void getEntryRgb(int,int[]) -> getEntryRgb
    void getEntryRgb(int,int[],int) -> getEntryRgb
    int minBitDepth() -> minBitDepth
jogamp.opengl.util.pngj.chunks.PngChunkSBIT -> jogamp.opengl.util.pngj.chunks.PngChunkSBIT:
    java.lang.String ID -> ID
    int graysb -> graysb
    int alphasb -> alphasb
    int redsb -> redsb
    int greensb -> greensb
    int bluesb -> bluesb
    void <init>(jogamp.opengl.util.pngj.ImageInfo) -> <init>
    jogamp.opengl.util.pngj.chunks.PngChunk$ChunkOrderingConstraint getOrderingConstraint() -> getOrderingConstraint
    int getLen() -> getLen
    void parseFromRaw(jogamp.opengl.util.pngj.chunks.ChunkRaw) -> parseFromRaw
    jogamp.opengl.util.pngj.chunks.ChunkRaw createRawChunk() -> createRawChunk
    void cloneDataFromRead(jogamp.opengl.util.pngj.chunks.PngChunk) -> cloneDataFromRead
    void setGraysb(int) -> setGraysb
    int getGraysb() -> getGraysb
    void setAlphasb(int) -> setAlphasb
    int getAlphasb() -> getAlphasb
    void setRGB(int,int,int) -> setRGB
    int[] getRGB() -> getRGB
jogamp.opengl.util.pngj.chunks.PngChunkSPLT -> jogamp.opengl.util.pngj.chunks.PngChunkSPLT:
    java.lang.String ID -> ID
    java.lang.String palName -> palName
    int sampledepth -> sampledepth
    int[] palette -> palette
    void <init>(jogamp.opengl.util.pngj.ImageInfo) -> <init>
    jogamp.opengl.util.pngj.chunks.PngChunk$ChunkOrderingConstraint getOrderingConstraint() -> getOrderingConstraint
    jogamp.opengl.util.pngj.chunks.ChunkRaw createRawChunk() -> createRawChunk
    void parseFromRaw(jogamp.opengl.util.pngj.chunks.ChunkRaw) -> parseFromRaw
    void cloneDataFromRead(jogamp.opengl.util.pngj.chunks.PngChunk) -> cloneDataFromRead
    int getNentries() -> getNentries
    java.lang.String getPalName() -> getPalName
    void setPalName(java.lang.String) -> setPalName
    int getSampledepth() -> getSampledepth
    void setSampledepth(int) -> setSampledepth
    int[] getPalette() -> getPalette
    void setPalette(int[]) -> setPalette
jogamp.opengl.util.pngj.chunks.PngChunkSRGB -> jogamp.opengl.util.pngj.chunks.PngChunkSRGB:
    java.lang.String ID -> ID
    int RENDER_INTENT_Perceptual -> RENDER_INTENT_Perceptual
    int RENDER_INTENT_Relative_colorimetric -> RENDER_INTENT_Relative_colorimetric
    int RENDER_INTENT_Saturation -> RENDER_INTENT_Saturation
    int RENDER_INTENT_Absolute_colorimetric -> RENDER_INTENT_Absolute_colorimetric
    int intent -> intent
    void <init>(jogamp.opengl.util.pngj.ImageInfo) -> <init>
    jogamp.opengl.util.pngj.chunks.PngChunk$ChunkOrderingConstraint getOrderingConstraint() -> getOrderingConstraint
    void parseFromRaw(jogamp.opengl.util.pngj.chunks.ChunkRaw) -> parseFromRaw
    jogamp.opengl.util.pngj.chunks.ChunkRaw createRawChunk() -> createRawChunk
    void cloneDataFromRead(jogamp.opengl.util.pngj.chunks.PngChunk) -> cloneDataFromRead
    int getIntent() -> getIntent
    void setIntent(int) -> setIntent
jogamp.opengl.util.pngj.chunks.PngChunkSTER -> jogamp.opengl.util.pngj.chunks.PngChunkSTER:
    java.lang.String ID -> ID
    byte mode -> mode
    void <init>(jogamp.opengl.util.pngj.ImageInfo) -> <init>
    jogamp.opengl.util.pngj.chunks.PngChunk$ChunkOrderingConstraint getOrderingConstraint() -> getOrderingConstraint
    jogamp.opengl.util.pngj.chunks.ChunkRaw createRawChunk() -> createRawChunk
    void parseFromRaw(jogamp.opengl.util.pngj.chunks.ChunkRaw) -> parseFromRaw
    void cloneDataFromRead(jogamp.opengl.util.pngj.chunks.PngChunk) -> cloneDataFromRead
    byte getMode() -> getMode
    void setMode(byte) -> setMode
jogamp.opengl.util.pngj.chunks.PngChunkSingle -> jogamp.opengl.util.pngj.chunks.PngChunkSingle:
    void <init>(java.lang.String,jogamp.opengl.util.pngj.ImageInfo) -> <init>
    boolean allowsMultiple() -> allowsMultiple
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
jogamp.opengl.util.pngj.chunks.PngChunkSkipped -> jogamp.opengl.util.pngj.chunks.PngChunkSkipped:
    void <init>(java.lang.String,jogamp.opengl.util.pngj.ImageInfo,int) -> <init>
    jogamp.opengl.util.pngj.chunks.PngChunk$ChunkOrderingConstraint getOrderingConstraint() -> getOrderingConstraint
    jogamp.opengl.util.pngj.chunks.ChunkRaw createRawChunk() -> createRawChunk
    void parseFromRaw(jogamp.opengl.util.pngj.chunks.ChunkRaw) -> parseFromRaw
    void cloneDataFromRead(jogamp.opengl.util.pngj.chunks.PngChunk) -> cloneDataFromRead
    boolean allowsMultiple() -> allowsMultiple
jogamp.opengl.util.pngj.chunks.PngChunkTEXT -> jogamp.opengl.util.pngj.chunks.PngChunkTEXT:
    java.lang.String ID -> ID
    void <init>(jogamp.opengl.util.pngj.ImageInfo) -> <init>
    jogamp.opengl.util.pngj.chunks.ChunkRaw createRawChunk() -> createRawChunk
    void parseFromRaw(jogamp.opengl.util.pngj.chunks.ChunkRaw) -> parseFromRaw
    void cloneDataFromRead(jogamp.opengl.util.pngj.chunks.PngChunk) -> cloneDataFromRead
jogamp.opengl.util.pngj.chunks.PngChunkTIME -> jogamp.opengl.util.pngj.chunks.PngChunkTIME:
    java.lang.String ID -> ID
    int year -> year
    int mon -> mon
    int day -> day
    int hour -> hour
    int min -> min
    int sec -> sec
    void <init>(jogamp.opengl.util.pngj.ImageInfo) -> <init>
    jogamp.opengl.util.pngj.chunks.PngChunk$ChunkOrderingConstraint getOrderingConstraint() -> getOrderingConstraint
    jogamp.opengl.util.pngj.chunks.ChunkRaw createRawChunk() -> createRawChunk
    void parseFromRaw(jogamp.opengl.util.pngj.chunks.ChunkRaw) -> parseFromRaw
    void cloneDataFromRead(jogamp.opengl.util.pngj.chunks.PngChunk) -> cloneDataFromRead
    void setNow(int) -> setNow
    void setYMDHMS(int,int,int,int,int,int) -> setYMDHMS
    int[] getYMDHMS() -> getYMDHMS
    java.lang.String getAsString() -> getAsString
jogamp.opengl.util.pngj.chunks.PngChunkTRNS -> jogamp.opengl.util.pngj.chunks.PngChunkTRNS:
    java.lang.String ID -> ID
    int gray -> gray
    int red -> red
    int green -> green
    int blue -> blue
    int[] paletteAlpha -> paletteAlpha
    void <init>(jogamp.opengl.util.pngj.ImageInfo) -> <init>
    jogamp.opengl.util.pngj.chunks.PngChunk$ChunkOrderingConstraint getOrderingConstraint() -> getOrderingConstraint
    jogamp.opengl.util.pngj.chunks.ChunkRaw createRawChunk() -> createRawChunk
    void parseFromRaw(jogamp.opengl.util.pngj.chunks.ChunkRaw) -> parseFromRaw
    void cloneDataFromRead(jogamp.opengl.util.pngj.chunks.PngChunk) -> cloneDataFromRead
    void setRGB(int,int,int) -> setRGB
    int[] getRGB() -> getRGB
    void setGray(int) -> setGray
    int getGray() -> getGray
    void setPalletteAlpha(int[]) -> setPalletteAlpha
    void setIndexEntryAsTransparent(int) -> setIndexEntryAsTransparent
    int[] getPalletteAlpha() -> getPalletteAlpha
jogamp.opengl.util.pngj.chunks.PngChunkTextVar -> jogamp.opengl.util.pngj.chunks.PngChunkTextVar:
    java.lang.String key -> key
    java.lang.String val -> val
    java.lang.String KEY_Title -> KEY_Title
    java.lang.String KEY_Author -> KEY_Author
    java.lang.String KEY_Description -> KEY_Description
    java.lang.String KEY_Copyright -> KEY_Copyright
    java.lang.String KEY_Creation_Time -> KEY_Creation_Time
    java.lang.String KEY_Software -> KEY_Software
    java.lang.String KEY_Disclaimer -> KEY_Disclaimer
    java.lang.String KEY_Warning -> KEY_Warning
    java.lang.String KEY_Source -> KEY_Source
    java.lang.String KEY_Comment -> KEY_Comment
    void <init>(java.lang.String,jogamp.opengl.util.pngj.ImageInfo) -> <init>
    jogamp.opengl.util.pngj.chunks.PngChunk$ChunkOrderingConstraint getOrderingConstraint() -> getOrderingConstraint
    java.lang.String getKey() -> getKey
    java.lang.String getVal() -> getVal
    void setKeyVal(java.lang.String,java.lang.String) -> setKeyVal
jogamp.opengl.util.pngj.chunks.PngChunkUNKNOWN -> jogamp.opengl.util.pngj.chunks.PngChunkUNKNOWN:
    byte[] data -> data
    void <init>(java.lang.String,jogamp.opengl.util.pngj.ImageInfo) -> <init>
    void <init>(jogamp.opengl.util.pngj.chunks.PngChunkUNKNOWN,jogamp.opengl.util.pngj.ImageInfo) -> <init>
    jogamp.opengl.util.pngj.chunks.PngChunk$ChunkOrderingConstraint getOrderingConstraint() -> getOrderingConstraint
    jogamp.opengl.util.pngj.chunks.ChunkRaw createRawChunk() -> createRawChunk
    void parseFromRaw(jogamp.opengl.util.pngj.chunks.ChunkRaw) -> parseFromRaw
    byte[] getData() -> getData
    void setData(byte[]) -> setData
    void cloneDataFromRead(jogamp.opengl.util.pngj.chunks.PngChunk) -> cloneDataFromRead
jogamp.opengl.util.pngj.chunks.PngChunkZTXT -> jogamp.opengl.util.pngj.chunks.PngChunkZTXT:
    java.lang.String ID -> ID
    void <init>(jogamp.opengl.util.pngj.ImageInfo) -> <init>
    jogamp.opengl.util.pngj.chunks.ChunkRaw createRawChunk() -> createRawChunk
    void parseFromRaw(jogamp.opengl.util.pngj.chunks.ChunkRaw) -> parseFromRaw
    void cloneDataFromRead(jogamp.opengl.util.pngj.chunks.PngChunk) -> cloneDataFromRead
jogamp.opengl.util.pngj.chunks.PngMetadata -> jogamp.opengl.util.pngj.chunks.PngMetadata:
    jogamp.opengl.util.pngj.chunks.ChunksList chunkList -> chunkList
    boolean readonly -> readonly
    void <init>(jogamp.opengl.util.pngj.chunks.ChunksList) -> <init>
    void queueChunk(jogamp.opengl.util.pngj.chunks.PngChunk,boolean) -> queueChunk
    void queueChunk(jogamp.opengl.util.pngj.chunks.PngChunk) -> queueChunk
    jogamp.opengl.util.pngj.chunks.ChunksListForWrite getChunkListW() -> getChunkListW
    double[] getDpi() -> getDpi
    void setDpi(double) -> setDpi
    void setDpi(double,double) -> setDpi
    jogamp.opengl.util.pngj.chunks.PngChunkTIME setTimeNow(int) -> setTimeNow
    jogamp.opengl.util.pngj.chunks.PngChunkTIME setTimeNow() -> setTimeNow
    jogamp.opengl.util.pngj.chunks.PngChunkTIME setTimeYMDHMS(int,int,int,int,int,int) -> setTimeYMDHMS
    jogamp.opengl.util.pngj.chunks.PngChunkTIME getTime() -> getTime
    java.lang.String getTimeAsString() -> getTimeAsString
    jogamp.opengl.util.pngj.chunks.PngChunkTextVar setText(java.lang.String,java.lang.String,boolean,boolean) -> setText
    jogamp.opengl.util.pngj.chunks.PngChunkTextVar setText(java.lang.String,java.lang.String) -> setText
    java.util.List getTxtsForKey(java.lang.String) -> getTxtsForKey
    java.lang.String getTxtForKey(java.lang.String) -> getTxtForKey
    jogamp.opengl.util.pngj.chunks.PngChunkPLTE getPLTE() -> getPLTE
    jogamp.opengl.util.pngj.chunks.PngChunkPLTE createPLTEChunk() -> createPLTEChunk
    jogamp.opengl.util.pngj.chunks.PngChunkTRNS getTRNS() -> getTRNS
    jogamp.opengl.util.pngj.chunks.PngChunkTRNS createTRNSChunk() -> createTRNSChunk
jogamp.opengl.util.pngj.chunks.PngMetadata$1 -> jogamp.opengl.util.pngj.chunks.PngMetadata$1:
    jogamp.opengl.util.pngj.chunks.PngChunk val$c -> val$c
    jogamp.opengl.util.pngj.chunks.PngMetadata this$0 -> this$0
    void <init>(jogamp.opengl.util.pngj.chunks.PngMetadata,jogamp.opengl.util.pngj.chunks.PngChunk) -> <init>
    boolean match(jogamp.opengl.util.pngj.chunks.PngChunk) -> match
mirur.core.AbstractArray1dVisitor -> mirur.core.AbstractArray1dVisitor:
    void <init>() -> <init>
    void start(int) -> start
    void stop() -> stop
    void visit(double[]) -> visit
    void visit(long[]) -> visit
    void visit(float[]) -> visit
    void visit(int[]) -> visit
    void visit(short[]) -> visit
    void visit(char[]) -> visit
    void visit(byte[]) -> visit
    void visit(boolean[]) -> visit
    void visit(int,long) -> visit
    void visit(int,int) -> visit
    void visit(int,short) -> visit
    void visit(int,char) -> visit
    void visit(int,byte) -> visit
    void visit(int,boolean) -> visit
    void visit(int,double) -> visit
    void visit(int,float) -> visit
mirur.core.AbstractArrayElementVisitor -> mirur.core.AbstractArrayElementVisitor:
    void <init>() -> <init>
    void visit(long) -> visit
    void visit(float) -> visit
    void visit(int) -> visit
    void visit(short) -> visit
    void visit(char) -> visit
    void visit(byte) -> visit
    void visit(boolean) -> visit
mirur.core.AbstractArrayVisitor -> mirur.core.AbstractArrayVisitor:
    void <init>() -> <init>
    void visit(double[]) -> visit
    void visit(long[]) -> visit
    void visit(float[]) -> visit
    void visit(int[]) -> visit
    void visit(short[]) -> visit
    void visit(char[]) -> visit
    void visit(byte[]) -> visit
    void visit(boolean[]) -> visit
    void visit(double[][]) -> visit
    void visit(long[][]) -> visit
    void visit(float[][]) -> visit
    void visit(int[][]) -> visit
    void visit(short[][]) -> visit
    void visit(char[][]) -> visit
    void visit(byte[][]) -> visit
    void visit(boolean[][]) -> visit
    void visit(int,double[]) -> visit
    void visit(int,long[]) -> visit
    void visit(int,float[]) -> visit
    void visit(int,int[]) -> visit
    void visit(int,short[]) -> visit
    void visit(int,char[]) -> visit
    void visit(int,byte[]) -> visit
    void visit(int,boolean[]) -> visit
    void visit(int,int,double) -> visit
    void visit(int,int,long) -> visit
    void visit(int,int,float) -> visit
    void visit(int,int,int) -> visit
    void visit(int,int,short) -> visit
    void visit(int,int,char) -> visit
    void visit(int,int,byte) -> visit
    void visit(int,int,boolean) -> visit
mirur.core.Array1D -> mirur.core.Array1D:
    int getSize() -> getSize
mirur.core.Array1DImpl -> mirur.core.Array1DImpl:
    java.lang.String name -> name
    java.lang.Object data -> data
    int size -> size
    void <init>(java.lang.String,java.lang.Object) -> <init>
    java.lang.String getSignature() -> getSignature
    java.lang.Object getData() -> getData
    java.lang.String getName() -> getName
    int getNumDimensions() -> getNumDimensions
    int getSize() -> getSize
    java.lang.String toString() -> toString
mirur.core.Array1dSizeVisitor -> mirur.core.Array1dSizeVisitor:
    int size -> size
    void <init>() -> <init>
    int getSize() -> getSize
    void visit(double[]) -> visit
    void visit(long[]) -> visit
    void visit(float[]) -> visit
    void visit(int[]) -> visit
    void visit(short[]) -> visit
    void visit(char[]) -> visit
    void visit(byte[]) -> visit
    void visit(boolean[]) -> visit
mirur.core.Array1dVisitor -> mirur.core.Array1dVisitor:
    void visit(double[]) -> visit
    void visit(long[]) -> visit
    void visit(float[]) -> visit
    void visit(int[]) -> visit
    void visit(short[]) -> visit
    void visit(char[]) -> visit
    void visit(byte[]) -> visit
    void visit(boolean[]) -> visit
mirur.core.Array2D -> mirur.core.Array2D:
    boolean isJagged() -> isJagged
    int getMaxSize(int) -> getMaxSize
mirur.core.Array2DJagged -> mirur.core.Array2DJagged:
    java.lang.String name -> name
    java.lang.Object orig -> orig
    int size0 -> size0
    int minSize1 -> minSize1
    int maxSize1 -> maxSize1
    void <init>(java.lang.String,java.lang.Object) -> <init>
    java.lang.String getSignature() -> getSignature
    boolean isJagged() -> isJagged
    java.lang.Object getData() -> getData
    java.lang.String getName() -> getName
    int getNumDimensions() -> getNumDimensions
    int getMaxSize(int) -> getMaxSize
    java.lang.String toString() -> toString
mirur.core.Array2DRectangular -> mirur.core.Array2DRectangular:
    java.lang.String name -> name
    java.lang.Object orig -> orig
    int size0 -> size0
    int size1 -> size1
    void <init>(java.lang.String,java.lang.Object) -> <init>
    java.lang.String getSignature() -> getSignature
    boolean isJagged() -> isJagged
    java.lang.Object getData() -> getData
    java.lang.String getName() -> getName
    int getNumDimensions() -> getNumDimensions
    int getMaxSize(int) -> getMaxSize
    java.lang.String toString() -> toString
mirur.core.Array2dVisitor -> mirur.core.Array2dVisitor:
    void visit(double[][]) -> visit
    void visit(long[][]) -> visit
    void visit(float[][]) -> visit
    void visit(int[][]) -> visit
    void visit(short[][]) -> visit
    void visit(char[][]) -> visit
    void visit(byte[][]) -> visit
    void visit(boolean[][]) -> visit
mirur.core.ArrayEachElementVisitor -> mirur.core.ArrayEachElementVisitor:
    mirur.core.ArrayElementVisitor visitor -> visitor
    void <init>(mirur.core.ArrayElementVisitor) -> <init>
    void visit(int,int,double) -> visit
    void visit(int,int,long) -> visit
    void visit(int,int,float) -> visit
    void visit(int,int,int) -> visit
    void visit(int,int,short) -> visit
    void visit(int,int,char) -> visit
    void visit(int,int,byte) -> visit
    void visit(int,int,boolean) -> visit
mirur.core.ArrayElementVisitor -> mirur.core.ArrayElementVisitor:
    void visit(double) -> visit
    void visit(long) -> visit
    void visit(float) -> visit
    void visit(int) -> visit
    void visit(short) -> visit
    void visit(char) -> visit
    void visit(byte) -> visit
    void visit(boolean) -> visit
mirur.core.ArrayVisitor -> mirur.core.ArrayVisitor:
    void visit(double[]) -> visit
    void visit(long[]) -> visit
    void visit(float[]) -> visit
    void visit(int[]) -> visit
    void visit(short[]) -> visit
    void visit(char[]) -> visit
    void visit(byte[]) -> visit
    void visit(boolean[]) -> visit
    void visit(double[][]) -> visit
    void visit(long[][]) -> visit
    void visit(float[][]) -> visit
    void visit(int[][]) -> visit
    void visit(short[][]) -> visit
    void visit(char[][]) -> visit
    void visit(byte[][]) -> visit
    void visit(boolean[][]) -> visit
mirur.core.ElementToStringVisitor -> mirur.core.ElementToStringVisitor:
    java.lang.String text -> text
    void <init>() -> <init>
    void visit(double) -> visit
    void visit(long) -> visit
    void visit(float) -> visit
    void visit(int) -> visit
    void visit(short) -> visit
    void visit(char) -> visit
    void visit(byte) -> visit
    void visit(boolean) -> visit
    java.lang.String getText() -> getText
mirur.core.IsJaggedVisitor -> mirur.core.IsJaggedVisitor:
    int minSize1 -> minSize1
    int maxSize1 -> maxSize1
    void <init>() -> <init>
    boolean isJagged() -> isJagged
    void visit(int,double[]) -> visit
    void visit(int,long[]) -> visit
    void visit(int,float[]) -> visit
    void visit(int,int[]) -> visit
    void visit(int,short[]) -> visit
    void visit(int,char[]) -> visit
    void visit(int,byte[]) -> visit
    void visit(int,boolean[]) -> visit
    void visit(int,int,double) -> visit
    void visit(int,int,long) -> visit
    void visit(int,int,float) -> visit
    void visit(int,int,int) -> visit
    void visit(int,int,short) -> visit
    void visit(int,int,char) -> visit
    void visit(int,int,byte) -> visit
    void visit(int,int,boolean) -> visit
mirur.core.IsValidArrayVisitor -> mirur.core.IsValidArrayVisitor:
    boolean valid -> valid
    void <init>() -> <init>
    boolean isValid() -> isValid
    void invalid() -> invalid
    void visit(double[][]) -> visit
    void visit(long[][]) -> visit
    void visit(float[][]) -> visit
    void visit(int[][]) -> visit
    void visit(short[][]) -> visit
    void visit(char[][]) -> visit
    void visit(byte[][]) -> visit
    void visit(boolean[][]) -> visit
    void visit(double[]) -> visit
    void visit(long[]) -> visit
    void visit(float[]) -> visit
    void visit(int[]) -> visit
    void visit(short[]) -> visit
    void visit(char[]) -> visit
    void visit(byte[]) -> visit
    void visit(boolean[]) -> visit
mirur.core.JaggedArraySizeVisitor -> mirur.core.JaggedArraySizeVisitor:
    int size0 -> size0
    int maxSize1 -> maxSize1
    int minSize1 -> minSize1
    void <init>() -> <init>
    int getSize0() -> getSize0
    int getMinSize1() -> getMinSize1
    int getMaxSize1() -> getMaxSize1
    void visit(double[][]) -> visit
    void visit(long[][]) -> visit
    void visit(float[][]) -> visit
    void visit(int[][]) -> visit
    void visit(short[][]) -> visit
    void visit(char[][]) -> visit
    void visit(byte[][]) -> visit
    void visit(boolean[][]) -> visit
    void visit(int,double[]) -> visit
    void visit(int,long[]) -> visit
    void visit(int,float[]) -> visit
    void visit(int,int[]) -> visit
    void visit(int,short[]) -> visit
    void visit(int,char[]) -> visit
    void visit(int,byte[]) -> visit
    void visit(int,boolean[]) -> visit
    void visit(int,int,double) -> visit
    void visit(int,int,long) -> visit
    void visit(int,int,float) -> visit
    void visit(int,int,int) -> visit
    void visit(int,int,short) -> visit
    void visit(int,int,char) -> visit
    void visit(int,int,byte) -> visit
    void visit(int,int,boolean) -> visit
mirur.core.MinMaxFiniteValueVisitor -> mirur.core.MinMaxFiniteValueVisitor:
    double min -> min
    double max -> max
    void <init>() -> <init>
    double getMin() -> getMin
    double getMax() -> getMax
    void visit(double) -> visit
    void visit(long) -> visit
    void visit(float) -> visit
    void visit(int) -> visit
    void visit(short) -> visit
    void visit(char) -> visit
    void visit(byte) -> visit
    void visit(boolean) -> visit
mirur.core.NonJaggedArraySizeVisitor -> mirur.core.NonJaggedArraySizeVisitor:
    int size0 -> size0
    int size1 -> size1
    void <init>() -> <init>
    int getSize0() -> getSize0
    int getSize1() -> getSize1
    void visit(double[][]) -> visit
    void visit(long[][]) -> visit
    void visit(float[][]) -> visit
    void visit(int[][]) -> visit
    void visit(short[][]) -> visit
    void visit(char[][]) -> visit
    void visit(byte[][]) -> visit
    void visit(boolean[][]) -> visit
mirur.core.PrimitiveArray -> mirur.core.PrimitiveArray:
    java.lang.String getName() -> getName
    java.lang.String getSignature() -> getSignature
    java.lang.Object getData() -> getData
    int getNumDimensions() -> getNumDimensions
mirur.core.PrimitiveTest -> mirur.core.PrimitiveTest:
    java.io.PrintStream out -> out
    org.eclipse.core.runtime.IProgressMonitor monitor -> monitor
    java.lang.String taskName -> taskName
    void <init>() -> <init>
    boolean isPrimitiveArray1d(java.lang.Class) -> isPrimitiveArray1d
    boolean isPrimitiveArray2d(java.lang.Class) -> isPrimitiveArray2d
    boolean isPrimitiveArray(java.lang.Class) -> isPrimitiveArray
    boolean isPrimitive(java.lang.Class) -> isPrimitive
    java.lang.Class getPrimitiveComponent(java.lang.Class) -> getPrimitiveComponent
    boolean isPrimitiveName(java.lang.String) -> isPrimitiveName
    void <init>(java.io.PrintStream,java.lang.String,org.eclipse.core.runtime.IProgressMonitor) -> <init>
    void incr() -> incr
    void visit(double[]) -> visit
    void visit(float[]) -> visit
    void visit(long[]) -> visit
    void visit(int[]) -> visit
    void visit(short[]) -> visit
    void visit(char[]) -> visit
    void visit(byte[]) -> visit
    void visit(boolean[]) -> visit
mirur.core.SimpleArrayVisitor -> mirur.core.SimpleArrayVisitor:
    void <init>() -> <init>
    void visit(int,int,long) -> visit
    void visit(int,int,float) -> visit
    void visit(int,int,int) -> visit
    void visit(int,int,short) -> visit
    void visit(int,int,char) -> visit
    void visit(int,int,byte) -> visit
    void visit(int,int,boolean) -> visit
mirur.core.SingleElementVisitor -> mirur.core.SingleElementVisitor:
    int I -> I
    int J -> J
    void <init>(int,int,mirur.core.ArrayElementVisitor) -> <init>
    void visit(double[][]) -> visit
    void visit(int,double[]) -> visit
    void visit(float[][]) -> visit
    void visit(int,float[]) -> visit
    void visit(long[][]) -> visit
    void visit(int,long[]) -> visit
    void visit(int[][]) -> visit
    void visit(int,int[]) -> visit
    void visit(short[][]) -> visit
    void visit(int,short[]) -> visit
    void visit(byte[][]) -> visit
    void visit(int,byte[]) -> visit
    void visit(char[][]) -> visit
    void visit(int,char[]) -> visit
    void visit(boolean[][]) -> visit
    void visit(int,boolean[]) -> visit
mirur.core.VisitArray -> mirur.core.VisitArray:
    java.nio.FloatBuffer buf -> buf
    int minSize1 -> minSize1
    float fill -> fill
    void <init>() -> <init>
    mirur.core.ArrayElementVisitor visit(java.lang.Object,mirur.core.ArrayElementVisitor,int) -> visit
    mirur.core.ArrayElementVisitor visit(java.lang.Object,mirur.core.ArrayElementVisitor,int,int) -> visit
    mirur.core.Array1dVisitor visit1d(java.lang.Object,mirur.core.Array1dVisitor) -> visit1d
    mirur.core.Array2dVisitor visit2d(java.lang.Object,mirur.core.Array2dVisitor) -> visit2d
    mirur.core.ArrayElementVisitor visit(java.lang.Object,mirur.core.ArrayElementVisitor) -> visit
    void <init>(java.nio.FloatBuffer,int,float) -> <init>
    void add(float) -> add
    void visit(double[][]) -> visit
    void visit(long[][]) -> visit
    void visit(float[][]) -> visit
    void visit(int[][]) -> visit
    void visit(short[][]) -> visit
    void visit(char[][]) -> visit
    void visit(byte[][]) -> visit
    void visit(boolean[][]) -> visit
mirur.plugin.Activator -> mirur.plugin.Activator:
    java.lang.String PLUGIN_ID -> PLUGIN_ID
    mirur.plugin.Activator plugin -> plugin
    mirur.plugin.SelectionCache variableCache -> variableCache
    mirur.plugin.SelectionModel selectionModel -> selectionModel
    mirur.plugin.Preferences preferences -> preferences
    mirur.plugin.RemoteAgentDeployer agentDeployer -> agentDeployer
    mirur.plugin.StatisticsCollector statsCollector -> statsCollector
    void <init>() -> <init>
    void start(org.osgi.framework.BundleContext) -> start
    void stop(org.osgi.framework.BundleContext) -> stop
    mirur.plugin.Activator getDefault() -> getDefault
    org.eclipse.jface.resource.ImageDescriptor getImageDescriptor(java.lang.String) -> getImageDescriptor
    mirur.plugin.SelectionCache getVariableCache() -> getVariableCache
    mirur.plugin.SelectionModel getSelectionModel() -> getSelectionModel
    mirur.plugin.Preferences getPreferences() -> getPreferences
    mirur.plugin.RemoteAgentDeployer getAgentDeployer() -> getAgentDeployer
    mirur.plugin.StatisticsCollector getStatistics() -> getStatistics
    org.eclipse.swt.graphics.Image getCachedImage(java.lang.String) -> getCachedImage
mirur.plugin.ArraySelectListener -> mirur.plugin.ArraySelectListener:
    void arraySelected(mirur.core.PrimitiveArray) -> arraySelected
mirur.plugin.CopyJDIArrayJob -> mirur.plugin.CopyJDIArrayJob:
    java.lang.String name -> name
    org.eclipse.debug.core.model.IVariable var -> var
    org.eclipse.jdt.debug.core.IJavaStackFrame frame -> frame
    void <init>(java.lang.String,org.eclipse.debug.core.model.IVariable,org.eclipse.jdt.debug.core.IJavaStackFrame) -> <init>
    org.eclipse.core.runtime.IStatus run(org.eclipse.core.runtime.IProgressMonitor) -> run
    java.lang.Object toPrimitiveArray(java.lang.String,org.eclipse.debug.core.model.IIndexedValue) -> toPrimitiveArray
    java.lang.Object toPrimitiveArray2d(java.lang.String,org.eclipse.jdt.debug.core.IJavaArray) -> toPrimitiveArray2d
    java.lang.Object toPrimitiveArray1d(java.lang.String,org.eclipse.jdt.debug.core.IJavaArray) -> toPrimitiveArray1d
    java.lang.Object toPrimitiveArray2d(java.lang.String,org.eclipse.debug.core.model.IIndexedValue) -> toPrimitiveArray2d
    java.lang.Object toPrimitiveArray1d(java.lang.String,org.eclipse.debug.core.model.IIndexedValue) -> toPrimitiveArray1d
mirur.plugin.Icons -> mirur.plugin.Icons:
    java.lang.String RESET_PATH -> RESET_PATH
    java.lang.String UNDO_PATH -> UNDO_PATH
    java.lang.String NEWVIEW_PATH -> NEWVIEW_PATH
    java.lang.String CONFIG_PATH -> CONFIG_PATH
    java.lang.String REFRESH_PATH -> REFRESH_PATH
    java.lang.String MIRUR_PATH -> MIRUR_PATH
    java.lang.String MIRUR_64_PATH -> MIRUR_64_PATH
    long time -> time
    java.lang.String text -> text
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
mirur.plugin.InstallMirurAgentJob -> mirur.plugin.InstallMirurAgentJob:
    org.eclipse.jdt.debug.core.IJavaStackFrame frame -> frame
    void <init>(org.eclipse.jdt.debug.core.IJavaStackFrame) -> <init>
    org.eclipse.core.runtime.IStatus run(org.eclipse.core.runtime.IProgressMonitor) -> run
mirur.plugin.MirurPreferencesPage -> mirur.plugin.MirurPreferencesPage:
    java.lang.String ID -> ID
    void <init>() -> <init>
    void createFieldEditors() -> createFieldEditors
    void init(org.eclipse.ui.IWorkbench) -> init
mirur.plugin.PluginLogSupport -> mirur.plugin.PluginLogSupport:
    java.util.logging.Level LEVEL -> LEVEL
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void initializeLogger() -> initializeLogger
    void error(java.lang.Class,java.lang.String,java.lang.Throwable) -> error
mirur.plugin.PluginLogSupport$1 -> mirur.plugin.PluginLogSupport$1:
    com.metsci.glimpse.util.logging.format.Formatter formatter -> formatter
    org.eclipse.core.runtime.ILog rcpLogger -> rcpLogger
    void <init>() -> <init>
    void publish(java.util.logging.LogRecord) -> publish
    void flush() -> flush
    void close() -> close
mirur.plugin.Preferences -> mirur.plugin.Preferences:
    java.util.logging.Logger LOGGER -> LOGGER
    java.lang.String PREFSUFFIX_SYNC_WITH_VARIABLES_VIEW -> PREFSUFFIX_SYNC_WITH_VARIABLES_VIEW
    java.lang.String PREF_SUBMIT_STATISTICS -> PREF_SUBMIT_STATISTICS
    org.eclipse.core.runtime.preferences.IEclipsePreferences prefNode -> prefNode
    java.util.List changeListeners -> changeListeners
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.core.runtime.preferences.IEclipsePreferences) -> <init>
    void addChangeListener(java.lang.Runnable) -> addChangeListener
    boolean doSyncWithVariablesView(java.lang.String) -> doSyncWithVariablesView
    void setSyncWithVariablesView(java.lang.String,boolean) -> setSyncWithVariablesView
    boolean doSubmitStatistics() -> doSubmitStatistics
    void setSubmitStatistics(boolean) -> setSubmitStatistics
    void flush() -> flush
    java.util.List access$0(mirur.plugin.Preferences) -> access$0
mirur.plugin.Preferences$1 -> mirur.plugin.Preferences$1:
    mirur.plugin.Preferences this$0 -> this$0
    void <init>(mirur.plugin.Preferences) -> <init>
    void preferenceChange(org.eclipse.core.runtime.preferences.IEclipsePreferences$PreferenceChangeEvent) -> preferenceChange
mirur.plugin.PreferencesInitializer -> mirur.plugin.PreferencesInitializer:
    void <init>() -> <init>
    void initializeDefaultPreferences() -> initializeDefaultPreferences
mirur.plugin.ReceiveArrayJob -> mirur.plugin.ReceiveArrayJob:
    java.util.logging.Logger LOGGER -> LOGGER
    java.lang.String name -> name
    org.eclipse.jdt.debug.core.IJavaVariable var -> var
    org.eclipse.jdt.debug.core.IJavaStackFrame frame -> frame
    org.eclipse.jdt.debug.core.IJavaClassType agentType -> agentType
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,org.eclipse.jdt.debug.core.IJavaVariable,org.eclipse.jdt.debug.core.IJavaStackFrame,org.eclipse.jdt.debug.core.IJavaClassType) -> <init>
    org.eclipse.core.runtime.IStatus run(org.eclipse.core.runtime.IProgressMonitor) -> run
    void invokeAgent(org.eclipse.jdt.debug.core.IJavaClassType) -> invokeAgent
mirur.plugin.ReceiveArrayJob$IncomingConnectionTask -> mirur.plugin.ReceiveArrayJob$IncomingConnectionTask:
    java.util.concurrent.CyclicBarrier barrier -> barrier
    java.net.ServerSocket serverSocket -> serverSocket
    mirur.plugin.ReceiveArrayJob this$0 -> this$0
    void <init>(mirur.plugin.ReceiveArrayJob,java.util.concurrent.CyclicBarrier,java.net.ServerSocket) -> <init>
    java.lang.Object call() -> call
mirur.plugin.RemoteAgentDeployer -> mirur.plugin.RemoteAgentDeployer:
    java.util.logging.Logger LOGGER -> LOGGER
    java.io.File agentClassesDir -> agentClassesDir
    java.util.Map cache -> cache
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    org.eclipse.jdt.debug.core.IJavaClassType install(org.eclipse.jdt.debug.core.IJavaDebugTarget,org.eclipse.jdt.debug.core.IJavaThread) -> install
    org.eclipse.jdt.debug.core.IJavaClassType getAgentClass(org.eclipse.jdt.debug.core.IJavaDebugTarget) -> getAgentClass
    boolean isAgentInstallAttempted(org.eclipse.jdt.debug.core.IJavaDebugTarget) -> isAgentInstallAttempted
    boolean isAgentInstallFailed(org.eclipse.jdt.debug.core.IJavaDebugTarget) -> isAgentInstallFailed
    boolean isAgentInstalled(org.eclipse.jdt.debug.core.IJavaDebugTarget) -> isAgentInstalled
    void clear(org.eclipse.jdt.debug.core.IJavaDebugTarget) -> clear
    org.eclipse.jdt.debug.core.IJavaClassType loadRemoteAgent(org.eclipse.jdt.debug.core.IJavaDebugTarget,org.eclipse.jdt.debug.core.IJavaThread) -> loadRemoteAgent
    java.lang.String[] getAgentClasses() -> getAgentClasses
    java.io.File explodeAgentClasses() -> explodeAgentClasses
    void writeClass(java.lang.String,java.io.File) -> writeClass
    boolean isValidJVMVersion(java.lang.String) -> isValidJVMVersion
    org.eclipse.jdt.debug.core.IJavaClassType loadAgentClass(org.eclipse.jdt.debug.core.IJavaDebugTarget,org.eclipse.jdt.debug.core.IJavaThread,java.io.File,java.lang.String) -> loadAgentClass
    java.io.File access$0(mirur.plugin.RemoteAgentDeployer) -> access$0
    org.eclipse.jdt.debug.core.IJavaClassType access$1(mirur.plugin.RemoteAgentDeployer,org.eclipse.jdt.debug.core.IJavaDebugTarget,org.eclipse.jdt.debug.core.IJavaThread,java.io.File,java.lang.String) -> access$1
mirur.plugin.RemoteAgentDeployer$LoadAgentClasses -> mirur.plugin.RemoteAgentDeployer$LoadAgentClasses:
    org.eclipse.jdt.debug.core.IJavaDebugTarget target -> target
    org.eclipse.jdt.debug.core.IJavaThread thread -> thread
    java.lang.String agentClassName -> agentClassName
    mirur.plugin.RemoteAgentDeployer this$0 -> this$0
    void <init>(mirur.plugin.RemoteAgentDeployer,org.eclipse.jdt.debug.core.IJavaDebugTarget,org.eclipse.jdt.debug.core.IJavaThread,java.lang.String) -> <init>
    org.eclipse.jdt.debug.core.IJavaClassType call() -> call
    java.lang.Object call() -> call
mirur.plugin.SelectListenerToggle -> mirur.plugin.SelectListenerToggle:
    java.lang.String SELECTED_KEY -> SELECTED_KEY
    java.lang.String partID -> partID
    org.eclipse.ui.part.ViewPart part -> part
    mirur.plugin.ArraySelectListener listener -> listener
    void <init>(java.lang.String,org.eclipse.ui.part.ViewPart,mirur.plugin.ArraySelectListener) -> <init>
    void propertyChange(org.eclipse.jface.util.PropertyChangeEvent) -> propertyChange
    void partActivated(org.eclipse.ui.IWorkbenchPartReference) -> partActivated
    void partDeactivated(org.eclipse.ui.IWorkbenchPartReference) -> partDeactivated
    void partBroughtToTop(org.eclipse.ui.IWorkbenchPartReference) -> partBroughtToTop
    void partClosed(org.eclipse.ui.IWorkbenchPartReference) -> partClosed
    void partOpened(org.eclipse.ui.IWorkbenchPartReference) -> partOpened
    void partHidden(org.eclipse.ui.IWorkbenchPartReference) -> partHidden
    void partVisible(org.eclipse.ui.IWorkbenchPartReference) -> partVisible
    void partInputChanged(org.eclipse.ui.IWorkbenchPartReference) -> partInputChanged
    void add(boolean) -> add
    void remove() -> remove
    void run() -> run
    java.lang.String access$0(mirur.plugin.SelectListenerToggle) -> access$0
mirur.plugin.SelectListenerToggle$1 -> mirur.plugin.SelectListenerToggle$1:
    mirur.plugin.SelectListenerToggle this$0 -> this$0
    void <init>(mirur.plugin.SelectListenerToggle) -> <init>
    void run() -> run
mirur.plugin.SelectStrategyJob -> mirur.plugin.SelectStrategyJob:
    java.lang.String name -> name
    org.eclipse.debug.core.model.IVariable var -> var
    org.eclipse.jdt.debug.core.IJavaStackFrame frame -> frame
    void <init>(java.lang.String,org.eclipse.debug.core.model.IVariable,org.eclipse.jdt.debug.core.IJavaStackFrame) -> <init>
    org.eclipse.core.runtime.IStatus run(org.eclipse.core.runtime.IProgressMonitor) -> run
    void execute() -> execute
mirur.plugin.SelectionCache -> mirur.plugin.SelectionCache:
    java.util.Map cache -> cache
    void <init>() -> <init>
    void clear() -> clear
    boolean contains(org.eclipse.debug.core.model.IVariable,org.eclipse.jdt.debug.core.IJavaStackFrame) -> contains
    mirur.core.PrimitiveArray getArray(org.eclipse.debug.core.model.IVariable,org.eclipse.jdt.debug.core.IJavaStackFrame) -> getArray
    void put(org.eclipse.debug.core.model.IVariable,org.eclipse.jdt.debug.core.IJavaStackFrame,mirur.core.PrimitiveArray) -> put
mirur.plugin.SelectionCache$Key -> mirur.plugin.SelectionCache$Key:
    org.eclipse.debug.core.model.IVariable var -> var
    org.eclipse.jdt.debug.core.IJavaStackFrame frame -> frame
    void <init>(org.eclipse.debug.core.model.IVariable,org.eclipse.jdt.debug.core.IJavaStackFrame) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
mirur.plugin.SelectionModel -> mirur.plugin.SelectionModel:
    mirur.plugin.VariableSelectListener varListener -> varListener
    boolean isVarListenerAttached -> isVarListenerAttached
    java.util.List arrayListeners -> arrayListeners
    mirur.core.PrimitiveArray lastSelected -> lastSelected
    void <init>() -> <init>
    void addArrayListener(org.eclipse.ui.IViewPart,mirur.plugin.ArraySelectListener) -> addArrayListener
    void removeArrayListener(org.eclipse.ui.IViewPart,mirur.plugin.ArraySelectListener) -> removeArrayListener
    void notifySelectedAsync(mirur.plugin.ArraySelectListener,mirur.core.PrimitiveArray) -> notifySelectedAsync
    void select(mirur.core.PrimitiveArray) -> select
    mirur.core.PrimitiveArray getActiveSelected() -> getActiveSelected
mirur.plugin.SelectionModel$1 -> mirur.plugin.SelectionModel$1:
    mirur.plugin.SelectionModel this$0 -> this$0
    mirur.plugin.ArraySelectListener val$listener -> val$listener
    mirur.core.PrimitiveArray val$array -> val$array
    void <init>(mirur.plugin.SelectionModel,mirur.plugin.ArraySelectListener,mirur.core.PrimitiveArray) -> <init>
    void run() -> run
mirur.plugin.StatisticsCollector -> mirur.plugin.StatisticsCollector:
    java.util.logging.Logger LOGGER -> LOGGER
    int MAX_LOG_SIZE -> MAX_LOG_SIZE
    java.util.List log -> log
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void log(java.lang.String) -> log
    void send() -> send
    void started() -> started
    void transformedViaAgent(java.lang.String) -> transformedViaAgent
    void receivedFromTarget(mirur.core.PrimitiveArray) -> receivedFromTarget
    void selected(mirur.core.PrimitiveArray) -> selected
    void shuttingDown() -> shuttingDown
    java.util.logging.Logger access$0() -> access$0
mirur.plugin.StatisticsCollector$StatsEntry -> mirur.plugin.StatisticsCollector$StatsEntry:
    long time -> time
    java.lang.String text -> text
    void <init>(java.lang.String) -> <init>
mirur.plugin.StatisticsCollector$SubmitStatsJob -> mirur.plugin.StatisticsCollector$SubmitStatsJob:
    java.util.List log -> log
    void <init>(java.util.List) -> <init>
    org.eclipse.core.runtime.IStatus run(org.eclipse.core.runtime.IProgressMonitor) -> run
    java.lang.String buildBody() -> buildBody
mirur.plugin.SubmitArrayToUIJob -> mirur.plugin.SubmitArrayToUIJob:
    java.lang.String name -> name
    org.eclipse.debug.core.model.IVariable var -> var
    org.eclipse.jdt.debug.core.IJavaStackFrame frame -> frame
    java.lang.Object arrayObject -> arrayObject
    void <init>(java.lang.String,org.eclipse.debug.core.model.IVariable,org.eclipse.jdt.debug.core.IJavaStackFrame,java.lang.Object) -> <init>
    org.eclipse.core.runtime.IStatus run(org.eclipse.core.runtime.IProgressMonitor) -> run
mirur.plugin.VariableSelectListener -> mirur.plugin.VariableSelectListener:
    java.util.logging.Logger LOGGER -> LOGGER
    java.lang.String VARIABLE_VIEW_ID -> VARIABLE_VIEW_ID
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void install(org.eclipse.ui.IWorkbenchWindow) -> install
    void uninstall(org.eclipse.ui.IWorkbenchWindow) -> uninstall
    void update() -> update
    java.lang.Object extract(org.eclipse.jface.viewers.ISelection,java.lang.Class) -> extract
    java.lang.String getVariableName(org.eclipse.jface.viewers.TreePath) -> getVariableName
    boolean isValidRefType(org.eclipse.debug.core.model.IVariable) -> isValidRefType
    void selectionChanged(org.eclipse.ui.IWorkbenchPart,org.eclipse.jface.viewers.ISelection) -> selectionChanged
    void debugContextChanged(org.eclipse.debug.ui.contexts.DebugContextEvent) -> debugContextChanged
    void handleDebugEvents(org.eclipse.debug.core.DebugEvent[]) -> handleDebugEvents
    void forceUpdateNotify() -> forceUpdateNotify
mirur.plugin.VariableTransferException -> mirur.plugin.VariableTransferException:
    java.lang.String ERR_Invalid_Jvm_Version -> ERR_Invalid_Jvm_Version
    java.lang.String ERR_Could_Not_Write_Agent_Classes -> ERR_Could_Not_Write_Agent_Classes
    java.lang.String ERR_Could_Not_Load_Agent_In_Classloader -> ERR_Could_Not_Load_Agent_In_Classloader
    java.lang.String ERR_Exception_in_Agent_Install -> ERR_Exception_in_Agent_Install
    java.lang.String ERR_URLClassLoader_Not_Found -> ERR_URLClassLoader_Not_Found
    void <init>(java.lang.String,java.lang.Throwable,boolean,boolean) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Throwable) -> <init>
mirur.plugin.painterview.BugFixNewtCanvasSWT -> mirur.plugin.painterview.BugFixNewtCanvasSWT:
    void <init>(org.eclipse.swt.widgets.Composite,int,com.jogamp.newt.Window) -> <init>
    org.eclipse.swt.graphics.Rectangle getClientArea() -> getClientArea
mirur.plugin.painterview.BugFixNewtSwtGlimpseCanvas -> mirur.plugin.painterview.BugFixNewtSwtGlimpseCanvas:
    void <init>(org.eclipse.swt.widgets.Composite,javax.media.opengl.GLProfile,int) -> <init>
    void init(org.eclipse.swt.widgets.Composite,javax.media.opengl.GLProfile,javax.media.opengl.GLContext,int) -> init
mirur.plugin.painterview.GlimpseArrayView -> mirur.plugin.painterview.GlimpseArrayView:
    java.lang.String ID -> ID
    mirur.plugin.painterview.ResetAxesAction resetAction -> resetAction
    mirur.plugin.painterview.ViewMenuAction viewMenuAction -> viewMenuAction
    mirur.plugin.SelectListenerToggle selectListenerToggle -> selectListenerToggle
    com.metsci.glimpse.support.settings.LookAndFeel laf -> laf
    com.metsci.glimpse.swt.canvas.NewtSwtGlimpseCanvas canvas -> canvas
    com.jogamp.opengl.util.AnimatorBase animator -> animator
    mirur.plugins.InvalidPlaceholderView invalidPlaceholder -> invalidPlaceholder
    mirur.plugins.MirurView currentPlugin -> currentPlugin
    mirur.core.PrimitiveArray currentData -> currentData
    mirur.plugins.DataPainter currentPainter -> currentPainter
    void <init>() -> <init>
    void createPartControl(org.eclipse.swt.widgets.Composite) -> createPartControl
    void setFocus() -> setFocus
    void dispose() -> dispose
    void arraySelected(mirur.core.PrimitiveArray) -> arraySelected
    void updatePainter(mirur.plugins.MirurView) -> updatePainter
    void resetAxes() -> resetAxes
    void refreshDataAndPainter() -> refreshDataAndPainter
    void access$0(mirur.plugin.painterview.GlimpseArrayView,mirur.plugins.MirurView) -> access$0
    mirur.core.PrimitiveArray access$1(mirur.plugin.painterview.GlimpseArrayView) -> access$1
    void access$2(mirur.plugin.painterview.GlimpseArrayView) -> access$2
    mirur.plugins.DataPainter access$3(mirur.plugin.painterview.GlimpseArrayView) -> access$3
mirur.plugin.painterview.GlimpseArrayView$1 -> mirur.plugin.painterview.GlimpseArrayView$1:
    mirur.plugin.painterview.GlimpseArrayView this$0 -> this$0
    void <init>(mirur.plugin.painterview.GlimpseArrayView) -> <init>
    void setPainter(mirur.plugins.MirurView) -> setPainter
    mirur.core.PrimitiveArray getActiveData() -> getActiveData
mirur.plugin.painterview.GlimpseArrayView$2 -> mirur.plugin.painterview.GlimpseArrayView$2:
    mirur.plugin.painterview.GlimpseArrayView this$0 -> this$0
    void <init>(mirur.plugin.painterview.GlimpseArrayView) -> <init>
    void run() -> run
mirur.plugin.painterview.GlimpseArrayView$3 -> mirur.plugin.painterview.GlimpseArrayView$3:
    mirur.plugin.painterview.GlimpseArrayView this$0 -> this$0
    void <init>(mirur.plugin.painterview.GlimpseArrayView) -> <init>
    org.eclipse.swt.widgets.Menu getMenu(org.eclipse.swt.widgets.Menu) -> getMenu
mirur.plugin.painterview.MirurLAF -> mirur.plugin.painterview.MirurLAF:
    java.lang.String DATA_COLOR -> DATA_COLOR
    java.lang.String DATA_BORDER_COLOR -> DATA_BORDER_COLOR
    void <init>() -> <init>
mirur.plugin.painterview.RequestNewViewAction -> mirur.plugin.painterview.RequestNewViewAction:
    java.util.logging.Logger LOGGER -> LOGGER
    java.lang.String TEMPLATE -> TEMPLATE
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void runWithEvent(org.eclipse.swt.widgets.Event) -> runWithEvent
    java.util.logging.Logger access$0() -> access$0
mirur.plugin.painterview.RequestNewViewAction$ScrollableDialog -> mirur.plugin.painterview.RequestNewViewAction$ScrollableDialog:
    org.eclipse.swt.widgets.Text textArea -> textArea
    java.lang.String scrollableText -> scrollableText
    void <init>(org.eclipse.swt.widgets.Shell,java.lang.String) -> <init>
    org.eclipse.swt.widgets.Control createDialogArea(org.eclipse.swt.widgets.Composite) -> createDialogArea
    void createButtonsForButtonBar(org.eclipse.swt.widgets.Composite) -> createButtonsForButtonBar
    void buttonPressed(int) -> buttonPressed
    boolean isResizable() -> isResizable
mirur.plugin.painterview.RequestNewViewAction$SubmitNewViewIdeaJob -> mirur.plugin.painterview.RequestNewViewAction$SubmitNewViewIdeaJob:
    java.lang.String text -> text
    void <init>(java.lang.String) -> <init>
    org.eclipse.core.runtime.IStatus run(org.eclipse.core.runtime.IProgressMonitor) -> run
    java.lang.String buildBody() -> buildBody
mirur.plugin.painterview.ResetAxesAction -> mirur.plugin.painterview.ResetAxesAction:
    void <init>() -> <init>
mirur.plugin.painterview.SelectViewAction -> mirur.plugin.painterview.SelectViewAction:
    void <init>() -> <init>
    void dispose() -> dispose
    void runWithEvent(org.eclipse.swt.widgets.Event) -> runWithEvent
    org.eclipse.swt.widgets.Menu getMenu(org.eclipse.swt.widgets.Control) -> getMenu
    org.eclipse.swt.widgets.Menu getMenu(org.eclipse.swt.widgets.Menu) -> getMenu
    void select(mirur.plugins.MirurView) -> select
    void setPainter(mirur.plugins.MirurView) -> setPainter
    mirur.core.PrimitiveArray getActiveData() -> getActiveData
    void access$0(mirur.plugin.painterview.SelectViewAction,mirur.plugins.MirurView) -> access$0
mirur.plugin.painterview.SelectViewAction$1 -> mirur.plugin.painterview.SelectViewAction$1:
    mirur.plugin.painterview.SelectViewAction this$0 -> this$0
    mirur.plugins.MirurView val$plugin -> val$plugin
    void <init>(mirur.plugin.painterview.SelectViewAction,java.lang.String,org.eclipse.jface.resource.ImageDescriptor,mirur.plugins.MirurView) -> <init>
    void run() -> run
mirur.plugin.painterview.ViewMenuAction -> mirur.plugin.painterview.ViewMenuAction:
    void <init>() -> <init>
    void runWithEvent(org.eclipse.swt.widgets.Event) -> runWithEvent
    void dispose() -> dispose
    org.eclipse.swt.widgets.Menu getMenu(org.eclipse.swt.widgets.Control) -> getMenu
mirur.plugin.statsview.Array1dToCsvVisitor -> mirur.plugin.statsview.Array1dToCsvVisitor:
    java.io.PrintStream out -> out
    org.eclipse.core.runtime.IProgressMonitor monitor -> monitor
    java.lang.String taskName -> taskName
    void <init>(java.io.PrintStream,java.lang.String,org.eclipse.core.runtime.IProgressMonitor) -> <init>
    void incr() -> incr
    void visit(double[]) -> visit
    void visit(float[]) -> visit
    void visit(long[]) -> visit
    void visit(int[]) -> visit
    void visit(short[]) -> visit
    void visit(char[]) -> visit
    void visit(byte[]) -> visit
    void visit(boolean[]) -> visit
mirur.plugin.statsview.Array2dToCsvVisitor -> mirur.plugin.statsview.Array2dToCsvVisitor:
    java.io.PrintStream out -> out
    org.eclipse.core.runtime.IProgressMonitor monitor -> monitor
    java.lang.String taskName -> taskName
    void <init>(java.io.PrintStream,java.lang.String,org.eclipse.core.runtime.IProgressMonitor) -> <init>
    void incr() -> incr
    void visit(double[][]) -> visit
    void visit(float[][]) -> visit
    void visit(long[][]) -> visit
    void visit(int[][]) -> visit
    void visit(short[][]) -> visit
    void visit(char[][]) -> visit
    void visit(byte[][]) -> visit
    void visit(boolean[][]) -> visit
    void visit(int,double[]) -> visit
    void visit(int,float[]) -> visit
    void visit(int,long[]) -> visit
    void visit(int,int[]) -> visit
    void visit(int,short[]) -> visit
    void visit(int,char[]) -> visit
    void visit(int,byte[]) -> visit
    void visit(int,boolean[]) -> visit
    void visit(int,int,double) -> visit
    void visit(int,int,long) -> visit
    void visit(int,int,float) -> visit
    void visit(int,int,int) -> visit
    void visit(int,int,short) -> visit
    void visit(int,int,char) -> visit
    void visit(int,int,byte) -> visit
    void visit(int,int,boolean) -> visit
mirur.plugin.statsview.ArrayStatisticVisitor -> mirur.plugin.statsview.ArrayStatisticVisitor:
    java.lang.String getName() -> getName
    java.lang.String getStatistic() -> getStatistic
mirur.plugin.statsview.ArrayStatisticVisitor$AbstractStatisticVisitor -> mirur.plugin.statsview.ArrayStatisticVisitor$AbstractStatisticVisitor:
    java.lang.String name -> name
    boolean isValid -> isValid
    void <init>(java.lang.String) -> <init>
    boolean isFinite(double) -> isFinite
    java.lang.String getName() -> getName
    java.lang.String getStatistic() -> getStatistic
    java.lang.String getValue() -> getValue
mirur.plugin.statsview.ArrayStatisticVisitor$CountFalse -> mirur.plugin.statsview.ArrayStatisticVisitor$CountFalse:
    int count -> count
    void <init>() -> <init>
    void visit(boolean) -> visit
    void visit(double) -> visit
    java.lang.String getName() -> getName
    java.lang.String getStatistic() -> getStatistic
mirur.plugin.statsview.ArrayStatisticVisitor$CountNaN -> mirur.plugin.statsview.ArrayStatisticVisitor$CountNaN:
    int count -> count
    void <init>() -> <init>
    void visit(double) -> visit
    java.lang.String getValue() -> getValue
mirur.plugin.statsview.ArrayStatisticVisitor$CountNegInf -> mirur.plugin.statsview.ArrayStatisticVisitor$CountNegInf:
    int count -> count
    void <init>() -> <init>
    void visit(double) -> visit
    java.lang.String getValue() -> getValue
mirur.plugin.statsview.ArrayStatisticVisitor$CountNegative -> mirur.plugin.statsview.ArrayStatisticVisitor$CountNegative:
    int count -> count
    void <init>() -> <init>
    java.lang.String getValue() -> getValue
    void visit(double) -> visit
mirur.plugin.statsview.ArrayStatisticVisitor$CountPosInf -> mirur.plugin.statsview.ArrayStatisticVisitor$CountPosInf:
    int count -> count
    void <init>() -> <init>
    void visit(double) -> visit
    java.lang.String getValue() -> getValue
mirur.plugin.statsview.ArrayStatisticVisitor$CountPositive -> mirur.plugin.statsview.ArrayStatisticVisitor$CountPositive:
    int count -> count
    void <init>() -> <init>
    java.lang.String getValue() -> getValue
    void visit(double) -> visit
mirur.plugin.statsview.ArrayStatisticVisitor$CountTrue -> mirur.plugin.statsview.ArrayStatisticVisitor$CountTrue:
    int count -> count
    void <init>() -> <init>
    void visit(boolean) -> visit
    void visit(double) -> visit
    java.lang.String getName() -> getName
    java.lang.String getStatistic() -> getStatistic
mirur.plugin.statsview.ArrayStatisticVisitor$CountZero -> mirur.plugin.statsview.ArrayStatisticVisitor$CountZero:
    int count -> count
    void <init>() -> <init>
    java.lang.String getValue() -> getValue
    void visit(double) -> visit
mirur.plugin.statsview.ArrayStatisticVisitor$Max -> mirur.plugin.statsview.ArrayStatisticVisitor$Max:
    double max -> max
    double finiteMax -> finiteMax
    void <init>() -> <init>
    void visit(double) -> visit
    java.lang.String getValue() -> getValue
mirur.plugin.statsview.ArrayStatisticVisitor$Mean -> mirur.plugin.statsview.ArrayStatisticVisitor$Mean:
    double sum -> sum
    int n -> n
    void <init>() -> <init>
    void visit(double) -> visit
    java.lang.String getValue() -> getValue
mirur.plugin.statsview.ArrayStatisticVisitor$Min -> mirur.plugin.statsview.ArrayStatisticVisitor$Min:
    double min -> min
    double finiteMin -> finiteMin
    void <init>() -> <init>
    void visit(double) -> visit
    java.lang.String getValue() -> getValue
mirur.plugin.statsview.ArrayStatisticVisitor$Size -> mirur.plugin.statsview.ArrayStatisticVisitor$Size:
    int count -> count
    void <init>() -> <init>
    void visit(double) -> visit
    java.lang.String getValue() -> getValue
mirur.plugin.statsview.ArrayStatisticVisitor$Sum -> mirur.plugin.statsview.ArrayStatisticVisitor$Sum:
    double sum -> sum
    void <init>() -> <init>
    void visit(double) -> visit
    java.lang.String getValue() -> getValue
mirur.plugin.statsview.ArrayStatisticVisitor$SumLong -> mirur.plugin.statsview.ArrayStatisticVisitor$SumLong:
    long sum -> sum
    void <init>() -> <init>
    java.lang.String getName() -> getName
    java.lang.String getStatistic() -> getStatistic
    void visit(long) -> visit
    void visit(boolean) -> visit
    void visit(double) -> visit
    void visit(float) -> visit
    void visit(int) -> visit
    void visit(short) -> visit
    void visit(char) -> visit
    void visit(byte) -> visit
mirur.plugin.statsview.ArrayStatisticVisitor$Variance -> mirur.plugin.statsview.ArrayStatisticVisitor$Variance:
    int n -> n
    double sum -> sum
    double sumSq -> sumSq
    void <init>() -> <init>
    void visit(double) -> visit
    java.lang.String getValue() -> getValue
mirur.plugin.statsview.ArrayStatsView -> mirur.plugin.statsview.ArrayStatsView:
    java.lang.String ID -> ID
    mirur.plugin.SelectListenerToggle selectListenerToggle -> selectListenerToggle
    mirur.plugin.statsview.SaveArrayToFileAction saveArrayAction -> saveArrayAction
    org.eclipse.ui.part.PageBook book -> book
    mirur.plugin.statsview.StatisticsPage statsPage -> statsPage
    org.eclipse.ui.part.Page activePage -> activePage
    void <init>() -> <init>
    void createPartControl(org.eclipse.swt.widgets.Composite) -> createPartControl
    void initPage(org.eclipse.ui.part.Page) -> initPage
    void showPage(org.eclipse.ui.part.Page) -> showPage
    void setFocus() -> setFocus
    void dispose() -> dispose
    void arraySelected(mirur.core.PrimitiveArray) -> arraySelected
mirur.plugin.statsview.SaveArrayToFileAction -> mirur.plugin.statsview.SaveArrayToFileAction:
    void <init>() -> <init>
    void run() -> run
mirur.plugin.statsview.SaveArrayToFileJob -> mirur.plugin.statsview.SaveArrayToFileJob:
    mirur.core.PrimitiveArray array -> array
    java.io.File dest -> dest
    void <init>(mirur.core.PrimitiveArray,java.io.File) -> <init>
    org.eclipse.core.runtime.IStatus run(org.eclipse.core.runtime.IProgressMonitor) -> run
mirur.plugin.statsview.StatisticComputeJob -> mirur.plugin.statsview.StatisticComputeJob:
    mirur.core.PrimitiveArray array -> array
    mirur.plugin.statsview.ArrayStatisticVisitor statistic -> statistic
    void <init>(mirur.core.PrimitiveArray,mirur.plugin.statsview.ArrayStatisticVisitor) -> <init>
    org.eclipse.core.runtime.IStatus run(org.eclipse.core.runtime.IProgressMonitor) -> run
    void finished(java.lang.String) -> finished
mirur.plugin.statsview.StatisticsPage -> mirur.plugin.statsview.StatisticsPage:
    org.eclipse.jface.viewers.TableViewer table -> table
    void <init>() -> <init>
    void createControl(org.eclipse.swt.widgets.Composite) -> createControl
    org.eclipse.swt.widgets.Control getControl() -> getControl
    void setFocus() -> setFocus
    void setInput(mirur.core.PrimitiveArray) -> setInput
    void computeStats(mirur.core.PrimitiveArray,java.util.List) -> computeStats
    void updateTable(java.lang.String[][]) -> updateTable
    java.util.List getStats(mirur.core.PrimitiveArray) -> getStats
    void access$0(mirur.plugin.statsview.StatisticsPage,java.lang.String[][]) -> access$0
    org.eclipse.jface.viewers.TableViewer access$1(mirur.plugin.statsview.StatisticsPage) -> access$1
mirur.plugin.statsview.StatisticsPage$1 -> mirur.plugin.statsview.StatisticsPage$1:
    mirur.plugin.statsview.StatisticsPage this$0 -> this$0
    void <init>(mirur.plugin.statsview.StatisticsPage) -> <init>
    java.lang.String getText(java.lang.Object) -> getText
mirur.plugin.statsview.StatisticsPage$2 -> mirur.plugin.statsview.StatisticsPage$2:
    mirur.plugin.statsview.StatisticsPage this$0 -> this$0
    void <init>(mirur.plugin.statsview.StatisticsPage) -> <init>
    java.lang.String getText(java.lang.Object) -> getText
mirur.plugin.statsview.StatisticsPage$3 -> mirur.plugin.statsview.StatisticsPage$3:
    mirur.plugin.statsview.StatisticsPage this$0 -> this$0
    java.lang.String[][] val$data -> val$data
    void <init>(mirur.plugin.statsview.StatisticsPage,mirur.core.PrimitiveArray,java.util.List,java.lang.String[][]) -> <init>
    void update(int,java.lang.String) -> update
mirur.plugin.statsview.StatisticsPage$4 -> mirur.plugin.statsview.StatisticsPage$4:
    mirur.plugin.statsview.StatisticsPage this$0 -> this$0
    java.lang.String[][] val$data -> val$data
    void <init>(mirur.plugin.statsview.StatisticsPage,java.lang.String[][]) -> <init>
    void run() -> run
mirur.plugin.statsview.StatsComputeJob -> mirur.plugin.statsview.StatsComputeJob:
    mirur.core.PrimitiveArray array -> array
    java.util.List statistics -> statistics
    void <init>(mirur.core.PrimitiveArray,java.util.List) -> <init>
    org.eclipse.core.runtime.IStatus run(org.eclipse.core.runtime.IProgressMonitor) -> run
    void update(int,java.lang.String) -> update
mirur.plugin.statsview.StatsComputeJob$1 -> mirur.plugin.statsview.StatsComputeJob$1:
    mirur.plugin.statsview.StatsComputeJob this$0 -> this$0
    int val$index -> val$index
    org.eclipse.core.runtime.IProgressMonitor val$monitor -> val$monitor
    void <init>(mirur.plugin.statsview.StatsComputeJob,mirur.core.PrimitiveArray,mirur.plugin.statsview.ArrayStatisticVisitor,int,org.eclipse.core.runtime.IProgressMonitor) -> <init>
    void finished(java.lang.String) -> finished
mirur.plugins.Array1DPlot -> mirur.plugins.Array1DPlot:
    mirur.plugins.ShaderWrapperPainter shaderWrapper -> shaderWrapper
    void <init>(com.metsci.glimpse.painter.base.GlimpseDataPainter2D,mirur.core.Array1D) -> <init>
    void initializePainters() -> initializePainters
    com.metsci.glimpse.painter.info.SimpleTextPainter createTitlePainter() -> createTitlePainter
    void setShaders(mirur.plugins.InitializablePipeline) -> setShaders
    void setTitlePainterData(mirur.core.Array1D) -> setTitlePainterData
    void updateAxesBounds(mirur.core.Array1D) -> updateAxesBounds
    void padAxis(com.metsci.glimpse.axis.Axis1D) -> padAxis
    void setData(mirur.core.Array1D) -> setData
mirur.plugins.Array1DTitlePainter -> mirur.plugins.Array1DTitlePainter:
    com.metsci.glimpse.axis.Axis2D srcAxis -> srcAxis
    mirur.core.Array1D array -> array
    int lastIndex -> lastIndex
    void <init>(com.metsci.glimpse.axis.Axis2D) -> <init>
    void setArray(mirur.core.Array1D) -> setArray
    void paintTo(com.metsci.glimpse.context.GlimpseContext) -> paintTo
    java.lang.String format(int) -> format
mirur.plugins.Array2DTitlePainter -> mirur.plugins.Array2DTitlePainter:
    com.metsci.glimpse.axis.Axis2D srcAxis -> srcAxis
    mirur.core.Array2D array -> array
    int lastI -> lastI
    int lastJ -> lastJ
    void <init>(com.metsci.glimpse.axis.Axis2D) -> <init>
    void setArray(mirur.core.Array2D) -> setArray
    void paintTo(com.metsci.glimpse.context.GlimpseContext) -> paintTo
    java.lang.String format(int,int) -> format
mirur.plugins.DataPainter -> mirur.plugins.DataPainter:
    com.metsci.glimpse.layout.GlimpseLayout getLayout() -> getLayout
    void populateMenu(org.eclipse.swt.widgets.Menu) -> populateMenu
    void resetAxes() -> resetAxes
    void uninstall(com.metsci.glimpse.canvas.GlimpseCanvas) -> uninstall
mirur.plugins.DataPainterImpl -> mirur.plugins.DataPainterImpl:
    com.metsci.glimpse.layout.GlimpseLayout layout -> layout
    java.util.List resets -> resets
    java.util.List actions -> actions
    void <init>(com.metsci.glimpse.layout.GlimpseLayout) -> <init>
    void addAction(org.eclipse.jface.action.Action) -> addAction
    void addAxis(com.metsci.glimpse.axis.Axis1D) -> addAxis
    void addAxis(com.metsci.glimpse.axis.Axis2D) -> addAxis
    com.metsci.glimpse.layout.GlimpseLayout getLayout() -> getLayout
    void populateMenu(org.eclipse.swt.widgets.Menu) -> populateMenu
    void resetAxes() -> resetAxes
    void uninstall(com.metsci.glimpse.canvas.GlimpseCanvas) -> uninstall
mirur.plugins.DataPainterImpl$ResetAction -> mirur.plugins.DataPainterImpl$ResetAction:
    void reset() -> reset
    void validate() -> validate
mirur.plugins.DataPainterImpl$ResetAction1d -> mirur.plugins.DataPainterImpl$ResetAction1d:
    com.metsci.glimpse.axis.Axis1D axis -> axis
    double min -> min
    double max -> max
    void <init>(com.metsci.glimpse.axis.Axis1D) -> <init>
    void reset() -> reset
    void validate() -> validate
mirur.plugins.DataPainterImpl$ResetAction2d -> mirur.plugins.DataPainterImpl$ResetAction2d:
    com.metsci.glimpse.axis.Axis2D axis -> axis
    mirur.plugins.DataPainterImpl$ResetAction1d x -> x
    mirur.plugins.DataPainterImpl$ResetAction1d y -> y
    void <init>(com.metsci.glimpse.axis.Axis2D) -> <init>
    void reset() -> reset
    void validate() -> validate
mirur.plugins.DataPainterImpl$ResetTagsAction -> mirur.plugins.DataPainterImpl$ResetTagsAction:
    java.util.Map tags -> tags
    void <init>(com.metsci.glimpse.axis.tagged.TaggedAxis1D) -> <init>
    void reset() -> reset
mirur.plugins.FisheyeAction -> mirur.plugins.FisheyeAction:
    void <init>() -> <init>
mirur.plugins.FisheyePipeline -> mirur.plugins.FisheyePipeline:
    mirur.plugins.FisheyeShader shader -> shader
    void <init>() -> <init>
    void <init>(mirur.plugins.FisheyeShader) -> <init>
    void initialize(com.metsci.glimpse.axis.Axis2D) -> initialize
    void initialize(com.metsci.glimpse.axis.Axis1D) -> initialize
mirur.plugins.FisheyeShader -> mirur.plugins.FisheyeShader:
    com.metsci.glimpse.gl.shader.ShaderArg radius -> radius
    com.metsci.glimpse.gl.shader.ShaderArg center -> center
    com.metsci.glimpse.gl.shader.ShaderArg factor -> factor
    void <init>() -> <init>
    void setRadius(float) -> setRadius
    void setMousePosition(float) -> setMousePosition
mirur.plugins.InitializablePipeline -> mirur.plugins.InitializablePipeline:
    mirur.plugins.InitializablePipeline DEFAULT -> DEFAULT
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,com.metsci.glimpse.gl.shader.Shader,com.metsci.glimpse.gl.shader.Shader,com.metsci.glimpse.gl.shader.Shader) -> <init>
    void initialize(com.metsci.glimpse.context.GlimpseContext) -> initialize
    void initialize(com.metsci.glimpse.axis.Axis2D) -> initialize
    void initialize(com.metsci.glimpse.axis.Axis1D) -> initialize
mirur.plugins.InitializablePipeline$1 -> mirur.plugins.InitializablePipeline$1:
    void <init>(java.lang.String,com.metsci.glimpse.gl.shader.Shader,com.metsci.glimpse.gl.shader.Shader,com.metsci.glimpse.gl.shader.Shader) -> <init>
    void initialize(com.metsci.glimpse.axis.Axis1D) -> initialize
    void initialize(com.metsci.glimpse.axis.Axis2D) -> initialize
mirur.plugins.InvalidPlaceholderLayout -> mirur.plugins.InvalidPlaceholderLayout:
    void <init>() -> <init>
mirur.plugins.InvalidPlaceholderView -> mirur.plugins.InvalidPlaceholderView:
    void <init>() -> <init>
    boolean supportsData(mirur.core.PrimitiveArray) -> supportsData
    java.lang.String getName() -> getName
    org.eclipse.jface.resource.ImageDescriptor getIcon() -> getIcon
    mirur.plugins.DataPainter install(com.metsci.glimpse.canvas.GlimpseCanvas,mirur.core.PrimitiveArray) -> install
mirur.plugins.InvalidPlaceholderView$1 -> mirur.plugins.InvalidPlaceholderView$1:
    mirur.plugins.InvalidPlaceholderView this$0 -> this$0
    mirur.plugins.InvalidPlaceholderLayout val$layout -> val$layout
    void <init>(mirur.plugins.InvalidPlaceholderView,mirur.plugins.InvalidPlaceholderLayout) -> <init>
    com.metsci.glimpse.layout.GlimpseLayout getLayout() -> getLayout
    void populateMenu(org.eclipse.swt.widgets.Menu) -> populateMenu
    void resetAxes() -> resetAxes
    void uninstall(com.metsci.glimpse.canvas.GlimpseCanvas) -> uninstall
mirur.plugins.MirurView -> mirur.plugins.MirurView:
    boolean supportsData(mirur.core.PrimitiveArray) -> supportsData
    java.lang.String getName() -> getName
    org.eclipse.jface.resource.ImageDescriptor getIcon() -> getIcon
    mirur.plugins.DataPainter install(com.metsci.glimpse.canvas.GlimpseCanvas,mirur.core.PrimitiveArray) -> install
mirur.plugins.MirurViews -> mirur.plugins.MirurViews:
    mirur.plugins.MirurViews manager -> manager
    java.util.Collection plugins -> plugins
    void <init>() -> <init>
    java.util.Collection plugins() -> plugins
mirur.plugins.ResetAxesTask -> mirur.plugins.ResetAxesTask:
    com.metsci.glimpse.axis.Axis2D axis -> axis
    double minX -> minX
    double maxX -> maxX
    double minY -> minY
    double maxY -> maxY
    void <init>(com.metsci.glimpse.axis.Axis2D) -> <init>
    void run() -> run
mirur.plugins.ShaderWrapperPainter -> mirur.plugins.ShaderWrapperPainter:
    mirur.plugins.InitializablePipeline newPipeline -> newPipeline
    mirur.plugins.InitializablePipeline pipeline -> pipeline
    void <init>() -> <init>
    void setPipeline(mirur.plugins.InitializablePipeline) -> setPipeline
    void prePaint(com.metsci.glimpse.painter.base.GlimpsePainter,com.metsci.glimpse.context.GlimpseContext) -> prePaint
    void postPaint(com.metsci.glimpse.painter.base.GlimpsePainter,com.metsci.glimpse.context.GlimpseContext) -> postPaint
mirur.plugins.SimplePlugin1D -> mirur.plugins.SimplePlugin1D:
    java.lang.String name -> name
    org.eclipse.jface.resource.ImageDescriptor icon -> icon
    void <init>(java.lang.String,org.eclipse.jface.resource.ImageDescriptor) -> <init>
    boolean supportsData(mirur.core.PrimitiveArray) -> supportsData
    java.lang.String getName() -> getName
    org.eclipse.jface.resource.ImageDescriptor getIcon() -> getIcon
    mirur.plugins.DataPainter install(com.metsci.glimpse.canvas.GlimpseCanvas,mirur.core.PrimitiveArray) -> install
    void finalInstall(com.metsci.glimpse.canvas.GlimpseCanvas,mirur.plugins.DataPainter) -> finalInstall
    org.eclipse.jface.action.Action getFisheyeAction(mirur.plugins.Array1DPlot) -> getFisheyeAction
    com.metsci.glimpse.painter.base.GlimpseDataPainter2D createPainter(mirur.core.Array1D) -> createPainter
mirur.plugins.SimplePlugin1D$1 -> mirur.plugins.SimplePlugin1D$1:
    mirur.plugins.SimplePlugin1D this$0 -> this$0
    mirur.plugins.Array1DPlot val$plot -> val$plot
    void <init>(mirur.plugins.SimplePlugin1D,mirur.plugins.Array1DPlot) -> <init>
    void run() -> run
mirur.plugins.SimplePlugin2D -> mirur.plugins.SimplePlugin2D:
    java.lang.String name -> name
    org.eclipse.jface.resource.ImageDescriptor icon -> icon
    void <init>(java.lang.String,org.eclipse.jface.resource.ImageDescriptor) -> <init>
    boolean supportsData(mirur.core.PrimitiveArray) -> supportsData
    java.lang.String getName() -> getName
    org.eclipse.jface.resource.ImageDescriptor getIcon() -> getIcon
mirur.plugins.SimpleVBO -> mirur.plugins.SimpleVBO:
    java.util.logging.Logger LOGGER -> LOGGER
    boolean bufferInitialized -> bufferInitialized
    boolean resetBuffer -> resetBuffer
    int bufferHandle -> bufferHandle
    java.nio.FloatBuffer buffer -> buffer
    java.util.List marks -> marks
    mirur.plugins.SimpleVBO$Marker mark -> mark
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void destroy(javax.media.opengl.GL2) -> destroy
    void allocate(int) -> allocate
    boolean isRunning() -> isRunning
    void begin(int) -> begin
    void end() -> end
    void add(float,float) -> add
    void draw(javax.media.opengl.GL2) -> draw
    void draw(javax.media.opengl.GL2,int) -> draw
    void prepareDraw(javax.media.opengl.GL2) -> prepareDraw
mirur.plugins.SimpleVBO$Marker -> mirur.plugins.SimpleVBO$Marker:
    int mode -> mode
    int start -> start
    int count -> count
    void <init>(int,int,int) -> <init>
mirur.plugins.bar1d.BarView -> mirur.plugins.bar1d.BarView:
    void <init>() -> <init>
    com.metsci.glimpse.painter.base.GlimpseDataPainter2D createPainter(mirur.core.Array1D) -> createPainter
mirur.plugins.bar1d.FillWithBarsVisitor -> mirur.plugins.bar1d.FillWithBarsVisitor:
    mirur.plugins.SimpleVBO vbo -> vbo
    void <init>(mirur.plugins.SimpleVBO) -> <init>
    void start(int) -> start
    void stop() -> stop
    void visit(int,double) -> visit
    void visit(int,float) -> visit
mirur.plugins.bar1d.VerticalBarPainter -> mirur.plugins.bar1d.VerticalBarPainter:
    mirur.plugins.SimpleVBO vbo -> vbo
    float[] color -> color
    void <init>() -> <init>
    void setLookAndFeel(com.metsci.glimpse.support.settings.LookAndFeel) -> setLookAndFeel
    void setData(mirur.core.Array1D) -> setData
    void paintTo(javax.media.opengl.GL2,com.metsci.glimpse.context.GlimpseBounds,com.metsci.glimpse.axis.Axis2D) -> paintTo
    void dispose(javax.media.opengl.GLContext) -> dispose
mirur.plugins.heatmap2d.GradientChooserAction -> mirur.plugins.heatmap2d.GradientChooserAction:
    void <init>() -> <init>
    void addGradientOption(org.eclipse.swt.widgets.Menu,java.lang.String,com.metsci.glimpse.support.colormap.ColorGradient,org.eclipse.jface.resource.ImageDescriptor) -> addGradientOption
    void select(com.metsci.glimpse.support.colormap.ColorGradient) -> select
    void dispose() -> dispose
    org.eclipse.swt.widgets.Menu getMenu(org.eclipse.swt.widgets.Control) -> getMenu
    org.eclipse.swt.widgets.Menu getMenu(org.eclipse.swt.widgets.Menu) -> getMenu
mirur.plugins.heatmap2d.GradientChooserAction$1 -> mirur.plugins.heatmap2d.GradientChooserAction$1:
    mirur.plugins.heatmap2d.GradientChooserAction this$0 -> this$0
    com.metsci.glimpse.support.colormap.ColorGradient val$gradient -> val$gradient
    void <init>(mirur.plugins.heatmap2d.GradientChooserAction,java.lang.String,org.eclipse.jface.resource.ImageDescriptor,com.metsci.glimpse.support.colormap.ColorGradient) -> <init>
    void run() -> run
mirur.plugins.heatmap2d.HeatmapView -> mirur.plugins.heatmap2d.HeatmapView:
    void <init>() -> <init>
    mirur.plugins.DataPainter install(com.metsci.glimpse.canvas.GlimpseCanvas,mirur.core.PrimitiveArray) -> install
mirur.plugins.heatmap2d.HeatmapView$1 -> mirur.plugins.heatmap2d.HeatmapView$1:
    mirur.plugins.heatmap2d.HeatmapView this$0 -> this$0
    mirur.core.Array2D val$array -> val$array
    void <init>(mirur.plugins.heatmap2d.HeatmapView,mirur.core.Array2D) -> <init>
    com.metsci.glimpse.painter.info.SimpleTextPainter createTitlePainter() -> createTitlePainter
    void initializePainters() -> initializePainters
mirur.plugins.heatmap2d.HeatmapView$2 -> mirur.plugins.heatmap2d.HeatmapView$2:
    mirur.plugins.heatmap2d.HeatmapView this$0 -> this$0
    com.metsci.glimpse.axis.tagged.Tag val$t1 -> val$t1
    com.metsci.glimpse.axis.tagged.Tag val$t2 -> val$t2
    void <init>(mirur.plugins.heatmap2d.HeatmapView,java.lang.String,com.metsci.glimpse.axis.tagged.Tag,com.metsci.glimpse.axis.tagged.Tag) -> <init>
    void applyConstraint(com.metsci.glimpse.axis.tagged.TaggedAxis1D) -> applyConstraint
mirur.plugins.heatmap2d.HeatmapView$3 -> mirur.plugins.heatmap2d.HeatmapView$3:
    mirur.plugins.heatmap2d.HeatmapView this$0 -> this$0
    mirur.core.Array2D val$array -> val$array
    void <init>(mirur.plugins.heatmap2d.HeatmapView,mirur.core.Array2D) -> <init>
    void mutate(java.nio.FloatBuffer,int,int) -> mutate
mirur.plugins.heatmap2d.HeatmapView$4 -> mirur.plugins.heatmap2d.HeatmapView$4:
    mirur.plugins.heatmap2d.HeatmapView this$0 -> this$0
    com.metsci.glimpse.gl.texture.ColorTexture1D val$colors -> val$colors
    void <init>(mirur.plugins.heatmap2d.HeatmapView,com.metsci.glimpse.gl.texture.ColorTexture1D) -> <init>
    void select(com.metsci.glimpse.support.colormap.ColorGradient) -> select
mirur.plugins.heatmap2d.JaggedToFloatBufferVisitor -> mirur.plugins.heatmap2d.JaggedToFloatBufferVisitor:
    java.nio.FloatBuffer buf -> buf
    int minSize1 -> minSize1
    float fill -> fill
    void <init>(java.nio.FloatBuffer,int,float) -> <init>
    void add(float) -> add
    void visit(double[][]) -> visit
    void visit(long[][]) -> visit
    void visit(float[][]) -> visit
    void visit(int[][]) -> visit
    void visit(short[][]) -> visit
    void visit(char[][]) -> visit
    void visit(byte[][]) -> visit
    void visit(boolean[][]) -> visit
mirur.plugins.heatmap2d.ToFloatBufferVisitor -> mirur.plugins.heatmap2d.ToFloatBufferVisitor:
    java.nio.FloatBuffer buf -> buf
    void <init>(java.nio.FloatBuffer) -> <init>
    void add(float) -> add
    void visit(double[][]) -> visit
    void visit(long[][]) -> visit
    void visit(float[][]) -> visit
    void visit(int[][]) -> visit
    void visit(short[][]) -> visit
    void visit(char[][]) -> visit
    void visit(byte[][]) -> visit
    void visit(boolean[][]) -> visit
mirur.plugins.histogram1d.HistogramBinTextPainter -> mirur.plugins.histogram1d.HistogramBinTextPainter:
    com.metsci.glimpse.axis.Axis2D srcAxis -> srcAxis
    mirur.plugins.histogram1d.HistogramPainter histPainter -> histPainter
    mirur.core.Array1D array -> array
    double lastBin -> lastBin
    void <init>(com.metsci.glimpse.axis.Axis2D) -> <init>
    void setHistogramPainter(mirur.core.Array1D,mirur.plugins.histogram1d.HistogramPainter) -> setHistogramPainter
    void paintTo(com.metsci.glimpse.context.GlimpseContext) -> paintTo
    java.lang.String format(double,double,int) -> format
mirur.plugins.histogram1d.HistogramPainter -> mirur.plugins.histogram1d.HistogramPainter:
    it.unimi.dsi.fastutil.floats.Float2IntMap counts -> counts
    float[] borderColor -> borderColor
    void <init>() -> <init>
    void setLookAndFeel(com.metsci.glimpse.support.settings.LookAndFeel) -> setLookAndFeel
    void setData(it.unimi.dsi.fastutil.floats.Float2IntMap,float,float) -> setData
    int getCount(double) -> getCount
    double getBin(double) -> getBin
    void paintTo(javax.media.opengl.GL2,com.metsci.glimpse.context.GlimpseBounds,com.metsci.glimpse.axis.Axis2D) -> paintTo
mirur.plugins.histogram1d.HistogramView -> mirur.plugins.histogram1d.HistogramView:
    void <init>() -> <init>
    boolean supportsData(mirur.core.PrimitiveArray) -> supportsData
    mirur.plugins.DataPainter install(com.metsci.glimpse.canvas.GlimpseCanvas,mirur.core.PrimitiveArray) -> install
    mirur.plugins.histogram1d.HistogramPainter createPainter(mirur.core.Array1D) -> createPainter
    com.metsci.glimpse.painter.base.GlimpseDataPainter2D createPainter(mirur.core.Array1D) -> createPainter
mirur.plugins.histogram1d.HistogramView$1 -> mirur.plugins.histogram1d.HistogramView$1:
    mirur.plugins.histogram1d.HistogramView this$0 -> this$0
    mirur.core.Array1D val$array1d -> val$array1d
    mirur.plugins.histogram1d.HistogramPainter val$painter -> val$painter
    void <init>(mirur.plugins.histogram1d.HistogramView,com.metsci.glimpse.painter.base.GlimpseDataPainter2D,mirur.core.Array1D,mirur.core.Array1D,mirur.plugins.histogram1d.HistogramPainter) -> <init>
    com.metsci.glimpse.painter.info.SimpleTextPainter createTitlePainter() -> createTitlePainter
    void setTitlePainterData(mirur.core.Array1D) -> setTitlePainterData
    void updateAxesBounds(mirur.core.Array1D) -> updateAxesBounds
mirur.plugins.histogram1d.HistogramVisitor -> mirur.plugins.histogram1d.HistogramVisitor:
    double min -> min
    double max -> max
    double step -> step
    it.unimi.dsi.fastutil.floats.Float2IntOpenHashMap counts -> counts
    void <init>(double,double) -> <init>
    float getBinWidth() -> getBinWidth
    it.unimi.dsi.fastutil.floats.Float2IntMap getCounts() -> getCounts
    void start(int) -> start
    void visit(int,float) -> visit
    void visit(int,double) -> visit
mirur.plugins.line1d.FillWithLinesVisitor -> mirur.plugins.line1d.FillWithLinesVisitor:
    mirur.plugins.SimpleVBO vbo -> vbo
    void <init>(mirur.plugins.SimpleVBO) -> <init>
    void start(int) -> start
    void stop() -> stop
    void visit(int,double) -> visit
    void visit(int,float) -> visit
mirur.plugins.line1d.LinePainter -> mirur.plugins.line1d.LinePainter:
    mirur.plugins.SimpleVBO vbo -> vbo
    float[] color -> color
    void <init>() -> <init>
    void setLookAndFeel(com.metsci.glimpse.support.settings.LookAndFeel) -> setLookAndFeel
    void setData(mirur.core.Array1D) -> setData
    void paintTo(javax.media.opengl.GL2,com.metsci.glimpse.context.GlimpseBounds,com.metsci.glimpse.axis.Axis2D) -> paintTo
    void dispose(javax.media.opengl.GLContext) -> dispose
mirur.plugins.line1d.LineView -> mirur.plugins.line1d.LineView:
    void <init>() -> <init>
    com.metsci.glimpse.painter.base.GlimpseDataPainter2D createPainter(mirur.core.Array1D) -> createPainter
net.miginfocom.layout.AC -> net.miginfocom.layout.AC:
    java.util.ArrayList cList -> cList
    int curIx -> curIx
    void <init>() -> <init>
    net.miginfocom.layout.DimConstraint[] getConstaints() -> getConstaints
    void setConstaints(net.miginfocom.layout.DimConstraint[]) -> setConstaints
    int getCount() -> getCount
    net.miginfocom.layout.AC count(int) -> count
    net.miginfocom.layout.AC noGrid() -> noGrid
    net.miginfocom.layout.AC noGrid(int[]) -> noGrid
    net.miginfocom.layout.AC index(int) -> index
    net.miginfocom.layout.AC fill() -> fill
    net.miginfocom.layout.AC fill(int[]) -> fill
    net.miginfocom.layout.AC sizeGroup() -> sizeGroup
    net.miginfocom.layout.AC sizeGroup(java.lang.String) -> sizeGroup
    net.miginfocom.layout.AC sizeGroup(java.lang.String,int[]) -> sizeGroup
    net.miginfocom.layout.AC size(java.lang.String) -> size
    net.miginfocom.layout.AC size(java.lang.String,int[]) -> size
    net.miginfocom.layout.AC gap() -> gap
    net.miginfocom.layout.AC gap(java.lang.String) -> gap
    net.miginfocom.layout.AC gap(java.lang.String,int[]) -> gap
    net.miginfocom.layout.AC align(java.lang.String) -> align
    net.miginfocom.layout.AC align(java.lang.String,int[]) -> align
    net.miginfocom.layout.AC growPrio(int) -> growPrio
    net.miginfocom.layout.AC growPrio(int,int[]) -> growPrio
    net.miginfocom.layout.AC grow() -> grow
    net.miginfocom.layout.AC grow(float) -> grow
    net.miginfocom.layout.AC grow(float,int[]) -> grow
    net.miginfocom.layout.AC shrinkPrio(int) -> shrinkPrio
    net.miginfocom.layout.AC shrinkPrio(int,int[]) -> shrinkPrio
    net.miginfocom.layout.AC shrink() -> shrink
    net.miginfocom.layout.AC shrink(float) -> shrink
    net.miginfocom.layout.AC shrink(float,int[]) -> shrink
    net.miginfocom.layout.AC shrinkWeight(float) -> shrinkWeight
    net.miginfocom.layout.AC shrinkWeight(float,int[]) -> shrinkWeight
    void makeSize(int) -> makeSize
    java.lang.Object readResolve() -> readResolve
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
net.miginfocom.layout.BoundSize -> net.miginfocom.layout.BoundSize:
    net.miginfocom.layout.BoundSize NULL_SIZE -> NULL_SIZE
    net.miginfocom.layout.BoundSize ZERO_PIXEL -> ZERO_PIXEL
    net.miginfocom.layout.UnitValue min -> min
    net.miginfocom.layout.UnitValue pref -> pref
    net.miginfocom.layout.UnitValue max -> max
    boolean gapPush -> gapPush
    long serialVersionUID -> serialVersionUID
    void <init>(net.miginfocom.layout.UnitValue,java.lang.String) -> <init>
    void <init>(net.miginfocom.layout.UnitValue,net.miginfocom.layout.UnitValue,net.miginfocom.layout.UnitValue,java.lang.String) -> <init>
    void <init>(net.miginfocom.layout.UnitValue,net.miginfocom.layout.UnitValue,net.miginfocom.layout.UnitValue,boolean,java.lang.String) -> <init>
    net.miginfocom.layout.UnitValue getMin() -> getMin
    net.miginfocom.layout.UnitValue getPreferred() -> getPreferred
    net.miginfocom.layout.UnitValue getMax() -> getMax
    boolean getGapPush() -> getGapPush
    boolean isUnset() -> isUnset
    int constrain(int,float,net.miginfocom.layout.ContainerWrapper) -> constrain
    net.miginfocom.layout.UnitValue getSize(int) -> getSize
    int[] getPixelSizes(float,net.miginfocom.layout.ContainerWrapper,net.miginfocom.layout.ComponentWrapper) -> getPixelSizes
    java.lang.String getConstraintString() -> getConstraintString
    void checkNotLinked() -> checkNotLinked
    java.lang.Object readResolve() -> readResolve
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    void <clinit>() -> <clinit>
net.miginfocom.layout.BoundSize$1 -> net.miginfocom.layout.BoundSize$1:
    void <init>() -> <init>
    java.beans.Expression instantiate(java.lang.Object,java.beans.Encoder) -> instantiate
net.miginfocom.layout.CC -> net.miginfocom.layout.CC:
    net.miginfocom.layout.BoundSize DEF_GAP -> DEF_GAP
    java.lang.String[] DOCK_SIDES -> DOCK_SIDES
    int dock -> dock
    net.miginfocom.layout.UnitValue[] pos -> pos
    net.miginfocom.layout.UnitValue[] padding -> padding
    java.lang.Boolean flowX -> flowX
    int skip -> skip
    int split -> split
    int spanX -> spanX
    int spanY -> spanY
    int cellX -> cellX
    int cellY -> cellY
    java.lang.String tag -> tag
    java.lang.String id -> id
    int hideMode -> hideMode
    net.miginfocom.layout.DimConstraint hor -> hor
    net.miginfocom.layout.DimConstraint ver -> ver
    net.miginfocom.layout.BoundSize newline -> newline
    net.miginfocom.layout.BoundSize wrap -> wrap
    boolean boundsInGrid -> boundsInGrid
    boolean external -> external
    java.lang.Float pushX -> pushX
    java.lang.Float pushY -> pushY
    java.lang.String[] EMPTY_ARR -> EMPTY_ARR
    java.lang.String[] linkTargets -> linkTargets
    void <init>() -> <init>
    java.lang.String[] getLinkTargets() -> getLinkTargets
    void addLinkTargetIDs(java.util.ArrayList,net.miginfocom.layout.UnitValue) -> addLinkTargetIDs
    net.miginfocom.layout.CC endGroupX(java.lang.String) -> endGroupX
    net.miginfocom.layout.CC sizeGroupX(java.lang.String) -> sizeGroupX
    net.miginfocom.layout.CC minWidth(java.lang.String) -> minWidth
    net.miginfocom.layout.CC width(java.lang.String) -> width
    net.miginfocom.layout.CC maxWidth(java.lang.String) -> maxWidth
    net.miginfocom.layout.CC gapX(java.lang.String,java.lang.String) -> gapX
    net.miginfocom.layout.CC alignX(java.lang.String) -> alignX
    net.miginfocom.layout.CC growPrioX(int) -> growPrioX
    net.miginfocom.layout.CC growPrio(int[]) -> growPrio
    net.miginfocom.layout.CC growX() -> growX
    net.miginfocom.layout.CC growX(float) -> growX
    net.miginfocom.layout.CC grow(float[]) -> grow
    net.miginfocom.layout.CC shrinkPrioX(int) -> shrinkPrioX
    net.miginfocom.layout.CC shrinkPrio(int[]) -> shrinkPrio
    net.miginfocom.layout.CC shrinkX(float) -> shrinkX
    net.miginfocom.layout.CC shrink(float[]) -> shrink
    net.miginfocom.layout.CC endGroupY(java.lang.String) -> endGroupY
    net.miginfocom.layout.CC endGroup(java.lang.String[]) -> endGroup
    net.miginfocom.layout.CC sizeGroupY(java.lang.String) -> sizeGroupY
    net.miginfocom.layout.CC sizeGroup(java.lang.String[]) -> sizeGroup
    net.miginfocom.layout.CC minHeight(java.lang.String) -> minHeight
    net.miginfocom.layout.CC height(java.lang.String) -> height
    net.miginfocom.layout.CC maxHeight(java.lang.String) -> maxHeight
    net.miginfocom.layout.CC gapY(java.lang.String,java.lang.String) -> gapY
    net.miginfocom.layout.CC alignY(java.lang.String) -> alignY
    net.miginfocom.layout.CC growPrioY(int) -> growPrioY
    net.miginfocom.layout.CC growY() -> growY
    net.miginfocom.layout.CC growY(java.lang.Float) -> growY
    net.miginfocom.layout.CC shrinkPrioY(int) -> shrinkPrioY
    net.miginfocom.layout.CC shrinkY(float) -> shrinkY
    net.miginfocom.layout.CC hideMode(int) -> hideMode
    net.miginfocom.layout.CC id(java.lang.String) -> id
    net.miginfocom.layout.CC tag(java.lang.String) -> tag
    net.miginfocom.layout.CC cell(int[]) -> cell
    net.miginfocom.layout.CC span(int[]) -> span
    net.miginfocom.layout.CC gap(java.lang.String[]) -> gap
    net.miginfocom.layout.CC gapBefore(java.lang.String) -> gapBefore
    net.miginfocom.layout.CC gapAfter(java.lang.String) -> gapAfter
    net.miginfocom.layout.CC gapTop(java.lang.String) -> gapTop
    net.miginfocom.layout.CC gapLeft(java.lang.String) -> gapLeft
    net.miginfocom.layout.CC gapBottom(java.lang.String) -> gapBottom
    net.miginfocom.layout.CC gapRight(java.lang.String) -> gapRight
    net.miginfocom.layout.CC spanY() -> spanY
    net.miginfocom.layout.CC spanY(int) -> spanY
    net.miginfocom.layout.CC spanX() -> spanX
    net.miginfocom.layout.CC spanX(int) -> spanX
    net.miginfocom.layout.CC push() -> push
    net.miginfocom.layout.CC push(java.lang.Float,java.lang.Float) -> push
    net.miginfocom.layout.CC pushY() -> pushY
    net.miginfocom.layout.CC pushY(java.lang.Float) -> pushY
    net.miginfocom.layout.CC pushX() -> pushX
    net.miginfocom.layout.CC pushX(java.lang.Float) -> pushX
    net.miginfocom.layout.CC split(int) -> split
    net.miginfocom.layout.CC split() -> split
    net.miginfocom.layout.CC skip(int) -> skip
    net.miginfocom.layout.CC skip() -> skip
    net.miginfocom.layout.CC external() -> external
    net.miginfocom.layout.CC flowX() -> flowX
    net.miginfocom.layout.CC flowY() -> flowY
    net.miginfocom.layout.CC grow() -> grow
    net.miginfocom.layout.CC newline() -> newline
    net.miginfocom.layout.CC newline(java.lang.String) -> newline
    net.miginfocom.layout.CC wrap() -> wrap
    net.miginfocom.layout.CC wrap(java.lang.String) -> wrap
    net.miginfocom.layout.CC dockNorth() -> dockNorth
    net.miginfocom.layout.CC dockWest() -> dockWest
    net.miginfocom.layout.CC dockSouth() -> dockSouth
    net.miginfocom.layout.CC dockEast() -> dockEast
    net.miginfocom.layout.CC x(java.lang.String) -> x
    net.miginfocom.layout.CC y(java.lang.String) -> y
    net.miginfocom.layout.CC x2(java.lang.String) -> x2
    net.miginfocom.layout.CC y2(java.lang.String) -> y2
    net.miginfocom.layout.CC corrPos(java.lang.String,int) -> corrPos
    net.miginfocom.layout.CC pos(java.lang.String,java.lang.String) -> pos
    net.miginfocom.layout.CC pos(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> pos
    net.miginfocom.layout.CC pad(int,int,int,int) -> pad
    net.miginfocom.layout.CC pad(java.lang.String) -> pad
    net.miginfocom.layout.DimConstraint getHorizontal() -> getHorizontal
    void setHorizontal(net.miginfocom.layout.DimConstraint) -> setHorizontal
    net.miginfocom.layout.DimConstraint getVertical() -> getVertical
    void setVertical(net.miginfocom.layout.DimConstraint) -> setVertical
    net.miginfocom.layout.DimConstraint getDimConstraint(boolean) -> getDimConstraint
    net.miginfocom.layout.UnitValue[] getPos() -> getPos
    void setPos(net.miginfocom.layout.UnitValue[]) -> setPos
    boolean isBoundsInGrid() -> isBoundsInGrid
    void setBoundsInGrid(boolean) -> setBoundsInGrid
    int getCellX() -> getCellX
    void setCellX(int) -> setCellX
    int getCellY() -> getCellY
    void setCellY(int) -> setCellY
    int getDockSide() -> getDockSide
    void setDockSide(int) -> setDockSide
    boolean isExternal() -> isExternal
    void setExternal(boolean) -> setExternal
    java.lang.Boolean getFlowX() -> getFlowX
    void setFlowX(java.lang.Boolean) -> setFlowX
    int getHideMode() -> getHideMode
    void setHideMode(int) -> setHideMode
    java.lang.String getId() -> getId
    void setId(java.lang.String) -> setId
    net.miginfocom.layout.UnitValue[] getPadding() -> getPadding
    void setPadding(net.miginfocom.layout.UnitValue[]) -> setPadding
    int getSkip() -> getSkip
    void setSkip(int) -> setSkip
    int getSpanX() -> getSpanX
    void setSpanX(int) -> setSpanX
    int getSpanY() -> getSpanY
    void setSpanY(int) -> setSpanY
    java.lang.Float getPushX() -> getPushX
    void setPushX(java.lang.Float) -> setPushX
    java.lang.Float getPushY() -> getPushY
    void setPushY(java.lang.Float) -> setPushY
    int getSplit() -> getSplit
    void setSplit(int) -> setSplit
    java.lang.String getTag() -> getTag
    void setTag(java.lang.String) -> setTag
    boolean isWrap() -> isWrap
    void setWrap(boolean) -> setWrap
    net.miginfocom.layout.BoundSize getWrapGapSize() -> getWrapGapSize
    void setWrapGapSize(net.miginfocom.layout.BoundSize) -> setWrapGapSize
    boolean isNewline() -> isNewline
    void setNewline(boolean) -> setNewline
    net.miginfocom.layout.BoundSize getNewlineGapSize() -> getNewlineGapSize
    void setNewlineGapSize(net.miginfocom.layout.BoundSize) -> setNewlineGapSize
    java.lang.Object readResolve() -> readResolve
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void <clinit>() -> <clinit>
net.miginfocom.layout.ComponentWrapper -> net.miginfocom.layout.ComponentWrapper:
    int TYPE_UNSET -> TYPE_UNSET
    int TYPE_UNKNOWN -> TYPE_UNKNOWN
    int TYPE_CONTAINER -> TYPE_CONTAINER
    int TYPE_LABEL -> TYPE_LABEL
    int TYPE_TEXT_FIELD -> TYPE_TEXT_FIELD
    int TYPE_TEXT_AREA -> TYPE_TEXT_AREA
    int TYPE_BUTTON -> TYPE_BUTTON
    int TYPE_LIST -> TYPE_LIST
    int TYPE_TABLE -> TYPE_TABLE
    int TYPE_SCROLL_PANE -> TYPE_SCROLL_PANE
    int TYPE_IMAGE -> TYPE_IMAGE
    int TYPE_PANEL -> TYPE_PANEL
    int TYPE_COMBO_BOX -> TYPE_COMBO_BOX
    int TYPE_SLIDER -> TYPE_SLIDER
    int TYPE_SPINNER -> TYPE_SPINNER
    int TYPE_PROGRESS_BAR -> TYPE_PROGRESS_BAR
    int TYPE_TREE -> TYPE_TREE
    int TYPE_CHECK_BOX -> TYPE_CHECK_BOX
    int TYPE_SCROLL_BAR -> TYPE_SCROLL_BAR
    int TYPE_SEPARATOR -> TYPE_SEPARATOR
    java.lang.Object getComponent() -> getComponent
    int getX() -> getX
    int getY() -> getY
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getScreenLocationX() -> getScreenLocationX
    int getScreenLocationY() -> getScreenLocationY
    int getMinimumWidth(int) -> getMinimumWidth
    int getMinimumHeight(int) -> getMinimumHeight
    int getPreferredWidth(int) -> getPreferredWidth
    int getPreferredHeight(int) -> getPreferredHeight
    int getMaximumWidth(int) -> getMaximumWidth
    int getMaximumHeight(int) -> getMaximumHeight
    void setBounds(int,int,int,int) -> setBounds
    boolean isVisible() -> isVisible
    int getBaseline(int,int) -> getBaseline
    boolean hasBaseline() -> hasBaseline
    net.miginfocom.layout.ContainerWrapper getParent() -> getParent
    float getPixelUnitFactor(boolean) -> getPixelUnitFactor
    int getHorizontalScreenDPI() -> getHorizontalScreenDPI
    int getVerticalScreenDPI() -> getVerticalScreenDPI
    int getScreenWidth() -> getScreenWidth
    int getScreenHeight() -> getScreenHeight
    java.lang.String getLinkId() -> getLinkId
    int getLayoutHashCode() -> getLayoutHashCode
    int[] getVisualPadding() -> getVisualPadding
    void paintDebugOutline() -> paintDebugOutline
    int getComponetType(boolean) -> getComponetType
net.miginfocom.layout.ConstraintParser -> net.miginfocom.layout.ConstraintParser:
    void <init>() -> <init>
    net.miginfocom.layout.LC parseLayoutConstraint(java.lang.String) -> parseLayoutConstraint
    net.miginfocom.layout.AC parseRowConstraints(java.lang.String) -> parseRowConstraints
    net.miginfocom.layout.AC parseColumnConstraints(java.lang.String) -> parseColumnConstraints
    net.miginfocom.layout.AC parseAxisConstraint(java.lang.String,boolean) -> parseAxisConstraint
    net.miginfocom.layout.DimConstraint parseDimConstraint(java.lang.String,net.miginfocom.layout.BoundSize,net.miginfocom.layout.BoundSize,boolean) -> parseDimConstraint
    java.util.Map parseComponentConstraints(java.util.Map) -> parseComponentConstraints
    net.miginfocom.layout.CC parseComponentConstraint(java.lang.String) -> parseComponentConstraint
    net.miginfocom.layout.UnitValue[] parseInsets(java.lang.String,boolean) -> parseInsets
    net.miginfocom.layout.BoundSize[] parseGaps(java.lang.String) -> parseGaps
    int parseSpan(java.lang.String) -> parseSpan
    java.lang.Float parseFloat(java.lang.String,java.lang.Float) -> parseFloat
    net.miginfocom.layout.BoundSize parseBoundSize(java.lang.String,boolean,boolean) -> parseBoundSize
    net.miginfocom.layout.UnitValue parseUnitValueOrAlign(java.lang.String,boolean,net.miginfocom.layout.UnitValue) -> parseUnitValueOrAlign
    net.miginfocom.layout.UnitValue parseUnitValue(java.lang.String,boolean) -> parseUnitValue
    net.miginfocom.layout.UnitValue parseUnitValue(java.lang.String,net.miginfocom.layout.UnitValue,boolean) -> parseUnitValue
    net.miginfocom.layout.UnitValue parseAlignKeywords(java.lang.String,boolean) -> parseAlignKeywords
    java.lang.String[] getNumTextParts(java.lang.String) -> getNumTextParts
    int getOper(java.lang.String) -> getOper
    int startsWithLenient(java.lang.String,java.lang.String[],int[],boolean) -> startsWithLenient
    int startsWithLenient(java.lang.String,java.lang.String,int,boolean) -> startsWithLenient
    java.lang.String[] toTrimmedTokens(java.lang.String,char) -> toTrimmedTokens
    java.util.ArrayList getRowColAndGapsTrimmed(java.lang.String) -> getRowColAndGapsTrimmed
    java.lang.String prepare(java.lang.String) -> prepare
net.miginfocom.layout.ContainerWrapper -> net.miginfocom.layout.ContainerWrapper:
    net.miginfocom.layout.ComponentWrapper[] getComponents() -> getComponents
    int getComponentCount() -> getComponentCount
    java.lang.Object getLayout() -> getLayout
    boolean isLeftToRight() -> isLeftToRight
    void paintDebugCell(int,int,int,int) -> paintDebugCell
net.miginfocom.layout.DimConstraint -> net.miginfocom.layout.DimConstraint:
    net.miginfocom.layout.ResizeConstraint resize -> resize
    java.lang.String sizeGroup -> sizeGroup
    net.miginfocom.layout.BoundSize size -> size
    net.miginfocom.layout.BoundSize gapBefore -> gapBefore
    net.miginfocom.layout.BoundSize gapAfter -> gapAfter
    net.miginfocom.layout.UnitValue align -> align
    java.lang.String endGroup -> endGroup
    boolean fill -> fill
    boolean noGrid -> noGrid
    void <init>() -> <init>
    int getGrowPriority() -> getGrowPriority
    void setGrowPriority(int) -> setGrowPriority
    java.lang.Float getGrow() -> getGrow
    void setGrow(java.lang.Float) -> setGrow
    int getShrinkPriority() -> getShrinkPriority
    void setShrinkPriority(int) -> setShrinkPriority
    java.lang.Float getShrink() -> getShrink
    void setShrink(java.lang.Float) -> setShrink
    net.miginfocom.layout.UnitValue getAlignOrDefault(boolean) -> getAlignOrDefault
    net.miginfocom.layout.UnitValue getAlign() -> getAlign
    void setAlign(net.miginfocom.layout.UnitValue) -> setAlign
    net.miginfocom.layout.BoundSize getGapAfter() -> getGapAfter
    void setGapAfter(net.miginfocom.layout.BoundSize) -> setGapAfter
    boolean hasGapAfter() -> hasGapAfter
    boolean isGapAfterPush() -> isGapAfterPush
    net.miginfocom.layout.BoundSize getGapBefore() -> getGapBefore
    void setGapBefore(net.miginfocom.layout.BoundSize) -> setGapBefore
    boolean hasGapBefore() -> hasGapBefore
    boolean isGapBeforePush() -> isGapBeforePush
    net.miginfocom.layout.BoundSize getSize() -> getSize
    void setSize(net.miginfocom.layout.BoundSize) -> setSize
    java.lang.String getSizeGroup() -> getSizeGroup
    void setSizeGroup(java.lang.String) -> setSizeGroup
    java.lang.String getEndGroup() -> getEndGroup
    void setEndGroup(java.lang.String) -> setEndGroup
    boolean isFill() -> isFill
    void setFill(boolean) -> setFill
    boolean isNoGrid() -> isNoGrid
    void setNoGrid(boolean) -> setNoGrid
    int[] getRowGaps(net.miginfocom.layout.ContainerWrapper,net.miginfocom.layout.BoundSize,int,boolean) -> getRowGaps
    int[] getComponentGaps(net.miginfocom.layout.ContainerWrapper,net.miginfocom.layout.ComponentWrapper,net.miginfocom.layout.BoundSize,net.miginfocom.layout.ComponentWrapper,java.lang.String,int,int,boolean) -> getComponentGaps
    java.lang.Object readResolve() -> readResolve
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
net.miginfocom.layout.Grid -> net.miginfocom.layout.Grid:
    boolean TEST_GAPS -> TEST_GAPS
    java.lang.Float[] GROW_100 -> GROW_100
    net.miginfocom.layout.DimConstraint DOCK_DIM_CONSTRAINT -> DOCK_DIM_CONSTRAINT
    int MAX_GRID -> MAX_GRID
    int MAX_DOCK_GRID -> MAX_DOCK_GRID
    net.miginfocom.layout.ResizeConstraint GAP_RC_CONST -> GAP_RC_CONST
    net.miginfocom.layout.ResizeConstraint GAP_RC_CONST_PUSH -> GAP_RC_CONST_PUSH
    net.miginfocom.layout.CC DEF_CC -> DEF_CC
    net.miginfocom.layout.LC lc -> lc
    net.miginfocom.layout.ContainerWrapper container -> container
    java.util.LinkedHashMap grid -> grid
    java.util.HashMap wrapGapMap -> wrapGapMap
    java.util.TreeSet rowIndexes -> rowIndexes
    java.util.TreeSet colIndexes -> colIndexes
    net.miginfocom.layout.AC rowConstr -> rowConstr
    net.miginfocom.layout.AC colConstr -> colConstr
    net.miginfocom.layout.Grid$FlowSizeSpec colFlowSpecs -> colFlowSpecs
    net.miginfocom.layout.Grid$FlowSizeSpec rowFlowSpecs -> rowFlowSpecs
    java.util.ArrayList[] colGroupLists -> colGroupLists
    java.util.ArrayList[] rowGroupLists -> rowGroupLists
    int[] width -> width
    int[] height -> height
    java.util.ArrayList debugRects -> debugRects
    java.util.HashMap linkTargetIDs -> linkTargetIDs
    int dockOffY -> dockOffY
    int dockOffX -> dockOffX
    java.lang.Float[] pushXs -> pushXs
    java.lang.Float[] pushYs -> pushYs
    java.util.ArrayList callbackList -> callbackList
    java.util.WeakHashMap[] PARENT_ROWCOL_SIZES_MAP -> PARENT_ROWCOL_SIZES_MAP
    java.util.WeakHashMap PARENT_GRIDPOS_MAP -> PARENT_GRIDPOS_MAP
    void <init>(net.miginfocom.layout.ContainerWrapper,net.miginfocom.layout.LC,net.miginfocom.layout.AC,net.miginfocom.layout.AC,java.util.Map,java.util.ArrayList) -> <init>
    net.miginfocom.layout.CC getCC(net.miginfocom.layout.ComponentWrapper,java.util.Map) -> getCC
    void addLinkIDs(net.miginfocom.layout.CC) -> addLinkIDs
    void invalidateContainerSize() -> invalidateContainerSize
    boolean layout(int[],net.miginfocom.layout.UnitValue,net.miginfocom.layout.UnitValue,boolean,boolean) -> layout
    void paintDebug() -> paintDebug
    net.miginfocom.layout.ContainerWrapper getContainer() -> getContainer
    int[] getWidth() -> getWidth
    int[] getHeight() -> getHeight
    void checkSizeCalcs() -> checkSizeCalcs
    net.miginfocom.layout.UnitValue[] getPos(net.miginfocom.layout.ComponentWrapper,net.miginfocom.layout.CC) -> getPos
    net.miginfocom.layout.BoundSize[] getCallbackSize(net.miginfocom.layout.ComponentWrapper) -> getCallbackSize
    int getDockInsets(java.util.TreeSet) -> getDockInsets
    boolean setLinkedBounds(net.miginfocom.layout.ComponentWrapper,net.miginfocom.layout.CC,int,int,int,int,boolean) -> setLinkedBounds
    int increase(int[],int) -> increase
    void wrap(int[],net.miginfocom.layout.BoundSize) -> wrap
    void sortCellsByPlatform(java.util.Collection,net.miginfocom.layout.ContainerWrapper) -> sortCellsByPlatform
    java.lang.Float[] getDefaultPushWeights(boolean) -> getDefaultPushWeights
    void clearGroupLinkBounds() -> clearGroupLinkBounds
    void resetLinkValues(boolean,boolean) -> resetLinkValues
    net.miginfocom.layout.Grid$LinkedDimGroup getGroupContaining(java.util.ArrayList[],net.miginfocom.layout.Grid$CompWrap) -> getGroupContaining
    boolean doAbsoluteCorrections(net.miginfocom.layout.Grid$CompWrap,int[]) -> doAbsoluteCorrections
    void adjustSizeForAbsolute(boolean) -> adjustSizeForAbsolute
    int[] getAbsoluteDimBounds(net.miginfocom.layout.Grid$CompWrap,int,boolean) -> getAbsoluteDimBounds
    void layoutInOneDim(int,net.miginfocom.layout.UnitValue,boolean,java.lang.Float[]) -> layoutInOneDim
    void addToSizeGroup(java.util.HashMap,java.lang.String,int[]) -> addToSizeGroup
    java.util.HashMap addToEndGroup(java.util.HashMap,java.lang.String,int) -> addToEndGroup
    net.miginfocom.layout.Grid$FlowSizeSpec calcRowsOrColsSizes(boolean) -> calcRowsOrColsSizes
    int getParentSize(net.miginfocom.layout.ComponentWrapper,boolean) -> getParentSize
    int[] getMinPrefMaxSumSize(boolean) -> getMinPrefMaxSumSize
    net.miginfocom.layout.ResizeConstraint[] getRowResizeConstraints(net.miginfocom.layout.DimConstraint[]) -> getRowResizeConstraints
    net.miginfocom.layout.ResizeConstraint[] getComponentResizeConstraints(java.util.ArrayList,boolean) -> getComponentResizeConstraints
    boolean[] getComponentGapPush(java.util.ArrayList,boolean) -> getComponentGapPush
    int[][] getRowGaps(net.miginfocom.layout.DimConstraint[],int,boolean,boolean[]) -> getRowGaps
    int[][] getGaps(java.util.ArrayList,boolean) -> getGaps
    boolean hasDocks() -> hasDocks
    void adjustMinPrefForSpanningComps(net.miginfocom.layout.DimConstraint[],java.lang.Float[],net.miginfocom.layout.Grid$FlowSizeSpec,java.util.ArrayList[]) -> adjustMinPrefForSpanningComps
    java.util.ArrayList[] divideIntoLinkedGroups(boolean) -> divideIntoLinkedGroups
    int convertSpanToSparseGrid(int,int,java.util.TreeSet) -> convertSpanToSparseGrid
    boolean isCellFree(int,int,java.util.ArrayList) -> isCellFree
    net.miginfocom.layout.Grid$Cell getCell(int,int) -> getCell
    void setCell(int,int,net.miginfocom.layout.Grid$Cell) -> setCell
    void addDockingCell(int[],int,net.miginfocom.layout.Grid$CompWrap) -> addDockingCell
    void layoutBaseline(net.miginfocom.layout.ContainerWrapper,java.util.ArrayList,net.miginfocom.layout.DimConstraint,int,int,int,int) -> layoutBaseline
    void layoutSerial(net.miginfocom.layout.ContainerWrapper,java.util.ArrayList,net.miginfocom.layout.DimConstraint,int,int,boolean,int,boolean) -> layoutSerial
    void setCompWrapBounds(net.miginfocom.layout.ContainerWrapper,int[],java.util.ArrayList,net.miginfocom.layout.UnitValue,int,int,boolean,boolean) -> setCompWrapBounds
    void layoutParallel(net.miginfocom.layout.ContainerWrapper,java.util.ArrayList,net.miginfocom.layout.DimConstraint,int,int,boolean,boolean) -> layoutParallel
    void setCompWrapBounds(net.miginfocom.layout.ContainerWrapper,int[][],java.util.ArrayList,net.miginfocom.layout.UnitValue,int,int,boolean,boolean) -> setCompWrapBounds
    net.miginfocom.layout.UnitValue correctAlign(net.miginfocom.layout.CC,net.miginfocom.layout.UnitValue,boolean,boolean) -> correctAlign
    int[] getBaselineAboveBelow(java.util.ArrayList,int,boolean) -> getBaselineAboveBelow
    int getTotalSizeParallel(java.util.ArrayList,int,boolean) -> getTotalSizeParallel
    int getTotalSizeSerial(java.util.ArrayList,int,boolean) -> getTotalSizeSerial
    int getTotalGroupsSizeParallel(java.util.ArrayList,int,boolean) -> getTotalGroupsSizeParallel
    int[][] getComponentSizes(java.util.ArrayList,boolean) -> getComponentSizes
    net.miginfocom.layout.Grid$FlowSizeSpec mergeSizesGapsAndResConstrs(net.miginfocom.layout.ResizeConstraint[],boolean[],int[][],int[][]) -> mergeSizesGapsAndResConstrs
    int[] mergeSizes(int[],int[]) -> mergeSizes
    int mergeSizes(int,int,boolean) -> mergeSizes
    int constrainSize(int) -> constrainSize
    void correctMinMax(int[]) -> correctMinMax
    java.lang.Float[] extractSubArray(net.miginfocom.layout.DimConstraint[],java.lang.Float[],int,int) -> extractSubArray
    void putSizesAndIndexes(java.lang.Object,int[],int[],boolean) -> putSizesAndIndexes
    int[][] getSizesAndIndexes(java.lang.Object,boolean) -> getSizesAndIndexes
    void saveGrid(net.miginfocom.layout.ComponentWrapper,java.util.LinkedHashMap) -> saveGrid
    java.util.HashMap getGridPositions(java.lang.Object) -> getGridPositions
    void access$4300(net.miginfocom.layout.ContainerWrapper,java.util.ArrayList,net.miginfocom.layout.DimConstraint,int,int,boolean,boolean) -> access$4300
    void access$4400(net.miginfocom.layout.ContainerWrapper,java.util.ArrayList,net.miginfocom.layout.DimConstraint,int,int,int,int) -> access$4400
    void access$4500(net.miginfocom.layout.ContainerWrapper,java.util.ArrayList,net.miginfocom.layout.DimConstraint,int,int,boolean,int,boolean) -> access$4500
    int access$4600(java.util.ArrayList,int,boolean) -> access$4600
    int[] access$4700(java.util.ArrayList,int,boolean) -> access$4700
    int access$4800(java.util.ArrayList,int,boolean) -> access$4800
    void access$4900(int[]) -> access$4900
    int access$5000(int) -> access$5000
    java.lang.Float[] access$5600(net.miginfocom.layout.DimConstraint[],java.lang.Float[],int,int) -> access$5600
    void <clinit>() -> <clinit>
net.miginfocom.layout.Grid$1 -> net.miginfocom.layout.Grid$1:
net.miginfocom.layout.Grid$Cell -> net.miginfocom.layout.Grid$Cell:
    int spanx -> spanx
    int spany -> spany
    boolean flowx -> flowx
    java.util.ArrayList compWraps -> compWraps
    boolean hasTagged -> hasTagged
    void <init>(net.miginfocom.layout.Grid$CompWrap) -> <init>
    void <init>(int,int,boolean) -> <init>
    void <init>(net.miginfocom.layout.Grid$CompWrap,int,int,boolean) -> <init>
    void <init>(net.miginfocom.layout.Grid$CompWrap,net.miginfocom.layout.Grid$1) -> <init>
    java.util.ArrayList access$200(net.miginfocom.layout.Grid$Cell) -> access$200
    void <init>(int,int,boolean,net.miginfocom.layout.Grid$1) -> <init>
    boolean access$476(net.miginfocom.layout.Grid$Cell,int) -> access$476
    boolean access$400(net.miginfocom.layout.Grid$Cell) -> access$400
    int access$500(net.miginfocom.layout.Grid$Cell) -> access$500
    int access$600(net.miginfocom.layout.Grid$Cell) -> access$600
    boolean access$1200(net.miginfocom.layout.Grid$Cell) -> access$1200
    void <init>(net.miginfocom.layout.Grid$CompWrap,int,int,boolean,net.miginfocom.layout.Grid$1) -> <init>
net.miginfocom.layout.Grid$CompWrap -> net.miginfocom.layout.Grid$CompWrap:
    net.miginfocom.layout.ComponentWrapper comp -> comp
    net.miginfocom.layout.CC cc -> cc
    net.miginfocom.layout.UnitValue[] pos -> pos
    int[][] gaps -> gaps
    int[] horSizes -> horSizes
    int[] verSizes -> verSizes
    int x -> x
    int y -> y
    int w -> w
    int h -> h
    int forcedPushGaps -> forcedPushGaps
    void <init>(net.miginfocom.layout.ComponentWrapper,net.miginfocom.layout.CC,int,net.miginfocom.layout.UnitValue[],net.miginfocom.layout.BoundSize[]) -> <init>
    int getSize(net.miginfocom.layout.BoundSize,int,boolean,int) -> getSize
    void calcGaps(net.miginfocom.layout.ComponentWrapper,net.miginfocom.layout.CC,net.miginfocom.layout.ComponentWrapper,net.miginfocom.layout.CC,java.lang.String,boolean,boolean) -> calcGaps
    void setDimBounds(int,int,boolean) -> setDimBounds
    boolean isPushGap(boolean,boolean) -> isPushGap
    boolean transferBounds(boolean) -> transferBounds
    void setSizes(int[],boolean) -> setSizes
    void setGaps(int[],int) -> setGaps
    void mergeGapSizes(int[],boolean,boolean) -> mergeGapSizes
    int getGapIx(boolean,boolean) -> getGapIx
    int getSizeInclGaps(int,boolean) -> getSizeInclGaps
    int getSize(int,boolean) -> getSize
    int getGapBefore(int,boolean) -> getGapBefore
    int getGapAfter(int,boolean) -> getGapAfter
    int[] getGaps(boolean,boolean) -> getGaps
    int filter(int,int) -> filter
    boolean isBaselineAlign(boolean) -> isBaselineAlign
    int getBaseline(int) -> getBaseline
    void <init>(net.miginfocom.layout.ComponentWrapper,net.miginfocom.layout.CC,int,net.miginfocom.layout.UnitValue[],net.miginfocom.layout.BoundSize[],net.miginfocom.layout.Grid$1) -> <init>
    net.miginfocom.layout.CC access$700(net.miginfocom.layout.Grid$CompWrap) -> access$700
    int[] access$800(net.miginfocom.layout.Grid$CompWrap) -> access$800
    int[] access$900(net.miginfocom.layout.Grid$CompWrap) -> access$900
    void access$1000(net.miginfocom.layout.Grid$CompWrap,int[],boolean) -> access$1000
    net.miginfocom.layout.ComponentWrapper access$1100(net.miginfocom.layout.Grid$CompWrap) -> access$1100
    void access$1300(net.miginfocom.layout.Grid$CompWrap,net.miginfocom.layout.ComponentWrapper,net.miginfocom.layout.CC,net.miginfocom.layout.ComponentWrapper,net.miginfocom.layout.CC,java.lang.String,boolean,boolean) -> access$1300
    int access$1400(net.miginfocom.layout.Grid$CompWrap) -> access$1400
    int access$1500(net.miginfocom.layout.Grid$CompWrap) -> access$1500
    int access$1600(net.miginfocom.layout.Grid$CompWrap) -> access$1600
    int access$1700(net.miginfocom.layout.Grid$CompWrap) -> access$1700
    int access$1502(net.miginfocom.layout.Grid$CompWrap,int) -> access$1502
    int access$1702(net.miginfocom.layout.Grid$CompWrap,int) -> access$1702
    int access$1412(net.miginfocom.layout.Grid$CompWrap,int) -> access$1412
    int access$1612(net.miginfocom.layout.Grid$CompWrap,int) -> access$1612
    boolean access$1800(net.miginfocom.layout.Grid$CompWrap,boolean) -> access$1800
    void access$2200(net.miginfocom.layout.Grid$CompWrap,int[],boolean,boolean) -> access$2200
    int access$2302(net.miginfocom.layout.Grid$CompWrap,int) -> access$2302
    int access$2376(net.miginfocom.layout.Grid$CompWrap,int) -> access$2376
    void access$2400(net.miginfocom.layout.Grid$CompWrap,int[],int) -> access$2400
    void access$2600(net.miginfocom.layout.Grid$CompWrap,int,int,boolean) -> access$2600
    net.miginfocom.layout.UnitValue[] access$2700(net.miginfocom.layout.Grid$CompWrap) -> access$2700
    int access$2800(net.miginfocom.layout.Grid$CompWrap,int,boolean) -> access$2800
    boolean access$3300(net.miginfocom.layout.Grid$CompWrap,boolean,boolean) -> access$3300
    int[] access$3400(net.miginfocom.layout.Grid$CompWrap,boolean,boolean) -> access$3400
    boolean access$3900(net.miginfocom.layout.Grid$CompWrap,boolean) -> access$3900
    int access$5100(net.miginfocom.layout.Grid$CompWrap,int) -> access$5100
    int access$5200(net.miginfocom.layout.Grid$CompWrap,int,boolean) -> access$5200
    int access$5300(net.miginfocom.layout.Grid$CompWrap,int,boolean) -> access$5300
    int access$5400(net.miginfocom.layout.Grid$CompWrap,int,boolean) -> access$5400
net.miginfocom.layout.Grid$FlowSizeSpec -> net.miginfocom.layout.Grid$FlowSizeSpec:
    int[][] sizes -> sizes
    net.miginfocom.layout.ResizeConstraint[] resConstsInclGaps -> resConstsInclGaps
    void <init>(int[][],net.miginfocom.layout.ResizeConstraint[]) -> <init>
    int expandSizes(net.miginfocom.layout.DimConstraint[],java.lang.Float[],int,int,int,int,int) -> expandSizes
    int[][] access$2900(net.miginfocom.layout.Grid$FlowSizeSpec) -> access$2900
    net.miginfocom.layout.ResizeConstraint[] access$3000(net.miginfocom.layout.Grid$FlowSizeSpec) -> access$3000
    int access$3600(net.miginfocom.layout.Grid$FlowSizeSpec,net.miginfocom.layout.DimConstraint[],java.lang.Float[],int,int,int,int,int) -> access$3600
    void <init>(int[][],net.miginfocom.layout.ResizeConstraint[],net.miginfocom.layout.Grid$1) -> <init>
net.miginfocom.layout.Grid$LinkedDimGroup -> net.miginfocom.layout.Grid$LinkedDimGroup:
    int TYPE_SERIAL -> TYPE_SERIAL
    int TYPE_PARALLEL -> TYPE_PARALLEL
    int TYPE_BASELINE -> TYPE_BASELINE
    java.lang.String linkCtx -> linkCtx
    int span -> span
    int linkType -> linkType
    boolean isHor -> isHor
    boolean fromEnd -> fromEnd
    java.util.ArrayList _compWraps -> _compWraps
    int[] sizes -> sizes
    int lStart -> lStart
    int lSize -> lSize
    void <init>(java.lang.String,int,int,boolean,boolean) -> <init>
    void addCompWrap(net.miginfocom.layout.Grid$CompWrap) -> addCompWrap
    void setCompWraps(java.util.ArrayList) -> setCompWraps
    void layout(net.miginfocom.layout.DimConstraint,int,int,int) -> layout
    int[] getMinPrefMax() -> getMinPrefMax
    int access$1900(net.miginfocom.layout.Grid$LinkedDimGroup) -> access$1900
    boolean access$2000(net.miginfocom.layout.Grid$LinkedDimGroup) -> access$2000
    int access$2100(net.miginfocom.layout.Grid$LinkedDimGroup) -> access$2100
    java.util.ArrayList access$2500(net.miginfocom.layout.Grid$LinkedDimGroup) -> access$2500
    int access$3100(net.miginfocom.layout.Grid$LinkedDimGroup) -> access$3100
    void access$3200(net.miginfocom.layout.Grid$LinkedDimGroup,net.miginfocom.layout.DimConstraint,int,int,int) -> access$3200
    int[] access$3500(net.miginfocom.layout.Grid$LinkedDimGroup) -> access$3500
    void <init>(java.lang.String,int,int,boolean,boolean,net.miginfocom.layout.Grid$1) -> <init>
    void access$3800(net.miginfocom.layout.Grid$LinkedDimGroup,java.util.ArrayList) -> access$3800
    java.lang.String access$4000(net.miginfocom.layout.Grid$LinkedDimGroup) -> access$4000
    void access$4100(net.miginfocom.layout.Grid$LinkedDimGroup,net.miginfocom.layout.Grid$CompWrap) -> access$4100
net.miginfocom.layout.Grid$WeakCell -> net.miginfocom.layout.Grid$WeakCell:
    java.lang.ref.WeakReference componentRef -> componentRef
    int x -> x
    int y -> y
    int spanX -> spanX
    int spanY -> spanY
    void <init>(java.lang.Object,int,int,int,int) -> <init>
    void <init>(java.lang.Object,int,int,int,int,net.miginfocom.layout.Grid$1) -> <init>
    java.lang.ref.WeakReference access$5800(net.miginfocom.layout.Grid$WeakCell) -> access$5800
    int access$5900(net.miginfocom.layout.Grid$WeakCell) -> access$5900
    int access$6000(net.miginfocom.layout.Grid$WeakCell) -> access$6000
    int access$6100(net.miginfocom.layout.Grid$WeakCell) -> access$6100
    int access$6200(net.miginfocom.layout.Grid$WeakCell) -> access$6200
net.miginfocom.layout.InCellGapProvider -> net.miginfocom.layout.InCellGapProvider:
    net.miginfocom.layout.BoundSize getDefaultGap(net.miginfocom.layout.ComponentWrapper,net.miginfocom.layout.ComponentWrapper,int,java.lang.String,boolean) -> getDefaultGap
net.miginfocom.layout.LC -> net.miginfocom.layout.LC:
    int wrapAfter -> wrapAfter
    java.lang.Boolean leftToRight -> leftToRight
    net.miginfocom.layout.UnitValue[] insets -> insets
    net.miginfocom.layout.UnitValue alignX -> alignX
    net.miginfocom.layout.UnitValue alignY -> alignY
    net.miginfocom.layout.BoundSize gridGapX -> gridGapX
    net.miginfocom.layout.BoundSize gridGapY -> gridGapY
    net.miginfocom.layout.BoundSize width -> width
    net.miginfocom.layout.BoundSize height -> height
    net.miginfocom.layout.BoundSize packW -> packW
    net.miginfocom.layout.BoundSize packH -> packH
    float pwAlign -> pwAlign
    float phAlign -> phAlign
    int debugMillis -> debugMillis
    int hideMode -> hideMode
    boolean noCache -> noCache
    boolean flowX -> flowX
    boolean fillX -> fillX
    boolean fillY -> fillY
    boolean topToBottom -> topToBottom
    boolean noGrid -> noGrid
    boolean visualPadding -> visualPadding
    void <init>() -> <init>
    boolean isNoCache() -> isNoCache
    void setNoCache(boolean) -> setNoCache
    net.miginfocom.layout.UnitValue getAlignX() -> getAlignX
    void setAlignX(net.miginfocom.layout.UnitValue) -> setAlignX
    net.miginfocom.layout.UnitValue getAlignY() -> getAlignY
    void setAlignY(net.miginfocom.layout.UnitValue) -> setAlignY
    int getDebugMillis() -> getDebugMillis
    void setDebugMillis(int) -> setDebugMillis
    boolean isFillX() -> isFillX
    void setFillX(boolean) -> setFillX
    boolean isFillY() -> isFillY
    void setFillY(boolean) -> setFillY
    boolean isFlowX() -> isFlowX
    void setFlowX(boolean) -> setFlowX
    net.miginfocom.layout.BoundSize getGridGapX() -> getGridGapX
    void setGridGapX(net.miginfocom.layout.BoundSize) -> setGridGapX
    net.miginfocom.layout.BoundSize getGridGapY() -> getGridGapY
    void setGridGapY(net.miginfocom.layout.BoundSize) -> setGridGapY
    int getHideMode() -> getHideMode
    void setHideMode(int) -> setHideMode
    net.miginfocom.layout.UnitValue[] getInsets() -> getInsets
    void setInsets(net.miginfocom.layout.UnitValue[]) -> setInsets
    java.lang.Boolean getLeftToRight() -> getLeftToRight
    void setLeftToRight(java.lang.Boolean) -> setLeftToRight
    boolean isNoGrid() -> isNoGrid
    void setNoGrid(boolean) -> setNoGrid
    boolean isTopToBottom() -> isTopToBottom
    void setTopToBottom(boolean) -> setTopToBottom
    boolean isVisualPadding() -> isVisualPadding
    void setVisualPadding(boolean) -> setVisualPadding
    int getWrapAfter() -> getWrapAfter
    void setWrapAfter(int) -> setWrapAfter
    net.miginfocom.layout.BoundSize getPackWidth() -> getPackWidth
    void setPackWidth(net.miginfocom.layout.BoundSize) -> setPackWidth
    net.miginfocom.layout.BoundSize getPackHeight() -> getPackHeight
    void setPackHeight(net.miginfocom.layout.BoundSize) -> setPackHeight
    float getPackHeightAlign() -> getPackHeightAlign
    void setPackHeightAlign(float) -> setPackHeightAlign
    float getPackWidthAlign() -> getPackWidthAlign
    void setPackWidthAlign(float) -> setPackWidthAlign
    net.miginfocom.layout.BoundSize getWidth() -> getWidth
    void setWidth(net.miginfocom.layout.BoundSize) -> setWidth
    net.miginfocom.layout.BoundSize getHeight() -> getHeight
    void setHeight(net.miginfocom.layout.BoundSize) -> setHeight
    net.miginfocom.layout.LC pack() -> pack
    net.miginfocom.layout.LC pack(java.lang.String,java.lang.String) -> pack
    net.miginfocom.layout.LC packAlign(float,float) -> packAlign
    net.miginfocom.layout.LC wrap() -> wrap
    net.miginfocom.layout.LC wrapAfter(int) -> wrapAfter
    net.miginfocom.layout.LC noCache() -> noCache
    net.miginfocom.layout.LC flowY() -> flowY
    net.miginfocom.layout.LC flowX() -> flowX
    net.miginfocom.layout.LC fill() -> fill
    net.miginfocom.layout.LC fillX() -> fillX
    net.miginfocom.layout.LC fillY() -> fillY
    net.miginfocom.layout.LC leftToRight(boolean) -> leftToRight
    net.miginfocom.layout.LC rightToLeft() -> rightToLeft
    net.miginfocom.layout.LC bottomToTop() -> bottomToTop
    net.miginfocom.layout.LC topToBottom() -> topToBottom
    net.miginfocom.layout.LC noGrid() -> noGrid
    net.miginfocom.layout.LC noVisualPadding() -> noVisualPadding
    net.miginfocom.layout.LC insetsAll(java.lang.String) -> insetsAll
    net.miginfocom.layout.LC insets(java.lang.String) -> insets
    net.miginfocom.layout.LC insets(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> insets
    net.miginfocom.layout.LC alignX(java.lang.String) -> alignX
    net.miginfocom.layout.LC alignY(java.lang.String) -> alignY
    net.miginfocom.layout.LC align(java.lang.String,java.lang.String) -> align
    net.miginfocom.layout.LC gridGapX(java.lang.String) -> gridGapX
    net.miginfocom.layout.LC gridGapY(java.lang.String) -> gridGapY
    net.miginfocom.layout.LC gridGap(java.lang.String,java.lang.String) -> gridGap
    net.miginfocom.layout.LC debug(int) -> debug
    net.miginfocom.layout.LC hideMode(int) -> hideMode
    net.miginfocom.layout.LC minWidth(java.lang.String) -> minWidth
    net.miginfocom.layout.LC width(java.lang.String) -> width
    net.miginfocom.layout.LC maxWidth(java.lang.String) -> maxWidth
    net.miginfocom.layout.LC minHeight(java.lang.String) -> minHeight
    net.miginfocom.layout.LC height(java.lang.String) -> height
    net.miginfocom.layout.LC maxHeight(java.lang.String) -> maxHeight
    java.lang.Object readResolve() -> readResolve
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
net.miginfocom.layout.LayoutCallback -> net.miginfocom.layout.LayoutCallback:
    void <init>() -> <init>
    net.miginfocom.layout.UnitValue[] getPosition(net.miginfocom.layout.ComponentWrapper) -> getPosition
    net.miginfocom.layout.BoundSize[] getSize(net.miginfocom.layout.ComponentWrapper) -> getSize
    void correctBounds(net.miginfocom.layout.ComponentWrapper) -> correctBounds
net.miginfocom.layout.LayoutUtil -> net.miginfocom.layout.LayoutUtil:
    int INF -> INF
    int NOT_SET -> NOT_SET
    int MIN -> MIN
    int PREF -> PREF
    int MAX -> MAX
    java.util.WeakHashMap CR_MAP -> CR_MAP
    java.util.WeakHashMap DT_MAP -> DT_MAP
    int eSz -> eSz
    int globalDebugMillis -> globalDebugMillis
    boolean HAS_BEANS -> HAS_BEANS
    java.io.ByteArrayOutputStream writeOutputStream -> writeOutputStream
    byte[] readBuf -> readBuf
    java.util.IdentityHashMap SER_MAP -> SER_MAP
    boolean hasBeans() -> hasBeans
    void <init>() -> <init>
    java.lang.String getVersion() -> getVersion
    int getGlobalDebugMillis() -> getGlobalDebugMillis
    void setGlobalDebugMillis(int) -> setGlobalDebugMillis
    void setDesignTime(net.miginfocom.layout.ContainerWrapper,boolean) -> setDesignTime
    boolean isDesignTime(net.miginfocom.layout.ContainerWrapper) -> isDesignTime
    int getDesignTimeEmptySize() -> getDesignTimeEmptySize
    void setDesignTimeEmptySize(int) -> setDesignTimeEmptySize
    void putCCString(java.lang.Object,java.lang.String) -> putCCString
    void setDelegate(java.lang.Class,java.beans.PersistenceDelegate) -> setDelegate
    java.lang.String getCCString(java.lang.Object) -> getCCString
    void throwCC() -> throwCC
    int[] calculateSerial(int[][],net.miginfocom.layout.ResizeConstraint[],java.lang.Float[],int,int) -> calculateSerial
    java.lang.Object getIndexSafe(java.lang.Object[],int) -> getIndexSafe
    int getBrokenBoundary(float,int,int) -> getBrokenBoundary
    int sum(int[],int,int) -> sum
    int sum(int[]) -> sum
    int getSizeSafe(int[],int) -> getSizeSafe
    net.miginfocom.layout.BoundSize derive(net.miginfocom.layout.BoundSize,net.miginfocom.layout.UnitValue,net.miginfocom.layout.UnitValue,net.miginfocom.layout.UnitValue) -> derive
    boolean isLeftToRight(net.miginfocom.layout.LC,net.miginfocom.layout.ContainerWrapper) -> isLeftToRight
    int[] roundSizes(float[]) -> roundSizes
    boolean equals(java.lang.Object,java.lang.Object) -> equals
    net.miginfocom.layout.UnitValue getInsets(net.miginfocom.layout.LC,int,boolean) -> getInsets
    void writeXMLObject(java.io.OutputStream,java.lang.Object,java.beans.ExceptionListener) -> writeXMLObject
    void writeAsXML(java.io.ObjectOutput,java.lang.Object) -> writeAsXML
    java.lang.Object readAsXML(java.io.ObjectInput) -> readAsXML
    void setSerializedObject(java.lang.Object,java.lang.Object) -> setSerializedObject
    java.lang.Object getSerializedObject(java.lang.Object) -> getSerializedObject
    void <clinit>() -> <clinit>
net.miginfocom.layout.LayoutUtil$1 -> net.miginfocom.layout.LayoutUtil$1:
    void <init>() -> <init>
    void exceptionThrown(java.lang.Exception) -> exceptionThrown
net.miginfocom.layout.LinkHandler -> net.miginfocom.layout.LinkHandler:
    int X -> X
    int Y -> Y
    int WIDTH -> WIDTH
    int HEIGHT -> HEIGHT
    int X2 -> X2
    int Y2 -> Y2
    java.util.ArrayList LAYOUTS -> LAYOUTS
    java.util.ArrayList VALUES -> VALUES
    java.util.ArrayList VALUES_TEMP -> VALUES_TEMP
    void <init>() -> <init>
    java.lang.Integer getValue(java.lang.Object,java.lang.String,int) -> getValue
    boolean setBounds(java.lang.Object,java.lang.String,int,int,int,int) -> setBounds
    boolean setBounds(java.lang.Object,java.lang.String,int,int,int,int,boolean,boolean) -> setBounds
    void clearWeakReferencesNow() -> clearWeakReferencesNow
    boolean clearBounds(java.lang.Object,java.lang.String) -> clearBounds
    void clearTemporaryBounds(java.lang.Object) -> clearTemporaryBounds
    void <clinit>() -> <clinit>
net.miginfocom.layout.PlatformDefaults -> net.miginfocom.layout.PlatformDefaults:
    int DEF_H_UNIT -> DEF_H_UNIT
    int DEF_V_UNIT -> DEF_V_UNIT
    net.miginfocom.layout.InCellGapProvider GAP_PROVIDER -> GAP_PROVIDER
    int MOD_COUNT -> MOD_COUNT
    net.miginfocom.layout.UnitValue LPX4 -> LPX4
    net.miginfocom.layout.UnitValue LPX6 -> LPX6
    net.miginfocom.layout.UnitValue LPX7 -> LPX7
    net.miginfocom.layout.UnitValue LPX9 -> LPX9
    net.miginfocom.layout.UnitValue LPX10 -> LPX10
    net.miginfocom.layout.UnitValue LPX11 -> LPX11
    net.miginfocom.layout.UnitValue LPX12 -> LPX12
    net.miginfocom.layout.UnitValue LPX14 -> LPX14
    net.miginfocom.layout.UnitValue LPX16 -> LPX16
    net.miginfocom.layout.UnitValue LPX18 -> LPX18
    net.miginfocom.layout.UnitValue LPX20 -> LPX20
    net.miginfocom.layout.UnitValue LPY4 -> LPY4
    net.miginfocom.layout.UnitValue LPY6 -> LPY6
    net.miginfocom.layout.UnitValue LPY7 -> LPY7
    net.miginfocom.layout.UnitValue LPY9 -> LPY9
    net.miginfocom.layout.UnitValue LPY10 -> LPY10
    net.miginfocom.layout.UnitValue LPY11 -> LPY11
    net.miginfocom.layout.UnitValue LPY12 -> LPY12
    net.miginfocom.layout.UnitValue LPY14 -> LPY14
    net.miginfocom.layout.UnitValue LPY16 -> LPY16
    net.miginfocom.layout.UnitValue LPY18 -> LPY18
    net.miginfocom.layout.UnitValue LPY20 -> LPY20
    int WINDOWS_XP -> WINDOWS_XP
    int MAC_OSX -> MAC_OSX
    int GNOME -> GNOME
    int CUR_PLAF -> CUR_PLAF
    net.miginfocom.layout.UnitValue[] PANEL_INS -> PANEL_INS
    net.miginfocom.layout.UnitValue[] DIALOG_INS -> DIALOG_INS
    java.lang.String BUTTON_FORMAT -> BUTTON_FORMAT
    java.util.HashMap HOR_DEFS -> HOR_DEFS
    java.util.HashMap VER_DEFS -> VER_DEFS
    net.miginfocom.layout.BoundSize DEF_VGAP -> DEF_VGAP
    net.miginfocom.layout.BoundSize DEF_HGAP -> DEF_HGAP
    net.miginfocom.layout.BoundSize RELATED_X -> RELATED_X
    net.miginfocom.layout.BoundSize RELATED_Y -> RELATED_Y
    net.miginfocom.layout.BoundSize UNRELATED_X -> UNRELATED_X
    net.miginfocom.layout.BoundSize UNRELATED_Y -> UNRELATED_Y
    net.miginfocom.layout.UnitValue BUTT_WIDTH -> BUTT_WIDTH
    java.lang.Float horScale -> horScale
    java.lang.Float verScale -> verScale
    int BASE_FONT_SIZE -> BASE_FONT_SIZE
    int BASE_SCALE_FACTOR -> BASE_SCALE_FACTOR
    int BASE_REAL_PIXEL -> BASE_REAL_PIXEL
    int LP_BASE -> LP_BASE
    java.lang.Integer BASE_DPI_FORCED -> BASE_DPI_FORCED
    int BASE_DPI -> BASE_DPI
    boolean dra -> dra
    int getCurrentPlatform() -> getCurrentPlatform
    void <init>() -> <init>
    void setPlatform(int) -> setPlatform
    int getPlatformDPI(int) -> getPlatformDPI
    int getPlatform() -> getPlatform
    int getDefaultDPI() -> getDefaultDPI
    void setDefaultDPI(java.lang.Integer) -> setDefaultDPI
    java.lang.Float getHorizontalScaleFactor() -> getHorizontalScaleFactor
    void setHorizontalScaleFactor(java.lang.Float) -> setHorizontalScaleFactor
    java.lang.Float getVerticalScaleFactor() -> getVerticalScaleFactor
    void setVerticalScaleFactor(java.lang.Float) -> setVerticalScaleFactor
    int getLogicalPixelBase() -> getLogicalPixelBase
    void setLogicalPixelBase(int) -> setLogicalPixelBase
    void setRelatedGap(net.miginfocom.layout.UnitValue,net.miginfocom.layout.UnitValue) -> setRelatedGap
    void setUnrelatedGap(net.miginfocom.layout.UnitValue,net.miginfocom.layout.UnitValue) -> setUnrelatedGap
    void setParagraphGap(net.miginfocom.layout.UnitValue,net.miginfocom.layout.UnitValue) -> setParagraphGap
    void setIndentGap(net.miginfocom.layout.UnitValue,net.miginfocom.layout.UnitValue) -> setIndentGap
    void setGridCellGap(net.miginfocom.layout.UnitValue,net.miginfocom.layout.UnitValue) -> setGridCellGap
    void setMinimumButtonWidth(net.miginfocom.layout.UnitValue) -> setMinimumButtonWidth
    net.miginfocom.layout.UnitValue getMinimumButtonWidth() -> getMinimumButtonWidth
    net.miginfocom.layout.UnitValue getUnitValueX(java.lang.String) -> getUnitValueX
    net.miginfocom.layout.UnitValue getUnitValueY(java.lang.String) -> getUnitValueY
    void setUnitValue(java.lang.String[],net.miginfocom.layout.UnitValue,net.miginfocom.layout.UnitValue) -> setUnitValue
    int convertToPixels(float,java.lang.String,boolean,float,net.miginfocom.layout.ContainerWrapper,net.miginfocom.layout.ComponentWrapper) -> convertToPixels
    java.lang.String getButtonOrder() -> getButtonOrder
    void setButtonOrder(java.lang.String) -> setButtonOrder
    java.lang.String getTagForChar(char) -> getTagForChar
    net.miginfocom.layout.BoundSize getGridGapX() -> getGridGapX
    net.miginfocom.layout.BoundSize getGridGapY() -> getGridGapY
    net.miginfocom.layout.UnitValue getDialogInsets(int) -> getDialogInsets
    void setDialogInsets(net.miginfocom.layout.UnitValue,net.miginfocom.layout.UnitValue,net.miginfocom.layout.UnitValue,net.miginfocom.layout.UnitValue) -> setDialogInsets
    net.miginfocom.layout.UnitValue getPanelInsets(int) -> getPanelInsets
    void setPanelInsets(net.miginfocom.layout.UnitValue,net.miginfocom.layout.UnitValue,net.miginfocom.layout.UnitValue,net.miginfocom.layout.UnitValue) -> setPanelInsets
    float getLabelAlignPercentage() -> getLabelAlignPercentage
    net.miginfocom.layout.BoundSize getDefaultComponentGap(net.miginfocom.layout.ComponentWrapper,net.miginfocom.layout.ComponentWrapper,int,java.lang.String,boolean) -> getDefaultComponentGap
    net.miginfocom.layout.InCellGapProvider getGapProvider() -> getGapProvider
    void setGapProvider(net.miginfocom.layout.InCellGapProvider) -> setGapProvider
    int getModCount() -> getModCount
    void invalidate() -> invalidate
    int getDefaultHorizontalUnit() -> getDefaultHorizontalUnit
    void setDefaultHorizontalUnit(int) -> setDefaultHorizontalUnit
    int getDefaultVerticalUnit() -> getDefaultVerticalUnit
    void setDefaultVerticalUnit(int) -> setDefaultVerticalUnit
    boolean getDefaultRowAlignmentBaseline() -> getDefaultRowAlignmentBaseline
    void setDefaultRowAlignmentBaseline(boolean) -> setDefaultRowAlignmentBaseline
    void <clinit>() -> <clinit>
net.miginfocom.layout.ResizeConstraint -> net.miginfocom.layout.ResizeConstraint:
    java.lang.Float WEIGHT_100 -> WEIGHT_100
    java.lang.Float grow -> grow
    int growPrio -> growPrio
    java.lang.Float shrink -> shrink
    int shrinkPrio -> shrinkPrio
    void <init>() -> <init>
    void <init>(int,java.lang.Float,int,java.lang.Float) -> <init>
    java.lang.Object readResolve() -> readResolve
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void <clinit>() -> <clinit>
net.miginfocom.layout.UnitConverter -> net.miginfocom.layout.UnitConverter:
    int UNABLE -> UNABLE
    void <init>() -> <init>
    int convertToPixels(float,java.lang.String,boolean,float,net.miginfocom.layout.ContainerWrapper,net.miginfocom.layout.ComponentWrapper) -> convertToPixels
net.miginfocom.layout.UnitValue -> net.miginfocom.layout.UnitValue:
    java.util.HashMap UNIT_MAP -> UNIT_MAP
    java.util.ArrayList CONVERTERS -> CONVERTERS
    int STATIC -> STATIC
    int ADD -> ADD
    int SUB -> SUB
    int MUL -> MUL
    int DIV -> DIV
    int MIN -> MIN
    int MAX -> MAX
    int MID -> MID
    int PIXEL -> PIXEL
    int LPX -> LPX
    int LPY -> LPY
    int MM -> MM
    int CM -> CM
    int INCH -> INCH
    int PERCENT -> PERCENT
    int PT -> PT
    int SPX -> SPX
    int SPY -> SPY
    int ALIGN -> ALIGN
    int MIN_SIZE -> MIN_SIZE
    int PREF_SIZE -> PREF_SIZE
    int MAX_SIZE -> MAX_SIZE
    int BUTTON -> BUTTON
    int LINK_X -> LINK_X
    int LINK_Y -> LINK_Y
    int LINK_W -> LINK_W
    int LINK_H -> LINK_H
    int LINK_X2 -> LINK_X2
    int LINK_Y2 -> LINK_Y2
    int LINK_XPOS -> LINK_XPOS
    int LINK_YPOS -> LINK_YPOS
    int LOOKUP -> LOOKUP
    int LABEL_ALIGN -> LABEL_ALIGN
    int IDENTITY -> IDENTITY
    net.miginfocom.layout.UnitValue ZERO -> ZERO
    net.miginfocom.layout.UnitValue TOP -> TOP
    net.miginfocom.layout.UnitValue LEADING -> LEADING
    net.miginfocom.layout.UnitValue LEFT -> LEFT
    net.miginfocom.layout.UnitValue CENTER -> CENTER
    net.miginfocom.layout.UnitValue TRAILING -> TRAILING
    net.miginfocom.layout.UnitValue RIGHT -> RIGHT
    net.miginfocom.layout.UnitValue BOTTOM -> BOTTOM
    net.miginfocom.layout.UnitValue LABEL -> LABEL
    net.miginfocom.layout.UnitValue INF -> INF
    net.miginfocom.layout.UnitValue BASELINE_IDENTITY -> BASELINE_IDENTITY
    float value -> value
    int unit -> unit
    int oper -> oper
    java.lang.String unitStr -> unitStr
    java.lang.String linkId -> linkId
    boolean isHor -> isHor
    net.miginfocom.layout.UnitValue[] subUnits -> subUnits
    float[] SCALE -> SCALE
    long serialVersionUID -> serialVersionUID
    void <init>(float) -> <init>
    void <init>(float,int,java.lang.String) -> <init>
    void <init>(float,java.lang.String,boolean,int,java.lang.String) -> <init>
    void <init>(boolean,int,net.miginfocom.layout.UnitValue,net.miginfocom.layout.UnitValue,java.lang.String) -> <init>
    void <init>(float,java.lang.String,int,boolean,int,net.miginfocom.layout.UnitValue,net.miginfocom.layout.UnitValue,java.lang.String) -> <init>
    int getPixels(float,net.miginfocom.layout.ContainerWrapper,net.miginfocom.layout.ComponentWrapper) -> getPixels
    float getPixelsExact(float,net.miginfocom.layout.ContainerWrapper,net.miginfocom.layout.ComponentWrapper) -> getPixelsExact
    float lookup(float,net.miginfocom.layout.ContainerWrapper,net.miginfocom.layout.ComponentWrapper) -> lookup
    int parseUnitString() -> parseUnitString
    boolean isLinked() -> isLinked
    boolean isLinkedDeep() -> isLinkedDeep
    java.lang.String getLinkTargetId() -> getLinkTargetId
    net.miginfocom.layout.UnitValue getSubUnitValue(int) -> getSubUnitValue
    int getSubUnitCount() -> getSubUnitCount
    net.miginfocom.layout.UnitValue[] getSubUnits() -> getSubUnits
    int getUnit() -> getUnit
    java.lang.String getUnitString() -> getUnitString
    int getOperation() -> getOperation
    float getValue() -> getValue
    boolean isHorizontal() -> isHorizontal
    java.lang.String toString() -> toString
    java.lang.String getConstraintString() -> getConstraintString
    int hashCode() -> hashCode
    void addGlobalUnitConverter(net.miginfocom.layout.UnitConverter) -> addGlobalUnitConverter
    boolean removeGlobalUnitConverter(net.miginfocom.layout.UnitConverter) -> removeGlobalUnitConverter
    net.miginfocom.layout.UnitConverter[] getGlobalUnitConverters() -> getGlobalUnitConverters
    int getDefaultUnit() -> getDefaultUnit
    void setDefaultUnit(int) -> setDefaultUnit
    java.lang.Object readResolve() -> readResolve
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    void <clinit>() -> <clinit>
net.miginfocom.layout.UnitValue$1 -> net.miginfocom.layout.UnitValue$1:
    void <init>() -> <init>
    java.beans.Expression instantiate(java.lang.Object,java.beans.Encoder) -> instantiate
org.antlr.runtime.ANTLRStringStream -> org.antlr.runtime.ANTLRStringStream:
    char[] data -> data
    int n -> n
    int p -> p
    int line -> line
    int charPositionInLine -> charPositionInLine
    int markDepth -> markDepth
    java.util.List markers -> markers
    int lastMarker -> lastMarker
    java.lang.String name -> name
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(char[],int) -> <init>
    void reset() -> reset
    void consume() -> consume
    int LA(int) -> LA
    int LT(int) -> LT
    int index() -> index
    int size() -> size
    int mark() -> mark
    void rewind(int) -> rewind
    void rewind() -> rewind
    void release(int) -> release
    void seek(int) -> seek
    java.lang.String substring(int,int) -> substring
    int getLine() -> getLine
    int getCharPositionInLine() -> getCharPositionInLine
    void setLine(int) -> setLine
    void setCharPositionInLine(int) -> setCharPositionInLine
    java.lang.String getSourceName() -> getSourceName
    java.lang.String toString() -> toString
org.antlr.runtime.BaseRecognizer -> org.antlr.runtime.BaseRecognizer:
    int MEMO_RULE_FAILED -> MEMO_RULE_FAILED
    int MEMO_RULE_UNKNOWN -> MEMO_RULE_UNKNOWN
    int INITIAL_FOLLOW_STACK_SIZE -> INITIAL_FOLLOW_STACK_SIZE
    int DEFAULT_TOKEN_CHANNEL -> DEFAULT_TOKEN_CHANNEL
    int HIDDEN -> HIDDEN
    java.lang.String NEXT_TOKEN_RULE_NAME -> NEXT_TOKEN_RULE_NAME
    org.antlr.runtime.RecognizerSharedState state -> state
    void <init>() -> <init>
    void <init>(org.antlr.runtime.RecognizerSharedState) -> <init>
    void reset() -> reset
    java.lang.Object match(org.antlr.runtime.IntStream,int,org.antlr.runtime.BitSet) -> match
    void matchAny(org.antlr.runtime.IntStream) -> matchAny
    boolean mismatchIsUnwantedToken(org.antlr.runtime.IntStream,int) -> mismatchIsUnwantedToken
    boolean mismatchIsMissingToken(org.antlr.runtime.IntStream,org.antlr.runtime.BitSet) -> mismatchIsMissingToken
    void reportError(org.antlr.runtime.RecognitionException) -> reportError
    void displayRecognitionError(java.lang.String[],org.antlr.runtime.RecognitionException) -> displayRecognitionError
    java.lang.String getErrorMessage(org.antlr.runtime.RecognitionException,java.lang.String[]) -> getErrorMessage
    int getNumberOfSyntaxErrors() -> getNumberOfSyntaxErrors
    java.lang.String getErrorHeader(org.antlr.runtime.RecognitionException) -> getErrorHeader
    java.lang.String getTokenErrorDisplay(org.antlr.runtime.Token) -> getTokenErrorDisplay
    void emitErrorMessage(java.lang.String) -> emitErrorMessage
    void recover(org.antlr.runtime.IntStream,org.antlr.runtime.RecognitionException) -> recover
    void beginResync() -> beginResync
    void endResync() -> endResync
    org.antlr.runtime.BitSet computeErrorRecoverySet() -> computeErrorRecoverySet
    org.antlr.runtime.BitSet computeContextSensitiveRuleFOLLOW() -> computeContextSensitiveRuleFOLLOW
    org.antlr.runtime.BitSet combineFollows(boolean) -> combineFollows
    java.lang.Object recoverFromMismatchedToken(org.antlr.runtime.IntStream,int,org.antlr.runtime.BitSet) -> recoverFromMismatchedToken
    java.lang.Object recoverFromMismatchedSet(org.antlr.runtime.IntStream,org.antlr.runtime.RecognitionException,org.antlr.runtime.BitSet) -> recoverFromMismatchedSet
    java.lang.Object getCurrentInputSymbol(org.antlr.runtime.IntStream) -> getCurrentInputSymbol
    java.lang.Object getMissingSymbol(org.antlr.runtime.IntStream,org.antlr.runtime.RecognitionException,int,org.antlr.runtime.BitSet) -> getMissingSymbol
    void consumeUntil(org.antlr.runtime.IntStream,int) -> consumeUntil
    void consumeUntil(org.antlr.runtime.IntStream,org.antlr.runtime.BitSet) -> consumeUntil
    void pushFollow(org.antlr.runtime.BitSet) -> pushFollow
    java.util.List getRuleInvocationStack() -> getRuleInvocationStack
    java.util.List getRuleInvocationStack(java.lang.Throwable,java.lang.String) -> getRuleInvocationStack
    int getBacktrackingLevel() -> getBacktrackingLevel
    void setBacktrackingLevel(int) -> setBacktrackingLevel
    boolean failed() -> failed
    java.lang.String[] getTokenNames() -> getTokenNames
    java.lang.String getGrammarFileName() -> getGrammarFileName
    java.lang.String getSourceName() -> getSourceName
    java.util.List toStrings(java.util.List) -> toStrings
    int getRuleMemoization(int,int) -> getRuleMemoization
    boolean alreadyParsedRule(org.antlr.runtime.IntStream,int) -> alreadyParsedRule
    void memoize(org.antlr.runtime.IntStream,int,int) -> memoize
    int getRuleMemoizationCacheSize() -> getRuleMemoizationCacheSize
    void traceIn(java.lang.String,int,java.lang.Object) -> traceIn
    void traceOut(java.lang.String,int,java.lang.Object) -> traceOut
org.antlr.runtime.BitSet -> org.antlr.runtime.BitSet:
    int BITS -> BITS
    int LOG_BITS -> LOG_BITS
    int MOD_MASK -> MOD_MASK
    long[] bits -> bits
    void <init>() -> <init>
    void <init>(long[]) -> <init>
    void <init>(java.util.List) -> <init>
    void <init>(int) -> <init>
    org.antlr.runtime.BitSet of(int) -> of
    org.antlr.runtime.BitSet of(int,int) -> of
    org.antlr.runtime.BitSet of(int,int,int) -> of
    org.antlr.runtime.BitSet of(int,int,int,int) -> of
    org.antlr.runtime.BitSet or(org.antlr.runtime.BitSet) -> or
    void add(int) -> add
    void growToInclude(int) -> growToInclude
    void orInPlace(org.antlr.runtime.BitSet) -> orInPlace
    void setSize(int) -> setSize
    long bitMask(int) -> bitMask
    java.lang.Object clone() -> clone
    int size() -> size
    boolean equals(java.lang.Object) -> equals
    boolean member(int) -> member
    void remove(int) -> remove
    boolean isNil() -> isNil
    int numWordsToHold(int) -> numWordsToHold
    int numBits() -> numBits
    int lengthInLongWords() -> lengthInLongWords
    int[] toArray() -> toArray
    long[] toPackedArray() -> toPackedArray
    int wordNumber(int) -> wordNumber
    java.lang.String toString() -> toString
    java.lang.String toString(java.lang.String[]) -> toString
org.antlr.runtime.BufferedTokenStream -> org.antlr.runtime.BufferedTokenStream:
    org.antlr.runtime.TokenSource tokenSource -> tokenSource
    java.util.List tokens -> tokens
    int lastMarker -> lastMarker
    int p -> p
    int range -> range
    void <init>() -> <init>
    void <init>(org.antlr.runtime.TokenSource) -> <init>
    org.antlr.runtime.TokenSource getTokenSource() -> getTokenSource
    int index() -> index
    int range() -> range
    int mark() -> mark
    void release(int) -> release
    void rewind(int) -> rewind
    void rewind() -> rewind
    void reset() -> reset
    void seek(int) -> seek
    int size() -> size
    void consume() -> consume
    void sync(int) -> sync
    void fetch(int) -> fetch
    org.antlr.runtime.Token get(int) -> get
    java.util.List get(int,int) -> get
    int LA(int) -> LA
    org.antlr.runtime.Token LB(int) -> LB
    org.antlr.runtime.Token LT(int) -> LT
    void setup() -> setup
    void setTokenSource(org.antlr.runtime.TokenSource) -> setTokenSource
    java.util.List getTokens() -> getTokens
    java.util.List getTokens(int,int) -> getTokens
    java.util.List getTokens(int,int,org.antlr.runtime.BitSet) -> getTokens
    java.util.List getTokens(int,int,java.util.List) -> getTokens
    java.util.List getTokens(int,int,int) -> getTokens
    java.lang.String getSourceName() -> getSourceName
    java.lang.String toString() -> toString
    java.lang.String toString(int,int) -> toString
    java.lang.String toString(org.antlr.runtime.Token,org.antlr.runtime.Token) -> toString
    void fill() -> fill
org.antlr.runtime.CharStream -> org.antlr.runtime.CharStream:
    int EOF -> EOF
    java.lang.String substring(int,int) -> substring
    int LT(int) -> LT
    int getLine() -> getLine
    void setLine(int) -> setLine
    void setCharPositionInLine(int) -> setCharPositionInLine
    int getCharPositionInLine() -> getCharPositionInLine
org.antlr.runtime.CharStreamState -> org.antlr.runtime.CharStreamState:
    int p -> p
    int line -> line
    int charPositionInLine -> charPositionInLine
    void <init>() -> <init>
org.antlr.runtime.CommonToken -> org.antlr.runtime.CommonToken:
    int type -> type
    int line -> line
    int charPositionInLine -> charPositionInLine
    int channel -> channel
    org.antlr.runtime.CharStream input -> input
    java.lang.String text -> text
    int index -> index
    int start -> start
    int stop -> stop
    void <init>(int) -> <init>
    void <init>(org.antlr.runtime.CharStream,int,int,int,int) -> <init>
    void <init>(int,java.lang.String) -> <init>
    void <init>(org.antlr.runtime.Token) -> <init>
    int getType() -> getType
    void setLine(int) -> setLine
    java.lang.String getText() -> getText
    void setText(java.lang.String) -> setText
    int getLine() -> getLine
    int getCharPositionInLine() -> getCharPositionInLine
    void setCharPositionInLine(int) -> setCharPositionInLine
    int getChannel() -> getChannel
    void setChannel(int) -> setChannel
    void setType(int) -> setType
    int getStartIndex() -> getStartIndex
    void setStartIndex(int) -> setStartIndex
    int getStopIndex() -> getStopIndex
    void setStopIndex(int) -> setStopIndex
    int getTokenIndex() -> getTokenIndex
    void setTokenIndex(int) -> setTokenIndex
    org.antlr.runtime.CharStream getInputStream() -> getInputStream
    void setInputStream(org.antlr.runtime.CharStream) -> setInputStream
    java.lang.String toString() -> toString
org.antlr.runtime.CommonTokenStream -> org.antlr.runtime.CommonTokenStream:
    int channel -> channel
    void <init>() -> <init>
    void <init>(org.antlr.runtime.TokenSource) -> <init>
    void <init>(org.antlr.runtime.TokenSource,int) -> <init>
    void consume() -> consume
    org.antlr.runtime.Token LB(int) -> LB
    org.antlr.runtime.Token LT(int) -> LT
    int skipOffTokenChannels(int) -> skipOffTokenChannels
    int skipOffTokenChannelsReverse(int) -> skipOffTokenChannelsReverse
    void reset() -> reset
    void setup() -> setup
    int getNumberOfOnChannelTokens() -> getNumberOfOnChannelTokens
    void setTokenSource(org.antlr.runtime.TokenSource) -> setTokenSource
org.antlr.runtime.DFA -> org.antlr.runtime.DFA:
    short[] eot -> eot
    short[] eof -> eof
    char[] min -> min
    char[] max -> max
    short[] accept -> accept
    short[] special -> special
    short[][] transition -> transition
    int decisionNumber -> decisionNumber
    org.antlr.runtime.BaseRecognizer recognizer -> recognizer
    boolean debug -> debug
    void <init>() -> <init>
    int predict(org.antlr.runtime.IntStream) -> predict
    void noViableAlt(int,org.antlr.runtime.IntStream) -> noViableAlt
    void error(org.antlr.runtime.NoViableAltException) -> error
    int specialStateTransition(int,org.antlr.runtime.IntStream) -> specialStateTransition
    java.lang.String getDescription() -> getDescription
    short[] unpackEncodedString(java.lang.String) -> unpackEncodedString
    char[] unpackEncodedStringToUnsignedChars(java.lang.String) -> unpackEncodedStringToUnsignedChars
org.antlr.runtime.EarlyExitException -> org.antlr.runtime.EarlyExitException:
    int decisionNumber -> decisionNumber
    void <init>() -> <init>
    void <init>(int,org.antlr.runtime.IntStream) -> <init>
org.antlr.runtime.FailedPredicateException -> org.antlr.runtime.FailedPredicateException:
    java.lang.String ruleName -> ruleName
    java.lang.String predicateText -> predicateText
    void <init>() -> <init>
    void <init>(org.antlr.runtime.IntStream,java.lang.String,java.lang.String) -> <init>
    java.lang.String toString() -> toString
org.antlr.runtime.IntStream -> org.antlr.runtime.IntStream:
    void consume() -> consume
    int LA(int) -> LA
    int mark() -> mark
    int index() -> index
    void rewind(int) -> rewind
    void rewind() -> rewind
    void release(int) -> release
    void seek(int) -> seek
    int size() -> size
    java.lang.String getSourceName() -> getSourceName
org.antlr.runtime.Lexer -> org.antlr.runtime.Lexer:
    org.antlr.runtime.CharStream input -> input
    void <init>() -> <init>
    void <init>(org.antlr.runtime.CharStream) -> <init>
    void <init>(org.antlr.runtime.CharStream,org.antlr.runtime.RecognizerSharedState) -> <init>
    void reset() -> reset
    org.antlr.runtime.Token nextToken() -> nextToken
    void skip() -> skip
    void mTokens() -> mTokens
    void setCharStream(org.antlr.runtime.CharStream) -> setCharStream
    org.antlr.runtime.CharStream getCharStream() -> getCharStream
    java.lang.String getSourceName() -> getSourceName
    void emit(org.antlr.runtime.Token) -> emit
    org.antlr.runtime.Token emit() -> emit
    void match(java.lang.String) -> match
    void matchAny() -> matchAny
    void match(int) -> match
    void matchRange(int,int) -> matchRange
    int getLine() -> getLine
    int getCharPositionInLine() -> getCharPositionInLine
    int getCharIndex() -> getCharIndex
    java.lang.String getText() -> getText
    void setText(java.lang.String) -> setText
    void reportError(org.antlr.runtime.RecognitionException) -> reportError
    java.lang.String getErrorMessage(org.antlr.runtime.RecognitionException,java.lang.String[]) -> getErrorMessage
    java.lang.String getCharErrorDisplay(int) -> getCharErrorDisplay
    void recover(org.antlr.runtime.RecognitionException) -> recover
    void traceIn(java.lang.String,int) -> traceIn
    void traceOut(java.lang.String,int) -> traceOut
org.antlr.runtime.MismatchedNotSetException -> org.antlr.runtime.MismatchedNotSetException:
    void <init>() -> <init>
    void <init>(org.antlr.runtime.BitSet,org.antlr.runtime.IntStream) -> <init>
    java.lang.String toString() -> toString
org.antlr.runtime.MismatchedRangeException -> org.antlr.runtime.MismatchedRangeException:
    int a -> a
    int b -> b
    void <init>() -> <init>
    void <init>(int,int,org.antlr.runtime.IntStream) -> <init>
    java.lang.String toString() -> toString
org.antlr.runtime.MismatchedSetException -> org.antlr.runtime.MismatchedSetException:
    org.antlr.runtime.BitSet expecting -> expecting
    void <init>() -> <init>
    void <init>(org.antlr.runtime.BitSet,org.antlr.runtime.IntStream) -> <init>
    java.lang.String toString() -> toString
org.antlr.runtime.MismatchedTokenException -> org.antlr.runtime.MismatchedTokenException:
    int expecting -> expecting
    void <init>() -> <init>
    void <init>(int,org.antlr.runtime.IntStream) -> <init>
    java.lang.String toString() -> toString
org.antlr.runtime.MismatchedTreeNodeException -> org.antlr.runtime.MismatchedTreeNodeException:
    int expecting -> expecting
    void <init>() -> <init>
    void <init>(int,org.antlr.runtime.tree.TreeNodeStream) -> <init>
    java.lang.String toString() -> toString
org.antlr.runtime.MissingTokenException -> org.antlr.runtime.MissingTokenException:
    java.lang.Object inserted -> inserted
    void <init>() -> <init>
    void <init>(int,org.antlr.runtime.IntStream,java.lang.Object) -> <init>
    int getMissingType() -> getMissingType
    java.lang.String toString() -> toString
org.antlr.runtime.NoViableAltException -> org.antlr.runtime.NoViableAltException:
    java.lang.String grammarDecisionDescription -> grammarDecisionDescription
    int decisionNumber -> decisionNumber
    int stateNumber -> stateNumber
    void <init>() -> <init>
    void <init>(java.lang.String,int,int,org.antlr.runtime.IntStream) -> <init>
    java.lang.String toString() -> toString
org.antlr.runtime.Parser -> org.antlr.runtime.Parser:
    org.antlr.runtime.TokenStream input -> input
    void <init>(org.antlr.runtime.TokenStream) -> <init>
    void <init>(org.antlr.runtime.TokenStream,org.antlr.runtime.RecognizerSharedState) -> <init>
    void reset() -> reset
    java.lang.Object getCurrentInputSymbol(org.antlr.runtime.IntStream) -> getCurrentInputSymbol
    java.lang.Object getMissingSymbol(org.antlr.runtime.IntStream,org.antlr.runtime.RecognitionException,int,org.antlr.runtime.BitSet) -> getMissingSymbol
    void setTokenStream(org.antlr.runtime.TokenStream) -> setTokenStream
    org.antlr.runtime.TokenStream getTokenStream() -> getTokenStream
    java.lang.String getSourceName() -> getSourceName
    void traceIn(java.lang.String,int) -> traceIn
    void traceOut(java.lang.String,int) -> traceOut
org.antlr.runtime.ParserRuleReturnScope -> org.antlr.runtime.ParserRuleReturnScope:
    org.antlr.runtime.Token start -> start
    org.antlr.runtime.Token stop -> stop
    java.lang.Object tree -> tree
    void <init>() -> <init>
    java.lang.Object getStart() -> getStart
    java.lang.Object getStop() -> getStop
    java.lang.Object getTree() -> getTree
org.antlr.runtime.RecognitionException -> org.antlr.runtime.RecognitionException:
    org.antlr.runtime.IntStream input -> input
    int index -> index
    org.antlr.runtime.Token token -> token
    java.lang.Object node -> node
    int c -> c
    int line -> line
    int charPositionInLine -> charPositionInLine
    boolean approximateLineInfo -> approximateLineInfo
    void <init>() -> <init>
    void <init>(org.antlr.runtime.IntStream) -> <init>
    void extractInformationFromTreeNodeStream(org.antlr.runtime.IntStream) -> extractInformationFromTreeNodeStream
    int getUnexpectedType() -> getUnexpectedType
org.antlr.runtime.RecognizerSharedState -> org.antlr.runtime.RecognizerSharedState:
    org.antlr.runtime.BitSet[] following -> following
    int _fsp -> _fsp
    boolean errorRecovery -> errorRecovery
    int lastErrorIndex -> lastErrorIndex
    boolean failed -> failed
    int syntaxErrors -> syntaxErrors
    int backtracking -> backtracking
    java.util.Map[] ruleMemo -> ruleMemo
    org.antlr.runtime.Token token -> token
    int tokenStartCharIndex -> tokenStartCharIndex
    int tokenStartLine -> tokenStartLine
    int tokenStartCharPositionInLine -> tokenStartCharPositionInLine
    int channel -> channel
    int type -> type
    java.lang.String text -> text
    void <init>() -> <init>
    void <init>(org.antlr.runtime.RecognizerSharedState) -> <init>
org.antlr.runtime.RuleReturnScope -> org.antlr.runtime.RuleReturnScope:
    void <init>() -> <init>
    java.lang.Object getStart() -> getStart
    java.lang.Object getStop() -> getStop
    java.lang.Object getTree() -> getTree
    java.lang.Object getTemplate() -> getTemplate
org.antlr.runtime.Token -> org.antlr.runtime.Token:
    int EOR_TOKEN_TYPE -> EOR_TOKEN_TYPE
    int DOWN -> DOWN
    int UP -> UP
    int MIN_TOKEN_TYPE -> MIN_TOKEN_TYPE
    int EOF -> EOF
    org.antlr.runtime.Token EOF_TOKEN -> EOF_TOKEN
    int INVALID_TOKEN_TYPE -> INVALID_TOKEN_TYPE
    org.antlr.runtime.Token INVALID_TOKEN -> INVALID_TOKEN
    org.antlr.runtime.Token SKIP_TOKEN -> SKIP_TOKEN
    int DEFAULT_CHANNEL -> DEFAULT_CHANNEL
    int HIDDEN_CHANNEL -> HIDDEN_CHANNEL
    java.lang.String getText() -> getText
    void setText(java.lang.String) -> setText
    int getType() -> getType
    void setType(int) -> setType
    int getLine() -> getLine
    void setLine(int) -> setLine
    int getCharPositionInLine() -> getCharPositionInLine
    void setCharPositionInLine(int) -> setCharPositionInLine
    int getChannel() -> getChannel
    void setChannel(int) -> setChannel
    int getTokenIndex() -> getTokenIndex
    void setTokenIndex(int) -> setTokenIndex
    org.antlr.runtime.CharStream getInputStream() -> getInputStream
    void setInputStream(org.antlr.runtime.CharStream) -> setInputStream
    void <clinit>() -> <clinit>
org.antlr.runtime.TokenSource -> org.antlr.runtime.TokenSource:
    org.antlr.runtime.Token nextToken() -> nextToken
    java.lang.String getSourceName() -> getSourceName
org.antlr.runtime.TokenStream -> org.antlr.runtime.TokenStream:
    org.antlr.runtime.Token LT(int) -> LT
    int range() -> range
    org.antlr.runtime.Token get(int) -> get
    org.antlr.runtime.TokenSource getTokenSource() -> getTokenSource
    java.lang.String toString(int,int) -> toString
    java.lang.String toString(org.antlr.runtime.Token,org.antlr.runtime.Token) -> toString
org.antlr.runtime.UnwantedTokenException -> org.antlr.runtime.UnwantedTokenException:
    void <init>() -> <init>
    void <init>(int,org.antlr.runtime.IntStream) -> <init>
    org.antlr.runtime.Token getUnexpectedToken() -> getUnexpectedToken
    java.lang.String toString() -> toString
org.antlr.runtime.tree.BaseTree -> org.antlr.runtime.tree.BaseTree:
    java.util.List children -> children
    void <init>() -> <init>
    void <init>(org.antlr.runtime.tree.Tree) -> <init>
    org.antlr.runtime.tree.Tree getChild(int) -> getChild
    java.util.List getChildren() -> getChildren
    org.antlr.runtime.tree.Tree getFirstChildWithType(int) -> getFirstChildWithType
    int getChildCount() -> getChildCount
    void addChild(org.antlr.runtime.tree.Tree) -> addChild
    void addChildren(java.util.List) -> addChildren
    void setChild(int,org.antlr.runtime.tree.Tree) -> setChild
    void insertChild(int,java.lang.Object) -> insertChild
    java.lang.Object deleteChild(int) -> deleteChild
    void replaceChildren(int,int,java.lang.Object) -> replaceChildren
    java.util.List createChildrenList() -> createChildrenList
    boolean isNil() -> isNil
    void freshenParentAndChildIndexes() -> freshenParentAndChildIndexes
    void freshenParentAndChildIndexes(int) -> freshenParentAndChildIndexes
    void freshenParentAndChildIndexesDeeply() -> freshenParentAndChildIndexesDeeply
    void freshenParentAndChildIndexesDeeply(int) -> freshenParentAndChildIndexesDeeply
    void sanityCheckParentAndChildIndexes() -> sanityCheckParentAndChildIndexes
    void sanityCheckParentAndChildIndexes(org.antlr.runtime.tree.Tree,int) -> sanityCheckParentAndChildIndexes
    int getChildIndex() -> getChildIndex
    void setChildIndex(int) -> setChildIndex
    org.antlr.runtime.tree.Tree getParent() -> getParent
    void setParent(org.antlr.runtime.tree.Tree) -> setParent
    boolean hasAncestor(int) -> hasAncestor
    org.antlr.runtime.tree.Tree getAncestor(int) -> getAncestor
    java.util.List getAncestors() -> getAncestors
    java.lang.String toStringTree() -> toStringTree
    int getLine() -> getLine
    int getCharPositionInLine() -> getCharPositionInLine
    java.lang.String toString() -> toString
org.antlr.runtime.tree.BaseTreeAdaptor -> org.antlr.runtime.tree.BaseTreeAdaptor:
    java.util.Map treeToUniqueIDMap -> treeToUniqueIDMap
    int uniqueNodeID -> uniqueNodeID
    void <init>() -> <init>
    java.lang.Object nil() -> nil
    java.lang.Object errorNode(org.antlr.runtime.TokenStream,org.antlr.runtime.Token,org.antlr.runtime.Token,org.antlr.runtime.RecognitionException) -> errorNode
    boolean isNil(java.lang.Object) -> isNil
    java.lang.Object dupTree(java.lang.Object) -> dupTree
    java.lang.Object dupTree(java.lang.Object,java.lang.Object) -> dupTree
    void addChild(java.lang.Object,java.lang.Object) -> addChild
    java.lang.Object becomeRoot(java.lang.Object,java.lang.Object) -> becomeRoot
    java.lang.Object rulePostProcessing(java.lang.Object) -> rulePostProcessing
    java.lang.Object becomeRoot(org.antlr.runtime.Token,java.lang.Object) -> becomeRoot
    java.lang.Object create(int,org.antlr.runtime.Token) -> create
    java.lang.Object create(int,org.antlr.runtime.Token,java.lang.String) -> create
    java.lang.Object create(int,java.lang.String) -> create
    int getType(java.lang.Object) -> getType
    void setType(java.lang.Object,int) -> setType
    java.lang.String getText(java.lang.Object) -> getText
    void setText(java.lang.Object,java.lang.String) -> setText
    java.lang.Object getChild(java.lang.Object,int) -> getChild
    void setChild(java.lang.Object,int,java.lang.Object) -> setChild
    java.lang.Object deleteChild(java.lang.Object,int) -> deleteChild
    int getChildCount(java.lang.Object) -> getChildCount
    int getUniqueID(java.lang.Object) -> getUniqueID
    org.antlr.runtime.Token createToken(int,java.lang.String) -> createToken
    org.antlr.runtime.Token createToken(org.antlr.runtime.Token) -> createToken
org.antlr.runtime.tree.CommonErrorNode -> org.antlr.runtime.tree.CommonErrorNode:
    org.antlr.runtime.IntStream input -> input
    org.antlr.runtime.Token start -> start
    org.antlr.runtime.Token stop -> stop
    org.antlr.runtime.RecognitionException trappedException -> trappedException
    void <init>(org.antlr.runtime.TokenStream,org.antlr.runtime.Token,org.antlr.runtime.Token,org.antlr.runtime.RecognitionException) -> <init>
    boolean isNil() -> isNil
    int getType() -> getType
    java.lang.String getText() -> getText
    java.lang.String toString() -> toString
org.antlr.runtime.tree.CommonTree -> org.antlr.runtime.tree.CommonTree:
    org.antlr.runtime.Token token -> token
    int startIndex -> startIndex
    int stopIndex -> stopIndex
    org.antlr.runtime.tree.CommonTree parent -> parent
    int childIndex -> childIndex
    void <init>() -> <init>
    void <init>(org.antlr.runtime.tree.CommonTree) -> <init>
    void <init>(org.antlr.runtime.Token) -> <init>
    org.antlr.runtime.Token getToken() -> getToken
    org.antlr.runtime.tree.Tree dupNode() -> dupNode
    boolean isNil() -> isNil
    int getType() -> getType
    java.lang.String getText() -> getText
    int getLine() -> getLine
    int getCharPositionInLine() -> getCharPositionInLine
    int getTokenStartIndex() -> getTokenStartIndex
    void setTokenStartIndex(int) -> setTokenStartIndex
    int getTokenStopIndex() -> getTokenStopIndex
    void setTokenStopIndex(int) -> setTokenStopIndex
    void setUnknownTokenBoundaries() -> setUnknownTokenBoundaries
    int getChildIndex() -> getChildIndex
    org.antlr.runtime.tree.Tree getParent() -> getParent
    void setParent(org.antlr.runtime.tree.Tree) -> setParent
    void setChildIndex(int) -> setChildIndex
    java.lang.String toString() -> toString
org.antlr.runtime.tree.CommonTreeAdaptor -> org.antlr.runtime.tree.CommonTreeAdaptor:
    void <init>() -> <init>
    java.lang.Object dupNode(java.lang.Object) -> dupNode
    java.lang.Object create(org.antlr.runtime.Token) -> create
    org.antlr.runtime.Token createToken(int,java.lang.String) -> createToken
    org.antlr.runtime.Token createToken(org.antlr.runtime.Token) -> createToken
    void setTokenBoundaries(java.lang.Object,org.antlr.runtime.Token,org.antlr.runtime.Token) -> setTokenBoundaries
    int getTokenStartIndex(java.lang.Object) -> getTokenStartIndex
    int getTokenStopIndex(java.lang.Object) -> getTokenStopIndex
    java.lang.String getText(java.lang.Object) -> getText
    int getType(java.lang.Object) -> getType
    org.antlr.runtime.Token getToken(java.lang.Object) -> getToken
    java.lang.Object getChild(java.lang.Object,int) -> getChild
    int getChildCount(java.lang.Object) -> getChildCount
    java.lang.Object getParent(java.lang.Object) -> getParent
    void setParent(java.lang.Object,java.lang.Object) -> setParent
    int getChildIndex(java.lang.Object) -> getChildIndex
    void setChildIndex(java.lang.Object,int) -> setChildIndex
    void replaceChildren(java.lang.Object,int,int,java.lang.Object) -> replaceChildren
org.antlr.runtime.tree.Tree -> org.antlr.runtime.tree.Tree:
    org.antlr.runtime.tree.Tree INVALID_NODE -> INVALID_NODE
    org.antlr.runtime.tree.Tree getChild(int) -> getChild
    int getChildCount() -> getChildCount
    org.antlr.runtime.tree.Tree getParent() -> getParent
    void setParent(org.antlr.runtime.tree.Tree) -> setParent
    boolean hasAncestor(int) -> hasAncestor
    org.antlr.runtime.tree.Tree getAncestor(int) -> getAncestor
    java.util.List getAncestors() -> getAncestors
    int getChildIndex() -> getChildIndex
    void setChildIndex(int) -> setChildIndex
    void freshenParentAndChildIndexes() -> freshenParentAndChildIndexes
    void addChild(org.antlr.runtime.tree.Tree) -> addChild
    void setChild(int,org.antlr.runtime.tree.Tree) -> setChild
    java.lang.Object deleteChild(int) -> deleteChild
    void replaceChildren(int,int,java.lang.Object) -> replaceChildren
    boolean isNil() -> isNil
    int getTokenStartIndex() -> getTokenStartIndex
    void setTokenStartIndex(int) -> setTokenStartIndex
    int getTokenStopIndex() -> getTokenStopIndex
    void setTokenStopIndex(int) -> setTokenStopIndex
    org.antlr.runtime.tree.Tree dupNode() -> dupNode
    int getType() -> getType
    java.lang.String getText() -> getText
    int getLine() -> getLine
    int getCharPositionInLine() -> getCharPositionInLine
    java.lang.String toStringTree() -> toStringTree
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
org.antlr.runtime.tree.TreeAdaptor -> org.antlr.runtime.tree.TreeAdaptor:
    java.lang.Object create(org.antlr.runtime.Token) -> create
    java.lang.Object dupNode(java.lang.Object) -> dupNode
    java.lang.Object dupTree(java.lang.Object) -> dupTree
    java.lang.Object nil() -> nil
    java.lang.Object errorNode(org.antlr.runtime.TokenStream,org.antlr.runtime.Token,org.antlr.runtime.Token,org.antlr.runtime.RecognitionException) -> errorNode
    boolean isNil(java.lang.Object) -> isNil
    void addChild(java.lang.Object,java.lang.Object) -> addChild
    java.lang.Object becomeRoot(java.lang.Object,java.lang.Object) -> becomeRoot
    java.lang.Object rulePostProcessing(java.lang.Object) -> rulePostProcessing
    int getUniqueID(java.lang.Object) -> getUniqueID
    java.lang.Object becomeRoot(org.antlr.runtime.Token,java.lang.Object) -> becomeRoot
    java.lang.Object create(int,org.antlr.runtime.Token) -> create
    java.lang.Object create(int,org.antlr.runtime.Token,java.lang.String) -> create
    java.lang.Object create(int,java.lang.String) -> create
    int getType(java.lang.Object) -> getType
    void setType(java.lang.Object,int) -> setType
    java.lang.String getText(java.lang.Object) -> getText
    void setText(java.lang.Object,java.lang.String) -> setText
    org.antlr.runtime.Token getToken(java.lang.Object) -> getToken
    void setTokenBoundaries(java.lang.Object,org.antlr.runtime.Token,org.antlr.runtime.Token) -> setTokenBoundaries
    int getTokenStartIndex(java.lang.Object) -> getTokenStartIndex
    int getTokenStopIndex(java.lang.Object) -> getTokenStopIndex
    java.lang.Object getChild(java.lang.Object,int) -> getChild
    void setChild(java.lang.Object,int,java.lang.Object) -> setChild
    java.lang.Object deleteChild(java.lang.Object,int) -> deleteChild
    int getChildCount(java.lang.Object) -> getChildCount
    java.lang.Object getParent(java.lang.Object) -> getParent
    void setParent(java.lang.Object,java.lang.Object) -> setParent
    int getChildIndex(java.lang.Object) -> getChildIndex
    void setChildIndex(java.lang.Object,int) -> setChildIndex
    void replaceChildren(java.lang.Object,int,int,java.lang.Object) -> replaceChildren
org.antlr.runtime.tree.TreeNodeStream -> org.antlr.runtime.tree.TreeNodeStream:
    java.lang.Object get(int) -> get
    java.lang.Object LT(int) -> LT
    java.lang.Object getTreeSource() -> getTreeSource
    org.antlr.runtime.TokenStream getTokenStream() -> getTokenStream
    org.antlr.runtime.tree.TreeAdaptor getTreeAdaptor() -> getTreeAdaptor
    void setUniqueNavigationNodes(boolean) -> setUniqueNavigationNodes
    void reset() -> reset
    java.lang.String toString(java.lang.Object,java.lang.Object) -> toString
    void replaceChildren(java.lang.Object,int,int,java.lang.Object) -> replaceChildren
org.apache.commons.lang3.ArrayUtils -> org.apache.commons.lang3.ArrayUtils:
    java.lang.Object[] EMPTY_OBJECT_ARRAY -> EMPTY_OBJECT_ARRAY
    java.lang.Class[] EMPTY_CLASS_ARRAY -> EMPTY_CLASS_ARRAY
    java.lang.String[] EMPTY_STRING_ARRAY -> EMPTY_STRING_ARRAY
    long[] EMPTY_LONG_ARRAY -> EMPTY_LONG_ARRAY
    java.lang.Long[] EMPTY_LONG_OBJECT_ARRAY -> EMPTY_LONG_OBJECT_ARRAY
    int[] EMPTY_INT_ARRAY -> EMPTY_INT_ARRAY
    java.lang.Integer[] EMPTY_INTEGER_OBJECT_ARRAY -> EMPTY_INTEGER_OBJECT_ARRAY
    short[] EMPTY_SHORT_ARRAY -> EMPTY_SHORT_ARRAY
    java.lang.Short[] EMPTY_SHORT_OBJECT_ARRAY -> EMPTY_SHORT_OBJECT_ARRAY
    byte[] EMPTY_BYTE_ARRAY -> EMPTY_BYTE_ARRAY
    java.lang.Byte[] EMPTY_BYTE_OBJECT_ARRAY -> EMPTY_BYTE_OBJECT_ARRAY
    double[] EMPTY_DOUBLE_ARRAY -> EMPTY_DOUBLE_ARRAY
    java.lang.Double[] EMPTY_DOUBLE_OBJECT_ARRAY -> EMPTY_DOUBLE_OBJECT_ARRAY
    float[] EMPTY_FLOAT_ARRAY -> EMPTY_FLOAT_ARRAY
    java.lang.Float[] EMPTY_FLOAT_OBJECT_ARRAY -> EMPTY_FLOAT_OBJECT_ARRAY
    boolean[] EMPTY_BOOLEAN_ARRAY -> EMPTY_BOOLEAN_ARRAY
    java.lang.Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY -> EMPTY_BOOLEAN_OBJECT_ARRAY
    char[] EMPTY_CHAR_ARRAY -> EMPTY_CHAR_ARRAY
    java.lang.Character[] EMPTY_CHARACTER_OBJECT_ARRAY -> EMPTY_CHARACTER_OBJECT_ARRAY
    int INDEX_NOT_FOUND -> INDEX_NOT_FOUND
    void <init>() -> <init>
    java.lang.String toString(java.lang.Object) -> toString
    java.lang.String toString(java.lang.Object,java.lang.String) -> toString
    int hashCode(java.lang.Object) -> hashCode
    boolean isEquals(java.lang.Object,java.lang.Object) -> isEquals
    java.util.Map toMap(java.lang.Object[]) -> toMap
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.lang.Object[] clone(java.lang.Object[]) -> clone
    long[] clone(long[]) -> clone
    int[] clone(int[]) -> clone
    short[] clone(short[]) -> clone
    char[] clone(char[]) -> clone
    byte[] clone(byte[]) -> clone
    double[] clone(double[]) -> clone
    float[] clone(float[]) -> clone
    boolean[] clone(boolean[]) -> clone
    java.lang.Object[] nullToEmpty(java.lang.Object[]) -> nullToEmpty
    java.lang.Class[] nullToEmpty(java.lang.Class[]) -> nullToEmpty
    java.lang.String[] nullToEmpty(java.lang.String[]) -> nullToEmpty
    long[] nullToEmpty(long[]) -> nullToEmpty
    int[] nullToEmpty(int[]) -> nullToEmpty
    short[] nullToEmpty(short[]) -> nullToEmpty
    char[] nullToEmpty(char[]) -> nullToEmpty
    byte[] nullToEmpty(byte[]) -> nullToEmpty
    double[] nullToEmpty(double[]) -> nullToEmpty
    float[] nullToEmpty(float[]) -> nullToEmpty
    boolean[] nullToEmpty(boolean[]) -> nullToEmpty
    java.lang.Long[] nullToEmpty(java.lang.Long[]) -> nullToEmpty
    java.lang.Integer[] nullToEmpty(java.lang.Integer[]) -> nullToEmpty
    java.lang.Short[] nullToEmpty(java.lang.Short[]) -> nullToEmpty
    java.lang.Character[] nullToEmpty(java.lang.Character[]) -> nullToEmpty
    java.lang.Byte[] nullToEmpty(java.lang.Byte[]) -> nullToEmpty
    java.lang.Double[] nullToEmpty(java.lang.Double[]) -> nullToEmpty
    java.lang.Float[] nullToEmpty(java.lang.Float[]) -> nullToEmpty
    java.lang.Boolean[] nullToEmpty(java.lang.Boolean[]) -> nullToEmpty
    java.lang.Object[] subarray(java.lang.Object[],int,int) -> subarray
    long[] subarray(long[],int,int) -> subarray
    int[] subarray(int[],int,int) -> subarray
    short[] subarray(short[],int,int) -> subarray
    char[] subarray(char[],int,int) -> subarray
    byte[] subarray(byte[],int,int) -> subarray
    double[] subarray(double[],int,int) -> subarray
    float[] subarray(float[],int,int) -> subarray
    boolean[] subarray(boolean[],int,int) -> subarray
    boolean isSameLength(java.lang.Object[],java.lang.Object[]) -> isSameLength
    boolean isSameLength(long[],long[]) -> isSameLength
    boolean isSameLength(int[],int[]) -> isSameLength
    boolean isSameLength(short[],short[]) -> isSameLength
    boolean isSameLength(char[],char[]) -> isSameLength
    boolean isSameLength(byte[],byte[]) -> isSameLength
    boolean isSameLength(double[],double[]) -> isSameLength
    boolean isSameLength(float[],float[]) -> isSameLength
    boolean isSameLength(boolean[],boolean[]) -> isSameLength
    int getLength(java.lang.Object) -> getLength
    boolean isSameType(java.lang.Object,java.lang.Object) -> isSameType
    void reverse(java.lang.Object[]) -> reverse
    void reverse(long[]) -> reverse
    void reverse(int[]) -> reverse
    void reverse(short[]) -> reverse
    void reverse(char[]) -> reverse
    void reverse(byte[]) -> reverse
    void reverse(double[]) -> reverse
    void reverse(float[]) -> reverse
    void reverse(boolean[]) -> reverse
    void reverse(boolean[],int,int) -> reverse
    void reverse(byte[],int,int) -> reverse
    void reverse(char[],int,int) -> reverse
    void reverse(double[],int,int) -> reverse
    void reverse(float[],int,int) -> reverse
    void reverse(int[],int,int) -> reverse
    void reverse(long[],int,int) -> reverse
    void reverse(java.lang.Object[],int,int) -> reverse
    void reverse(short[],int,int) -> reverse
    int indexOf(java.lang.Object[],java.lang.Object) -> indexOf
    int indexOf(java.lang.Object[],java.lang.Object,int) -> indexOf
    int lastIndexOf(java.lang.Object[],java.lang.Object) -> lastIndexOf
    int lastIndexOf(java.lang.Object[],java.lang.Object,int) -> lastIndexOf
    boolean contains(java.lang.Object[],java.lang.Object) -> contains
    int indexOf(long[],long) -> indexOf
    int indexOf(long[],long,int) -> indexOf
    int lastIndexOf(long[],long) -> lastIndexOf
    int lastIndexOf(long[],long,int) -> lastIndexOf
    boolean contains(long[],long) -> contains
    int indexOf(int[],int) -> indexOf
    int indexOf(int[],int,int) -> indexOf
    int lastIndexOf(int[],int) -> lastIndexOf
    int lastIndexOf(int[],int,int) -> lastIndexOf
    boolean contains(int[],int) -> contains
    int indexOf(short[],short) -> indexOf
    int indexOf(short[],short,int) -> indexOf
    int lastIndexOf(short[],short) -> lastIndexOf
    int lastIndexOf(short[],short,int) -> lastIndexOf
    boolean contains(short[],short) -> contains
    int indexOf(char[],char) -> indexOf
    int indexOf(char[],char,int) -> indexOf
    int lastIndexOf(char[],char) -> lastIndexOf
    int lastIndexOf(char[],char,int) -> lastIndexOf
    boolean contains(char[],char) -> contains
    int indexOf(byte[],byte) -> indexOf
    int indexOf(byte[],byte,int) -> indexOf
    int lastIndexOf(byte[],byte) -> lastIndexOf
    int lastIndexOf(byte[],byte,int) -> lastIndexOf
    boolean contains(byte[],byte) -> contains
    int indexOf(double[],double) -> indexOf
    int indexOf(double[],double,double) -> indexOf
    int indexOf(double[],double,int) -> indexOf
    int indexOf(double[],double,int,double) -> indexOf
    int lastIndexOf(double[],double) -> lastIndexOf
    int lastIndexOf(double[],double,double) -> lastIndexOf
    int lastIndexOf(double[],double,int) -> lastIndexOf
    int lastIndexOf(double[],double,int,double) -> lastIndexOf
    boolean contains(double[],double) -> contains
    boolean contains(double[],double,double) -> contains
    int indexOf(float[],float) -> indexOf
    int indexOf(float[],float,int) -> indexOf
    int lastIndexOf(float[],float) -> lastIndexOf
    int lastIndexOf(float[],float,int) -> lastIndexOf
    boolean contains(float[],float) -> contains
    int indexOf(boolean[],boolean) -> indexOf
    int indexOf(boolean[],boolean,int) -> indexOf
    int lastIndexOf(boolean[],boolean) -> lastIndexOf
    int lastIndexOf(boolean[],boolean,int) -> lastIndexOf
    boolean contains(boolean[],boolean) -> contains
    char[] toPrimitive(java.lang.Character[]) -> toPrimitive
    char[] toPrimitive(java.lang.Character[],char) -> toPrimitive
    java.lang.Character[] toObject(char[]) -> toObject
    long[] toPrimitive(java.lang.Long[]) -> toPrimitive
    long[] toPrimitive(java.lang.Long[],long) -> toPrimitive
    java.lang.Long[] toObject(long[]) -> toObject
    int[] toPrimitive(java.lang.Integer[]) -> toPrimitive
    int[] toPrimitive(java.lang.Integer[],int) -> toPrimitive
    java.lang.Integer[] toObject(int[]) -> toObject
    short[] toPrimitive(java.lang.Short[]) -> toPrimitive
    short[] toPrimitive(java.lang.Short[],short) -> toPrimitive
    java.lang.Short[] toObject(short[]) -> toObject
    byte[] toPrimitive(java.lang.Byte[]) -> toPrimitive
    byte[] toPrimitive(java.lang.Byte[],byte) -> toPrimitive
    java.lang.Byte[] toObject(byte[]) -> toObject
    double[] toPrimitive(java.lang.Double[]) -> toPrimitive
    double[] toPrimitive(java.lang.Double[],double) -> toPrimitive
    java.lang.Double[] toObject(double[]) -> toObject
    float[] toPrimitive(java.lang.Float[]) -> toPrimitive
    float[] toPrimitive(java.lang.Float[],float) -> toPrimitive
    java.lang.Float[] toObject(float[]) -> toObject
    boolean[] toPrimitive(java.lang.Boolean[]) -> toPrimitive
    boolean[] toPrimitive(java.lang.Boolean[],boolean) -> toPrimitive
    java.lang.Boolean[] toObject(boolean[]) -> toObject
    boolean isEmpty(java.lang.Object[]) -> isEmpty
    boolean isEmpty(long[]) -> isEmpty
    boolean isEmpty(int[]) -> isEmpty
    boolean isEmpty(short[]) -> isEmpty
    boolean isEmpty(char[]) -> isEmpty
    boolean isEmpty(byte[]) -> isEmpty
    boolean isEmpty(double[]) -> isEmpty
    boolean isEmpty(float[]) -> isEmpty
    boolean isEmpty(boolean[]) -> isEmpty
    boolean isNotEmpty(java.lang.Object[]) -> isNotEmpty
    boolean isNotEmpty(long[]) -> isNotEmpty
    boolean isNotEmpty(int[]) -> isNotEmpty
    boolean isNotEmpty(short[]) -> isNotEmpty
    boolean isNotEmpty(char[]) -> isNotEmpty
    boolean isNotEmpty(byte[]) -> isNotEmpty
    boolean isNotEmpty(double[]) -> isNotEmpty
    boolean isNotEmpty(float[]) -> isNotEmpty
    boolean isNotEmpty(boolean[]) -> isNotEmpty
    java.lang.Object[] addAll(java.lang.Object[],java.lang.Object[]) -> addAll
    boolean[] addAll(boolean[],boolean[]) -> addAll
    char[] addAll(char[],char[]) -> addAll
    byte[] addAll(byte[],byte[]) -> addAll
    short[] addAll(short[],short[]) -> addAll
    int[] addAll(int[],int[]) -> addAll
    long[] addAll(long[],long[]) -> addAll
    float[] addAll(float[],float[]) -> addAll
    double[] addAll(double[],double[]) -> addAll
    java.lang.Object[] add(java.lang.Object[],java.lang.Object) -> add
    boolean[] add(boolean[],boolean) -> add
    byte[] add(byte[],byte) -> add
    char[] add(char[],char) -> add
    double[] add(double[],double) -> add
    float[] add(float[],float) -> add
    int[] add(int[],int) -> add
    long[] add(long[],long) -> add
    short[] add(short[],short) -> add
    java.lang.Object copyArrayGrow1(java.lang.Object,java.lang.Class) -> copyArrayGrow1
    java.lang.Object[] add(java.lang.Object[],int,java.lang.Object) -> add
    boolean[] add(boolean[],int,boolean) -> add
    char[] add(char[],int,char) -> add
    byte[] add(byte[],int,byte) -> add
    short[] add(short[],int,short) -> add
    int[] add(int[],int,int) -> add
    long[] add(long[],int,long) -> add
    float[] add(float[],int,float) -> add
    double[] add(double[],int,double) -> add
    java.lang.Object add(java.lang.Object,int,java.lang.Object,java.lang.Class) -> add
    java.lang.Object[] remove(java.lang.Object[],int) -> remove
    java.lang.Object[] removeElement(java.lang.Object[],java.lang.Object) -> removeElement
    boolean[] remove(boolean[],int) -> remove
    boolean[] removeElement(boolean[],boolean) -> removeElement
    byte[] remove(byte[],int) -> remove
    byte[] removeElement(byte[],byte) -> removeElement
    char[] remove(char[],int) -> remove
    char[] removeElement(char[],char) -> removeElement
    double[] remove(double[],int) -> remove
    double[] removeElement(double[],double) -> removeElement
    float[] remove(float[],int) -> remove
    float[] removeElement(float[],float) -> removeElement
    int[] remove(int[],int) -> remove
    int[] removeElement(int[],int) -> removeElement
    long[] remove(long[],int) -> remove
    long[] removeElement(long[],long) -> removeElement
    short[] remove(short[],int) -> remove
    short[] removeElement(short[],short) -> removeElement
    java.lang.Object remove(java.lang.Object,int) -> remove
    java.lang.Object[] removeAll(java.lang.Object[],int[]) -> removeAll
    java.lang.Object[] removeElements(java.lang.Object[],java.lang.Object[]) -> removeElements
    byte[] removeAll(byte[],int[]) -> removeAll
    byte[] removeElements(byte[],byte[]) -> removeElements
    short[] removeAll(short[],int[]) -> removeAll
    short[] removeElements(short[],short[]) -> removeElements
    int[] removeAll(int[],int[]) -> removeAll
    int[] removeElements(int[],int[]) -> removeElements
    char[] removeAll(char[],int[]) -> removeAll
    char[] removeElements(char[],char[]) -> removeElements
    long[] removeAll(long[],int[]) -> removeAll
    long[] removeElements(long[],long[]) -> removeElements
    float[] removeAll(float[],int[]) -> removeAll
    float[] removeElements(float[],float[]) -> removeElements
    double[] removeAll(double[],int[]) -> removeAll
    double[] removeElements(double[],double[]) -> removeElements
    boolean[] removeAll(boolean[],int[]) -> removeAll
    boolean[] removeElements(boolean[],boolean[]) -> removeElements
    java.lang.Object removeAll(java.lang.Object,int[]) -> removeAll
    java.lang.Object removeAll(java.lang.Object,java.util.BitSet) -> removeAll
    void <clinit>() -> <clinit>
org.apache.commons.lang3.CharSequenceUtils -> org.apache.commons.lang3.CharSequenceUtils:
    void <init>() -> <init>
    java.lang.CharSequence subSequence(java.lang.CharSequence,int) -> subSequence
    int indexOf(java.lang.CharSequence,int,int) -> indexOf
    int indexOf(java.lang.CharSequence,java.lang.CharSequence,int) -> indexOf
    int lastIndexOf(java.lang.CharSequence,int,int) -> lastIndexOf
    int lastIndexOf(java.lang.CharSequence,java.lang.CharSequence,int) -> lastIndexOf
    char[] toCharArray(java.lang.CharSequence) -> toCharArray
    boolean regionMatches(java.lang.CharSequence,boolean,int,java.lang.CharSequence,int,int) -> regionMatches
org.apache.commons.lang3.CharUtils -> org.apache.commons.lang3.CharUtils:
    java.lang.String[] CHAR_STRING_ARRAY -> CHAR_STRING_ARRAY
    char LF -> LF
    char CR -> CR
    void <init>() -> <init>
    java.lang.Character toCharacterObject(char) -> toCharacterObject
    java.lang.Character toCharacterObject(java.lang.String) -> toCharacterObject
    char toChar(java.lang.Character) -> toChar
    char toChar(java.lang.Character,char) -> toChar
    char toChar(java.lang.String) -> toChar
    char toChar(java.lang.String,char) -> toChar
    int toIntValue(char) -> toIntValue
    int toIntValue(char,int) -> toIntValue
    int toIntValue(java.lang.Character) -> toIntValue
    int toIntValue(java.lang.Character,int) -> toIntValue
    java.lang.String toString(char) -> toString
    java.lang.String toString(java.lang.Character) -> toString
    java.lang.String unicodeEscaped(char) -> unicodeEscaped
    java.lang.String unicodeEscaped(java.lang.Character) -> unicodeEscaped
    boolean isAscii(char) -> isAscii
    boolean isAsciiPrintable(char) -> isAsciiPrintable
    boolean isAsciiControl(char) -> isAsciiControl
    boolean isAsciiAlpha(char) -> isAsciiAlpha
    boolean isAsciiAlphaUpper(char) -> isAsciiAlphaUpper
    boolean isAsciiAlphaLower(char) -> isAsciiAlphaLower
    boolean isAsciiNumeric(char) -> isAsciiNumeric
    boolean isAsciiAlphanumeric(char) -> isAsciiAlphanumeric
    void <clinit>() -> <clinit>
org.apache.commons.lang3.ClassUtils -> org.apache.commons.lang3.ClassUtils:
    char PACKAGE_SEPARATOR_CHAR -> PACKAGE_SEPARATOR_CHAR
    java.lang.String PACKAGE_SEPARATOR -> PACKAGE_SEPARATOR
    char INNER_CLASS_SEPARATOR_CHAR -> INNER_CLASS_SEPARATOR_CHAR
    java.lang.String INNER_CLASS_SEPARATOR -> INNER_CLASS_SEPARATOR
    java.util.Map primitiveWrapperMap -> primitiveWrapperMap
    java.util.Map wrapperPrimitiveMap -> wrapperPrimitiveMap
    java.util.Map abbreviationMap -> abbreviationMap
    java.util.Map reverseAbbreviationMap -> reverseAbbreviationMap
    void <init>() -> <init>
    java.lang.String getShortClassName(java.lang.Object,java.lang.String) -> getShortClassName
    java.lang.String getShortClassName(java.lang.Class) -> getShortClassName
    java.lang.String getShortClassName(java.lang.String) -> getShortClassName
    java.lang.String getSimpleName(java.lang.Class) -> getSimpleName
    java.lang.String getSimpleName(java.lang.Object,java.lang.String) -> getSimpleName
    java.lang.String getPackageName(java.lang.Object,java.lang.String) -> getPackageName
    java.lang.String getPackageName(java.lang.Class) -> getPackageName
    java.lang.String getPackageName(java.lang.String) -> getPackageName
    java.util.List getAllSuperclasses(java.lang.Class) -> getAllSuperclasses
    java.util.List getAllInterfaces(java.lang.Class) -> getAllInterfaces
    void getAllInterfaces(java.lang.Class,java.util.HashSet) -> getAllInterfaces
    java.util.List convertClassNamesToClasses(java.util.List) -> convertClassNamesToClasses
    java.util.List convertClassesToClassNames(java.util.List) -> convertClassesToClassNames
    boolean isAssignable(java.lang.Class[],java.lang.Class[]) -> isAssignable
    boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean) -> isAssignable
    boolean isPrimitiveOrWrapper(java.lang.Class) -> isPrimitiveOrWrapper
    boolean isPrimitiveWrapper(java.lang.Class) -> isPrimitiveWrapper
    boolean isAssignable(java.lang.Class,java.lang.Class) -> isAssignable
    boolean isAssignable(java.lang.Class,java.lang.Class,boolean) -> isAssignable
    java.lang.Class primitiveToWrapper(java.lang.Class) -> primitiveToWrapper
    java.lang.Class[] primitivesToWrappers(java.lang.Class[]) -> primitivesToWrappers
    java.lang.Class wrapperToPrimitive(java.lang.Class) -> wrapperToPrimitive
    java.lang.Class[] wrappersToPrimitives(java.lang.Class[]) -> wrappersToPrimitives
    boolean isInnerClass(java.lang.Class) -> isInnerClass
    java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean) -> getClass
    java.lang.Class getClass(java.lang.ClassLoader,java.lang.String) -> getClass
    java.lang.Class getClass(java.lang.String) -> getClass
    java.lang.Class getClass(java.lang.String,boolean) -> getClass
    java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getPublicMethod
    java.lang.String toCanonicalName(java.lang.String) -> toCanonicalName
    java.lang.Class[] toClass(java.lang.Object[]) -> toClass
    java.lang.String getShortCanonicalName(java.lang.Object,java.lang.String) -> getShortCanonicalName
    java.lang.String getShortCanonicalName(java.lang.Class) -> getShortCanonicalName
    java.lang.String getShortCanonicalName(java.lang.String) -> getShortCanonicalName
    java.lang.String getPackageCanonicalName(java.lang.Object,java.lang.String) -> getPackageCanonicalName
    java.lang.String getPackageCanonicalName(java.lang.Class) -> getPackageCanonicalName
    java.lang.String getPackageCanonicalName(java.lang.String) -> getPackageCanonicalName
    java.lang.String getCanonicalName(java.lang.String) -> getCanonicalName
    java.lang.Iterable hierarchy(java.lang.Class) -> hierarchy
    java.lang.Iterable hierarchy(java.lang.Class,org.apache.commons.lang3.ClassUtils$Interfaces) -> hierarchy
    void <clinit>() -> <clinit>
org.apache.commons.lang3.ClassUtils$1 -> org.apache.commons.lang3.ClassUtils$1:
    java.lang.Class val$type -> val$type
    void <init>(java.lang.Class) -> <init>
    java.util.Iterator iterator() -> iterator
org.apache.commons.lang3.ClassUtils$1$1 -> org.apache.commons.lang3.ClassUtils$1$1:
    org.apache.commons.lang3.mutable.MutableObject val$next -> val$next
    org.apache.commons.lang3.ClassUtils$1 this$0 -> this$0
    void <init>(org.apache.commons.lang3.ClassUtils$1,org.apache.commons.lang3.mutable.MutableObject) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Class next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
org.apache.commons.lang3.ClassUtils$2 -> org.apache.commons.lang3.ClassUtils$2:
    java.lang.Iterable val$classes -> val$classes
    void <init>(java.lang.Iterable) -> <init>
    java.util.Iterator iterator() -> iterator
org.apache.commons.lang3.ClassUtils$2$1 -> org.apache.commons.lang3.ClassUtils$2$1:
    java.util.Iterator interfaces -> interfaces
    java.util.Iterator val$wrapped -> val$wrapped
    java.util.Set val$seenInterfaces -> val$seenInterfaces
    org.apache.commons.lang3.ClassUtils$2 this$0 -> this$0
    void <init>(org.apache.commons.lang3.ClassUtils$2,java.util.Iterator,java.util.Set) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Class next() -> next
    void walkInterfaces(java.util.Set,java.lang.Class) -> walkInterfaces
    void remove() -> remove
    java.lang.Object next() -> next
org.apache.commons.lang3.ClassUtils$Interfaces -> org.apache.commons.lang3.ClassUtils$Interfaces:
    org.apache.commons.lang3.ClassUtils$Interfaces INCLUDE -> INCLUDE
    org.apache.commons.lang3.ClassUtils$Interfaces EXCLUDE -> EXCLUDE
    org.apache.commons.lang3.ClassUtils$Interfaces[] $VALUES -> $VALUES
    org.apache.commons.lang3.ClassUtils$Interfaces[] values() -> values
    org.apache.commons.lang3.ClassUtils$Interfaces valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.apache.commons.lang3.JavaVersion -> org.apache.commons.lang3.JavaVersion:
    org.apache.commons.lang3.JavaVersion JAVA_0_9 -> JAVA_0_9
    org.apache.commons.lang3.JavaVersion JAVA_1_1 -> JAVA_1_1
    org.apache.commons.lang3.JavaVersion JAVA_1_2 -> JAVA_1_2
    org.apache.commons.lang3.JavaVersion JAVA_1_3 -> JAVA_1_3
    org.apache.commons.lang3.JavaVersion JAVA_1_4 -> JAVA_1_4
    org.apache.commons.lang3.JavaVersion JAVA_1_5 -> JAVA_1_5
    org.apache.commons.lang3.JavaVersion JAVA_1_6 -> JAVA_1_6
    org.apache.commons.lang3.JavaVersion JAVA_1_7 -> JAVA_1_7
    org.apache.commons.lang3.JavaVersion JAVA_1_8 -> JAVA_1_8
    float value -> value
    java.lang.String name -> name
    org.apache.commons.lang3.JavaVersion[] $VALUES -> $VALUES
    org.apache.commons.lang3.JavaVersion[] values() -> values
    org.apache.commons.lang3.JavaVersion valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,float,java.lang.String) -> <init>
    boolean atLeast(org.apache.commons.lang3.JavaVersion) -> atLeast
    org.apache.commons.lang3.JavaVersion getJavaVersion(java.lang.String) -> getJavaVersion
    org.apache.commons.lang3.JavaVersion get(java.lang.String) -> get
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
org.apache.commons.lang3.ObjectUtils -> org.apache.commons.lang3.ObjectUtils:
    org.apache.commons.lang3.ObjectUtils$Null NULL -> NULL
    void <init>() -> <init>
    java.lang.Object defaultIfNull(java.lang.Object,java.lang.Object) -> defaultIfNull
    java.lang.Object firstNonNull(java.lang.Object[]) -> firstNonNull
    boolean equals(java.lang.Object,java.lang.Object) -> equals
    boolean notEqual(java.lang.Object,java.lang.Object) -> notEqual
    int hashCode(java.lang.Object) -> hashCode
    java.lang.String toString() -> toString
    int hashCodeMulti(java.lang.Object[]) -> hashCodeMulti
    java.lang.String identityToString(java.lang.Object) -> identityToString
    void identityToString(java.lang.Appendable,java.lang.Object) -> identityToString
    void identityToString(org.apache.commons.lang3.text.StrBuilder,java.lang.Object) -> identityToString
    void identityToString(java.lang.StringBuffer,java.lang.Object) -> identityToString
    void identityToString(java.lang.StringBuilder,java.lang.Object) -> identityToString
    java.lang.String toString(java.lang.Object) -> toString
    java.lang.String toString(java.lang.Object,java.lang.String) -> toString
    java.lang.Comparable min(java.lang.Comparable[]) -> min
    java.lang.Comparable max(java.lang.Comparable[]) -> max
    int compare(java.lang.Comparable,java.lang.Comparable) -> compare
    int compare(java.lang.Comparable,java.lang.Comparable,boolean) -> compare
    java.lang.Comparable median(java.lang.Comparable[]) -> median
    java.lang.Object median(java.util.Comparator,java.lang.Object[]) -> median
    java.lang.Object mode(java.lang.Object[]) -> mode
    java.lang.Object clone(java.lang.Object) -> clone
    java.lang.Object cloneIfPossible(java.lang.Object) -> cloneIfPossible
    boolean CONST(boolean) -> CONST
    byte CONST(byte) -> CONST
    byte CONST_BYTE(int) -> CONST_BYTE
    char CONST(char) -> CONST
    short CONST(short) -> CONST
    short CONST_SHORT(int) -> CONST_SHORT
    int CONST(int) -> CONST
    long CONST(long) -> CONST
    float CONST(float) -> CONST
    double CONST(double) -> CONST
    java.lang.Object CONST(java.lang.Object) -> CONST
    void <clinit>() -> <clinit>
org.apache.commons.lang3.ObjectUtils$Null -> org.apache.commons.lang3.ObjectUtils$Null:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    java.lang.Object readResolve() -> readResolve
org.apache.commons.lang3.StringEscapeUtils -> org.apache.commons.lang3.StringEscapeUtils:
    org.apache.commons.lang3.text.translate.CharSequenceTranslator ESCAPE_JAVA -> ESCAPE_JAVA
    org.apache.commons.lang3.text.translate.CharSequenceTranslator ESCAPE_ECMASCRIPT -> ESCAPE_ECMASCRIPT
    org.apache.commons.lang3.text.translate.CharSequenceTranslator ESCAPE_JSON -> ESCAPE_JSON
    org.apache.commons.lang3.text.translate.CharSequenceTranslator ESCAPE_XML -> ESCAPE_XML
    org.apache.commons.lang3.text.translate.CharSequenceTranslator ESCAPE_XML10 -> ESCAPE_XML10
    org.apache.commons.lang3.text.translate.CharSequenceTranslator ESCAPE_XML11 -> ESCAPE_XML11
    org.apache.commons.lang3.text.translate.CharSequenceTranslator ESCAPE_HTML3 -> ESCAPE_HTML3
    org.apache.commons.lang3.text.translate.CharSequenceTranslator ESCAPE_HTML4 -> ESCAPE_HTML4
    org.apache.commons.lang3.text.translate.CharSequenceTranslator ESCAPE_CSV -> ESCAPE_CSV
    org.apache.commons.lang3.text.translate.CharSequenceTranslator UNESCAPE_JAVA -> UNESCAPE_JAVA
    org.apache.commons.lang3.text.translate.CharSequenceTranslator UNESCAPE_ECMASCRIPT -> UNESCAPE_ECMASCRIPT
    org.apache.commons.lang3.text.translate.CharSequenceTranslator UNESCAPE_JSON -> UNESCAPE_JSON
    org.apache.commons.lang3.text.translate.CharSequenceTranslator UNESCAPE_HTML3 -> UNESCAPE_HTML3
    org.apache.commons.lang3.text.translate.CharSequenceTranslator UNESCAPE_HTML4 -> UNESCAPE_HTML4
    org.apache.commons.lang3.text.translate.CharSequenceTranslator UNESCAPE_XML -> UNESCAPE_XML
    org.apache.commons.lang3.text.translate.CharSequenceTranslator UNESCAPE_CSV -> UNESCAPE_CSV
    void <init>() -> <init>
    java.lang.String escapeJava(java.lang.String) -> escapeJava
    java.lang.String escapeEcmaScript(java.lang.String) -> escapeEcmaScript
    java.lang.String escapeJson(java.lang.String) -> escapeJson
    java.lang.String unescapeJava(java.lang.String) -> unescapeJava
    java.lang.String unescapeEcmaScript(java.lang.String) -> unescapeEcmaScript
    java.lang.String unescapeJson(java.lang.String) -> unescapeJson
    java.lang.String escapeHtml4(java.lang.String) -> escapeHtml4
    java.lang.String escapeHtml3(java.lang.String) -> escapeHtml3
    java.lang.String unescapeHtml4(java.lang.String) -> unescapeHtml4
    java.lang.String unescapeHtml3(java.lang.String) -> unescapeHtml3
    java.lang.String escapeXml(java.lang.String) -> escapeXml
    java.lang.String escapeXml10(java.lang.String) -> escapeXml10
    java.lang.String escapeXml11(java.lang.String) -> escapeXml11
    java.lang.String unescapeXml(java.lang.String) -> unescapeXml
    java.lang.String escapeCsv(java.lang.String) -> escapeCsv
    java.lang.String unescapeCsv(java.lang.String) -> unescapeCsv
    void <clinit>() -> <clinit>
org.apache.commons.lang3.StringEscapeUtils$CsvEscaper -> org.apache.commons.lang3.StringEscapeUtils$CsvEscaper:
    char CSV_DELIMITER -> CSV_DELIMITER
    char CSV_QUOTE -> CSV_QUOTE
    java.lang.String CSV_QUOTE_STR -> CSV_QUOTE_STR
    char[] CSV_SEARCH_CHARS -> CSV_SEARCH_CHARS
    void <init>() -> <init>
    int translate(java.lang.CharSequence,int,java.io.Writer) -> translate
    void <clinit>() -> <clinit>
org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper -> org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper:
    char CSV_DELIMITER -> CSV_DELIMITER
    char CSV_QUOTE -> CSV_QUOTE
    java.lang.String CSV_QUOTE_STR -> CSV_QUOTE_STR
    char[] CSV_SEARCH_CHARS -> CSV_SEARCH_CHARS
    void <init>() -> <init>
    int translate(java.lang.CharSequence,int,java.io.Writer) -> translate
    void <clinit>() -> <clinit>
org.apache.commons.lang3.StringUtils -> org.apache.commons.lang3.StringUtils:
    java.lang.String SPACE -> SPACE
    java.lang.String EMPTY -> EMPTY
    java.lang.String LF -> LF
    java.lang.String CR -> CR
    int INDEX_NOT_FOUND -> INDEX_NOT_FOUND
    int PAD_LIMIT -> PAD_LIMIT
    java.util.regex.Pattern WHITESPACE_PATTERN -> WHITESPACE_PATTERN
    void <init>() -> <init>
    boolean isEmpty(java.lang.CharSequence) -> isEmpty
    boolean isNotEmpty(java.lang.CharSequence) -> isNotEmpty
    boolean isAnyEmpty(java.lang.CharSequence[]) -> isAnyEmpty
    boolean isNoneEmpty(java.lang.CharSequence[]) -> isNoneEmpty
    boolean isBlank(java.lang.CharSequence) -> isBlank
    boolean isNotBlank(java.lang.CharSequence) -> isNotBlank
    boolean isAnyBlank(java.lang.CharSequence[]) -> isAnyBlank
    boolean isNoneBlank(java.lang.CharSequence[]) -> isNoneBlank
    java.lang.String trim(java.lang.String) -> trim
    java.lang.String trimToNull(java.lang.String) -> trimToNull
    java.lang.String trimToEmpty(java.lang.String) -> trimToEmpty
    java.lang.String strip(java.lang.String) -> strip
    java.lang.String stripToNull(java.lang.String) -> stripToNull
    java.lang.String stripToEmpty(java.lang.String) -> stripToEmpty
    java.lang.String strip(java.lang.String,java.lang.String) -> strip
    java.lang.String stripStart(java.lang.String,java.lang.String) -> stripStart
    java.lang.String stripEnd(java.lang.String,java.lang.String) -> stripEnd
    java.lang.String[] stripAll(java.lang.String[]) -> stripAll
    java.lang.String[] stripAll(java.lang.String[],java.lang.String) -> stripAll
    java.lang.String stripAccents(java.lang.String) -> stripAccents
    boolean equals(java.lang.CharSequence,java.lang.CharSequence) -> equals
    boolean equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence) -> equalsIgnoreCase
    int indexOf(java.lang.CharSequence,int) -> indexOf
    int indexOf(java.lang.CharSequence,int,int) -> indexOf
    int indexOf(java.lang.CharSequence,java.lang.CharSequence) -> indexOf
    int indexOf(java.lang.CharSequence,java.lang.CharSequence,int) -> indexOf
    int ordinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int) -> ordinalIndexOf
    int ordinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int,boolean) -> ordinalIndexOf
    int indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence) -> indexOfIgnoreCase
    int indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int) -> indexOfIgnoreCase
    int lastIndexOf(java.lang.CharSequence,int) -> lastIndexOf
    int lastIndexOf(java.lang.CharSequence,int,int) -> lastIndexOf
    int lastIndexOf(java.lang.CharSequence,java.lang.CharSequence) -> lastIndexOf
    int lastOrdinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int) -> lastOrdinalIndexOf
    int lastIndexOf(java.lang.CharSequence,java.lang.CharSequence,int) -> lastIndexOf
    int lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence) -> lastIndexOfIgnoreCase
    int lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int) -> lastIndexOfIgnoreCase
    boolean contains(java.lang.CharSequence,int) -> contains
    boolean contains(java.lang.CharSequence,java.lang.CharSequence) -> contains
    boolean containsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence) -> containsIgnoreCase
    boolean containsWhitespace(java.lang.CharSequence) -> containsWhitespace
    int indexOfAny(java.lang.CharSequence,char[]) -> indexOfAny
    int indexOfAny(java.lang.CharSequence,java.lang.String) -> indexOfAny
    boolean containsAny(java.lang.CharSequence,char[]) -> containsAny
    boolean containsAny(java.lang.CharSequence,java.lang.CharSequence) -> containsAny
    int indexOfAnyBut(java.lang.CharSequence,char[]) -> indexOfAnyBut
    int indexOfAnyBut(java.lang.CharSequence,java.lang.CharSequence) -> indexOfAnyBut
    boolean containsOnly(java.lang.CharSequence,char[]) -> containsOnly
    boolean containsOnly(java.lang.CharSequence,java.lang.String) -> containsOnly
    boolean containsNone(java.lang.CharSequence,char[]) -> containsNone
    boolean containsNone(java.lang.CharSequence,java.lang.String) -> containsNone
    int indexOfAny(java.lang.CharSequence,java.lang.CharSequence[]) -> indexOfAny
    int lastIndexOfAny(java.lang.CharSequence,java.lang.CharSequence[]) -> lastIndexOfAny
    java.lang.String substring(java.lang.String,int) -> substring
    java.lang.String substring(java.lang.String,int,int) -> substring
    java.lang.String left(java.lang.String,int) -> left
    java.lang.String right(java.lang.String,int) -> right
    java.lang.String mid(java.lang.String,int,int) -> mid
    java.lang.String substringBefore(java.lang.String,java.lang.String) -> substringBefore
    java.lang.String substringAfter(java.lang.String,java.lang.String) -> substringAfter
    java.lang.String substringBeforeLast(java.lang.String,java.lang.String) -> substringBeforeLast
    java.lang.String substringAfterLast(java.lang.String,java.lang.String) -> substringAfterLast
    java.lang.String substringBetween(java.lang.String,java.lang.String) -> substringBetween
    java.lang.String substringBetween(java.lang.String,java.lang.String,java.lang.String) -> substringBetween
    java.lang.String[] substringsBetween(java.lang.String,java.lang.String,java.lang.String) -> substringsBetween
    java.lang.String[] split(java.lang.String) -> split
    java.lang.String[] split(java.lang.String,char) -> split
    java.lang.String[] split(java.lang.String,java.lang.String) -> split
    java.lang.String[] split(java.lang.String,java.lang.String,int) -> split
    java.lang.String[] splitByWholeSeparator(java.lang.String,java.lang.String) -> splitByWholeSeparator
    java.lang.String[] splitByWholeSeparator(java.lang.String,java.lang.String,int) -> splitByWholeSeparator
    java.lang.String[] splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String) -> splitByWholeSeparatorPreserveAllTokens
    java.lang.String[] splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String,int) -> splitByWholeSeparatorPreserveAllTokens
    java.lang.String[] splitByWholeSeparatorWorker(java.lang.String,java.lang.String,int,boolean) -> splitByWholeSeparatorWorker
    java.lang.String[] splitPreserveAllTokens(java.lang.String) -> splitPreserveAllTokens
    java.lang.String[] splitPreserveAllTokens(java.lang.String,char) -> splitPreserveAllTokens
    java.lang.String[] splitWorker(java.lang.String,char,boolean) -> splitWorker
    java.lang.String[] splitPreserveAllTokens(java.lang.String,java.lang.String) -> splitPreserveAllTokens
    java.lang.String[] splitPreserveAllTokens(java.lang.String,java.lang.String,int) -> splitPreserveAllTokens
    java.lang.String[] splitWorker(java.lang.String,java.lang.String,int,boolean) -> splitWorker
    java.lang.String[] splitByCharacterType(java.lang.String) -> splitByCharacterType
    java.lang.String[] splitByCharacterTypeCamelCase(java.lang.String) -> splitByCharacterTypeCamelCase
    java.lang.String[] splitByCharacterType(java.lang.String,boolean) -> splitByCharacterType
    java.lang.String join(java.lang.Object[]) -> join
    java.lang.String join(java.lang.Object[],char) -> join
    java.lang.String join(long[],char) -> join
    java.lang.String join(int[],char) -> join
    java.lang.String join(short[],char) -> join
    java.lang.String join(byte[],char) -> join
    java.lang.String join(char[],char) -> join
    java.lang.String join(float[],char) -> join
    java.lang.String join(double[],char) -> join
    java.lang.String join(java.lang.Object[],char,int,int) -> join
    java.lang.String join(long[],char,int,int) -> join
    java.lang.String join(int[],char,int,int) -> join
    java.lang.String join(byte[],char,int,int) -> join
    java.lang.String join(short[],char,int,int) -> join
    java.lang.String join(char[],char,int,int) -> join
    java.lang.String join(double[],char,int,int) -> join
    java.lang.String join(float[],char,int,int) -> join
    java.lang.String join(java.lang.Object[],java.lang.String) -> join
    java.lang.String join(java.lang.Object[],java.lang.String,int,int) -> join
    java.lang.String join(java.util.Iterator,char) -> join
    java.lang.String join(java.util.Iterator,java.lang.String) -> join
    java.lang.String join(java.lang.Iterable,char) -> join
    java.lang.String join(java.lang.Iterable,java.lang.String) -> join
    java.lang.String deleteWhitespace(java.lang.String) -> deleteWhitespace
    java.lang.String removeStart(java.lang.String,java.lang.String) -> removeStart
    java.lang.String removeStartIgnoreCase(java.lang.String,java.lang.String) -> removeStartIgnoreCase
    java.lang.String removeEnd(java.lang.String,java.lang.String) -> removeEnd
    java.lang.String removeEndIgnoreCase(java.lang.String,java.lang.String) -> removeEndIgnoreCase
    java.lang.String remove(java.lang.String,java.lang.String) -> remove
    java.lang.String remove(java.lang.String,char) -> remove
    java.lang.String replaceOnce(java.lang.String,java.lang.String,java.lang.String) -> replaceOnce
    java.lang.String replacePattern(java.lang.String,java.lang.String,java.lang.String) -> replacePattern
    java.lang.String removePattern(java.lang.String,java.lang.String) -> removePattern
    java.lang.String replace(java.lang.String,java.lang.String,java.lang.String) -> replace
    java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,int) -> replace
    java.lang.String replaceEach(java.lang.String,java.lang.String[],java.lang.String[]) -> replaceEach
    java.lang.String replaceEachRepeatedly(java.lang.String,java.lang.String[],java.lang.String[]) -> replaceEachRepeatedly
    java.lang.String replaceEach(java.lang.String,java.lang.String[],java.lang.String[],boolean,int) -> replaceEach
    java.lang.String replaceChars(java.lang.String,char,char) -> replaceChars
    java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String) -> replaceChars
    java.lang.String overlay(java.lang.String,java.lang.String,int,int) -> overlay
    java.lang.String chomp(java.lang.String) -> chomp
    java.lang.String chomp(java.lang.String,java.lang.String) -> chomp
    java.lang.String chop(java.lang.String) -> chop
    java.lang.String repeat(java.lang.String,int) -> repeat
    java.lang.String repeat(java.lang.String,java.lang.String,int) -> repeat
    java.lang.String repeat(char,int) -> repeat
    java.lang.String rightPad(java.lang.String,int) -> rightPad
    java.lang.String rightPad(java.lang.String,int,char) -> rightPad
    java.lang.String rightPad(java.lang.String,int,java.lang.String) -> rightPad
    java.lang.String leftPad(java.lang.String,int) -> leftPad
    java.lang.String leftPad(java.lang.String,int,char) -> leftPad
    java.lang.String leftPad(java.lang.String,int,java.lang.String) -> leftPad
    int length(java.lang.CharSequence) -> length
    java.lang.String center(java.lang.String,int) -> center
    java.lang.String center(java.lang.String,int,char) -> center
    java.lang.String center(java.lang.String,int,java.lang.String) -> center
    java.lang.String upperCase(java.lang.String) -> upperCase
    java.lang.String upperCase(java.lang.String,java.util.Locale) -> upperCase
    java.lang.String lowerCase(java.lang.String) -> lowerCase
    java.lang.String lowerCase(java.lang.String,java.util.Locale) -> lowerCase
    java.lang.String capitalize(java.lang.String) -> capitalize
    java.lang.String uncapitalize(java.lang.String) -> uncapitalize
    java.lang.String swapCase(java.lang.String) -> swapCase
    int countMatches(java.lang.CharSequence,java.lang.CharSequence) -> countMatches
    boolean isAlpha(java.lang.CharSequence) -> isAlpha
    boolean isAlphaSpace(java.lang.CharSequence) -> isAlphaSpace
    boolean isAlphanumeric(java.lang.CharSequence) -> isAlphanumeric
    boolean isAlphanumericSpace(java.lang.CharSequence) -> isAlphanumericSpace
    boolean isAsciiPrintable(java.lang.CharSequence) -> isAsciiPrintable
    boolean isNumeric(java.lang.CharSequence) -> isNumeric
    boolean isNumericSpace(java.lang.CharSequence) -> isNumericSpace
    boolean isWhitespace(java.lang.CharSequence) -> isWhitespace
    boolean isAllLowerCase(java.lang.CharSequence) -> isAllLowerCase
    boolean isAllUpperCase(java.lang.CharSequence) -> isAllUpperCase
    java.lang.String defaultString(java.lang.String) -> defaultString
    java.lang.String defaultString(java.lang.String,java.lang.String) -> defaultString
    java.lang.CharSequence defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence) -> defaultIfBlank
    java.lang.CharSequence defaultIfEmpty(java.lang.CharSequence,java.lang.CharSequence) -> defaultIfEmpty
    java.lang.String reverse(java.lang.String) -> reverse
    java.lang.String reverseDelimited(java.lang.String,char) -> reverseDelimited
    java.lang.String abbreviate(java.lang.String,int) -> abbreviate
    java.lang.String abbreviate(java.lang.String,int,int) -> abbreviate
    java.lang.String abbreviateMiddle(java.lang.String,java.lang.String,int) -> abbreviateMiddle
    java.lang.String difference(java.lang.String,java.lang.String) -> difference
    int indexOfDifference(java.lang.CharSequence,java.lang.CharSequence) -> indexOfDifference
    int indexOfDifference(java.lang.CharSequence[]) -> indexOfDifference
    java.lang.String getCommonPrefix(java.lang.String[]) -> getCommonPrefix
    int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence) -> getLevenshteinDistance
    int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int) -> getLevenshteinDistance
    double getJaroWinklerDistance(java.lang.CharSequence,java.lang.CharSequence) -> getJaroWinklerDistance
    double score(java.lang.CharSequence,java.lang.CharSequence) -> score
    java.lang.String getSetOfMatchingCharacterWithin(java.lang.CharSequence,java.lang.CharSequence,int) -> getSetOfMatchingCharacterWithin
    int transpositions(java.lang.CharSequence,java.lang.CharSequence) -> transpositions
    int commonPrefixLength(java.lang.CharSequence,java.lang.CharSequence) -> commonPrefixLength
    boolean startsWith(java.lang.CharSequence,java.lang.CharSequence) -> startsWith
    boolean startsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence) -> startsWithIgnoreCase
    boolean startsWith(java.lang.CharSequence,java.lang.CharSequence,boolean) -> startsWith
    boolean startsWithAny(java.lang.CharSequence,java.lang.CharSequence[]) -> startsWithAny
    boolean endsWith(java.lang.CharSequence,java.lang.CharSequence) -> endsWith
    boolean endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence) -> endsWithIgnoreCase
    boolean endsWith(java.lang.CharSequence,java.lang.CharSequence,boolean) -> endsWith
    java.lang.String normalizeSpace(java.lang.String) -> normalizeSpace
    boolean endsWithAny(java.lang.CharSequence,java.lang.CharSequence[]) -> endsWithAny
    java.lang.String appendIfMissing(java.lang.String,java.lang.CharSequence,boolean,java.lang.CharSequence[]) -> appendIfMissing
    java.lang.String appendIfMissing(java.lang.String,java.lang.CharSequence,java.lang.CharSequence[]) -> appendIfMissing
    java.lang.String appendIfMissingIgnoreCase(java.lang.String,java.lang.CharSequence,java.lang.CharSequence[]) -> appendIfMissingIgnoreCase
    java.lang.String prependIfMissing(java.lang.String,java.lang.CharSequence,boolean,java.lang.CharSequence[]) -> prependIfMissing
    java.lang.String prependIfMissing(java.lang.String,java.lang.CharSequence,java.lang.CharSequence[]) -> prependIfMissing
    java.lang.String prependIfMissingIgnoreCase(java.lang.String,java.lang.CharSequence,java.lang.CharSequence[]) -> prependIfMissingIgnoreCase
    java.lang.String toString(byte[],java.lang.String) -> toString
    java.lang.String toEncodedString(byte[],java.nio.charset.Charset) -> toEncodedString
    void <clinit>() -> <clinit>
org.apache.commons.lang3.SystemUtils -> org.apache.commons.lang3.SystemUtils:
    java.lang.String OS_NAME_WINDOWS_PREFIX -> OS_NAME_WINDOWS_PREFIX
    java.lang.String USER_HOME_KEY -> USER_HOME_KEY
    java.lang.String USER_DIR_KEY -> USER_DIR_KEY
    java.lang.String JAVA_IO_TMPDIR_KEY -> JAVA_IO_TMPDIR_KEY
    java.lang.String JAVA_HOME_KEY -> JAVA_HOME_KEY
    java.lang.String AWT_TOOLKIT -> AWT_TOOLKIT
    java.lang.String FILE_ENCODING -> FILE_ENCODING
    java.lang.String FILE_SEPARATOR -> FILE_SEPARATOR
    java.lang.String JAVA_AWT_FONTS -> JAVA_AWT_FONTS
    java.lang.String JAVA_AWT_GRAPHICSENV -> JAVA_AWT_GRAPHICSENV
    java.lang.String JAVA_AWT_HEADLESS -> JAVA_AWT_HEADLESS
    java.lang.String JAVA_AWT_PRINTERJOB -> JAVA_AWT_PRINTERJOB
    java.lang.String JAVA_CLASS_PATH -> JAVA_CLASS_PATH
    java.lang.String JAVA_CLASS_VERSION -> JAVA_CLASS_VERSION
    java.lang.String JAVA_COMPILER -> JAVA_COMPILER
    java.lang.String JAVA_ENDORSED_DIRS -> JAVA_ENDORSED_DIRS
    java.lang.String JAVA_EXT_DIRS -> JAVA_EXT_DIRS
    java.lang.String JAVA_HOME -> JAVA_HOME
    java.lang.String JAVA_IO_TMPDIR -> JAVA_IO_TMPDIR
    java.lang.String JAVA_LIBRARY_PATH -> JAVA_LIBRARY_PATH
    java.lang.String JAVA_RUNTIME_NAME -> JAVA_RUNTIME_NAME
    java.lang.String JAVA_RUNTIME_VERSION -> JAVA_RUNTIME_VERSION
    java.lang.String JAVA_SPECIFICATION_NAME -> JAVA_SPECIFICATION_NAME
    java.lang.String JAVA_SPECIFICATION_VENDOR -> JAVA_SPECIFICATION_VENDOR
    java.lang.String JAVA_SPECIFICATION_VERSION -> JAVA_SPECIFICATION_VERSION
    org.apache.commons.lang3.JavaVersion JAVA_SPECIFICATION_VERSION_AS_ENUM -> JAVA_SPECIFICATION_VERSION_AS_ENUM
    java.lang.String JAVA_UTIL_PREFS_PREFERENCES_FACTORY -> JAVA_UTIL_PREFS_PREFERENCES_FACTORY
    java.lang.String JAVA_VENDOR -> JAVA_VENDOR
    java.lang.String JAVA_VENDOR_URL -> JAVA_VENDOR_URL
    java.lang.String JAVA_VERSION -> JAVA_VERSION
    java.lang.String JAVA_VM_INFO -> JAVA_VM_INFO
    java.lang.String JAVA_VM_NAME -> JAVA_VM_NAME
    java.lang.String JAVA_VM_SPECIFICATION_NAME -> JAVA_VM_SPECIFICATION_NAME
    java.lang.String JAVA_VM_SPECIFICATION_VENDOR -> JAVA_VM_SPECIFICATION_VENDOR
    java.lang.String JAVA_VM_SPECIFICATION_VERSION -> JAVA_VM_SPECIFICATION_VERSION
    java.lang.String JAVA_VM_VENDOR -> JAVA_VM_VENDOR
    java.lang.String JAVA_VM_VERSION -> JAVA_VM_VERSION
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    java.lang.String OS_ARCH -> OS_ARCH
    java.lang.String OS_NAME -> OS_NAME
    java.lang.String OS_VERSION -> OS_VERSION
    java.lang.String PATH_SEPARATOR -> PATH_SEPARATOR
    java.lang.String USER_COUNTRY -> USER_COUNTRY
    java.lang.String USER_DIR -> USER_DIR
    java.lang.String USER_HOME -> USER_HOME
    java.lang.String USER_LANGUAGE -> USER_LANGUAGE
    java.lang.String USER_NAME -> USER_NAME
    java.lang.String USER_TIMEZONE -> USER_TIMEZONE
    boolean IS_JAVA_1_1 -> IS_JAVA_1_1
    boolean IS_JAVA_1_2 -> IS_JAVA_1_2
    boolean IS_JAVA_1_3 -> IS_JAVA_1_3
    boolean IS_JAVA_1_4 -> IS_JAVA_1_4
    boolean IS_JAVA_1_5 -> IS_JAVA_1_5
    boolean IS_JAVA_1_6 -> IS_JAVA_1_6
    boolean IS_JAVA_1_7 -> IS_JAVA_1_7
    boolean IS_JAVA_1_8 -> IS_JAVA_1_8
    boolean IS_OS_AIX -> IS_OS_AIX
    boolean IS_OS_HP_UX -> IS_OS_HP_UX
    boolean IS_OS_400 -> IS_OS_400
    boolean IS_OS_IRIX -> IS_OS_IRIX
    boolean IS_OS_LINUX -> IS_OS_LINUX
    boolean IS_OS_MAC -> IS_OS_MAC
    boolean IS_OS_MAC_OSX -> IS_OS_MAC_OSX
    boolean IS_OS_FREE_BSD -> IS_OS_FREE_BSD
    boolean IS_OS_OPEN_BSD -> IS_OS_OPEN_BSD
    boolean IS_OS_NET_BSD -> IS_OS_NET_BSD
    boolean IS_OS_OS2 -> IS_OS_OS2
    boolean IS_OS_SOLARIS -> IS_OS_SOLARIS
    boolean IS_OS_SUN_OS -> IS_OS_SUN_OS
    boolean IS_OS_UNIX -> IS_OS_UNIX
    boolean IS_OS_WINDOWS -> IS_OS_WINDOWS
    boolean IS_OS_WINDOWS_2000 -> IS_OS_WINDOWS_2000
    boolean IS_OS_WINDOWS_2003 -> IS_OS_WINDOWS_2003
    boolean IS_OS_WINDOWS_2008 -> IS_OS_WINDOWS_2008
    boolean IS_OS_WINDOWS_95 -> IS_OS_WINDOWS_95
    boolean IS_OS_WINDOWS_98 -> IS_OS_WINDOWS_98
    boolean IS_OS_WINDOWS_ME -> IS_OS_WINDOWS_ME
    boolean IS_OS_WINDOWS_NT -> IS_OS_WINDOWS_NT
    boolean IS_OS_WINDOWS_XP -> IS_OS_WINDOWS_XP
    boolean IS_OS_WINDOWS_VISTA -> IS_OS_WINDOWS_VISTA
    boolean IS_OS_WINDOWS_7 -> IS_OS_WINDOWS_7
    boolean IS_OS_WINDOWS_8 -> IS_OS_WINDOWS_8
    java.io.File getJavaHome() -> getJavaHome
    java.io.File getJavaIoTmpDir() -> getJavaIoTmpDir
    boolean getJavaVersionMatches(java.lang.String) -> getJavaVersionMatches
    boolean getOSMatches(java.lang.String,java.lang.String) -> getOSMatches
    boolean getOSMatchesName(java.lang.String) -> getOSMatchesName
    java.lang.String getSystemProperty(java.lang.String) -> getSystemProperty
    java.io.File getUserDir() -> getUserDir
    java.io.File getUserHome() -> getUserHome
    boolean isJavaAwtHeadless() -> isJavaAwtHeadless
    boolean isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion) -> isJavaVersionAtLeast
    boolean isJavaVersionMatch(java.lang.String,java.lang.String) -> isJavaVersionMatch
    boolean isOSMatch(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> isOSMatch
    boolean isOSNameMatch(java.lang.String,java.lang.String) -> isOSNameMatch
    void <init>() -> <init>
    void <clinit>() -> <clinit>
org.apache.commons.lang3.Validate -> org.apache.commons.lang3.Validate:
    java.lang.String DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE -> DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE
    java.lang.String DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE -> DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE
    java.lang.String DEFAULT_MATCHES_PATTERN_EX -> DEFAULT_MATCHES_PATTERN_EX
    java.lang.String DEFAULT_IS_NULL_EX_MESSAGE -> DEFAULT_IS_NULL_EX_MESSAGE
    java.lang.String DEFAULT_IS_TRUE_EX_MESSAGE -> DEFAULT_IS_TRUE_EX_MESSAGE
    java.lang.String DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE -> DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE
    java.lang.String DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE -> DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE
    java.lang.String DEFAULT_NOT_BLANK_EX_MESSAGE -> DEFAULT_NOT_BLANK_EX_MESSAGE
    java.lang.String DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE -> DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE
    java.lang.String DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE -> DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE
    java.lang.String DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE -> DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE
    java.lang.String DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE -> DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE
    java.lang.String DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE -> DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE
    java.lang.String DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE -> DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE
    java.lang.String DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE -> DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE
    java.lang.String DEFAULT_VALID_STATE_EX_MESSAGE -> DEFAULT_VALID_STATE_EX_MESSAGE
    java.lang.String DEFAULT_IS_ASSIGNABLE_EX_MESSAGE -> DEFAULT_IS_ASSIGNABLE_EX_MESSAGE
    java.lang.String DEFAULT_IS_INSTANCE_OF_EX_MESSAGE -> DEFAULT_IS_INSTANCE_OF_EX_MESSAGE
    void <init>() -> <init>
    void isTrue(boolean,java.lang.String,long) -> isTrue
    void isTrue(boolean,java.lang.String,double) -> isTrue
    void isTrue(boolean,java.lang.String,java.lang.Object[]) -> isTrue
    void isTrue(boolean) -> isTrue
    java.lang.Object notNull(java.lang.Object) -> notNull
    java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[]) -> notNull
    java.lang.Object[] notEmpty(java.lang.Object[],java.lang.String,java.lang.Object[]) -> notEmpty
    java.lang.Object[] notEmpty(java.lang.Object[]) -> notEmpty
    java.util.Collection notEmpty(java.util.Collection,java.lang.String,java.lang.Object[]) -> notEmpty
    java.util.Collection notEmpty(java.util.Collection) -> notEmpty
    java.util.Map notEmpty(java.util.Map,java.lang.String,java.lang.Object[]) -> notEmpty
    java.util.Map notEmpty(java.util.Map) -> notEmpty
    java.lang.CharSequence notEmpty(java.lang.CharSequence,java.lang.String,java.lang.Object[]) -> notEmpty
    java.lang.CharSequence notEmpty(java.lang.CharSequence) -> notEmpty
    java.lang.CharSequence notBlank(java.lang.CharSequence,java.lang.String,java.lang.Object[]) -> notBlank
    java.lang.CharSequence notBlank(java.lang.CharSequence) -> notBlank
    java.lang.Object[] noNullElements(java.lang.Object[],java.lang.String,java.lang.Object[]) -> noNullElements
    java.lang.Object[] noNullElements(java.lang.Object[]) -> noNullElements
    java.lang.Iterable noNullElements(java.lang.Iterable,java.lang.String,java.lang.Object[]) -> noNullElements
    java.lang.Iterable noNullElements(java.lang.Iterable) -> noNullElements
    java.lang.Object[] validIndex(java.lang.Object[],int,java.lang.String,java.lang.Object[]) -> validIndex
    java.lang.Object[] validIndex(java.lang.Object[],int) -> validIndex
    java.util.Collection validIndex(java.util.Collection,int,java.lang.String,java.lang.Object[]) -> validIndex
    java.util.Collection validIndex(java.util.Collection,int) -> validIndex
    java.lang.CharSequence validIndex(java.lang.CharSequence,int,java.lang.String,java.lang.Object[]) -> validIndex
    java.lang.CharSequence validIndex(java.lang.CharSequence,int) -> validIndex
    void validState(boolean) -> validState
    void validState(boolean,java.lang.String,java.lang.Object[]) -> validState
    void matchesPattern(java.lang.CharSequence,java.lang.String) -> matchesPattern
    void matchesPattern(java.lang.CharSequence,java.lang.String,java.lang.String,java.lang.Object[]) -> matchesPattern
    void inclusiveBetween(java.lang.Object,java.lang.Object,java.lang.Comparable) -> inclusiveBetween
    void inclusiveBetween(java.lang.Object,java.lang.Object,java.lang.Comparable,java.lang.String,java.lang.Object[]) -> inclusiveBetween
    void inclusiveBetween(long,long,long) -> inclusiveBetween
    void inclusiveBetween(long,long,long,java.lang.String) -> inclusiveBetween
    void inclusiveBetween(double,double,double) -> inclusiveBetween
    void inclusiveBetween(double,double,double,java.lang.String) -> inclusiveBetween
    void exclusiveBetween(java.lang.Object,java.lang.Object,java.lang.Comparable) -> exclusiveBetween
    void exclusiveBetween(java.lang.Object,java.lang.Object,java.lang.Comparable,java.lang.String,java.lang.Object[]) -> exclusiveBetween
    void exclusiveBetween(long,long,long) -> exclusiveBetween
    void exclusiveBetween(long,long,long,java.lang.String) -> exclusiveBetween
    void exclusiveBetween(double,double,double) -> exclusiveBetween
    void exclusiveBetween(double,double,double,java.lang.String) -> exclusiveBetween
    void isInstanceOf(java.lang.Class,java.lang.Object) -> isInstanceOf
    void isInstanceOf(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[]) -> isInstanceOf
    void isAssignableFrom(java.lang.Class,java.lang.Class) -> isAssignableFrom
    void isAssignableFrom(java.lang.Class,java.lang.Class,java.lang.String,java.lang.Object[]) -> isAssignableFrom
org.apache.commons.lang3.builder.CompareToBuilder -> org.apache.commons.lang3.builder.CompareToBuilder:
    int comparison -> comparison
    void <init>() -> <init>
    int reflectionCompare(java.lang.Object,java.lang.Object) -> reflectionCompare
    int reflectionCompare(java.lang.Object,java.lang.Object,boolean) -> reflectionCompare
    int reflectionCompare(java.lang.Object,java.lang.Object,java.util.Collection) -> reflectionCompare
    int reflectionCompare(java.lang.Object,java.lang.Object,java.lang.String[]) -> reflectionCompare
    int reflectionCompare(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[]) -> reflectionCompare
    void reflectionAppend(java.lang.Object,java.lang.Object,java.lang.Class,org.apache.commons.lang3.builder.CompareToBuilder,boolean,java.lang.String[]) -> reflectionAppend
    org.apache.commons.lang3.builder.CompareToBuilder appendSuper(int) -> appendSuper
    org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object) -> append
    org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator) -> append
    org.apache.commons.lang3.builder.CompareToBuilder append(long,long) -> append
    org.apache.commons.lang3.builder.CompareToBuilder append(int,int) -> append
    org.apache.commons.lang3.builder.CompareToBuilder append(short,short) -> append
    org.apache.commons.lang3.builder.CompareToBuilder append(char,char) -> append
    org.apache.commons.lang3.builder.CompareToBuilder append(byte,byte) -> append
    org.apache.commons.lang3.builder.CompareToBuilder append(double,double) -> append
    org.apache.commons.lang3.builder.CompareToBuilder append(float,float) -> append
    org.apache.commons.lang3.builder.CompareToBuilder append(boolean,boolean) -> append
    org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[]) -> append
    org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[],java.util.Comparator) -> append
    org.apache.commons.lang3.builder.CompareToBuilder append(long[],long[]) -> append
    org.apache.commons.lang3.builder.CompareToBuilder append(int[],int[]) -> append
    org.apache.commons.lang3.builder.CompareToBuilder append(short[],short[]) -> append
    org.apache.commons.lang3.builder.CompareToBuilder append(char[],char[]) -> append
    org.apache.commons.lang3.builder.CompareToBuilder append(byte[],byte[]) -> append
    org.apache.commons.lang3.builder.CompareToBuilder append(double[],double[]) -> append
    org.apache.commons.lang3.builder.CompareToBuilder append(float[],float[]) -> append
    org.apache.commons.lang3.builder.CompareToBuilder append(boolean[],boolean[]) -> append
    int toComparison() -> toComparison
    java.lang.Integer build() -> build
    java.lang.Object build() -> build
org.apache.commons.lang3.builder.EqualsBuilder -> org.apache.commons.lang3.builder.EqualsBuilder:
    java.lang.ThreadLocal REGISTRY -> REGISTRY
    boolean isEquals -> isEquals
    java.util.Set getRegistry() -> getRegistry
    org.apache.commons.lang3.tuple.Pair getRegisterPair(java.lang.Object,java.lang.Object) -> getRegisterPair
    boolean isRegistered(java.lang.Object,java.lang.Object) -> isRegistered
    void register(java.lang.Object,java.lang.Object) -> register
    void unregister(java.lang.Object,java.lang.Object) -> unregister
    void <init>() -> <init>
    boolean reflectionEquals(java.lang.Object,java.lang.Object,java.util.Collection) -> reflectionEquals
    boolean reflectionEquals(java.lang.Object,java.lang.Object,java.lang.String[]) -> reflectionEquals
    boolean reflectionEquals(java.lang.Object,java.lang.Object,boolean) -> reflectionEquals
    boolean reflectionEquals(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[]) -> reflectionEquals
    void reflectionAppend(java.lang.Object,java.lang.Object,java.lang.Class,org.apache.commons.lang3.builder.EqualsBuilder,boolean,java.lang.String[]) -> reflectionAppend
    org.apache.commons.lang3.builder.EqualsBuilder appendSuper(boolean) -> appendSuper
    org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object,java.lang.Object) -> append
    org.apache.commons.lang3.builder.EqualsBuilder append(long,long) -> append
    org.apache.commons.lang3.builder.EqualsBuilder append(int,int) -> append
    org.apache.commons.lang3.builder.EqualsBuilder append(short,short) -> append
    org.apache.commons.lang3.builder.EqualsBuilder append(char,char) -> append
    org.apache.commons.lang3.builder.EqualsBuilder append(byte,byte) -> append
    org.apache.commons.lang3.builder.EqualsBuilder append(double,double) -> append
    org.apache.commons.lang3.builder.EqualsBuilder append(float,float) -> append
    org.apache.commons.lang3.builder.EqualsBuilder append(boolean,boolean) -> append
    org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object[],java.lang.Object[]) -> append
    org.apache.commons.lang3.builder.EqualsBuilder append(long[],long[]) -> append
    org.apache.commons.lang3.builder.EqualsBuilder append(int[],int[]) -> append
    org.apache.commons.lang3.builder.EqualsBuilder append(short[],short[]) -> append
    org.apache.commons.lang3.builder.EqualsBuilder append(char[],char[]) -> append
    org.apache.commons.lang3.builder.EqualsBuilder append(byte[],byte[]) -> append
    org.apache.commons.lang3.builder.EqualsBuilder append(double[],double[]) -> append
    org.apache.commons.lang3.builder.EqualsBuilder append(float[],float[]) -> append
    org.apache.commons.lang3.builder.EqualsBuilder append(boolean[],boolean[]) -> append
    boolean isEquals() -> isEquals
    java.lang.Boolean build() -> build
    void setEquals(boolean) -> setEquals
    void reset() -> reset
    java.lang.Object build() -> build
    void <clinit>() -> <clinit>
org.apache.commons.lang3.builder.HashCodeBuilder -> org.apache.commons.lang3.builder.HashCodeBuilder:
    java.lang.ThreadLocal REGISTRY -> REGISTRY
    int iConstant -> iConstant
    int iTotal -> iTotal
    java.util.Set getRegistry() -> getRegistry
    boolean isRegistered(java.lang.Object) -> isRegistered
    void reflectionAppend(java.lang.Object,java.lang.Class,org.apache.commons.lang3.builder.HashCodeBuilder,boolean,java.lang.String[]) -> reflectionAppend
    int reflectionHashCode(int,int,java.lang.Object) -> reflectionHashCode
    int reflectionHashCode(int,int,java.lang.Object,boolean) -> reflectionHashCode
    int reflectionHashCode(int,int,java.lang.Object,boolean,java.lang.Class,java.lang.String[]) -> reflectionHashCode
    int reflectionHashCode(java.lang.Object,boolean) -> reflectionHashCode
    int reflectionHashCode(java.lang.Object,java.util.Collection) -> reflectionHashCode
    int reflectionHashCode(java.lang.Object,java.lang.String[]) -> reflectionHashCode
    void register(java.lang.Object) -> register
    void unregister(java.lang.Object) -> unregister
    void <init>() -> <init>
    void <init>(int,int) -> <init>
    org.apache.commons.lang3.builder.HashCodeBuilder append(boolean) -> append
    org.apache.commons.lang3.builder.HashCodeBuilder append(boolean[]) -> append
    org.apache.commons.lang3.builder.HashCodeBuilder append(byte) -> append
    org.apache.commons.lang3.builder.HashCodeBuilder append(byte[]) -> append
    org.apache.commons.lang3.builder.HashCodeBuilder append(char) -> append
    org.apache.commons.lang3.builder.HashCodeBuilder append(char[]) -> append
    org.apache.commons.lang3.builder.HashCodeBuilder append(double) -> append
    org.apache.commons.lang3.builder.HashCodeBuilder append(double[]) -> append
    org.apache.commons.lang3.builder.HashCodeBuilder append(float) -> append
    org.apache.commons.lang3.builder.HashCodeBuilder append(float[]) -> append
    org.apache.commons.lang3.builder.HashCodeBuilder append(int) -> append
    org.apache.commons.lang3.builder.HashCodeBuilder append(int[]) -> append
    org.apache.commons.lang3.builder.HashCodeBuilder append(long) -> append
    org.apache.commons.lang3.builder.HashCodeBuilder append(long[]) -> append
    org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object) -> append
    org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object[]) -> append
    org.apache.commons.lang3.builder.HashCodeBuilder append(short) -> append
    org.apache.commons.lang3.builder.HashCodeBuilder append(short[]) -> append
    org.apache.commons.lang3.builder.HashCodeBuilder appendSuper(int) -> appendSuper
    int toHashCode() -> toHashCode
    java.lang.Integer build() -> build
    int hashCode() -> hashCode
    java.lang.Object build() -> build
    void <clinit>() -> <clinit>
org.apache.commons.lang3.builder.IDKey -> org.apache.commons.lang3.builder.IDKey:
    java.lang.Object value -> value
    int id -> id
    void <init>(java.lang.Object) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.apache.commons.lang3.builder.ReflectionToStringBuilder -> org.apache.commons.lang3.builder.ReflectionToStringBuilder:
    boolean appendStatics -> appendStatics
    boolean appendTransients -> appendTransients
    java.lang.String[] excludeFieldNames -> excludeFieldNames
    java.lang.Class upToClass -> upToClass
    java.lang.String toString(java.lang.Object) -> toString
    java.lang.String toString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle) -> toString
    java.lang.String toString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean) -> toString
    java.lang.String toString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean,boolean) -> toString
    java.lang.String toString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean,boolean,java.lang.Class) -> toString
    java.lang.String toStringExclude(java.lang.Object,java.util.Collection) -> toStringExclude
    java.lang.String[] toNoNullStringArray(java.util.Collection) -> toNoNullStringArray
    java.lang.String[] toNoNullStringArray(java.lang.Object[]) -> toNoNullStringArray
    java.lang.String toStringExclude(java.lang.Object,java.lang.String[]) -> toStringExclude
    void <init>(java.lang.Object) -> <init>
    void <init>(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle) -> <init>
    void <init>(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,java.lang.StringBuffer) -> <init>
    void <init>(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,java.lang.StringBuffer,java.lang.Class,boolean,boolean) -> <init>
    boolean accept(java.lang.reflect.Field) -> accept
    void appendFieldsIn(java.lang.Class) -> appendFieldsIn
    java.lang.String[] getExcludeFieldNames() -> getExcludeFieldNames
    java.lang.Class getUpToClass() -> getUpToClass
    java.lang.Object getValue(java.lang.reflect.Field) -> getValue
    boolean isAppendStatics() -> isAppendStatics
    boolean isAppendTransients() -> isAppendTransients
    org.apache.commons.lang3.builder.ReflectionToStringBuilder reflectionAppendArray(java.lang.Object) -> reflectionAppendArray
    void setAppendStatics(boolean) -> setAppendStatics
    void setAppendTransients(boolean) -> setAppendTransients
    org.apache.commons.lang3.builder.ReflectionToStringBuilder setExcludeFieldNames(java.lang.String[]) -> setExcludeFieldNames
    void setUpToClass(java.lang.Class) -> setUpToClass
    java.lang.String toString() -> toString
org.apache.commons.lang3.builder.ToStringBuilder -> org.apache.commons.lang3.builder.ToStringBuilder:
    org.apache.commons.lang3.builder.ToStringStyle defaultStyle -> defaultStyle
    java.lang.StringBuffer buffer -> buffer
    java.lang.Object object -> object
    org.apache.commons.lang3.builder.ToStringStyle style -> style
    org.apache.commons.lang3.builder.ToStringStyle getDefaultStyle() -> getDefaultStyle
    void setDefaultStyle(org.apache.commons.lang3.builder.ToStringStyle) -> setDefaultStyle
    java.lang.String reflectionToString(java.lang.Object) -> reflectionToString
    java.lang.String reflectionToString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle) -> reflectionToString
    java.lang.String reflectionToString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean) -> reflectionToString
    java.lang.String reflectionToString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean,java.lang.Class) -> reflectionToString
    void <init>(java.lang.Object) -> <init>
    void <init>(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle) -> <init>
    void <init>(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,java.lang.StringBuffer) -> <init>
    org.apache.commons.lang3.builder.ToStringBuilder append(boolean) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(boolean[]) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(byte) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(byte[]) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(char) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(char[]) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(double) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(double[]) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(float) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(float[]) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(int) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(int[]) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(long) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(long[]) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object[]) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(short) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(short[]) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,boolean) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,boolean[]) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,boolean[],boolean) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,byte) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,byte[]) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,byte[],boolean) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,char) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,char[]) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,char[],boolean) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,double) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,double[]) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,double[],boolean) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,float) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,float[]) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,float[],boolean) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,int) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,int[]) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,int[],boolean) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,long) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,long[]) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,long[],boolean) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object,boolean) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object[]) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object[],boolean) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,short) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,short[]) -> append
    org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,short[],boolean) -> append
    org.apache.commons.lang3.builder.ToStringBuilder appendAsObjectToString(java.lang.Object) -> appendAsObjectToString
    org.apache.commons.lang3.builder.ToStringBuilder appendSuper(java.lang.String) -> appendSuper
    org.apache.commons.lang3.builder.ToStringBuilder appendToString(java.lang.String) -> appendToString
    java.lang.Object getObject() -> getObject
    java.lang.StringBuffer getStringBuffer() -> getStringBuffer
    org.apache.commons.lang3.builder.ToStringStyle getStyle() -> getStyle
    java.lang.String toString() -> toString
    java.lang.String build() -> build
    java.lang.Object build() -> build
    void <clinit>() -> <clinit>
org.apache.commons.lang3.builder.ToStringStyle -> org.apache.commons.lang3.builder.ToStringStyle:
    long serialVersionUID -> serialVersionUID
    org.apache.commons.lang3.builder.ToStringStyle DEFAULT_STYLE -> DEFAULT_STYLE
    org.apache.commons.lang3.builder.ToStringStyle MULTI_LINE_STYLE -> MULTI_LINE_STYLE
    org.apache.commons.lang3.builder.ToStringStyle NO_FIELD_NAMES_STYLE -> NO_FIELD_NAMES_STYLE
    org.apache.commons.lang3.builder.ToStringStyle SHORT_PREFIX_STYLE -> SHORT_PREFIX_STYLE
    org.apache.commons.lang3.builder.ToStringStyle SIMPLE_STYLE -> SIMPLE_STYLE
    java.lang.ThreadLocal REGISTRY -> REGISTRY
    boolean useFieldNames -> useFieldNames
    boolean useClassName -> useClassName
    boolean useShortClassName -> useShortClassName
    boolean useIdentityHashCode -> useIdentityHashCode
    java.lang.String contentStart -> contentStart
    java.lang.String contentEnd -> contentEnd
    java.lang.String fieldNameValueSeparator -> fieldNameValueSeparator
    boolean fieldSeparatorAtStart -> fieldSeparatorAtStart
    boolean fieldSeparatorAtEnd -> fieldSeparatorAtEnd
    java.lang.String fieldSeparator -> fieldSeparator
    java.lang.String arrayStart -> arrayStart
    java.lang.String arraySeparator -> arraySeparator
    boolean arrayContentDetail -> arrayContentDetail
    java.lang.String arrayEnd -> arrayEnd
    boolean defaultFullDetail -> defaultFullDetail
    java.lang.String nullText -> nullText
    java.lang.String sizeStartText -> sizeStartText
    java.lang.String sizeEndText -> sizeEndText
    java.lang.String summaryObjectStartText -> summaryObjectStartText
    java.lang.String summaryObjectEndText -> summaryObjectEndText
    java.util.Map getRegistry() -> getRegistry
    boolean isRegistered(java.lang.Object) -> isRegistered
    void register(java.lang.Object) -> register
    void unregister(java.lang.Object) -> unregister
    void <init>() -> <init>
    void appendSuper(java.lang.StringBuffer,java.lang.String) -> appendSuper
    void appendToString(java.lang.StringBuffer,java.lang.String) -> appendToString
    void appendStart(java.lang.StringBuffer,java.lang.Object) -> appendStart
    void appendEnd(java.lang.StringBuffer,java.lang.Object) -> appendEnd
    void removeLastFieldSeparator(java.lang.StringBuffer) -> removeLastFieldSeparator
    void append(java.lang.StringBuffer,java.lang.String,java.lang.Object,java.lang.Boolean) -> append
    void appendInternal(java.lang.StringBuffer,java.lang.String,java.lang.Object,boolean) -> appendInternal
    void appendCyclicObject(java.lang.StringBuffer,java.lang.String,java.lang.Object) -> appendCyclicObject
    void appendDetail(java.lang.StringBuffer,java.lang.String,java.lang.Object) -> appendDetail
    void appendDetail(java.lang.StringBuffer,java.lang.String,java.util.Collection) -> appendDetail
    void appendDetail(java.lang.StringBuffer,java.lang.String,java.util.Map) -> appendDetail
    void appendSummary(java.lang.StringBuffer,java.lang.String,java.lang.Object) -> appendSummary
    void append(java.lang.StringBuffer,java.lang.String,long) -> append
    void appendDetail(java.lang.StringBuffer,java.lang.String,long) -> appendDetail
    void append(java.lang.StringBuffer,java.lang.String,int) -> append
    void appendDetail(java.lang.StringBuffer,java.lang.String,int) -> appendDetail
    void append(java.lang.StringBuffer,java.lang.String,short) -> append
    void appendDetail(java.lang.StringBuffer,java.lang.String,short) -> appendDetail
    void append(java.lang.StringBuffer,java.lang.String,byte) -> append
    void appendDetail(java.lang.StringBuffer,java.lang.String,byte) -> appendDetail
    void append(java.lang.StringBuffer,java.lang.String,char) -> append
    void appendDetail(java.lang.StringBuffer,java.lang.String,char) -> appendDetail
    void append(java.lang.StringBuffer,java.lang.String,double) -> append
    void appendDetail(java.lang.StringBuffer,java.lang.String,double) -> appendDetail
    void append(java.lang.StringBuffer,java.lang.String,float) -> append
    void appendDetail(java.lang.StringBuffer,java.lang.String,float) -> appendDetail
    void append(java.lang.StringBuffer,java.lang.String,boolean) -> append
    void appendDetail(java.lang.StringBuffer,java.lang.String,boolean) -> appendDetail
    void append(java.lang.StringBuffer,java.lang.String,java.lang.Object[],java.lang.Boolean) -> append
    void appendDetail(java.lang.StringBuffer,java.lang.String,java.lang.Object[]) -> appendDetail
    void reflectionAppendArrayDetail(java.lang.StringBuffer,java.lang.String,java.lang.Object) -> reflectionAppendArrayDetail
    void appendSummary(java.lang.StringBuffer,java.lang.String,java.lang.Object[]) -> appendSummary
    void append(java.lang.StringBuffer,java.lang.String,long[],java.lang.Boolean) -> append
    void appendDetail(java.lang.StringBuffer,java.lang.String,long[]) -> appendDetail
    void appendSummary(java.lang.StringBuffer,java.lang.String,long[]) -> appendSummary
    void append(java.lang.StringBuffer,java.lang.String,int[],java.lang.Boolean) -> append
    void appendDetail(java.lang.StringBuffer,java.lang.String,int[]) -> appendDetail
    void appendSummary(java.lang.StringBuffer,java.lang.String,int[]) -> appendSummary
    void append(java.lang.StringBuffer,java.lang.String,short[],java.lang.Boolean) -> append
    void appendDetail(java.lang.StringBuffer,java.lang.String,short[]) -> appendDetail
    void appendSummary(java.lang.StringBuffer,java.lang.String,short[]) -> appendSummary
    void append(java.lang.StringBuffer,java.lang.String,byte[],java.lang.Boolean) -> append
    void appendDetail(java.lang.StringBuffer,java.lang.String,byte[]) -> appendDetail
    void appendSummary(java.lang.StringBuffer,java.lang.String,byte[]) -> appendSummary
    void append(java.lang.StringBuffer,java.lang.String,char[],java.lang.Boolean) -> append
    void appendDetail(java.lang.StringBuffer,java.lang.String,char[]) -> appendDetail
    void appendSummary(java.lang.StringBuffer,java.lang.String,char[]) -> appendSummary
    void append(java.lang.StringBuffer,java.lang.String,double[],java.lang.Boolean) -> append
    void appendDetail(java.lang.StringBuffer,java.lang.String,double[]) -> appendDetail
    void appendSummary(java.lang.StringBuffer,java.lang.String,double[]) -> appendSummary
    void append(java.lang.StringBuffer,java.lang.String,float[],java.lang.Boolean) -> append
    void appendDetail(java.lang.StringBuffer,java.lang.String,float[]) -> appendDetail
    void appendSummary(java.lang.StringBuffer,java.lang.String,float[]) -> appendSummary
    void append(java.lang.StringBuffer,java.lang.String,boolean[],java.lang.Boolean) -> append
    void appendDetail(java.lang.StringBuffer,java.lang.String,boolean[]) -> appendDetail
    void appendSummary(java.lang.StringBuffer,java.lang.String,boolean[]) -> appendSummary
    void appendClassName(java.lang.StringBuffer,java.lang.Object) -> appendClassName
    void appendIdentityHashCode(java.lang.StringBuffer,java.lang.Object) -> appendIdentityHashCode
    void appendContentStart(java.lang.StringBuffer) -> appendContentStart
    void appendContentEnd(java.lang.StringBuffer) -> appendContentEnd
    void appendNullText(java.lang.StringBuffer,java.lang.String) -> appendNullText
    void appendFieldSeparator(java.lang.StringBuffer) -> appendFieldSeparator
    void appendFieldStart(java.lang.StringBuffer,java.lang.String) -> appendFieldStart
    void appendFieldEnd(java.lang.StringBuffer,java.lang.String) -> appendFieldEnd
    void appendSummarySize(java.lang.StringBuffer,java.lang.String,int) -> appendSummarySize
    boolean isFullDetail(java.lang.Boolean) -> isFullDetail
    java.lang.String getShortClassName(java.lang.Class) -> getShortClassName
    boolean isUseClassName() -> isUseClassName
    void setUseClassName(boolean) -> setUseClassName
    boolean isUseShortClassName() -> isUseShortClassName
    void setUseShortClassName(boolean) -> setUseShortClassName
    boolean isUseIdentityHashCode() -> isUseIdentityHashCode
    void setUseIdentityHashCode(boolean) -> setUseIdentityHashCode
    boolean isUseFieldNames() -> isUseFieldNames
    void setUseFieldNames(boolean) -> setUseFieldNames
    boolean isDefaultFullDetail() -> isDefaultFullDetail
    void setDefaultFullDetail(boolean) -> setDefaultFullDetail
    boolean isArrayContentDetail() -> isArrayContentDetail
    void setArrayContentDetail(boolean) -> setArrayContentDetail
    java.lang.String getArrayStart() -> getArrayStart
    void setArrayStart(java.lang.String) -> setArrayStart
    java.lang.String getArrayEnd() -> getArrayEnd
    void setArrayEnd(java.lang.String) -> setArrayEnd
    java.lang.String getArraySeparator() -> getArraySeparator
    void setArraySeparator(java.lang.String) -> setArraySeparator
    java.lang.String getContentStart() -> getContentStart
    void setContentStart(java.lang.String) -> setContentStart
    java.lang.String getContentEnd() -> getContentEnd
    void setContentEnd(java.lang.String) -> setContentEnd
    java.lang.String getFieldNameValueSeparator() -> getFieldNameValueSeparator
    void setFieldNameValueSeparator(java.lang.String) -> setFieldNameValueSeparator
    java.lang.String getFieldSeparator() -> getFieldSeparator
    void setFieldSeparator(java.lang.String) -> setFieldSeparator
    boolean isFieldSeparatorAtStart() -> isFieldSeparatorAtStart
    void setFieldSeparatorAtStart(boolean) -> setFieldSeparatorAtStart
    boolean isFieldSeparatorAtEnd() -> isFieldSeparatorAtEnd
    void setFieldSeparatorAtEnd(boolean) -> setFieldSeparatorAtEnd
    java.lang.String getNullText() -> getNullText
    void setNullText(java.lang.String) -> setNullText
    java.lang.String getSizeStartText() -> getSizeStartText
    void setSizeStartText(java.lang.String) -> setSizeStartText
    java.lang.String getSizeEndText() -> getSizeEndText
    void setSizeEndText(java.lang.String) -> setSizeEndText
    java.lang.String getSummaryObjectStartText() -> getSummaryObjectStartText
    void setSummaryObjectStartText(java.lang.String) -> setSummaryObjectStartText
    java.lang.String getSummaryObjectEndText() -> getSummaryObjectEndText
    void setSummaryObjectEndText(java.lang.String) -> setSummaryObjectEndText
    void <clinit>() -> <clinit>
org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle -> org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    java.lang.Object readResolve() -> readResolve
org.apache.commons.lang3.builder.ToStringStyle$MultiLineToStringStyle -> org.apache.commons.lang3.builder.ToStringStyle$MultiLineToStringStyle:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    java.lang.Object readResolve() -> readResolve
org.apache.commons.lang3.builder.ToStringStyle$NoFieldNameToStringStyle -> org.apache.commons.lang3.builder.ToStringStyle$NoFieldNameToStringStyle:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    java.lang.Object readResolve() -> readResolve
org.apache.commons.lang3.builder.ToStringStyle$ShortPrefixToStringStyle -> org.apache.commons.lang3.builder.ToStringStyle$ShortPrefixToStringStyle:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    java.lang.Object readResolve() -> readResolve
org.apache.commons.lang3.builder.ToStringStyle$SimpleToStringStyle -> org.apache.commons.lang3.builder.ToStringStyle$SimpleToStringStyle:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    java.lang.Object readResolve() -> readResolve
org.apache.commons.lang3.exception.CloneFailedException -> org.apache.commons.lang3.exception.CloneFailedException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Throwable) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
org.apache.commons.lang3.mutable.MutableInt -> org.apache.commons.lang3.mutable.MutableInt:
    long serialVersionUID -> serialVersionUID
    int value -> value
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(java.lang.Number) -> <init>
    void <init>(java.lang.String) -> <init>
    java.lang.Integer getValue() -> getValue
    void setValue(int) -> setValue
    void setValue(java.lang.Number) -> setValue
    void increment() -> increment
    void decrement() -> decrement
    void add(int) -> add
    void add(java.lang.Number) -> add
    void subtract(int) -> subtract
    void subtract(java.lang.Number) -> subtract
    int intValue() -> intValue
    long longValue() -> longValue
    float floatValue() -> floatValue
    double doubleValue() -> doubleValue
    java.lang.Integer toInteger() -> toInteger
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int compareTo(org.apache.commons.lang3.mutable.MutableInt) -> compareTo
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
    void setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
org.apache.commons.lang3.mutable.MutableObject -> org.apache.commons.lang3.mutable.MutableObject:
    long serialVersionUID -> serialVersionUID
    java.lang.Object value -> value
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
    java.lang.Object getValue() -> getValue
    void setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.apache.commons.lang3.text.StrBuilder -> org.apache.commons.lang3.text.StrBuilder:
    int CAPACITY -> CAPACITY
    long serialVersionUID -> serialVersionUID
    char[] buffer -> buffer
    int size -> size
    java.lang.String newLine -> newLine
    java.lang.String nullText -> nullText
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(java.lang.String) -> <init>
    java.lang.String getNewLineText() -> getNewLineText
    org.apache.commons.lang3.text.StrBuilder setNewLineText(java.lang.String) -> setNewLineText
    java.lang.String getNullText() -> getNullText
    org.apache.commons.lang3.text.StrBuilder setNullText(java.lang.String) -> setNullText
    int length() -> length
    org.apache.commons.lang3.text.StrBuilder setLength(int) -> setLength
    int capacity() -> capacity
    org.apache.commons.lang3.text.StrBuilder ensureCapacity(int) -> ensureCapacity
    org.apache.commons.lang3.text.StrBuilder minimizeCapacity() -> minimizeCapacity
    int size() -> size
    boolean isEmpty() -> isEmpty
    org.apache.commons.lang3.text.StrBuilder clear() -> clear
    char charAt(int) -> charAt
    org.apache.commons.lang3.text.StrBuilder setCharAt(int,char) -> setCharAt
    org.apache.commons.lang3.text.StrBuilder deleteCharAt(int) -> deleteCharAt
    char[] toCharArray() -> toCharArray
    char[] toCharArray(int,int) -> toCharArray
    char[] getChars(char[]) -> getChars
    void getChars(int,int,char[],int) -> getChars
    org.apache.commons.lang3.text.StrBuilder appendNewLine() -> appendNewLine
    org.apache.commons.lang3.text.StrBuilder appendNull() -> appendNull
    org.apache.commons.lang3.text.StrBuilder append(java.lang.Object) -> append
    org.apache.commons.lang3.text.StrBuilder append(java.lang.CharSequence) -> append
    org.apache.commons.lang3.text.StrBuilder append(java.lang.CharSequence,int,int) -> append
    org.apache.commons.lang3.text.StrBuilder append(java.lang.String) -> append
    org.apache.commons.lang3.text.StrBuilder append(java.lang.String,int,int) -> append
    org.apache.commons.lang3.text.StrBuilder append(java.lang.String,java.lang.Object[]) -> append
    org.apache.commons.lang3.text.StrBuilder append(java.lang.StringBuffer) -> append
    org.apache.commons.lang3.text.StrBuilder append(java.lang.StringBuffer,int,int) -> append
    org.apache.commons.lang3.text.StrBuilder append(java.lang.StringBuilder) -> append
    org.apache.commons.lang3.text.StrBuilder append(java.lang.StringBuilder,int,int) -> append
    org.apache.commons.lang3.text.StrBuilder append(org.apache.commons.lang3.text.StrBuilder) -> append
    org.apache.commons.lang3.text.StrBuilder append(org.apache.commons.lang3.text.StrBuilder,int,int) -> append
    org.apache.commons.lang3.text.StrBuilder append(char[]) -> append
    org.apache.commons.lang3.text.StrBuilder append(char[],int,int) -> append
    org.apache.commons.lang3.text.StrBuilder append(boolean) -> append
    org.apache.commons.lang3.text.StrBuilder append(char) -> append
    org.apache.commons.lang3.text.StrBuilder append(int) -> append
    org.apache.commons.lang3.text.StrBuilder append(long) -> append
    org.apache.commons.lang3.text.StrBuilder append(float) -> append
    org.apache.commons.lang3.text.StrBuilder append(double) -> append
    org.apache.commons.lang3.text.StrBuilder appendln(java.lang.Object) -> appendln
    org.apache.commons.lang3.text.StrBuilder appendln(java.lang.String) -> appendln
    org.apache.commons.lang3.text.StrBuilder appendln(java.lang.String,int,int) -> appendln
    org.apache.commons.lang3.text.StrBuilder appendln(java.lang.String,java.lang.Object[]) -> appendln
    org.apache.commons.lang3.text.StrBuilder appendln(java.lang.StringBuffer) -> appendln
    org.apache.commons.lang3.text.StrBuilder appendln(java.lang.StringBuilder) -> appendln
    org.apache.commons.lang3.text.StrBuilder appendln(java.lang.StringBuilder,int,int) -> appendln
    org.apache.commons.lang3.text.StrBuilder appendln(java.lang.StringBuffer,int,int) -> appendln
    org.apache.commons.lang3.text.StrBuilder appendln(org.apache.commons.lang3.text.StrBuilder) -> appendln
    org.apache.commons.lang3.text.StrBuilder appendln(org.apache.commons.lang3.text.StrBuilder,int,int) -> appendln
    org.apache.commons.lang3.text.StrBuilder appendln(char[]) -> appendln
    org.apache.commons.lang3.text.StrBuilder appendln(char[],int,int) -> appendln
    org.apache.commons.lang3.text.StrBuilder appendln(boolean) -> appendln
    org.apache.commons.lang3.text.StrBuilder appendln(char) -> appendln
    org.apache.commons.lang3.text.StrBuilder appendln(int) -> appendln
    org.apache.commons.lang3.text.StrBuilder appendln(long) -> appendln
    org.apache.commons.lang3.text.StrBuilder appendln(float) -> appendln
    org.apache.commons.lang3.text.StrBuilder appendln(double) -> appendln
    org.apache.commons.lang3.text.StrBuilder appendAll(java.lang.Object[]) -> appendAll
    org.apache.commons.lang3.text.StrBuilder appendAll(java.lang.Iterable) -> appendAll
    org.apache.commons.lang3.text.StrBuilder appendAll(java.util.Iterator) -> appendAll
    org.apache.commons.lang3.text.StrBuilder appendWithSeparators(java.lang.Object[],java.lang.String) -> appendWithSeparators
    org.apache.commons.lang3.text.StrBuilder appendWithSeparators(java.lang.Iterable,java.lang.String) -> appendWithSeparators
    org.apache.commons.lang3.text.StrBuilder appendWithSeparators(java.util.Iterator,java.lang.String) -> appendWithSeparators
    org.apache.commons.lang3.text.StrBuilder appendSeparator(java.lang.String) -> appendSeparator
    org.apache.commons.lang3.text.StrBuilder appendSeparator(java.lang.String,java.lang.String) -> appendSeparator
    org.apache.commons.lang3.text.StrBuilder appendSeparator(char) -> appendSeparator
    org.apache.commons.lang3.text.StrBuilder appendSeparator(char,char) -> appendSeparator
    org.apache.commons.lang3.text.StrBuilder appendSeparator(java.lang.String,int) -> appendSeparator
    org.apache.commons.lang3.text.StrBuilder appendSeparator(char,int) -> appendSeparator
    org.apache.commons.lang3.text.StrBuilder appendPadding(int,char) -> appendPadding
    org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char) -> appendFixedWidthPadLeft
    org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(int,int,char) -> appendFixedWidthPadLeft
    org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char) -> appendFixedWidthPadRight
    org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(int,int,char) -> appendFixedWidthPadRight
    org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object) -> insert
    org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.String) -> insert
    org.apache.commons.lang3.text.StrBuilder insert(int,char[]) -> insert
    org.apache.commons.lang3.text.StrBuilder insert(int,char[],int,int) -> insert
    org.apache.commons.lang3.text.StrBuilder insert(int,boolean) -> insert
    org.apache.commons.lang3.text.StrBuilder insert(int,char) -> insert
    org.apache.commons.lang3.text.StrBuilder insert(int,int) -> insert
    org.apache.commons.lang3.text.StrBuilder insert(int,long) -> insert
    org.apache.commons.lang3.text.StrBuilder insert(int,float) -> insert
    org.apache.commons.lang3.text.StrBuilder insert(int,double) -> insert
    void deleteImpl(int,int,int) -> deleteImpl
    org.apache.commons.lang3.text.StrBuilder delete(int,int) -> delete
    org.apache.commons.lang3.text.StrBuilder deleteAll(char) -> deleteAll
    org.apache.commons.lang3.text.StrBuilder deleteFirst(char) -> deleteFirst
    org.apache.commons.lang3.text.StrBuilder deleteAll(java.lang.String) -> deleteAll
    org.apache.commons.lang3.text.StrBuilder deleteFirst(java.lang.String) -> deleteFirst
    org.apache.commons.lang3.text.StrBuilder deleteAll(org.apache.commons.lang3.text.StrMatcher) -> deleteAll
    org.apache.commons.lang3.text.StrBuilder deleteFirst(org.apache.commons.lang3.text.StrMatcher) -> deleteFirst
    void replaceImpl(int,int,int,java.lang.String,int) -> replaceImpl
    org.apache.commons.lang3.text.StrBuilder replace(int,int,java.lang.String) -> replace
    org.apache.commons.lang3.text.StrBuilder replaceAll(char,char) -> replaceAll
    org.apache.commons.lang3.text.StrBuilder replaceFirst(char,char) -> replaceFirst
    org.apache.commons.lang3.text.StrBuilder replaceAll(java.lang.String,java.lang.String) -> replaceAll
    org.apache.commons.lang3.text.StrBuilder replaceFirst(java.lang.String,java.lang.String) -> replaceFirst
    org.apache.commons.lang3.text.StrBuilder replaceAll(org.apache.commons.lang3.text.StrMatcher,java.lang.String) -> replaceAll
    org.apache.commons.lang3.text.StrBuilder replaceFirst(org.apache.commons.lang3.text.StrMatcher,java.lang.String) -> replaceFirst
    org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int) -> replace
    org.apache.commons.lang3.text.StrBuilder replaceImpl(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int) -> replaceImpl
    org.apache.commons.lang3.text.StrBuilder reverse() -> reverse
    org.apache.commons.lang3.text.StrBuilder trim() -> trim
    boolean startsWith(java.lang.String) -> startsWith
    boolean endsWith(java.lang.String) -> endsWith
    java.lang.CharSequence subSequence(int,int) -> subSequence
    java.lang.String substring(int) -> substring
    java.lang.String substring(int,int) -> substring
    java.lang.String leftString(int) -> leftString
    java.lang.String rightString(int) -> rightString
    java.lang.String midString(int,int) -> midString
    boolean contains(char) -> contains
    boolean contains(java.lang.String) -> contains
    boolean contains(org.apache.commons.lang3.text.StrMatcher) -> contains
    int indexOf(char) -> indexOf
    int indexOf(char,int) -> indexOf
    int indexOf(java.lang.String) -> indexOf
    int indexOf(java.lang.String,int) -> indexOf
    int indexOf(org.apache.commons.lang3.text.StrMatcher) -> indexOf
    int indexOf(org.apache.commons.lang3.text.StrMatcher,int) -> indexOf
    int lastIndexOf(char) -> lastIndexOf
    int lastIndexOf(char,int) -> lastIndexOf
    int lastIndexOf(java.lang.String) -> lastIndexOf
    int lastIndexOf(java.lang.String,int) -> lastIndexOf
    int lastIndexOf(org.apache.commons.lang3.text.StrMatcher) -> lastIndexOf
    int lastIndexOf(org.apache.commons.lang3.text.StrMatcher,int) -> lastIndexOf
    org.apache.commons.lang3.text.StrTokenizer asTokenizer() -> asTokenizer
    java.io.Reader asReader() -> asReader
    java.io.Writer asWriter() -> asWriter
    boolean equalsIgnoreCase(org.apache.commons.lang3.text.StrBuilder) -> equalsIgnoreCase
    boolean equals(org.apache.commons.lang3.text.StrBuilder) -> equals
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.StringBuffer toStringBuffer() -> toStringBuffer
    java.lang.StringBuilder toStringBuilder() -> toStringBuilder
    java.lang.String build() -> build
    int validateRange(int,int) -> validateRange
    void validateIndex(int) -> validateIndex
    java.lang.Appendable append(char) -> append
    java.lang.Appendable append(java.lang.CharSequence,int,int) -> append
    java.lang.Appendable append(java.lang.CharSequence) -> append
    java.lang.Object build() -> build
org.apache.commons.lang3.text.StrBuilder$StrBuilderReader -> org.apache.commons.lang3.text.StrBuilder$StrBuilderReader:
    int pos -> pos
    int mark -> mark
    org.apache.commons.lang3.text.StrBuilder this$0 -> this$0
    void <init>(org.apache.commons.lang3.text.StrBuilder) -> <init>
    void close() -> close
    int read() -> read
    int read(char[],int,int) -> read
    long skip(long) -> skip
    boolean ready() -> ready
    boolean markSupported() -> markSupported
    void mark(int) -> mark
    void reset() -> reset
org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer -> org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer:
    org.apache.commons.lang3.text.StrBuilder this$0 -> this$0
    void <init>(org.apache.commons.lang3.text.StrBuilder) -> <init>
    java.util.List tokenize(char[],int,int) -> tokenize
    java.lang.String getContent() -> getContent
org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter -> org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter:
    org.apache.commons.lang3.text.StrBuilder this$0 -> this$0
    void <init>(org.apache.commons.lang3.text.StrBuilder) -> <init>
    void close() -> close
    void flush() -> flush
    void write(int) -> write
    void write(char[]) -> write
    void write(char[],int,int) -> write
    void write(java.lang.String) -> write
    void write(java.lang.String,int,int) -> write
org.apache.commons.lang3.text.StrMatcher -> org.apache.commons.lang3.text.StrMatcher:
    org.apache.commons.lang3.text.StrMatcher COMMA_MATCHER -> COMMA_MATCHER
    org.apache.commons.lang3.text.StrMatcher TAB_MATCHER -> TAB_MATCHER
    org.apache.commons.lang3.text.StrMatcher SPACE_MATCHER -> SPACE_MATCHER
    org.apache.commons.lang3.text.StrMatcher SPLIT_MATCHER -> SPLIT_MATCHER
    org.apache.commons.lang3.text.StrMatcher TRIM_MATCHER -> TRIM_MATCHER
    org.apache.commons.lang3.text.StrMatcher SINGLE_QUOTE_MATCHER -> SINGLE_QUOTE_MATCHER
    org.apache.commons.lang3.text.StrMatcher DOUBLE_QUOTE_MATCHER -> DOUBLE_QUOTE_MATCHER
    org.apache.commons.lang3.text.StrMatcher QUOTE_MATCHER -> QUOTE_MATCHER
    org.apache.commons.lang3.text.StrMatcher NONE_MATCHER -> NONE_MATCHER
    org.apache.commons.lang3.text.StrMatcher commaMatcher() -> commaMatcher
    org.apache.commons.lang3.text.StrMatcher tabMatcher() -> tabMatcher
    org.apache.commons.lang3.text.StrMatcher spaceMatcher() -> spaceMatcher
    org.apache.commons.lang3.text.StrMatcher splitMatcher() -> splitMatcher
    org.apache.commons.lang3.text.StrMatcher trimMatcher() -> trimMatcher
    org.apache.commons.lang3.text.StrMatcher singleQuoteMatcher() -> singleQuoteMatcher
    org.apache.commons.lang3.text.StrMatcher doubleQuoteMatcher() -> doubleQuoteMatcher
    org.apache.commons.lang3.text.StrMatcher quoteMatcher() -> quoteMatcher
    org.apache.commons.lang3.text.StrMatcher noneMatcher() -> noneMatcher
    org.apache.commons.lang3.text.StrMatcher charMatcher(char) -> charMatcher
    org.apache.commons.lang3.text.StrMatcher charSetMatcher(char[]) -> charSetMatcher
    org.apache.commons.lang3.text.StrMatcher charSetMatcher(java.lang.String) -> charSetMatcher
    org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String) -> stringMatcher
    void <init>() -> <init>
    int isMatch(char[],int,int,int) -> isMatch
    int isMatch(char[],int) -> isMatch
    void <clinit>() -> <clinit>
org.apache.commons.lang3.text.StrMatcher$CharMatcher -> org.apache.commons.lang3.text.StrMatcher$CharMatcher:
    char ch -> ch
    void <init>(char) -> <init>
    int isMatch(char[],int,int,int) -> isMatch
org.apache.commons.lang3.text.StrMatcher$CharSetMatcher -> org.apache.commons.lang3.text.StrMatcher$CharSetMatcher:
    char[] chars -> chars
    void <init>(char[]) -> <init>
    int isMatch(char[],int,int,int) -> isMatch
org.apache.commons.lang3.text.StrMatcher$NoMatcher -> org.apache.commons.lang3.text.StrMatcher$NoMatcher:
    void <init>() -> <init>
    int isMatch(char[],int,int,int) -> isMatch
org.apache.commons.lang3.text.StrMatcher$StringMatcher -> org.apache.commons.lang3.text.StrMatcher$StringMatcher:
    char[] chars -> chars
    void <init>(java.lang.String) -> <init>
    int isMatch(char[],int,int,int) -> isMatch
org.apache.commons.lang3.text.StrMatcher$TrimMatcher -> org.apache.commons.lang3.text.StrMatcher$TrimMatcher:
    void <init>() -> <init>
    int isMatch(char[],int,int,int) -> isMatch
org.apache.commons.lang3.text.StrTokenizer -> org.apache.commons.lang3.text.StrTokenizer:
    org.apache.commons.lang3.text.StrTokenizer CSV_TOKENIZER_PROTOTYPE -> CSV_TOKENIZER_PROTOTYPE
    org.apache.commons.lang3.text.StrTokenizer TSV_TOKENIZER_PROTOTYPE -> TSV_TOKENIZER_PROTOTYPE
    char[] chars -> chars
    java.lang.String[] tokens -> tokens
    int tokenPos -> tokenPos
    org.apache.commons.lang3.text.StrMatcher delimMatcher -> delimMatcher
    org.apache.commons.lang3.text.StrMatcher quoteMatcher -> quoteMatcher
    org.apache.commons.lang3.text.StrMatcher ignoredMatcher -> ignoredMatcher
    org.apache.commons.lang3.text.StrMatcher trimmerMatcher -> trimmerMatcher
    boolean emptyAsNull -> emptyAsNull
    boolean ignoreEmptyTokens -> ignoreEmptyTokens
    org.apache.commons.lang3.text.StrTokenizer getCSVClone() -> getCSVClone
    org.apache.commons.lang3.text.StrTokenizer getCSVInstance() -> getCSVInstance
    org.apache.commons.lang3.text.StrTokenizer getCSVInstance(java.lang.String) -> getCSVInstance
    org.apache.commons.lang3.text.StrTokenizer getCSVInstance(char[]) -> getCSVInstance
    org.apache.commons.lang3.text.StrTokenizer getTSVClone() -> getTSVClone
    org.apache.commons.lang3.text.StrTokenizer getTSVInstance() -> getTSVInstance
    org.apache.commons.lang3.text.StrTokenizer getTSVInstance(java.lang.String) -> getTSVInstance
    org.apache.commons.lang3.text.StrTokenizer getTSVInstance(char[]) -> getTSVInstance
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,char) -> <init>
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,org.apache.commons.lang3.text.StrMatcher) -> <init>
    void <init>(java.lang.String,char,char) -> <init>
    void <init>(java.lang.String,org.apache.commons.lang3.text.StrMatcher,org.apache.commons.lang3.text.StrMatcher) -> <init>
    void <init>(char[]) -> <init>
    void <init>(char[],char) -> <init>
    void <init>(char[],java.lang.String) -> <init>
    void <init>(char[],org.apache.commons.lang3.text.StrMatcher) -> <init>
    void <init>(char[],char,char) -> <init>
    void <init>(char[],org.apache.commons.lang3.text.StrMatcher,org.apache.commons.lang3.text.StrMatcher) -> <init>
    int size() -> size
    java.lang.String nextToken() -> nextToken
    java.lang.String previousToken() -> previousToken
    java.lang.String[] getTokenArray() -> getTokenArray
    java.util.List getTokenList() -> getTokenList
    org.apache.commons.lang3.text.StrTokenizer reset() -> reset
    org.apache.commons.lang3.text.StrTokenizer reset(java.lang.String) -> reset
    org.apache.commons.lang3.text.StrTokenizer reset(char[]) -> reset
    boolean hasNext() -> hasNext
    java.lang.String next() -> next
    int nextIndex() -> nextIndex
    boolean hasPrevious() -> hasPrevious
    java.lang.String previous() -> previous
    int previousIndex() -> previousIndex
    void remove() -> remove
    void set(java.lang.String) -> set
    void add(java.lang.String) -> add
    void checkTokenized() -> checkTokenized
    java.util.List tokenize(char[],int,int) -> tokenize
    void addToken(java.util.List,java.lang.String) -> addToken
    int readNextToken(char[],int,int,org.apache.commons.lang3.text.StrBuilder,java.util.List) -> readNextToken
    int readWithQuotes(char[],int,int,org.apache.commons.lang3.text.StrBuilder,java.util.List,int,int) -> readWithQuotes
    boolean isQuote(char[],int,int,int,int) -> isQuote
    org.apache.commons.lang3.text.StrMatcher getDelimiterMatcher() -> getDelimiterMatcher
    org.apache.commons.lang3.text.StrTokenizer setDelimiterMatcher(org.apache.commons.lang3.text.StrMatcher) -> setDelimiterMatcher
    org.apache.commons.lang3.text.StrTokenizer setDelimiterChar(char) -> setDelimiterChar
    org.apache.commons.lang3.text.StrTokenizer setDelimiterString(java.lang.String) -> setDelimiterString
    org.apache.commons.lang3.text.StrMatcher getQuoteMatcher() -> getQuoteMatcher
    org.apache.commons.lang3.text.StrTokenizer setQuoteMatcher(org.apache.commons.lang3.text.StrMatcher) -> setQuoteMatcher
    org.apache.commons.lang3.text.StrTokenizer setQuoteChar(char) -> setQuoteChar
    org.apache.commons.lang3.text.StrMatcher getIgnoredMatcher() -> getIgnoredMatcher
    org.apache.commons.lang3.text.StrTokenizer setIgnoredMatcher(org.apache.commons.lang3.text.StrMatcher) -> setIgnoredMatcher
    org.apache.commons.lang3.text.StrTokenizer setIgnoredChar(char) -> setIgnoredChar
    org.apache.commons.lang3.text.StrMatcher getTrimmerMatcher() -> getTrimmerMatcher
    org.apache.commons.lang3.text.StrTokenizer setTrimmerMatcher(org.apache.commons.lang3.text.StrMatcher) -> setTrimmerMatcher
    boolean isEmptyTokenAsNull() -> isEmptyTokenAsNull
    org.apache.commons.lang3.text.StrTokenizer setEmptyTokenAsNull(boolean) -> setEmptyTokenAsNull
    boolean isIgnoreEmptyTokens() -> isIgnoreEmptyTokens
    org.apache.commons.lang3.text.StrTokenizer setIgnoreEmptyTokens(boolean) -> setIgnoreEmptyTokens
    java.lang.String getContent() -> getContent
    java.lang.Object clone() -> clone
    java.lang.Object cloneReset() -> cloneReset
    java.lang.String toString() -> toString
    void add(java.lang.Object) -> add
    void set(java.lang.Object) -> set
    java.lang.Object previous() -> previous
    java.lang.Object next() -> next
    void <clinit>() -> <clinit>
org.apache.commons.lang3.text.translate.AggregateTranslator -> org.apache.commons.lang3.text.translate.AggregateTranslator:
    org.apache.commons.lang3.text.translate.CharSequenceTranslator[] translators -> translators
    void <init>(org.apache.commons.lang3.text.translate.CharSequenceTranslator[]) -> <init>
    int translate(java.lang.CharSequence,int,java.io.Writer) -> translate
org.apache.commons.lang3.text.translate.CharSequenceTranslator -> org.apache.commons.lang3.text.translate.CharSequenceTranslator:
    void <init>() -> <init>
    int translate(java.lang.CharSequence,int,java.io.Writer) -> translate
    java.lang.String translate(java.lang.CharSequence) -> translate
    void translate(java.lang.CharSequence,java.io.Writer) -> translate
    org.apache.commons.lang3.text.translate.CharSequenceTranslator with(org.apache.commons.lang3.text.translate.CharSequenceTranslator[]) -> with
    java.lang.String hex(int) -> hex
org.apache.commons.lang3.text.translate.CodePointTranslator -> org.apache.commons.lang3.text.translate.CodePointTranslator:
    void <init>() -> <init>
    int translate(java.lang.CharSequence,int,java.io.Writer) -> translate
    boolean translate(int,java.io.Writer) -> translate
org.apache.commons.lang3.text.translate.EntityArrays -> org.apache.commons.lang3.text.translate.EntityArrays:
    java.lang.String[][] ISO8859_1_ESCAPE -> ISO8859_1_ESCAPE
    java.lang.String[][] ISO8859_1_UNESCAPE -> ISO8859_1_UNESCAPE
    java.lang.String[][] HTML40_EXTENDED_ESCAPE -> HTML40_EXTENDED_ESCAPE
    java.lang.String[][] HTML40_EXTENDED_UNESCAPE -> HTML40_EXTENDED_UNESCAPE
    java.lang.String[][] BASIC_ESCAPE -> BASIC_ESCAPE
    java.lang.String[][] BASIC_UNESCAPE -> BASIC_UNESCAPE
    java.lang.String[][] APOS_ESCAPE -> APOS_ESCAPE
    java.lang.String[][] APOS_UNESCAPE -> APOS_UNESCAPE
    java.lang.String[][] JAVA_CTRL_CHARS_ESCAPE -> JAVA_CTRL_CHARS_ESCAPE
    java.lang.String[][] JAVA_CTRL_CHARS_UNESCAPE -> JAVA_CTRL_CHARS_UNESCAPE
    void <init>() -> <init>
    java.lang.String[][] ISO8859_1_ESCAPE() -> ISO8859_1_ESCAPE
    java.lang.String[][] ISO8859_1_UNESCAPE() -> ISO8859_1_UNESCAPE
    java.lang.String[][] HTML40_EXTENDED_ESCAPE() -> HTML40_EXTENDED_ESCAPE
    java.lang.String[][] HTML40_EXTENDED_UNESCAPE() -> HTML40_EXTENDED_UNESCAPE
    java.lang.String[][] BASIC_ESCAPE() -> BASIC_ESCAPE
    java.lang.String[][] BASIC_UNESCAPE() -> BASIC_UNESCAPE
    java.lang.String[][] APOS_ESCAPE() -> APOS_ESCAPE
    java.lang.String[][] APOS_UNESCAPE() -> APOS_UNESCAPE
    java.lang.String[][] JAVA_CTRL_CHARS_ESCAPE() -> JAVA_CTRL_CHARS_ESCAPE
    java.lang.String[][] JAVA_CTRL_CHARS_UNESCAPE() -> JAVA_CTRL_CHARS_UNESCAPE
    java.lang.String[][] invert(java.lang.String[][]) -> invert
    void <clinit>() -> <clinit>
org.apache.commons.lang3.text.translate.JavaUnicodeEscaper -> org.apache.commons.lang3.text.translate.JavaUnicodeEscaper:
    org.apache.commons.lang3.text.translate.JavaUnicodeEscaper above(int) -> above
    org.apache.commons.lang3.text.translate.JavaUnicodeEscaper below(int) -> below
    org.apache.commons.lang3.text.translate.JavaUnicodeEscaper between(int,int) -> between
    org.apache.commons.lang3.text.translate.JavaUnicodeEscaper outsideOf(int,int) -> outsideOf
    void <init>(int,int,boolean) -> <init>
    java.lang.String toUtf16Escape(int) -> toUtf16Escape
org.apache.commons.lang3.text.translate.LookupTranslator -> org.apache.commons.lang3.text.translate.LookupTranslator:
    java.util.HashMap lookupMap -> lookupMap
    int shortest -> shortest
    int longest -> longest
    void <init>(java.lang.CharSequence[][]) -> <init>
    int translate(java.lang.CharSequence,int,java.io.Writer) -> translate
org.apache.commons.lang3.text.translate.NumericEntityEscaper -> org.apache.commons.lang3.text.translate.NumericEntityEscaper:
    int below -> below
    int above -> above
    boolean between -> between
    void <init>(int,int,boolean) -> <init>
    void <init>() -> <init>
    org.apache.commons.lang3.text.translate.NumericEntityEscaper below(int) -> below
    org.apache.commons.lang3.text.translate.NumericEntityEscaper above(int) -> above
    org.apache.commons.lang3.text.translate.NumericEntityEscaper between(int,int) -> between
    org.apache.commons.lang3.text.translate.NumericEntityEscaper outsideOf(int,int) -> outsideOf
    boolean translate(int,java.io.Writer) -> translate
org.apache.commons.lang3.text.translate.NumericEntityUnescaper -> org.apache.commons.lang3.text.translate.NumericEntityUnescaper:
    java.util.EnumSet options -> options
    void <init>(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION[]) -> <init>
    boolean isSet(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION) -> isSet
    int translate(java.lang.CharSequence,int,java.io.Writer) -> translate
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION -> org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION:
    org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION semiColonRequired -> semiColonRequired
    org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION semiColonOptional -> semiColonOptional
    org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION errorIfNoSemiColon -> errorIfNoSemiColon
    org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION[] $VALUES -> $VALUES
    org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION[] values() -> values
    org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.apache.commons.lang3.text.translate.OctalUnescaper -> org.apache.commons.lang3.text.translate.OctalUnescaper:
    void <init>() -> <init>
    int translate(java.lang.CharSequence,int,java.io.Writer) -> translate
    boolean isOctalDigit(char) -> isOctalDigit
    boolean isZeroToThree(char) -> isZeroToThree
org.apache.commons.lang3.text.translate.UnicodeEscaper -> org.apache.commons.lang3.text.translate.UnicodeEscaper:
    int below -> below
    int above -> above
    boolean between -> between
    void <init>() -> <init>
    void <init>(int,int,boolean) -> <init>
    org.apache.commons.lang3.text.translate.UnicodeEscaper below(int) -> below
    org.apache.commons.lang3.text.translate.UnicodeEscaper above(int) -> above
    org.apache.commons.lang3.text.translate.UnicodeEscaper outsideOf(int,int) -> outsideOf
    org.apache.commons.lang3.text.translate.UnicodeEscaper between(int,int) -> between
    boolean translate(int,java.io.Writer) -> translate
    java.lang.String toUtf16Escape(int) -> toUtf16Escape
org.apache.commons.lang3.text.translate.UnicodeUnescaper -> org.apache.commons.lang3.text.translate.UnicodeUnescaper:
    void <init>() -> <init>
    int translate(java.lang.CharSequence,int,java.io.Writer) -> translate
org.apache.commons.lang3.text.translate.UnicodeUnpairedSurrogateRemover -> org.apache.commons.lang3.text.translate.UnicodeUnpairedSurrogateRemover:
    void <init>() -> <init>
    boolean translate(int,java.io.Writer) -> translate
org.apache.commons.lang3.tuple.ImmutablePair -> org.apache.commons.lang3.tuple.ImmutablePair:
    long serialVersionUID -> serialVersionUID
    java.lang.Object left -> left
    java.lang.Object right -> right
    org.apache.commons.lang3.tuple.ImmutablePair of(java.lang.Object,java.lang.Object) -> of
    void <init>(java.lang.Object,java.lang.Object) -> <init>
    java.lang.Object getLeft() -> getLeft
    java.lang.Object getRight() -> getRight
    java.lang.Object setValue(java.lang.Object) -> setValue
org.apache.commons.lang3.tuple.Pair -> org.apache.commons.lang3.tuple.Pair:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    org.apache.commons.lang3.tuple.Pair of(java.lang.Object,java.lang.Object) -> of
    java.lang.Object getLeft() -> getLeft
    java.lang.Object getRight() -> getRight
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    int compareTo(org.apache.commons.lang3.tuple.Pair) -> compareTo
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.String toString(java.lang.String) -> toString
    int compareTo(java.lang.Object) -> compareTo
